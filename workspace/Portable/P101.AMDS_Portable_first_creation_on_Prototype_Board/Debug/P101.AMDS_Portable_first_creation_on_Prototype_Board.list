
P101.AMDS_Portable_first_creation_on_Prototype_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b038  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037c4  0801b1e8  0801b1e8  0001c1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e9ac  0801e9ac  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e9ac  0801e9ac  0001f9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e9b4  0801e9b4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e9b4  0801e9b4  0001f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e9b8  0801e9b8  0001f9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0801e9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00008a98  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008c90  20008c90  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003125f  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008985  00000000  00000000  00051487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002548  00000000  00000000  00059e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d6e  00000000  00000000  0005c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036bb0  00000000  00000000  0005e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000404a8  00000000  00000000  00094c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb3fb  00000000  00000000  000d511e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d0519  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ab9c  00000000  00000000  001d055c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001db0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b1d0 	.word	0x0801b1d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0801b1d0 	.word	0x0801b1d0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB4   ------> SPI1_MISO
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	@ 0x38
 8001008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	4b9a      	ldr	r3, [pc, #616]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a99      	ldr	r2, [pc, #612]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b97      	ldr	r3, [pc, #604]	@ (8001288 <MX_GPIO_Init+0x284>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	4b93      	ldr	r3, [pc, #588]	@ (8001288 <MX_GPIO_Init+0x284>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a92      	ldr	r2, [pc, #584]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b90      	ldr	r3, [pc, #576]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	4b8c      	ldr	r3, [pc, #560]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a8b      	ldr	r2, [pc, #556]	@ (8001288 <MX_GPIO_Init+0x284>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b89      	ldr	r3, [pc, #548]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	4b85      	ldr	r3, [pc, #532]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a84      	ldr	r2, [pc, #528]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b82      	ldr	r3, [pc, #520]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b7e      	ldr	r3, [pc, #504]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a7d      	ldr	r2, [pc, #500]	@ (8001288 <MX_GPIO_Init+0x284>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b7b      	ldr	r3, [pc, #492]	@ (8001288 <MX_GPIO_Init+0x284>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b77      	ldr	r3, [pc, #476]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a76      	ldr	r2, [pc, #472]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b74      	ldr	r3, [pc, #464]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b70      	ldr	r3, [pc, #448]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a68      	ldr	r2, [pc, #416]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b66      	ldr	r3, [pc, #408]	@ (8001288 <MX_GPIO_Init+0x284>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FAN_MUX_S2_Pin|FAN_MUX_S3_Pin|FAN_MUX_S0_Pin|FAN_MUX_S1_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	4863      	ldr	r0, [pc, #396]	@ (800128c <MX_GPIO_Init+0x288>)
 8001100:	f003 fa2e 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_TEMP_R_Pin|LED_TEMP_G_Pin|LED_FAN1_R_Pin|LED_FAN1_G_Pin
 8001104:	2201      	movs	r2, #1
 8001106:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 800110a:	4861      	ldr	r0, [pc, #388]	@ (8001290 <MX_GPIO_Init+0x28c>)
 800110c:	f003 fa28 	bl	8004560 <HAL_GPIO_WritePin>
                          |LED_FAN2_R_Pin|LED_FAN2_G_Pin|LED_PSU_R_Pin|LED_PSU_G_Pin
                          |LED_DP1_G_Pin|LED_DP2_G_Pin|LED_DP3_G_Pin|LED_CHG_R_Pin
                          |LED_CHG_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZ_Pin|SEG_LOAD_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f248 0108 	movw	r1, #32776	@ 0x8008
 8001116:	485f      	ldr	r0, [pc, #380]	@ (8001294 <MX_GPIO_Init+0x290>)
 8001118:	f003 fa22 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_GRN_Pin|LD3_RED_Pin|TEMP_I2C1_nRESET_Pin|LD2_BLU_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f244 01c1 	movw	r1, #16577	@ 0x40c1
 8001122:	485d      	ldr	r0, [pc, #372]	@ (8001298 <MX_GPIO_Init+0x294>)
 8001124:	f003 fa1c 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUN_LED_GPIO_Port, RUN_LED_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800112e:	4858      	ldr	r0, [pc, #352]	@ (8001290 <MX_GPIO_Init+0x28c>)
 8001130:	f003 fa16 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FAN_MUX_S2_Pin|FAN_MUX_S3_Pin|FAN_MUX_S0_Pin|FAN_MUX_S1_Pin;
 8001134:	230f      	movs	r3, #15
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4850      	ldr	r0, [pc, #320]	@ (800128c <MX_GPIO_Init+0x288>)
 800114c:	f003 f844 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin|TEST_BTN_Pin;
 8001150:	f242 0301 	movw	r3, #8193	@ 0x2001
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001156:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	484d      	ldr	r0, [pc, #308]	@ (800129c <MX_GPIO_Init+0x298>)
 8001168:	f003 f836 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = LED_TEMP_R_Pin|LED_TEMP_G_Pin|LED_FAN1_R_Pin|LED_FAN1_G_Pin
 800116c:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_FAN2_R_Pin|LED_FAN2_G_Pin|LED_PSU_R_Pin|LED_PSU_G_Pin
                          |LED_DP1_G_Pin|LED_DP2_G_Pin|LED_DP3_G_Pin|LED_CHG_R_Pin
                          |LED_CHG_G_Pin|RUN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4842      	ldr	r0, [pc, #264]	@ (8001290 <MX_GPIO_Init+0x28c>)
 8001186:	f003 f827 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUZ_Pin|SEG_LOAD_Pin;
 800118a:	f248 0308 	movw	r3, #32776	@ 0x8008
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	483c      	ldr	r0, [pc, #240]	@ (8001294 <MX_GPIO_Init+0x290>)
 80011a4:	f003 f818 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_GRN_Pin|LD3_RED_Pin|TEMP_I2C1_nRESET_Pin|LD2_BLU_Pin;
 80011a8:	f244 03c1 	movw	r3, #16577	@ 0x40c1
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4835      	ldr	r0, [pc, #212]	@ (8001298 <MX_GPIO_Init+0x294>)
 80011c2:	f003 f809 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB2_BOOT1_Pin;
 80011c6:	2304      	movs	r3, #4
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PB2_BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	482f      	ldr	r0, [pc, #188]	@ (8001298 <MX_GPIO_Init+0x294>)
 80011da:	f002 fffd 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = INPUT_DP_LED1_Pin|INPUT_DP_LED2_Pin|INPUT_DP_LED3_Pin;
 80011de:	2370      	movs	r3, #112	@ 0x70
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	482b      	ldr	r0, [pc, #172]	@ (80012a0 <MX_GPIO_Init+0x29c>)
 80011f2:	f002 fff1 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = INPUT_PSU1_Pin|INPUT_PSU2_Pin|INPUT_CHG_Pin;
 80011f6:	2323      	movs	r3, #35	@ 0x23
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fe:	2301      	movs	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4826      	ldr	r0, [pc, #152]	@ (80012a4 <MX_GPIO_Init+0x2a0>)
 800120a:	f002 ffe5 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = INPUT_DP1_Pin|INPUT_DP2_Pin|INPUT_DP3_Pin;
 800120e:	231c      	movs	r3, #28
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001216:	2302      	movs	r3, #2
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	4820      	ldr	r0, [pc, #128]	@ (80012a4 <MX_GPIO_Init+0x2a0>)
 8001222:	f002 ffd9 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_CHG_ERR_Pin;
 8001226:	2340      	movs	r3, #64	@ 0x40
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INPUT_CHG_ERR_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	481a      	ldr	r0, [pc, #104]	@ (80012a4 <MX_GPIO_Init+0x2a0>)
 800123a:	f002 ffcd 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_SPI1_MISO_Pin;
 800123e:	2310      	movs	r3, #16
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124e:	2305      	movs	r3, #5
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SEG_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <MX_GPIO_Init+0x294>)
 800125a:	f002 ffbd 	bl	80041d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2103      	movs	r1, #3
 8001262:	2006      	movs	r0, #6
 8001264:	f001 fba7 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001268:	2006      	movs	r0, #6
 800126a:	f001 fbc0 	bl	80029ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2028      	movs	r0, #40	@ 0x28
 8001274:	f001 fb9f 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001278:	2028      	movs	r0, #40	@ 0x28
 800127a:	f001 fbb8 	bl	80029ee <HAL_NVIC_EnableIRQ>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40020c00 	.word	0x40020c00

080012a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <MX_I2C1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_I2C1_Init+0x74>)
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <MX_I2C1_Init+0x7c>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_I2C1_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_I2C1_Init+0x74>)
 80012c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <MX_I2C1_Init+0x74>)
 80012e6:	f003 f987 	bl	80045f8 <HAL_I2C_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f0:	f000 fa80 	bl	80017f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4809      	ldr	r0, [pc, #36]	@ (800131c <MX_I2C1_Init+0x74>)
 80012f8:	f004 fc92 	bl	8005c20 <HAL_I2CEx_ConfigAnalogFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001302:	f000 fa77 	bl	80017f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001306:	2100      	movs	r1, #0
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_I2C1_Init+0x74>)
 800130a:	f004 fcc5 	bl	8005c98 <HAL_I2CEx_ConfigDigitalFilter>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001314:	f000 fa6e 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000214 	.word	0x20000214
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_I2C3_Init+0x74>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <MX_I2C3_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_I2C3_Init+0x74>)
 8001334:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <MX_I2C3_Init+0x7c>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_I2C3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_I2C3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_I2C3_Init+0x74>)
 8001346:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800134a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_I2C3_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2C3_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_I2C3_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_I2C3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <MX_I2C3_Init+0x74>)
 8001366:	f003 f947 	bl	80045f8 <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001370:	f000 fa40 	bl	80017f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4809      	ldr	r0, [pc, #36]	@ (800139c <MX_I2C3_Init+0x74>)
 8001378:	f004 fc52 	bl	8005c20 <HAL_I2CEx_ConfigAnalogFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001382:	f000 fa37 	bl	80017f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_I2C3_Init+0x74>)
 800138a:	f004 fc85 	bl	8005c98 <HAL_I2CEx_ConfigDigitalFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001394:	f000 fa2e 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000268 	.word	0x20000268
 80013a0:	40005c00 	.word	0x40005c00
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	@ 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a42      	ldr	r2, [pc, #264]	@ (80014d0 <HAL_I2C_MspInit+0x128>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12d      	bne.n	8001426 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a40      	ldr	r2, [pc, #256]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b3e      	ldr	r3, [pc, #248]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 80013e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ec:	2312      	movs	r3, #18
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f8:	2304      	movs	r3, #4
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4835      	ldr	r0, [pc, #212]	@ (80014d8 <HAL_I2C_MspInit+0x130>)
 8001404:	f002 fee8 	bl	80041d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	4a30      	ldr	r2, [pc, #192]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001416:	6413      	str	r3, [r2, #64]	@ 0x40
 8001418:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001424:	e050      	b.n	80014c8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a2c      	ldr	r2, [pc, #176]	@ (80014dc <HAL_I2C_MspInit+0x134>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d14b      	bne.n	80014c8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	4a26      	ldr	r2, [pc, #152]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6313      	str	r3, [r2, #48]	@ 0x30
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BAT_I2C3_SDA_Pin;
 8001468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147a:	2304      	movs	r3, #4
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BAT_I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <HAL_I2C_MspInit+0x138>)
 8001486:	f002 fea7 	bl	80041d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BAT_I2C3_SCL_Pin;
 800148a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800149c:	2304      	movs	r3, #4
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BAT_I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	480f      	ldr	r0, [pc, #60]	@ (80014e4 <HAL_I2C_MspInit+0x13c>)
 80014a8:	f002 fe96 	bl	80041d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 80014b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_I2C_MspInit+0x12c>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
}
 80014c8:	bf00      	nop
 80014ca:	3730      	adds	r7, #48	@ 0x30
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40005c00 	.word	0x40005c00
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020000 	.word	0x40020000

080014e8 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (const uint8_t *)p, len, 10);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	230a      	movs	r3, #10
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <_write+0x24>)
 80014fe:	f006 ff27 	bl	8008350 <HAL_UART_Transmit>
	return len;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000488 	.word	0x20000488

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f001 f8d9 	bl	80026cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f87b 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fd71 	bl	8001004 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001522:	f000 fecf 	bl	80022c4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001526:	f7ff febf 	bl	80012a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800152a:	f000 fb43 	bl	8001bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800152e:	f000 fbdd 	bl	8001cec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001532:	f000 fc45 	bl	8001dc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001536:	f000 fcb3 	bl	8001ea0 <MX_TIM4_Init>
  MX_LWIP_Init();
 800153a:	f007 ff0f 	bl	800935c <MX_LWIP_Init>
  MX_TIM6_Init();
 800153e:	f000 fd19 	bl	8001f74 <MX_TIM6_Init>
  MX_I2C3_Init();
 8001542:	f7ff fef1 	bl	8001328 <MX_I2C3_Init>
  MX_SPI3_Init();
 8001546:	f000 f95b 	bl	8001800 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uTimer_Init();
 800154a:	f015 f991 	bl	8016870 <uTimer_Init>
  LED_Init();
 800154e:	f014 fe65 	bl	801621c <LED_Init>
  MAX7219_Init();
 8001552:	f009 f9a3 	bl	800a89c <MAX7219_Init>
  Buzzer_Init();
 8001556:	f008 fd1d 	bl	8009f94 <Buzzer_Init>

  DBG_Uart_Init();
 800155a:	f014 fd63 	bl	8016024 <DBG_Uart_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer.buffer[rxBuffer.head], 1);
 800155e:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <main+0xe4>)
 8001560:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <main+0xe4>)
 800156a:	4413      	add	r3, r2
 800156c:	2201      	movs	r2, #1
 800156e:	4619      	mov	r1, r3
 8001570:	4821      	ldr	r0, [pc, #132]	@ (80015f8 <main+0xe8>)
 8001572:	f006 ff78 	bl	8008466 <HAL_UART_Receive_IT>

  FAN_Init();
 8001576:	f008 fd2b 	bl	8009fd0 <FAN_Init>
  HMTP_Init();
 800157a:	f009 f82d 	bl	800a5d8 <HMTP_Init>
  UDP_Protocol_Init();
 800157e:	f015 f887 	bl	8016690 <UDP_Protocol_Init>

  configure_mac_filter();
 8001582:	f009 f9f3 	bl	800a96c <configure_mac_filter>
  udpServer_init();
 8001586:	f009 fa07 	bl	800a998 <udpServer_init>
  Process_Init();
 800158a:	f014 ffe5 	bl	8016558 <Process_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 800158e:	481b      	ldr	r0, [pc, #108]	@ (80015fc <main+0xec>)
 8001590:	f005 fba2 	bl	8006cd8 <HAL_TIM_Base_Start_IT>

 printf("\nP101.AMDS_Portable_first_creation_on_Prototype_Board\n");
 8001594:	481a      	ldr	r0, [pc, #104]	@ (8001600 <main+0xf0>)
 8001596:	f016 fed9 	bl	801834c <puts>

 //Send_Portable_Status()
 setbuf(stdout,NULL);
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <main+0xf4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f016 feda 	bl	801835c <setbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


 uint8_t toggle = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	71fb      	strb	r3, [r7, #7]
//	  Buzzer_On();
//	  HAL_Delay(1000);
//	  Buzzer_Off();
//	  HAL_Delay(1000);

    ethernetif_input(&gnetif);
 80015ac:	4816      	ldr	r0, [pc, #88]	@ (8001608 <main+0xf8>)
 80015ae:	f008 f94b 	bl	8009848 <ethernetif_input>
    sys_check_timeouts();
 80015b2:	f010 fd3b 	bl	801202c <sys_check_timeouts>

    Process_Portable_Status();
 80015b6:	f014 ffef 	bl	8016598 <Process_Portable_Status>

    if(key_pressed == 1)
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <main+0xfc>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d1f4      	bne.n	80015ac <main+0x9c>
    {
      toggle = !toggle;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	71fb      	strb	r3, [r7, #7]

        if(toggle==1) {
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <main+0xd2>
        	status.Charger  = 1;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <main+0x100>)
 80015d8:	2201      	movs	r2, #1
 80015da:	761a      	strb	r2, [r3, #24]
        	Buzzer_On();
 80015dc:	f008 fce0 	bl	8009fa0 <Buzzer_On>
 80015e0:	e004      	b.n	80015ec <main+0xdc>
        }
        else {
        	status.Charger  = 0;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <main+0x100>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	761a      	strb	r2, [r3, #24]
        	Buzzer_Off();
 80015e8:	f008 fce6 	bl	8009fb8 <Buzzer_Off>
        }

        //Send_Portable_Status();

        key_pressed = 0;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <main+0xfc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    ethernetif_input(&gnetif);
 80015f2:	e7db      	b.n	80015ac <main+0x9c>
 80015f4:	2000894c 	.word	0x2000894c
 80015f8:	20000488 	.word	0x20000488
 80015fc:	20000440 	.word	0x20000440
 8001600:	0801b1e8 	.word	0x0801b1e8
 8001604:	200001a8 	.word	0x200001a8
 8001608:	200004d4 	.word	0x200004d4
 800160c:	200002bc 	.word	0x200002bc
 8001610:	20008b08 	.word	0x20008b08

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b094      	sub	sp, #80	@ 0x50
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	2230      	movs	r2, #48	@ 0x30
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f017 f88c 	bl	8018740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <SystemClock_Config+0xd8>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a2a      	ldr	r2, [pc, #168]	@ (80016ec <SystemClock_Config+0xd8>)
 8001642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <SystemClock_Config+0xd8>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <SystemClock_Config+0xdc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a24      	ldr	r2, [pc, #144]	@ (80016f0 <SystemClock_Config+0xdc>)
 800165e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <SystemClock_Config+0xdc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001674:	2301      	movs	r3, #1
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001678:	2310      	movs	r3, #16
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001684:	2308      	movs	r3, #8
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001688:	23b4      	movs	r3, #180	@ 0xb4
 800168a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168c:	2302      	movs	r3, #2
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001690:	2307      	movs	r3, #7
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fb8d 	bl	8005db8 <HAL_RCC_OscConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016a4:	f000 f8a6 	bl	80017f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016a8:	f004 fb36 	bl	8005d18 <HAL_PWREx_EnableOverDrive>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80016b2:	f000 f89f 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	230f      	movs	r3, #15
 80016b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2302      	movs	r3, #2
 80016bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2105      	movs	r1, #5
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 fde7 	bl	80062a8 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016e0:	f000 f888 	bl	80017f4 <Error_Handler>
  }
}
 80016e4:	bf00      	nop
 80016e6:	3750      	adds	r7, #80	@ 0x50
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000

080016f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  static uint32_t last_blink_tick = 0;

  if(htim->Instance == TIM6)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d112      	bne.n	800172c <HAL_TIM_PeriodElapsedCallback+0x38>
  {
    if (HAL_GetTick() - last_blink_tick >= 500) {
 8001706:	f015 f947 	bl	8016998 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001716:	d309      	bcc.n	800172c <HAL_TIM_PeriodElapsedCallback+0x38>
      last_blink_tick = HAL_GetTick();
 8001718:	f015 f93e 	bl	8016998 <HAL_GetTick>
 800171c:	4603      	mov	r3, r0
 800171e:	4a06      	ldr	r2, [pc, #24]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001720:	6013      	str	r3, [r2, #0]

      HAL_GPIO_TogglePin(RUN_LED_GPIO_Port, RUN_LED_Pin);
 8001722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001728:	f002 ff33 	bl	8004592 <HAL_GPIO_TogglePin>
      //HAL_GPIO_TogglePin(LED_DP2_G_GPIO_Port, LED_DP2_G_Pin);
    }
  }
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40001000 	.word	0x40001000
 8001738:	200002c0 	.word	0x200002c0
 800173c:	40021400 	.word	0x40021400

08001740 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_BTN_Pin)
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001750:	d10f      	bne.n	8001772 <HAL_GPIO_EXTI_Callback+0x32>
  {
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001752:	2028      	movs	r0, #40	@ 0x28
 8001754:	f001 f959 	bl	8002a0a <HAL_NVIC_DisableIRQ>
    //---------------------------------------------------------
    if(key_pressed == 0)
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x2c>
    {
      printf("key_pressed !\n");
 8001760:	4820      	ldr	r0, [pc, #128]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001762:	f016 fdf3 	bl	801834c <puts>
      key_pressed = 1;
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
    }

    //---------------------------------------------------------
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800176c:	2028      	movs	r0, #40	@ 0x28
 800176e:	f001 f93e 	bl	80029ee <HAL_NVIC_EnableIRQ>

  }//USER_BTN_Pin

  if(GPIO_Pin == TEST_BTN_Pin)
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d12f      	bne.n	80017d8 <HAL_GPIO_EXTI_Callback+0x98>
  {
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001778:	2006      	movs	r0, #6
 800177a:	f001 f946 	bl	8002a0a <HAL_NVIC_DisableIRQ>
    //---------------------------------------------------------
    if(key_pressed == 0)
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d125      	bne.n	80017d2 <HAL_GPIO_EXTI_Callback+0x92>
    {
      uTimer_Regist(((uint8_t)uTimerDebounce), KEY_TIMERCNT);
 8001786:	21c8      	movs	r1, #200	@ 0xc8
 8001788:	2002      	movs	r0, #2
 800178a:	f015 f88d 	bl	80168a8 <uTimer_Regist>
      keyno = fan_step;
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 8001794:	701a      	strb	r2, [r3, #0]

      if(keyno <5 ) {
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d805      	bhi.n	80017aa <HAL_GPIO_EXTI_Callback+0x6a>
        keyno++;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 80017a8:	701a      	strb	r2, [r3, #0]
      }
      if (keyno > 4) {
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d902      	bls.n	80017b8 <HAL_GPIO_EXTI_Callback+0x78>
        keyno = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
      }
      fan_step = keyno;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80017be:	701a      	strb	r2, [r3, #0]

      key_pressed = 1;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]

      printf("STEP : %d \n", keyno);
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_GPIO_EXTI_Callback+0xac>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80017ce:	f016 fd4d 	bl	801826c <iprintf>
    }
    //---------------------------------------------------------
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017d2:	2006      	movs	r0, #6
 80017d4:	f001 f90b 	bl	80029ee <HAL_NVIC_EnableIRQ>

  }//TEST_BTN_Pin
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200002bc 	.word	0x200002bc
 80017e4:	0801b220 	.word	0x0801b220
 80017e8:	20000022 	.word	0x20000022
 80017ec:	200002bd 	.word	0x200002bd
 80017f0:	0801b230 	.word	0x0801b230

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <Error_Handler+0x8>

08001800 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001806:	4a18      	ldr	r2, [pc, #96]	@ (8001868 <MX_SPI3_Init+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <MX_SPI3_Init+0x64>)
 800180c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <MX_SPI3_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_SPI3_Init+0x64>)
 800182c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001830:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001832:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001838:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <MX_SPI3_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_SPI3_Init+0x64>)
 800184c:	220a      	movs	r2, #10
 800184e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	@ (8001864 <MX_SPI3_Init+0x64>)
 8001852:	f004 ff49 	bl	80066e8 <HAL_SPI_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800185c:	f7ff ffca 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200002c4 	.word	0x200002c4
 8001868:	40003c00 	.word	0x40003c00

0800186c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_SPI_MspInit+0x84>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d12c      	bne.n	80018e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <HAL_SPI_MspInit+0x88>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_SPI_MspInit+0x88>)
 8001898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_SPI_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_SPI_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <HAL_SPI_MspInit+0x88>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_SPI_MspInit+0x88>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SEG_SPI3_SCK_Pin|SEG_SPI3_MISO_Pin|SEG_SPI3_MOSI_Pin;
 80018c6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018d8:	2306      	movs	r3, #6
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <HAL_SPI_MspInit+0x8c>)
 80018e4:	f002 fc78 	bl	80041d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40003c00 	.word	0x40003c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001910:	6453      	str	r3, [r2, #68]	@ 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <NMI_Handler+0x4>

08001954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <UsageFault_Handler+0x4>

08001974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a2:	f014 ffe5 	bl	8016970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80019a6:	f001 f84a 	bl	8002a3e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}

080019ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_BTN_Pin);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f002 fe08 	bl	80045c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <TIM2_IRQHandler+0x10>)
 80019c2:	f005 fd37 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000368 	.word	0x20000368

080019d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <TIM4_IRQHandler+0x10>)
 80019d6:	f005 fd2d 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003f8 	.word	0x200003f8

080019e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uart_isr(&huart3);
 80019e8:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <USART3_IRQHandler+0x14>)
 80019ea:	f014 fb25 	bl	8016038 <uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019ee:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <USART3_IRQHandler+0x14>)
 80019f0:	f006 fd5e 	bl	80084b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000488 	.word	0x20000488

080019fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001a00:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a04:	f002 fde0 	bl	80045c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <TIM6_DAC_IRQHandler+0x10>)
 8001a12:	f005 fd0f 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000440 	.word	0x20000440

08001a20 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <ETH_IRQHandler+0x10>)
 8001a26:	f001 fc05 	bl	8003234 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20004ff4 	.word	0x20004ff4

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <_kill+0x20>)
 8001a50:	2216      	movs	r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
  return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20008c80 	.word	0x20008c80

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe5 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <_exit+0x12>

08001a7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e00a      	b.n	8001aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a90:	f3af 8000 	nop.w
 8001a94:	4601      	mov	r1, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbf0      	blt.n	8001a90 <_read+0x12>
  }

  return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_isatty>:

int _isatty(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	@ (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d205      	bcs.n	8001b5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <_sbrk+0x6c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	20030000 	.word	0x20030000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	2000031c 	.word	0x2000031c
 8001b88:	20008c90 	.word	0x20008c90
 8001b8c:	20008c80 	.word	0x20008c80

08001b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b092      	sub	sp, #72	@ 0x48
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2220      	movs	r2, #32
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f016 fdae 	bl	8018740 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001be6:	4a40      	ldr	r2, [pc, #256]	@ (8001ce8 <MX_TIM1_Init+0x134>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8001bea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001bec:	2208      	movs	r2, #8
 8001bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001bf8:	f240 128f 	movw	r2, #399	@ 0x18f
 8001bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b39      	ldr	r3, [pc, #228]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c04:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c10:	4834      	ldr	r0, [pc, #208]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c12:	f005 f8d1 	bl	8006db8 <HAL_TIM_PWM_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c1c:	f7ff fdea 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	482d      	ldr	r0, [pc, #180]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c30:	f006 fa5c 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c3a:	f7ff fddb 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2360      	movs	r3, #96	@ 0x60
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4820      	ldr	r0, [pc, #128]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c64:	f005 fd72 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c6e:	f7ff fdc1 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	2204      	movs	r2, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	481a      	ldr	r0, [pc, #104]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c7c:	f005 fd66 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c86:	f7ff fdb5 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	2208      	movs	r2, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001c94:	f005 fd5a 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001c9e:	f7ff fda9 	bl	80017f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001cc6:	f006 fa8d 	bl	80081e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001cd0:	f7ff fd90 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <MX_TIM1_Init+0x130>)
 8001cd6:	f000 fa91 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001cda:	bf00      	nop
 8001cdc:	3748      	adds	r7, #72	@ 0x48
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000320 	.word	0x20000320
 8001ce8:	40010000 	.word	0x40010000

08001cec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d12:	2259      	movs	r2, #89	@ 0x59
 8001d14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d30:	4822      	ldr	r0, [pc, #136]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d32:	f005 f959 	bl	8006fe8 <HAL_TIM_IC_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d3c:	f7ff fd5a 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	481b      	ldr	r0, [pc, #108]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d50:	f006 f9cc 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d5a:	f7ff fd4b 	bl	80017f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4811      	ldr	r0, [pc, #68]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d76:	f005 fc4d 	bl	8007614 <HAL_TIM_IC_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001d80:	f7ff fd38 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d84:	463b      	mov	r3, r7
 8001d86:	2208      	movs	r2, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001d8c:	f005 fc42 	bl	8007614 <HAL_TIM_IC_ConfigChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001d96:	f7ff fd2d 	bl	80017f4 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	220c      	movs	r2, #12
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_TIM2_Init+0xd0>)
 8001da6:	f005 fc35 	bl	8007614 <HAL_TIM_IC_ConfigChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001db0:	f7ff fd20 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000368 	.word	0x20000368

08001dc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc6:	f107 0320 	add.w	r3, r7, #32
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001de4:	4a2d      	ldr	r2, [pc, #180]	@ (8001e9c <MX_TIM3_Init+0xdc>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001dea:	2208      	movs	r2, #8
 8001dec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8001df4:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001df6:	f240 128f 	movw	r2, #399	@ 0x18f
 8001dfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e08:	4823      	ldr	r0, [pc, #140]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e0a:	f004 ffd5 	bl	8006db8 <HAL_TIM_PWM_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001e14:	f7ff fcee 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4619      	mov	r1, r3
 8001e26:	481c      	ldr	r0, [pc, #112]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e28:	f006 f960 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e32:	f7ff fcdf 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e36:	2360      	movs	r3, #96	@ 0x60
 8001e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4812      	ldr	r0, [pc, #72]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e4e:	f005 fc7d 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e58:	f7ff fccc 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e64:	f005 fc72 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e6e:	f7ff fcc1 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2208      	movs	r2, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e7a:	f005 fc67 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001e84:	f7ff fcb6 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e88:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <MX_TIM3_Init+0xd8>)
 8001e8a:	f000 f9b7 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	@ 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200003b0 	.word	0x200003b0
 8001e9c:	40000400 	.word	0x40000400

08001ea0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8001f70 <MX_TIM4_Init+0xd0>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001ec4:	2259      	movs	r2, #89	@ 0x59
 8001ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ece:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001ee2:	4822      	ldr	r0, [pc, #136]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001ee4:	f005 f880 	bl	8006fe8 <HAL_TIM_IC_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001eee:	f7ff fc81 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	4619      	mov	r1, r3
 8001f00:	481a      	ldr	r0, [pc, #104]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001f02:	f006 f8f3 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001f0c:	f7ff fc72 	bl	80017f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f14:	2301      	movs	r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f20:	463b      	mov	r3, r7
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	4811      	ldr	r0, [pc, #68]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001f28:	f005 fb74 	bl	8007614 <HAL_TIM_IC_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001f32:	f7ff fc5f 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	2204      	movs	r2, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001f3e:	f005 fb69 	bl	8007614 <HAL_TIM_IC_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001f48:	f7ff fc54 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2208      	movs	r2, #8
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_TIM4_Init+0xcc>)
 8001f54:	f005 fb5e 	bl	8007614 <HAL_TIM_IC_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001f5e:	f7ff fc49 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200003f8 	.word	0x200003f8
 8001f70:	40000800 	.word	0x40000800

08001f74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f84:	4a15      	ldr	r2, [pc, #84]	@ (8001fdc <MX_TIM6_Init+0x68>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 900-1;
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f8a:	f240 3283 	movw	r2, #899	@ 0x383
 8001f8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001fa6:	f004 fe47 	bl	8006c38 <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fb0:	f7ff fc20 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001fc2:	f006 f893 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fcc:	f7ff fc12 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000440 	.word	0x20000440
 8001fdc:	40001000 	.word	0x40001000

08001fe0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <HAL_TIM_PWM_MspInit+0x64>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_TIM_PWM_MspInit+0x68>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_TIM_PWM_MspInit+0x68>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_TIM_PWM_MspInit+0x68>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800200e:	e012      	b.n	8002036 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_TIM_PWM_MspInit+0x6c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10d      	bne.n	8002036 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_TIM_PWM_MspInit+0x68>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <HAL_TIM_PWM_MspInit+0x68>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_TIM_PWM_MspInit+0x68>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	40023800 	.word	0x40023800
 800204c:	40000400 	.word	0x40000400

08002050 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	@ 0x30
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002070:	d153      	bne.n	800211a <HAL_TIM_IC_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	4b48      	ldr	r3, [pc, #288]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a47      	ldr	r2, [pc, #284]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b45      	ldr	r3, [pc, #276]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	4b41      	ldr	r3, [pc, #260]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a40      	ldr	r2, [pc, #256]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b3e      	ldr	r3, [pc, #248]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	4a39      	ldr	r2, [pc, #228]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ba:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = TIM2_CH1_IC1_Pin;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d6:	2301      	movs	r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_IC1_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	482e      	ldr	r0, [pc, #184]	@ (800219c <HAL_TIM_IC_MspInit+0x14c>)
 80020e2:	f002 f879 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM2_CH3_IC2_Pin|TIM2_CH4_IC3_Pin;
 80020e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	4827      	ldr	r0, [pc, #156]	@ (80021a0 <HAL_TIM_IC_MspInit+0x150>)
 8002104:	f002 f868 	bl	80041d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	201c      	movs	r0, #28
 800210e:	f000 fc52 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002112:	201c      	movs	r0, #28
 8002114:	f000 fc6b 	bl	80029ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002118:	e039      	b.n	800218e <HAL_TIM_IC_MspInit+0x13e>
  else if(tim_icHandle->Instance==TIM4)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <HAL_TIM_IC_MspInit+0x154>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d134      	bne.n	800218e <HAL_TIM_IC_MspInit+0x13e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6413      	str	r3, [r2, #64]	@ 0x40
 8002134:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4a13      	ldr	r2, [pc, #76]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_TIM_IC_MspInit+0x148>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH1_IC4_Pin|TIM4_CH2_IC5_Pin|TIM4_CH3_IC6_Pin;
 800215c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800216e:	2302      	movs	r3, #2
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	480b      	ldr	r0, [pc, #44]	@ (80021a8 <HAL_TIM_IC_MspInit+0x158>)
 800217a:	f002 f82d 	bl	80041d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	201e      	movs	r0, #30
 8002184:	f000 fc17 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002188:	201e      	movs	r0, #30
 800218a:	f000 fc30 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3730      	adds	r7, #48	@ 0x30
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40020c00 	.word	0x40020c00

080021ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	@ (80021f4 <HAL_TIM_Base_MspInit+0x48>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d115      	bne.n	80021ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_TIM_Base_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <HAL_TIM_Base_MspInit+0x4c>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_TIM_Base_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2101      	movs	r1, #1
 80021de:	2036      	movs	r0, #54	@ 0x36
 80021e0:	f000 fbe9 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021e4:	2036      	movs	r0, #54	@ 0x36
 80021e6:	f000 fc02 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40001000 	.word	0x40001000
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a25      	ldr	r2, [pc, #148]	@ (80022b0 <HAL_TIM_MspPostInit+0xb4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11f      	bne.n	800225e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_TIM_MspPostInit+0xb8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a23      	ldr	r2, [pc, #140]	@ (80022b4 <HAL_TIM_MspPostInit+0xb8>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <HAL_TIM_MspPostInit+0xb8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_PWM1_Pin|TIM1_CH2_PWM2_Pin|TIM1_CH3_PWM3_Pin;
 800223a:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4818      	ldr	r0, [pc, #96]	@ (80022b8 <HAL_TIM_MspPostInit+0xbc>)
 8002258:	f001 ffbe 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800225c:	e023      	b.n	80022a6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_TIM_MspPostInit+0xc0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d11e      	bne.n	80022a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_TIM_MspPostInit+0xb8>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_TIM_MspPostInit+0xb8>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6313      	str	r3, [r2, #48]	@ 0x30
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_TIM_MspPostInit+0xb8>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_PWM4_Pin|TIM3_CH2_PWM5_Pin|TIM3_CH3_PWM6_Pin;
 8002284:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002296:	2302      	movs	r3, #2
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <HAL_TIM_MspPostInit+0xc4>)
 80022a2:	f001 ff99 	bl	80041d8 <HAL_GPIO_Init>
}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	@ 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40020800 	.word	0x40020800

080022c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <MX_USART3_UART_Init+0x50>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	@ (8002310 <MX_USART3_UART_Init+0x4c>)
 80022fc:	f005 ffd8 	bl	80082b0 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002306:	f7ff fa75 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000488 	.word	0x20000488
 8002314:	40004800 	.word	0x40004800

08002318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_UART_MspInit+0x94>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d134      	bne.n	80023a4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a1b      	ldr	r2, [pc, #108]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002372:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002384:	2307      	movs	r3, #7
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <HAL_UART_MspInit+0x9c>)
 8002390:	f001 ff22 	bl	80041d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	2027      	movs	r0, #39	@ 0x27
 800239a:	f000 fb0c 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800239e:	2027      	movs	r0, #39	@ 0x27
 80023a0:	f000 fb25 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	@ 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40004800 	.word	0x40004800
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020c00 	.word	0x40020c00

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023bc:	f7ff fbe8 	bl	8001b90 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c0:	480c      	ldr	r0, [pc, #48]	@ (80023f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c2:	490d      	ldr	r1, [pc, #52]	@ (80023f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f016 fa85 	bl	80188f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7ff f891 	bl	8001510 <main>
  bx  lr    
 80023ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80023fc:	0801e9bc 	.word	0x0801e9bc
  ldr r2, =_sbss
 8002400:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002404:	20008c90 	.word	0x20008c90

08002408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC_IRQHandler>

0800240a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <LAN8742_RegisterBusIO+0x28>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <LAN8742_RegisterBusIO+0x28>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <LAN8742_RegisterBusIO+0x28>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e014      	b.n	8002462 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d17c      	bne.n	8002588 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e01c      	b.n	80024e2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f107 0208 	add.w	r2, r7, #8
 80024b0:	2112      	movs	r1, #18
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	4798      	blx	r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	da03      	bge.n	80024c4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80024bc:	f06f 0304 	mvn.w	r3, #4
 80024c0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80024c2:	e00b      	b.n	80024dc <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d105      	bne.n	80024dc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
         break;
 80024da:	e005      	b.n	80024e8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b1f      	cmp	r3, #31
 80024e6:	d9df      	bls.n	80024a8 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b1f      	cmp	r3, #31
 80024ee:	d902      	bls.n	80024f6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024f0:	f06f 0302 	mvn.w	r3, #2
 80024f4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d145      	bne.n	8002588 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6810      	ldr	r0, [r2, #0]
 8002504:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002508:	2100      	movs	r1, #0
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	db37      	blt.n	8002582 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6810      	ldr	r0, [r2, #0]
 800251a:	f107 0208 	add.w	r2, r7, #8
 800251e:	2100      	movs	r1, #0
 8002520:	4798      	blx	r3
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	db28      	blt.n	800257a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4798      	blx	r3
 800252e:	4603      	mov	r3, r0
 8002530:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002532:	e01c      	b.n	800256e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4798      	blx	r3
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002546:	d80e      	bhi.n	8002566 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6810      	ldr	r0, [r2, #0]
 8002550:	f107 0208 	add.w	r2, r7, #8
 8002554:	2100      	movs	r1, #0
 8002556:	4798      	blx	r3
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	da07      	bge.n	800256e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800255e:	f06f 0304 	mvn.w	r3, #4
 8002562:	613b      	str	r3, [r7, #16]
                 break;
 8002564:	e010      	b.n	8002588 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002566:	f06f 0301 	mvn.w	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
               break;
 800256c:	e00c      	b.n	8002588 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1dd      	bne.n	8002534 <LAN8742_Init+0xc6>
 8002578:	e006      	b.n	8002588 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800257a:	f06f 0304 	mvn.w	r3, #4
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e002      	b.n	8002588 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002582:	f06f 0303 	mvn.w	r3, #3
 8002586:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	4798      	blx	r3
 8002594:	4603      	mov	r3, r0
 8002596:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002598:	bf00      	nop
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	4798      	blx	r3
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80025ac:	d9f5      	bls.n	800259a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	605a      	str	r2, [r3, #4]
   }

   return status;
 80025b4:	693b      	ldr	r3, [r7, #16]
 }
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6810      	ldr	r0, [r2, #0]
 80025d2:	f107 020c 	add.w	r2, r7, #12
 80025d6:	2101      	movs	r1, #1
 80025d8:	4798      	blx	r3
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	da02      	bge.n	80025e6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025e0:	f06f 0304 	mvn.w	r3, #4
 80025e4:	e06e      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6810      	ldr	r0, [r2, #0]
 80025ee:	f107 020c 	add.w	r2, r7, #12
 80025f2:	2101      	movs	r1, #1
 80025f4:	4798      	blx	r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da02      	bge.n	8002602 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025fc:	f06f 0304 	mvn.w	r3, #4
 8002600:	e060      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800260c:	2301      	movs	r3, #1
 800260e:	e059      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6810      	ldr	r0, [r2, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	2100      	movs	r1, #0
 800261e:	4798      	blx	r3
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	da02      	bge.n	800262c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002626:	f06f 0304 	mvn.w	r3, #4
 800262a:	e04b      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11b      	bne.n	800266e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <LAN8742_GetLinkState+0x90>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800264a:	2302      	movs	r3, #2
 800264c:	e03a      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002658:	2303      	movs	r3, #3
 800265a:	e033      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002666:	2304      	movs	r3, #4
 8002668:	e02c      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800266a:	2305      	movs	r3, #5
 800266c:	e02a      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6810      	ldr	r0, [r2, #0]
 8002676:	f107 020c 	add.w	r2, r7, #12
 800267a:	211f      	movs	r1, #31
 800267c:	4798      	blx	r3
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	da02      	bge.n	800268a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002684:	f06f 0304 	mvn.w	r3, #4
 8002688:	e01c      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002694:	2306      	movs	r3, #6
 8002696:	e015      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 031c 	and.w	r3, r3, #28
 800269e:	2b18      	cmp	r3, #24
 80026a0:	d101      	bne.n	80026a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80026a2:	2302      	movs	r3, #2
 80026a4:	e00e      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 031c 	and.w	r3, r3, #28
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d101      	bne.n	80026b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e007      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 031c 	and.w	r3, r3, #28
 80026ba:	2b14      	cmp	r3, #20
 80026bc:	d101      	bne.n	80026c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80026be:	2304      	movs	r3, #4
 80026c0:	e000      	b.n	80026c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80026c2:	2305      	movs	r3, #5
    }
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_Init+0x40>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_Init+0x40>)
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_Init+0x40>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f953 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff f8fc 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f979 	bl	8002a26 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 f933 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	@ (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000000 	.word	0x20000000
 8002768:	20000008 	.word	0x20000008
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f014 f90e 	bl	8016998 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d005      	beq.n	8002796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <HAL_Delay+0x44>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002796:	bf00      	nop
 8002798:	f014 f8fe 	bl	8016998 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <HAL_Delay+0x28>
  {
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008

080027b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	@ (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db12      	blt.n	8002890 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	490a      	ldr	r1, [pc, #40]	@ (800289c <__NVIC_DisableIRQ+0x44>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	3320      	adds	r3, #32
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002884:	f3bf 8f4f 	dsb	sy
}
 8002888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800288a:	f3bf 8f6f 	isb	sy
}
 800288e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	@ (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	@ (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
         );
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	@ 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff05 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff1a 	bl	8002800 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff8e 	bl	80028f4 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff0d 	bl	800281c <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff1d 	bl	8002858 <__NVIC_DisableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff94 	bl	800295c <SysTick_Config>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002a42:	f013 ff6b 	bl	801691c <HAL_SYSTICK_Callback>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f013 ff9e 	bl	8016998 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d008      	beq.n	8002a7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e052      	b.n	8002b22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0216 	bic.w	r2, r2, #22
 8002a8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <HAL_DMA_Abort+0x62>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0208 	bic.w	r2, r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002acc:	e013      	b.n	8002af6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ace:	f013 ff63 	bl	8016998 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d90c      	bls.n	8002af6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e015      	b.n	8002b22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e4      	bne.n	8002ace <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	223f      	movs	r2, #63	@ 0x3f
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d004      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e00c      	b.n	8002b62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06c      	b.n	8002c5c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2223      	movs	r2, #35	@ 0x23
 8002b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f006 fec7 	bl	8009928 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_ETH_Init+0xf4>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	4a30      	ldr	r2, [pc, #192]	@ (8002c64 <HAL_ETH_Init+0xf4>)
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002baa:	4b2e      	ldr	r3, [pc, #184]	@ (8002c64 <HAL_ETH_Init+0xf4>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c68 <HAL_ETH_Init+0xf8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a2b      	ldr	r2, [pc, #172]	@ (8002c68 <HAL_ETH_Init+0xf8>)
 8002bbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bc0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bc2:	4b29      	ldr	r3, [pc, #164]	@ (8002c68 <HAL_ETH_Init+0xf8>)
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4927      	ldr	r1, [pc, #156]	@ (8002c68 <HAL_ETH_Init+0xf8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <HAL_ETH_Init+0xf8>)
 8002bd2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f013 fed4 	bl	8016998 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bf2:	e011      	b.n	8002c18 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002bf4:	f013 fed0 	bl	8016998 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c02:	d909      	bls.n	8002c18 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2204      	movs	r2, #4
 8002c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	22e0      	movs	r2, #224	@ 0xe0
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e021      	b.n	8002c5c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 f82e 	bl	8003c8c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 f8d5 	bl	8003de0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f001 f92b 	bl	8003e92 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	461a      	mov	r2, r3
 8002c42:	2100      	movs	r1, #0
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 f893 	bl	8003d70 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2210      	movs	r2, #16
 8002c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800

08002c6c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d17f      	bne.n	8002d7e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2223      	movs	r2, #35	@ 0x23
 8002c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cb0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002cc4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa30 	bl	8003134 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7ff fd3f 	bl	8002770 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7ff fd2c 	bl	8002770 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fe54 	bl	80039ce <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d3c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d54:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002d68:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002d6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d70:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2223      	movs	r2, #35	@ 0x23
 8002d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d96:	2b23      	cmp	r3, #35	@ 0x23
 8002d98:	d170      	bne.n	8002e7c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2223      	movs	r2, #35	@ 0x23
 8002d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002db4:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002db8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dbc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dd4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f023 0302 	bic.w	r3, r3, #2
 8002de8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dec:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7ff fcb2 	bl	8002770 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fdda 	bl	80039ce <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0208 	bic.w	r2, r2, #8
 8002e28:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e32:	2001      	movs	r0, #1
 8002e34:	f7ff fc9c 	bl	8002770 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e00e      	b.n	8002e64 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	3212      	adds	r2, #18
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d9ed      	bls.n	8002e46 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2210      	movs	r2, #16
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e07c      	b.n	8002fa6 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb2:	2b23      	cmp	r3, #35	@ 0x23
 8002eb4:	d176      	bne.n	8002fa4 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f001 f856 	bl	8003f6c <ETH_Prepare_Tx_Descriptors>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f043 0202 	orr.w	r2, r3, #2
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e065      	b.n	8002fa6 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002eda:	f3bf 8f4f 	dsb	sy
}
 8002ede:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3206      	adds	r2, #6
 8002ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eec:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d904      	bls.n	8002f0a <HAL_ETH_Transmit+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	1f1a      	subs	r2, r3, #4
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3106      	adds	r1, #6
 8002f16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f1e:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002f20:	f013 fd3a 	bl	8016998 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f26:	e037      	b.n	8002f98 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f40:	f043 0208 	orr.w	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e023      	b.n	8002fa6 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d018      	beq.n	8002f98 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f013 fd17 	bl	8016998 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <HAL_ETH_Transmit+0xf6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10d      	bne.n	8002f98 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002f92:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e006      	b.n	8002fa6 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dbc3      	blt.n	8002f28 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b088      	sub	sp, #32
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0a8      	b.n	800312c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe0:	2b23      	cmp	r3, #35	@ 0x23
 8002fe2:	d001      	beq.n	8002fe8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0a1      	b.n	800312c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	3212      	adds	r2, #18
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffe:	f1c3 0304 	rsb	r3, r3, #4
 8003002:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003004:	e06a      	b.n	80030dc <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_ETH_ReadData+0x88>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d040      	beq.n	80030b8 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800306a:	3b04      	subs	r3, #4
 800306c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003092:	461a      	mov	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f006 fe1e 	bl	8009cd8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	3301      	adds	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d902      	bls.n	80030ca <HAL_ETH_ReadData+0x11c>
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	3b04      	subs	r3, #4
 80030c8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	3212      	adds	r2, #18
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3301      	adds	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	db06      	blt.n	80030f2 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d202      	bcs.n	80030f2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d089      	beq.n	8003006 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f814 	bl	8003134 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d108      	bne.n	800312a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003140:	2301      	movs	r3, #1
 8003142:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003148:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	3212      	adds	r2, #18
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800315c:	e03d      	b.n	80031da <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d112      	bne.n	800318c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	4618      	mov	r0, r3
 800316c:	f006 fd84 	bl	8009c78 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	74fb      	strb	r3, [r7, #19]
 800317a:	e007      	b.n	800318c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	461a      	mov	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	461a      	mov	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d023      	beq.n	80031da <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4a24      	ldr	r2, [pc, #144]	@ (8003230 <ETH_UpdateDescriptor+0xfc>)
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	e003      	b.n	80031aa <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80031a8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d902      	bls.n	80031c8 <ETH_UpdateDescriptor+0x94>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b04      	subs	r3, #4
 80031c6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	3212      	adds	r2, #18
 80031ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d2:	617b      	str	r3, [r7, #20]
      desccount--;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <ETH_UpdateDescriptor+0xb2>
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1bb      	bne.n	800315e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d01a      	beq.n	8003226 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80031fa:	f3bf 8f5f 	dmb	sy
}
 80031fe:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6919      	ldr	r1, [r3, #16]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	18ca      	adds	r2, r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003218:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003226:	bf00      	nop
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	80004600 	.word	0x80004600

08003234 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	d112      	bne.n	8003274 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d109      	bne.n	8003274 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003268:	461a      	mov	r2, r3
 800326a:	4b50      	ldr	r3, [pc, #320]	@ (80033ac <HAL_ETH_IRQHandler+0x178>)
 800326c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8ac 	bl	80033cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d113      	bne.n	80032ae <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10a      	bne.n	80032ae <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a0:	461a      	mov	r2, r3
 80032a2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80032a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f885 	bl	80033b8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c0:	d14c      	bne.n	800335c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d4:	d142      	bne.n	800335c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f043 0208 	orr.w	r2, r3, #8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f8:	d11a      	bne.n	8003330 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <HAL_ETH_IRQHandler+0x17c>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003320:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003324:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	22e0      	movs	r2, #224	@ 0xe0
 800332a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800332e:	e012      	b.n	8003356 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800333e:	4013      	ands	r3, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800334e:	461a      	mov	r2, r3
 8003350:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003354:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f842 	bl	80033e0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d10e      	bne.n	8003388 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f83a 	bl	80033f4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <HAL_ETH_IRQHandler+0x180>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003394:	4b07      	ldr	r3, [pc, #28]	@ (80033b4 <HAL_ETH_IRQHandler+0x180>)
 8003396:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800339a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f833 	bl	8003408 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	00010040 	.word	0x00010040
 80033b0:	007e2000 	.word	0x007e2000
 80033b4:	40013c00 	.word	0x40013c00

080033b8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 031c 	and.w	r3, r3, #28
 8003438:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	02db      	lsls	r3, r3, #11
 800343e:	b29b      	uxth	r3, r3
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0302 	bic.w	r3, r3, #2
 800345a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800346c:	f013 fa94 	bl	8016998 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003472:	e00d      	b.n	8003490 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003474:	f013 fa90 	bl	8016998 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003482:	d301      	bcc.n	8003488 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e010      	b.n	80034aa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1ec      	bne.n	8003474 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 031c 	and.w	r3, r3, #28
 80034ce:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	02db      	lsls	r3, r3, #11
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350c:	f013 fa44 	bl	8016998 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003512:	e00d      	b.n	8003530 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003514:	f013 fa40 	bl	8016998 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003522:	d301      	bcc.n	8003528 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e009      	b.n	800353c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ec      	bne.n	8003514 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d9      	b.n	800370c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e00b      	b.n	8003744 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003732:	2b10      	cmp	r3, #16
 8003734:	d105      	bne.n	8003742 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f96d 	bl	8003a18 <ETH_SetMACConfig>

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
  }
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 031c 	bic.w	r3, r3, #28
 8003762:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003764:	f002 ff8c 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 8003768:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d908      	bls.n	8003784 <HAL_ETH_SetMDIOClockRange+0x38>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d804      	bhi.n	8003784 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e027      	b.n	80037d4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4a18      	ldr	r2, [pc, #96]	@ (80037e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d908      	bls.n	800379e <HAL_ETH_SetMDIOClockRange+0x52>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4a17      	ldr	r2, [pc, #92]	@ (80037ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d204      	bcs.n	800379e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f043 030c 	orr.w	r3, r3, #12
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e01a      	b.n	80037d4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a12      	ldr	r2, [pc, #72]	@ (80037ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d303      	bcc.n	80037ae <HAL_ETH_SetMDIOClockRange+0x62>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a11      	ldr	r2, [pc, #68]	@ (80037f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d911      	bls.n	80037d2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a0f      	ldr	r2, [pc, #60]	@ (80037f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d908      	bls.n	80037c8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4a0e      	ldr	r2, [pc, #56]	@ (80037f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d804      	bhi.n	80037c8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e005      	b.n	80037d4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f043 0310 	orr.w	r3, r3, #16
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e000      	b.n	80037d4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80037d2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	611a      	str	r2, [r3, #16]
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	01312cff 	.word	0x01312cff
 80037e8:	02160ebf 	.word	0x02160ebf
 80037ec:	03938700 	.word	0x03938700
 80037f0:	05f5e0ff 	.word	0x05f5e0ff
 80037f4:	08f0d17f 	.word	0x08f0d17f

080037f8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e044      	b.n	8003896 <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	78db      	ldrb	r3, [r3, #3]
 8003816:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8003818:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	791b      	ldrb	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003820:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	7a1b      	ldrb	r3, [r3, #8]
 8003826:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8003828:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	795b      	ldrb	r3, [r3, #5]
 800382e:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003830:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	7a52      	ldrb	r2, [r2, #9]
 8003836:	2a00      	cmp	r2, #0
 8003838:	d101      	bne.n	800383e <HAL_ETH_SetMACFilterConfig+0x46>
 800383a:	2220      	movs	r2, #32
 800383c:	e000      	b.n	8003840 <HAL_ETH_SetMACFilterConfig+0x48>
 800383e:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8003840:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	79db      	ldrb	r3, [r3, #7]
 8003846:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8003848:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	799b      	ldrb	r3, [r3, #6]
 800384e:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003850:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	789b      	ldrb	r3, [r3, #2]
 8003856:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8003858:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	785b      	ldrb	r3, [r3, #1]
 800385e:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003860:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_ETH_SetMACFilterConfig+0xa8>)
 8003872:	4013      	ands	r3, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	430b      	orrs	r3, r1
 800387c:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003886:	2001      	movs	r0, #1
 8003888:	f7fe ff72 	bl	8002770 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	7ffff800 	.word	0x7ffff800

080038a4 <HAL_ETH_GetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that will hold
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetMACFilterConfig(ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  if (pFilterConfig == NULL)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ETH_GetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e084      	b.n	80039c2 <HAL_ETH_GetMACFilterConfig+0x11e>
  }

  pFilterConfig->PromiscuousMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PM)) > 0U) ? ENABLE : DISABLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
  pFilterConfig->HashUnicast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HU) >> 1) > 0U) ? ENABLE : DISABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	70da      	strb	r2, [r3, #3]
  pFilterConfig->HashMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HM) >> 2) > 0U) ? ENABLE : DISABLE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	711a      	strb	r2, [r3, #4]
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
                                                       ETH_MACFFR_DAIF) >> 3) > 0U) ? ENABLE : DISABLE;
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	721a      	strb	r2, [r3, #8]
  pFilterConfig->PassAllMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PAM) >> 4) > 0U) ? ENABLE : DISABLE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	715a      	strb	r2, [r3, #5]
  pFilterConfig->BroadcastFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_BFD) >> 5) == 0U) ? ENABLE : DISABLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	725a      	strb	r2, [r3, #9]
  pFilterConfig->ControlPacketsFilter = READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PCF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	60da      	str	r2, [r3, #12]
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
                                                      ETH_MACFFR_SAIF) >> 8) > 0U) ? ENABLE : DISABLE;
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	71da      	strb	r2, [r3, #7]
  pFilterConfig->SrcAddrFiltering = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_SAF) >> 9) > 0U) ? ENABLE : DISABLE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	719a      	strb	r2, [r3, #6]
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
                                       ? ENABLE : DISABLE;
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	709a      	strb	r2, [r3, #2]
  pFilterConfig->ReceiveAllMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_RA) >> 31) > 0U) ? ENABLE : DISABLE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0fdb      	lsrs	r3, r3, #31
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	705a      	strb	r2, [r3, #1]

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f7fe feb6 	bl	8002770 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a0e:	6193      	str	r3, [r2, #24]
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4b51      	ldr	r3, [pc, #324]	@ (8003b74 <ETH_SetMACConfig+0x15c>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	7c1b      	ldrb	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <ETH_SetMACConfig+0x28>
 8003a3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a3e:	e000      	b.n	8003a42 <ETH_SetMACConfig+0x2a>
 8003a40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	7c5b      	ldrb	r3, [r3, #17]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <ETH_SetMACConfig+0x38>
 8003a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a4e:	e000      	b.n	8003a52 <ETH_SetMACConfig+0x3a>
 8003a50:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	7fdb      	ldrb	r3, [r3, #31]
 8003a5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003a60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	7f92      	ldrb	r2, [r2, #30]
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	d102      	bne.n	8003a76 <ETH_SetMACConfig+0x5e>
 8003a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a74:	e000      	b.n	8003a78 <ETH_SetMACConfig+0x60>
 8003a76:	2200      	movs	r2, #0
                        macconf->Speed |
 8003a78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	7f1b      	ldrb	r3, [r3, #28]
 8003a7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	791b      	ldrb	r3, [r3, #4]
 8003a8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003a8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a96:	2a00      	cmp	r2, #0
 8003a98:	d102      	bne.n	8003aa0 <ETH_SetMACConfig+0x88>
 8003a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a9e:	e000      	b.n	8003aa2 <ETH_SetMACConfig+0x8a>
 8003aa0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003aa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	7bdb      	ldrb	r3, [r3, #15]
 8003aa8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003aaa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ab0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ab8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003aba:	4313      	orrs	r3, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fe fe4c 	bl	8002770 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003aee:	4013      	ands	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	d101      	bne.n	8003b06 <ETH_SetMACConfig+0xee>
 8003b02:	2280      	movs	r2, #128	@ 0x80
 8003b04:	e000      	b.n	8003b08 <ETH_SetMACConfig+0xf0>
 8003b06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b08:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003b16:	2a01      	cmp	r2, #1
 8003b18:	d101      	bne.n	8003b1e <ETH_SetMACConfig+0x106>
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	e000      	b.n	8003b20 <ETH_SetMACConfig+0x108>
 8003b1e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b20:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003b28:	2a01      	cmp	r2, #1
 8003b2a:	d101      	bne.n	8003b30 <ETH_SetMACConfig+0x118>
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	e000      	b.n	8003b32 <ETH_SetMACConfig+0x11a>
 8003b30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003b3a:	2a01      	cmp	r2, #1
 8003b3c:	d101      	bne.n	8003b42 <ETH_SetMACConfig+0x12a>
 8003b3e:	2202      	movs	r2, #2
 8003b40:	e000      	b.n	8003b44 <ETH_SetMACConfig+0x12c>
 8003b42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b44:	4313      	orrs	r3, r2
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fe fe07 	bl	8002770 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	619a      	str	r2, [r3, #24]
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	ff20810f 	.word	0xff20810f

08003b78 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <ETH_SetDMAConfig+0x110>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	7b1b      	ldrb	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <ETH_SetDMAConfig+0x2c>
 8003b9e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ba2:	e000      	b.n	8003ba6 <ETH_SetDMAConfig+0x2e>
 8003ba4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	7b5b      	ldrb	r3, [r3, #13]
 8003baa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	7f52      	ldrb	r2, [r2, #29]
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d102      	bne.n	8003bbc <ETH_SetDMAConfig+0x44>
 8003bb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bba:	e000      	b.n	8003bbe <ETH_SetDMAConfig+0x46>
 8003bbc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bbe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	7b9b      	ldrb	r3, [r3, #14]
 8003bc4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bc6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bcc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	7f1b      	ldrb	r3, [r3, #28]
 8003bd2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003bd4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	7f9b      	ldrb	r3, [r3, #30]
 8003bda:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003bdc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003be2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bec:	4313      	orrs	r3, r2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f7fe fdae 	bl	8002770 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	791b      	ldrb	r3, [r3, #4]
 8003c26:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c2c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c32:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c38:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c40:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003c42:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c4a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c50:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c5e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7fe fd7f 	bl	8002770 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	f8de3f23 	.word	0xf8de3f23

08003c8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0a6      	sub	sp, #152	@ 0x98
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003cee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003cf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fe86 	bl	8003a18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d40:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d5c:	f107 0308 	add.w	r3, r7, #8
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff08 	bl	8003b78 <ETH_SetDMAConfig>
}
 8003d68:	bf00      	nop
 8003d6a:	3798      	adds	r7, #152	@ 0x98
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3305      	adds	r3, #5
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	3204      	adds	r2, #4
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <ETH_MACAddressConfig+0x68>)
 8003d92:	4413      	add	r3, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3303      	adds	r3, #3
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	061a      	lsls	r2, r3, #24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3302      	adds	r3, #2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	4313      	orrs	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <ETH_MACAddressConfig+0x6c>)
 8003dc2:	4413      	add	r3, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40028040 	.word	0x40028040
 8003ddc:	40028044 	.word	0x40028044

08003de0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e03e      	b.n	8003e6c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68d9      	ldr	r1, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	3206      	adds	r2, #6
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d80c      	bhi.n	8003e50 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	e004      	b.n	8003e5a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d9bd      	bls.n	8003dee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e84:	611a      	str	r2, [r3, #16]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e046      	b.n	8003f2e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6919      	ldr	r1, [r3, #16]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003edc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003ee4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	3212      	adds	r2, #18
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d80c      	bhi.n	8003f1e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6919      	ldr	r1, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e004      	b.n	8003f28 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d9b5      	bls.n	8003ea0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5e:	60da      	str	r2, [r3, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b08d      	sub	sp, #52	@ 0x34
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f96:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fae:	d007      	beq.n	8003fc0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e103      	b.n	80041cc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003fdc:	f023 031f 	bic.w	r3, r3, #31
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	6852      	ldr	r2, [r2, #4]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	431a      	orrs	r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800404a:	f3bf 8f5f 	dmb	sy
}
 800404e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800405c:	e084      	b.n	8004168 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e005      	b.n	800408a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408c:	3301      	adds	r3, #1
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	2b03      	cmp	r3, #3
 8004094:	d902      	bls.n	800409c <ETH_Prepare_Tx_Descriptors+0x130>
 8004096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004098:	3b04      	subs	r3, #4
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040be:	d007      	beq.n	80040d0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	3304      	adds	r3, #4
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d029      	beq.n	8004124 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80040de:	2300      	movs	r3, #0
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e2:	e019      	b.n	8004118 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80040e4:	f3bf 8f5f 	dmb	sy
}
 80040e8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	3301      	adds	r3, #1
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d902      	bls.n	8004108 <ETH_Prepare_Tx_Descriptors+0x19c>
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	3b04      	subs	r3, #4
 8004106:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004110:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	3301      	adds	r3, #1
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	429a      	cmp	r2, r3
 800411e:	d3e1      	bcc.n	80040e4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004120:	2302      	movs	r3, #2
 8004122:	e053      	b.n	80041cc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	3301      	adds	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004142:	f023 031f 	bic.w	r3, r3, #31
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	6852      	ldr	r2, [r2, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	3301      	adds	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004156:	f3bf 8f5f 	dmb	sy
}
 800415a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f af76 	bne.w	800405e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a6:	3304      	adds	r3, #4
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b4:	b672      	cpsid	i
}
 80041b6:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4413      	add	r3, r2
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80041c6:	b662      	cpsie	i
}
 80041c8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3734      	adds	r7, #52	@ 0x34
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e177      	b.n	80044e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	f040 8166 	bne.w	80044de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d005      	beq.n	800422a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004226:	2b02      	cmp	r3, #2
 8004228:	d130      	bne.n	800428c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 0201 	and.w	r2, r3, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d017      	beq.n	80042c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d123      	bne.n	800431c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	08da      	lsrs	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3208      	adds	r2, #8
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3208      	adds	r2, #8
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80c0 	beq.w	80044de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b66      	ldr	r3, [pc, #408]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	4a65      	ldr	r2, [pc, #404]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800436c:	6453      	str	r3, [r2, #68]	@ 0x44
 800436e:	4b63      	ldr	r3, [pc, #396]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437a:	4a61      	ldr	r2, [pc, #388]	@ (8004500 <HAL_GPIO_Init+0x328>)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a58      	ldr	r2, [pc, #352]	@ (8004504 <HAL_GPIO_Init+0x32c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d037      	beq.n	8004416 <HAL_GPIO_Init+0x23e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a57      	ldr	r2, [pc, #348]	@ (8004508 <HAL_GPIO_Init+0x330>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d031      	beq.n	8004412 <HAL_GPIO_Init+0x23a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a56      	ldr	r2, [pc, #344]	@ (800450c <HAL_GPIO_Init+0x334>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d02b      	beq.n	800440e <HAL_GPIO_Init+0x236>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a55      	ldr	r2, [pc, #340]	@ (8004510 <HAL_GPIO_Init+0x338>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d025      	beq.n	800440a <HAL_GPIO_Init+0x232>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a54      	ldr	r2, [pc, #336]	@ (8004514 <HAL_GPIO_Init+0x33c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <HAL_GPIO_Init+0x22e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a53      	ldr	r2, [pc, #332]	@ (8004518 <HAL_GPIO_Init+0x340>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d019      	beq.n	8004402 <HAL_GPIO_Init+0x22a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a52      	ldr	r2, [pc, #328]	@ (800451c <HAL_GPIO_Init+0x344>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0x226>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a51      	ldr	r2, [pc, #324]	@ (8004520 <HAL_GPIO_Init+0x348>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00d      	beq.n	80043fa <HAL_GPIO_Init+0x222>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a50      	ldr	r2, [pc, #320]	@ (8004524 <HAL_GPIO_Init+0x34c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <HAL_GPIO_Init+0x21e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004528 <HAL_GPIO_Init+0x350>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043ee:	2309      	movs	r3, #9
 80043f0:	e012      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043f2:	230a      	movs	r3, #10
 80043f4:	e010      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043f6:	2308      	movs	r3, #8
 80043f8:	e00e      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043fa:	2307      	movs	r3, #7
 80043fc:	e00c      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043fe:	2306      	movs	r3, #6
 8004400:	e00a      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004402:	2305      	movs	r3, #5
 8004404:	e008      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004406:	2304      	movs	r3, #4
 8004408:	e006      	b.n	8004418 <HAL_GPIO_Init+0x240>
 800440a:	2303      	movs	r3, #3
 800440c:	e004      	b.n	8004418 <HAL_GPIO_Init+0x240>
 800440e:	2302      	movs	r3, #2
 8004410:	e002      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004416:	2300      	movs	r3, #0
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f002 0203 	and.w	r2, r2, #3
 800441e:	0092      	lsls	r2, r2, #2
 8004420:	4093      	lsls	r3, r2
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004428:	4935      	ldr	r1, [pc, #212]	@ (8004500 <HAL_GPIO_Init+0x328>)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	3302      	adds	r3, #2
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004436:	4b3d      	ldr	r3, [pc, #244]	@ (800452c <HAL_GPIO_Init+0x354>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445a:	4a34      	ldr	r2, [pc, #208]	@ (800452c <HAL_GPIO_Init+0x354>)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004460:	4b32      	ldr	r3, [pc, #200]	@ (800452c <HAL_GPIO_Init+0x354>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004484:	4a29      	ldr	r2, [pc, #164]	@ (800452c <HAL_GPIO_Init+0x354>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800448a:	4b28      	ldr	r3, [pc, #160]	@ (800452c <HAL_GPIO_Init+0x354>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ae:	4a1f      	ldr	r2, [pc, #124]	@ (800452c <HAL_GPIO_Init+0x354>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044b4:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <HAL_GPIO_Init+0x354>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <HAL_GPIO_Init+0x354>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	f67f ae84 	bls.w	80041f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3724      	adds	r7, #36	@ 0x24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	40013800 	.word	0x40013800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40021400 	.word	0x40021400
 800451c:	40021800 	.word	0x40021800
 8004520:	40021c00 	.word	0x40021c00
 8004524:	40022000 	.word	0x40022000
 8004528:	40022400 	.word	0x40022400
 800452c:	40013c00 	.word	0x40013c00

08004530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	887b      	ldrh	r3, [r7, #2]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e001      	b.n	8004552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
 800456c:	4613      	mov	r3, r2
 800456e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004570:	787b      	ldrb	r3, [r7, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800457c:	e003      	b.n	8004586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	041a      	lsls	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	619a      	str	r2, [r3, #24]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045a4:	887a      	ldrh	r2, [r7, #2]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4013      	ands	r3, r2
 80045aa:	041a      	lsls	r2, r3, #16
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	43d9      	mvns	r1, r3
 80045b0:	887b      	ldrh	r3, [r7, #2]
 80045b2:	400b      	ands	r3, r1
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	619a      	str	r2, [r3, #24]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045d2:	4b08      	ldr	r3, [pc, #32]	@ (80045f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045de:	4a05      	ldr	r2, [pc, #20]	@ (80045f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd f8aa 	bl	8001740 <HAL_GPIO_EXTI_Callback>
  }
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40013c00 	.word	0x40013c00

080045f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e12b      	b.n	8004862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fec2 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	@ 0x24
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800464a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800465a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800465c:	f002 f81c 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8004660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4a81      	ldr	r2, [pc, #516]	@ (800486c <HAL_I2C_Init+0x274>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d807      	bhi.n	800467c <HAL_I2C_Init+0x84>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a80      	ldr	r2, [pc, #512]	@ (8004870 <HAL_I2C_Init+0x278>)
 8004670:	4293      	cmp	r3, r2
 8004672:	bf94      	ite	ls
 8004674:	2301      	movls	r3, #1
 8004676:	2300      	movhi	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e006      	b.n	800468a <HAL_I2C_Init+0x92>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a7d      	ldr	r2, [pc, #500]	@ (8004874 <HAL_I2C_Init+0x27c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	bf94      	ite	ls
 8004684:	2301      	movls	r3, #1
 8004686:	2300      	movhi	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e0e7      	b.n	8004862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a78      	ldr	r2, [pc, #480]	@ (8004878 <HAL_I2C_Init+0x280>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0c9b      	lsrs	r3, r3, #18
 800469c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a6a      	ldr	r2, [pc, #424]	@ (800486c <HAL_I2C_Init+0x274>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d802      	bhi.n	80046cc <HAL_I2C_Init+0xd4>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3301      	adds	r3, #1
 80046ca:	e009      	b.n	80046e0 <HAL_I2C_Init+0xe8>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	4a69      	ldr	r2, [pc, #420]	@ (800487c <HAL_I2C_Init+0x284>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	099b      	lsrs	r3, r3, #6
 80046de:	3301      	adds	r3, #1
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	495c      	ldr	r1, [pc, #368]	@ (800486c <HAL_I2C_Init+0x274>)
 80046fc:	428b      	cmp	r3, r1
 80046fe:	d819      	bhi.n	8004734 <HAL_I2C_Init+0x13c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1e59      	subs	r1, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fbb1 f3f3 	udiv	r3, r1, r3
 800470e:	1c59      	adds	r1, r3, #1
 8004710:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004714:	400b      	ands	r3, r1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_I2C_Init+0x138>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1e59      	subs	r1, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fbb1 f3f3 	udiv	r3, r1, r3
 8004728:	3301      	adds	r3, #1
 800472a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472e:	e051      	b.n	80047d4 <HAL_I2C_Init+0x1dc>
 8004730:	2304      	movs	r3, #4
 8004732:	e04f      	b.n	80047d4 <HAL_I2C_Init+0x1dc>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d111      	bne.n	8004760 <HAL_I2C_Init+0x168>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1e58      	subs	r0, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	440b      	add	r3, r1
 800474a:	fbb0 f3f3 	udiv	r3, r0, r3
 800474e:	3301      	adds	r3, #1
 8004750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e012      	b.n	8004786 <HAL_I2C_Init+0x18e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1e58      	subs	r0, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	0099      	lsls	r1, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	fbb0 f3f3 	udiv	r3, r0, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Init+0x196>
 800478a:	2301      	movs	r3, #1
 800478c:	e022      	b.n	80047d4 <HAL_I2C_Init+0x1dc>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10e      	bne.n	80047b4 <HAL_I2C_Init+0x1bc>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1e58      	subs	r0, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6859      	ldr	r1, [r3, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	440b      	add	r3, r1
 80047a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b2:	e00f      	b.n	80047d4 <HAL_I2C_Init+0x1dc>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e58      	subs	r0, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	0099      	lsls	r1, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	6809      	ldr	r1, [r1, #0]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004802:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6911      	ldr	r1, [r2, #16]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	4311      	orrs	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	430b      	orrs	r3, r1
 8004816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	000186a0 	.word	0x000186a0
 8004870:	001e847f 	.word	0x001e847f
 8004874:	003d08ff 	.word	0x003d08ff
 8004878:	431bde83 	.word	0x431bde83
 800487c:	10624dd3 	.word	0x10624dd3

08004880 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	607a      	str	r2, [r7, #4]
 800488a:	461a      	mov	r2, r3
 800488c:	460b      	mov	r3, r1
 800488e:	817b      	strh	r3, [r7, #10]
 8004890:	4613      	mov	r3, r2
 8004892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004894:	f012 f880 	bl	8016998 <HAL_GetTick>
 8004898:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	f040 80e0 	bne.w	8004a68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2319      	movs	r3, #25
 80048ae:	2201      	movs	r2, #1
 80048b0:	4970      	ldr	r1, [pc, #448]	@ (8004a74 <HAL_I2C_Master_Transmit+0x1f4>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 ff7e 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	e0d3      	b.n	8004a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2C_Master_Transmit+0x50>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0cc      	b.n	8004a6a <HAL_I2C_Master_Transmit+0x1ea>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d007      	beq.n	80048f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	@ 0x21
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2210      	movs	r2, #16
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	893a      	ldrh	r2, [r7, #8]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a50      	ldr	r2, [pc, #320]	@ (8004a78 <HAL_I2C_Master_Transmit+0x1f8>)
 8004936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004938:	8979      	ldrh	r1, [r7, #10]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fd00 	bl	8005344 <I2C_MasterRequestWrite>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e08d      	b.n	8004a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004964:	e066      	b.n	8004a34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	6a39      	ldr	r1, [r7, #32]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f001 f83c 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	2b04      	cmp	r3, #4
 800497c:	d107      	bne.n	800498e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800498c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e06b      	b.n	8004a6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d11b      	bne.n	8004a08 <HAL_I2C_Master_Transmit+0x188>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d017      	beq.n	8004a08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	6a39      	ldr	r1, [r7, #32]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f001 f833 	bl	8005a78 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d107      	bne.n	8004a30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e01a      	b.n	8004a6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d194      	bne.n	8004966 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	00100002 	.word	0x00100002
 8004a78:	ffff0000 	.word	0xffff0000

08004a7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	@ 0x30
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	817b      	strh	r3, [r7, #10]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f011 ff82 	bl	8016998 <HAL_GetTick>
 8004a94:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	f040 8217 	bne.w	8004ed2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2319      	movs	r3, #25
 8004aaa:	2201      	movs	r2, #1
 8004aac:	497c      	ldr	r1, [pc, #496]	@ (8004ca0 <HAL_I2C_Master_Receive+0x224>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fe80 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e20a      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2C_Master_Receive+0x50>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e203      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d007      	beq.n	8004af2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2222      	movs	r2, #34	@ 0x22
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca4 <HAL_I2C_Master_Receive+0x228>)
 8004b32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b34:	8979      	ldrh	r1, [r7, #10]
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fc84 	bl	8005448 <I2C_MasterRequestRead>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e1c4      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d113      	bne.n	8004b7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e198      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d11b      	bne.n	8004bba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e178      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d11b      	bne.n	8004bfa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	e158      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c20:	e144      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	f200 80f1 	bhi.w	8004e0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d123      	bne.n	8004c7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 ff65 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e145      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c7a:	e117      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d14e      	bne.n	8004d22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4906      	ldr	r1, [pc, #24]	@ (8004ca8 <HAL_I2C_Master_Receive+0x22c>)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fd90 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e11a      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
 8004c9e:	bf00      	nop
 8004ca0:	00100002 	.word	0x00100002
 8004ca4:	ffff0000 	.word	0xffff0000
 8004ca8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d20:	e0c4      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	2200      	movs	r2, #0
 8004d2a:	496c      	ldr	r1, [pc, #432]	@ (8004edc <HAL_I2C_Master_Receive+0x460>)
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fd41 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0cb      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	2200      	movs	r2, #0
 8004d86:	4955      	ldr	r1, [pc, #340]	@ (8004edc <HAL_I2C_Master_Receive+0x460>)
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fd13 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e09d      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e0c:	e04e      	b.n	8004eac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fe78 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e058      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d124      	bne.n	8004eac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d107      	bne.n	8004e7a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e78:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f47f aeb6 	bne.w	8004c22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3728      	adds	r7, #40	@ 0x28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	00010004 	.word	0x00010004

08004ee0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	@ 0x30
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	817b      	strh	r3, [r7, #10]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	813b      	strh	r3, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004efa:	f011 fd4d 	bl	8016998 <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	f040 8214 	bne.w	8005336 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2319      	movs	r3, #25
 8004f14:	2201      	movs	r2, #1
 8004f16:	497b      	ldr	r1, [pc, #492]	@ (8005104 <HAL_I2C_Mem_Read+0x224>)
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fc4b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
 8004f26:	e207      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_I2C_Mem_Read+0x56>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e200      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d007      	beq.n	8004f5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2222      	movs	r2, #34	@ 0x22
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2240      	movs	r2, #64	@ 0x40
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005108 <HAL_I2C_Mem_Read+0x228>)
 8004f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f9e:	88f8      	ldrh	r0, [r7, #6]
 8004fa0:	893a      	ldrh	r2, [r7, #8]
 8004fa2:	8979      	ldrh	r1, [r7, #10]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4603      	mov	r3, r0
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fb18 	bl	80055e4 <I2C_RequestMemoryRead>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e1bc      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d113      	bne.n	8004fee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e190      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d11b      	bne.n	800502e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e170      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005032:	2b02      	cmp	r3, #2
 8005034:	d11b      	bne.n	800506e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005044:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	e150      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005084:	e144      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508a:	2b03      	cmp	r3, #3
 800508c:	f200 80f1 	bhi.w	8005272 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d123      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fd33 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e145      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050de:	e117      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d14e      	bne.n	8005186 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ee:	2200      	movs	r2, #0
 80050f0:	4906      	ldr	r1, [pc, #24]	@ (800510c <HAL_I2C_Mem_Read+0x22c>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fb5e 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e11a      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
 8005102:	bf00      	nop
 8005104:	00100002 	.word	0x00100002
 8005108:	ffff0000 	.word	0xffff0000
 800510c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800511e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005184:	e0c4      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2200      	movs	r2, #0
 800518e:	496c      	ldr	r1, [pc, #432]	@ (8005340 <HAL_I2C_Mem_Read+0x460>)
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fb0f 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0cb      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	2200      	movs	r2, #0
 80051ea:	4955      	ldr	r1, [pc, #340]	@ (8005340 <HAL_I2C_Mem_Read+0x460>)
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fae1 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e09d      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005270:	e04e      	b.n	8005310 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005274:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fc46 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e058      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d124      	bne.n	8005310 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d107      	bne.n	80052de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f aeb6 	bne.w	8005086 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	@ 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	00010004 	.word	0x00010004

08005344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d006      	beq.n	800536e <I2C_MasterRequestWrite+0x2a>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d003      	beq.n	800536e <I2C_MasterRequestWrite+0x2a>
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800536c:	d108      	bne.n	8005380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e00b      	b.n	8005398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005384:	2b12      	cmp	r3, #18
 8005386:	d107      	bne.n	8005398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fa05 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053be:	d103      	bne.n	80053c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e035      	b.n	8005438 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053d4:	d108      	bne.n	80053e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053d6:	897b      	ldrh	r3, [r7, #10]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053e4:	611a      	str	r2, [r3, #16]
 80053e6:	e01b      	b.n	8005420 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053e8:	897b      	ldrh	r3, [r7, #10]
 80053ea:	11db      	asrs	r3, r3, #7
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 0306 	and.w	r3, r3, #6
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f063 030f 	orn	r3, r3, #15
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	490e      	ldr	r1, [pc, #56]	@ (8005440 <I2C_MasterRequestWrite+0xfc>)
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa4e 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e010      	b.n	8005438 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4907      	ldr	r1, [pc, #28]	@ (8005444 <I2C_MasterRequestWrite+0x100>)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fa3e 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	00010008 	.word	0x00010008
 8005444:	00010002 	.word	0x00010002

08005448 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800546c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d006      	beq.n	8005482 <I2C_MasterRequestRead+0x3a>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d003      	beq.n	8005482 <I2C_MasterRequestRead+0x3a>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005480:	d108      	bne.n	8005494 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e00b      	b.n	80054ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	2b11      	cmp	r3, #17
 800549a:	d107      	bne.n	80054ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f97b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054d2:	d103      	bne.n	80054dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e079      	b.n	80055d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054e8:	d108      	bne.n	80054fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	611a      	str	r2, [r3, #16]
 80054fa:	e05f      	b.n	80055bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054fc:	897b      	ldrh	r3, [r7, #10]
 80054fe:	11db      	asrs	r3, r3, #7
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0306 	and.w	r3, r3, #6
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f063 030f 	orn	r3, r3, #15
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4930      	ldr	r1, [pc, #192]	@ (80055dc <I2C_MasterRequestRead+0x194>)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f9c4 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e054      	b.n	80055d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800552a:	897b      	ldrh	r3, [r7, #10]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4929      	ldr	r1, [pc, #164]	@ (80055e0 <I2C_MasterRequestRead+0x198>)
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f9b4 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e044      	b.n	80055d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800556e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f919 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005596:	d103      	bne.n	80055a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800559e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e017      	b.n	80055d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	11db      	asrs	r3, r3, #7
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0306 	and.w	r3, r3, #6
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f063 030e 	orn	r3, r3, #14
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4907      	ldr	r1, [pc, #28]	@ (80055e0 <I2C_MasterRequestRead+0x198>)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f970 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	00010008 	.word	0x00010008
 80055e0:	00010002 	.word	0x00010002

080055e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800560c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800561c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2200      	movs	r2, #0
 8005626:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8c2 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005644:	d103      	bne.n	800564e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0aa      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	4952      	ldr	r1, [pc, #328]	@ (80057b0 <I2C_RequestMemoryRead+0x1cc>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f91d 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e097      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f9a8 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d107      	bne.n	80056b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e076      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	e021      	b.n	8005710 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056dc:	6a39      	ldr	r1, [r7, #32]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f982 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d107      	bne.n	8005702 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e050      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005706:	893b      	ldrh	r3, [r7, #8]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005712:	6a39      	ldr	r1, [r7, #32]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f967 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	2b04      	cmp	r3, #4
 8005726:	d107      	bne.n	8005738 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005736:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e035      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800574a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2200      	movs	r2, #0
 8005754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f82b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005772:	d103      	bne.n	800577c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800577a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e013      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	4906      	ldr	r1, [pc, #24]	@ (80057b0 <I2C_RequestMemoryRead+0x1cc>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f886 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010002 	.word	0x00010002

080057b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c4:	e048      	b.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d044      	beq.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ce:	f011 f8e3 	bl	8016998 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d139      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10d      	bne.n	800580a <I2C_WaitOnFlagUntilTimeout+0x56>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	43da      	mvns	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	e00c      	b.n	8005824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	43da      	mvns	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d116      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e023      	b.n	80058a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10d      	bne.n	800587e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	43da      	mvns	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	e00c      	b.n	8005898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d093      	beq.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b6:	e071      	b.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c6:	d123      	bne.n	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e067      	b.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d041      	beq.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f011 f83e 	bl	8016998 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d136      	bne.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	0c1b      	lsrs	r3, r3, #16
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10c      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	43da      	mvns	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e00b      	b.n	800596a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	43da      	mvns	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e021      	b.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0c1b      	lsrs	r3, r3, #16
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10c      	bne.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e00b      	b.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	43da      	mvns	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f af6d 	bne.w	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f4:	e034      	b.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f8e3 	bl	8005bc2 <I2C_IsAcknowledgeFailed>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e034      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d028      	beq.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f010 ffc3 	bl	8016998 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11d      	bne.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d016      	beq.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e007      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d1c3      	bne.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a84:	e034      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f89b 	bl	8005bc2 <I2C_IsAcknowledgeFailed>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d028      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f010 ff7b 	bl	8016998 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11d      	bne.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d016      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d1c3      	bne.n	8005a86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	e049      	b.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d119      	bne.n	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e030      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f010 ff1e 	bl	8016998 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11d      	bne.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d016      	beq.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e007      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d1ae      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd8:	d11b      	bne.n	8005c12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005be2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f043 0204 	orr.w	r2, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d129      	bne.n	8005c8a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2224      	movs	r2, #36	@ 0x24
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0210 	bic.w	r2, r2, #16
 8005c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d12a      	bne.n	8005d08 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2224      	movs	r2, #36	@ 0x24
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cd2:	89fb      	ldrh	r3, [r7, #14]
 8005cd4:	f023 030f 	bic.w	r3, r3, #15
 8005cd8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	89fa      	ldrh	r2, [r7, #14]
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	603b      	str	r3, [r7, #0]
 8005d26:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d32:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dac <HAL_PWREx_EnableOverDrive+0x94>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d44:	f010 fe28 	bl	8016998 <HAL_GetTick>
 8005d48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d4a:	e009      	b.n	8005d60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d4c:	f010 fe24 	bl	8016998 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d5a:	d901      	bls.n	8005d60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e01f      	b.n	8005da0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d60:	4b13      	ldr	r3, [pc, #76]	@ (8005db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d1ee      	bne.n	8005d4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d6e:	4b11      	ldr	r3, [pc, #68]	@ (8005db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d74:	f010 fe10 	bl	8016998 <HAL_GetTick>
 8005d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d7a:	e009      	b.n	8005d90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d7c:	f010 fe0c 	bl	8016998 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d8a:	d901      	bls.n	8005d90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e007      	b.n	8005da0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9c:	d1ee      	bne.n	8005d7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	420e0040 	.word	0x420e0040
 8005db0:	40007000 	.word	0x40007000
 8005db4:	420e0044 	.word	0x420e0044

08005db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e267      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d075      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dd6:	4b88      	ldr	r3, [pc, #544]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d00c      	beq.n	8005dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de2:	4b85      	ldr	r3, [pc, #532]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d112      	bne.n	8005e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dee:	4b82      	ldr	r3, [pc, #520]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dfa:	d10b      	bne.n	8005e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05b      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x108>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d157      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e242      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1c:	d106      	bne.n	8005e2c <HAL_RCC_OscConfig+0x74>
 8005e1e:	4b76      	ldr	r3, [pc, #472]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a75      	ldr	r2, [pc, #468]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e01d      	b.n	8005e68 <HAL_RCC_OscConfig+0xb0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x98>
 8005e36:	4b70      	ldr	r3, [pc, #448]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4b6d      	ldr	r3, [pc, #436]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6c      	ldr	r2, [pc, #432]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCC_OscConfig+0xb0>
 8005e50:	4b69      	ldr	r3, [pc, #420]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a68      	ldr	r2, [pc, #416]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	4b66      	ldr	r3, [pc, #408]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a65      	ldr	r2, [pc, #404]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f010 fd92 	bl	8016998 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f010 fd8e 	bl	8016998 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	@ 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e207      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0xc0>
 8005e96:	e014      	b.n	8005ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f010 fd7e 	bl	8016998 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f010 fd7a 	bl	8016998 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	@ 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e1f3      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb2:	4b51      	ldr	r3, [pc, #324]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0xe8>
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d063      	beq.n	8005f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ece:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eda:	4b47      	ldr	r3, [pc, #284]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d11c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ee6:	4b44      	ldr	r3, [pc, #272]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef2:	4b41      	ldr	r3, [pc, #260]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_RCC_OscConfig+0x152>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d001      	beq.n	8005f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e1c7      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4937      	ldr	r1, [pc, #220]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1e:	e03a      	b.n	8005f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f28:	4b34      	ldr	r3, [pc, #208]	@ (8005ffc <HAL_RCC_OscConfig+0x244>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2e:	f010 fd33 	bl	8016998 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f36:	f010 fd2f 	bl	8016998 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1a8      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f48:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0f0      	beq.n	8005f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f54:	4b28      	ldr	r3, [pc, #160]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4925      	ldr	r1, [pc, #148]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
 8005f68:	e015      	b.n	8005f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6a:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <HAL_RCC_OscConfig+0x244>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f010 fd12 	bl	8016998 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f78:	f010 fd0e 	bl	8016998 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e187      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d036      	beq.n	8006010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <HAL_RCC_OscConfig+0x248>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f010 fcf2 	bl	8016998 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb8:	f010 fcee 	bl	8016998 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e167      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x200>
 8005fd6:	e01b      	b.n	8006010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_RCC_OscConfig+0x248>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fde:	f010 fcdb 	bl	8016998 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe4:	e00e      	b.n	8006004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe6:	f010 fcd7 	bl	8016998 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d907      	bls.n	8006004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e150      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	42470000 	.word	0x42470000
 8006000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006004:	4b88      	ldr	r3, [pc, #544]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1ea      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8097 	beq.w	800614c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006022:	4b81      	ldr	r3, [pc, #516]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	4b7d      	ldr	r3, [pc, #500]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	4a7c      	ldr	r2, [pc, #496]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800603c:	6413      	str	r3, [r2, #64]	@ 0x40
 800603e:	4b7a      	ldr	r3, [pc, #488]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b77      	ldr	r3, [pc, #476]	@ (800622c <HAL_RCC_OscConfig+0x474>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d118      	bne.n	800608c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b74      	ldr	r3, [pc, #464]	@ (800622c <HAL_RCC_OscConfig+0x474>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a73      	ldr	r2, [pc, #460]	@ (800622c <HAL_RCC_OscConfig+0x474>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f010 fc97 	bl	8016998 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f010 fc93 	bl	8016998 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e10c      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4b6a      	ldr	r3, [pc, #424]	@ (800622c <HAL_RCC_OscConfig+0x474>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x2ea>
 8006094:	4b64      	ldr	r3, [pc, #400]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006098:	4a63      	ldr	r2, [pc, #396]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a0:	e01c      	b.n	80060dc <HAL_RCC_OscConfig+0x324>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b05      	cmp	r3, #5
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x30c>
 80060aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060b0:	f043 0304 	orr.w	r3, r3, #4
 80060b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c2:	e00b      	b.n	80060dc <HAL_RCC_OscConfig+0x324>
 80060c4:	4b58      	ldr	r3, [pc, #352]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a57      	ldr	r2, [pc, #348]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d0:	4b55      	ldr	r3, [pc, #340]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a54      	ldr	r2, [pc, #336]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80060d6:	f023 0304 	bic.w	r3, r3, #4
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d015      	beq.n	8006110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f010 fc58 	bl	8016998 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ea:	e00a      	b.n	8006102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ec:	f010 fc54 	bl	8016998 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e0cb      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	4b49      	ldr	r3, [pc, #292]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ee      	beq.n	80060ec <HAL_RCC_OscConfig+0x334>
 800610e:	e014      	b.n	800613a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006110:	f010 fc42 	bl	8016998 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006116:	e00a      	b.n	800612e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006118:	f010 fc3e 	bl	8016998 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e0b5      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612e:	4b3e      	ldr	r3, [pc, #248]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ee      	bne.n	8006118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d105      	bne.n	800614c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006140:	4b39      	ldr	r3, [pc, #228]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	4a38      	ldr	r2, [pc, #224]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800614a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a1 	beq.w	8006298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006156:	4b34      	ldr	r3, [pc, #208]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b08      	cmp	r3, #8
 8006160:	d05c      	beq.n	800621c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d141      	bne.n	80061ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616a:	4b31      	ldr	r3, [pc, #196]	@ (8006230 <HAL_RCC_OscConfig+0x478>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f010 fc12 	bl	8016998 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006178:	f010 fc0e 	bl	8016998 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e087      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618a:	4b27      	ldr	r3, [pc, #156]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69da      	ldr	r2, [r3, #28]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	019b      	lsls	r3, r3, #6
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	3b01      	subs	r3, #1
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	491b      	ldr	r1, [pc, #108]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006230 <HAL_RCC_OscConfig+0x478>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f010 fbe7 	bl	8016998 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ce:	f010 fbe3 	bl	8016998 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e05c      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e0:	4b11      	ldr	r3, [pc, #68]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x416>
 80061ec:	e054      	b.n	8006298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ee:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <HAL_RCC_OscConfig+0x478>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f4:	f010 fbd0 	bl	8016998 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061fc:	f010 fbcc 	bl	8016998 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e045      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <HAL_RCC_OscConfig+0x470>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <HAL_RCC_OscConfig+0x444>
 800621a:	e03d      	b.n	8006298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d107      	bne.n	8006234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e038      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
 8006228:	40023800 	.word	0x40023800
 800622c:	40007000 	.word	0x40007000
 8006230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006234:	4b1b      	ldr	r3, [pc, #108]	@ (80062a4 <HAL_RCC_OscConfig+0x4ec>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d028      	beq.n	8006294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624c:	429a      	cmp	r2, r3
 800624e:	d121      	bne.n	8006294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800625a:	429a      	cmp	r2, r3
 800625c:	d11a      	bne.n	8006294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006264:	4013      	ands	r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800626a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800626c:	4293      	cmp	r3, r2
 800626e:	d111      	bne.n	8006294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	3b01      	subs	r3, #1
 800627e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006280:	429a      	cmp	r2, r3
 8006282:	d107      	bne.n	8006294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800

080062a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0cc      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062bc:	4b68      	ldr	r3, [pc, #416]	@ (8006460 <HAL_RCC_ClockConfig+0x1b8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d90c      	bls.n	80062e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b65      	ldr	r3, [pc, #404]	@ (8006460 <HAL_RCC_ClockConfig+0x1b8>)
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b63      	ldr	r3, [pc, #396]	@ (8006460 <HAL_RCC_ClockConfig+0x1b8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0b8      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d020      	beq.n	8006332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062fc:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4a58      	ldr	r2, [pc, #352]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006314:	4b53      	ldr	r3, [pc, #332]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4a52      	ldr	r2, [pc, #328]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800631e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006320:	4b50      	ldr	r3, [pc, #320]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	494d      	ldr	r1, [pc, #308]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	4313      	orrs	r3, r2
 8006330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d044      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006346:	4b47      	ldr	r3, [pc, #284]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d119      	bne.n	8006386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e07f      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d003      	beq.n	8006366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006362:	2b03      	cmp	r3, #3
 8006364:	d107      	bne.n	8006376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006366:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e06f      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006376:	4b3b      	ldr	r3, [pc, #236]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e067      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006386:	4b37      	ldr	r3, [pc, #220]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f023 0203 	bic.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4934      	ldr	r1, [pc, #208]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	4313      	orrs	r3, r2
 8006396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006398:	f010 fafe 	bl	8016998 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a0:	f010 fafa 	bl	8016998 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e04f      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 020c 	and.w	r2, r3, #12
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d1eb      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063c8:	4b25      	ldr	r3, [pc, #148]	@ (8006460 <HAL_RCC_ClockConfig+0x1b8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d20c      	bcs.n	80063f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b22      	ldr	r3, [pc, #136]	@ (8006460 <HAL_RCC_ClockConfig+0x1b8>)
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063de:	4b20      	ldr	r3, [pc, #128]	@ (8006460 <HAL_RCC_ClockConfig+0x1b8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e032      	b.n	8006456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063fc:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4916      	ldr	r1, [pc, #88]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800641a:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	490e      	ldr	r1, [pc, #56]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800642e:	f000 f821 	bl	8006474 <HAL_RCC_GetSysClockFreq>
 8006432:	4602      	mov	r2, r0
 8006434:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	490a      	ldr	r1, [pc, #40]	@ (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 8006440:	5ccb      	ldrb	r3, [r1, r3]
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	4a09      	ldr	r2, [pc, #36]	@ (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800644a:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <HAL_RCC_ClockConfig+0x1c8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fc f95e 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40023c00 	.word	0x40023c00
 8006464:	40023800 	.word	0x40023800
 8006468:	0801e334 	.word	0x0801e334
 800646c:	20000000 	.word	0x20000000
 8006470:	20000004 	.word	0x20000004

08006474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006478:	b094      	sub	sp, #80	@ 0x50
 800647a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006480:	2300      	movs	r3, #0
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006484:	2300      	movs	r3, #0
 8006486:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800648c:	4b79      	ldr	r3, [pc, #484]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x200>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 030c 	and.w	r3, r3, #12
 8006494:	2b08      	cmp	r3, #8
 8006496:	d00d      	beq.n	80064b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006498:	2b08      	cmp	r3, #8
 800649a:	f200 80e1 	bhi.w	8006660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0x34>
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0x3a>
 80064a6:	e0db      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064a8:	4b73      	ldr	r3, [pc, #460]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x204>)
 80064aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80064ac:	e0db      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ae:	4b73      	ldr	r3, [pc, #460]	@ (800667c <HAL_RCC_GetSysClockFreq+0x208>)
 80064b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064b2:	e0d8      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064be:	4b6d      	ldr	r3, [pc, #436]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x200>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x200>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	099b      	lsrs	r3, r3, #6
 80064d0:	2200      	movs	r2, #0
 80064d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80064de:	2300      	movs	r3, #0
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	f04f 0000 	mov.w	r0, #0
 80064ee:	f04f 0100 	mov.w	r1, #0
 80064f2:	0159      	lsls	r1, r3, #5
 80064f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f8:	0150      	lsls	r0, r2, #5
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4621      	mov	r1, r4
 8006500:	1a51      	subs	r1, r2, r1
 8006502:	6139      	str	r1, [r7, #16]
 8006504:	4629      	mov	r1, r5
 8006506:	eb63 0301 	sbc.w	r3, r3, r1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006518:	4659      	mov	r1, fp
 800651a:	018b      	lsls	r3, r1, #6
 800651c:	4651      	mov	r1, sl
 800651e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006522:	4651      	mov	r1, sl
 8006524:	018a      	lsls	r2, r1, #6
 8006526:	4651      	mov	r1, sl
 8006528:	ebb2 0801 	subs.w	r8, r2, r1
 800652c:	4659      	mov	r1, fp
 800652e:	eb63 0901 	sbc.w	r9, r3, r1
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800653e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006546:	4690      	mov	r8, r2
 8006548:	4699      	mov	r9, r3
 800654a:	4623      	mov	r3, r4
 800654c:	eb18 0303 	adds.w	r3, r8, r3
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	462b      	mov	r3, r5
 8006554:	eb49 0303 	adc.w	r3, r9, r3
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006566:	4629      	mov	r1, r5
 8006568:	024b      	lsls	r3, r1, #9
 800656a:	4621      	mov	r1, r4
 800656c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006570:	4621      	mov	r1, r4
 8006572:	024a      	lsls	r2, r1, #9
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657a:	2200      	movs	r2, #0
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800657e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006584:	f7fa fb90 	bl	8000ca8 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4613      	mov	r3, r2
 800658e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006590:	e058      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006592:	4b38      	ldr	r3, [pc, #224]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x200>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	2200      	movs	r2, #0
 800659a:	4618      	mov	r0, r3
 800659c:	4611      	mov	r1, r2
 800659e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065a2:	623b      	str	r3, [r7, #32]
 80065a4:	2300      	movs	r3, #0
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065ac:	4642      	mov	r2, r8
 80065ae:	464b      	mov	r3, r9
 80065b0:	f04f 0000 	mov.w	r0, #0
 80065b4:	f04f 0100 	mov.w	r1, #0
 80065b8:	0159      	lsls	r1, r3, #5
 80065ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065be:	0150      	lsls	r0, r2, #5
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4641      	mov	r1, r8
 80065c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80065ca:	4649      	mov	r1, r9
 80065cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065e4:	ebb2 040a 	subs.w	r4, r2, sl
 80065e8:	eb63 050b 	sbc.w	r5, r3, fp
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	00eb      	lsls	r3, r5, #3
 80065f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065fa:	00e2      	lsls	r2, r4, #3
 80065fc:	4614      	mov	r4, r2
 80065fe:	461d      	mov	r5, r3
 8006600:	4643      	mov	r3, r8
 8006602:	18e3      	adds	r3, r4, r3
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	464b      	mov	r3, r9
 8006608:	eb45 0303 	adc.w	r3, r5, r3
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800661a:	4629      	mov	r1, r5
 800661c:	028b      	lsls	r3, r1, #10
 800661e:	4621      	mov	r1, r4
 8006620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006624:	4621      	mov	r1, r4
 8006626:	028a      	lsls	r2, r1, #10
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662e:	2200      	movs	r2, #0
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	61fa      	str	r2, [r7, #28]
 8006634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006638:	f7fa fb36 	bl	8000ca8 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4613      	mov	r3, r2
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006644:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x200>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	0c1b      	lsrs	r3, r3, #16
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	3301      	adds	r3, #1
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006654:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800665e:	e002      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b05      	ldr	r3, [pc, #20]	@ (8006678 <HAL_RCC_GetSysClockFreq+0x204>)
 8006662:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006668:	4618      	mov	r0, r3
 800666a:	3750      	adds	r7, #80	@ 0x50
 800666c:	46bd      	mov	sp, r7
 800666e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006672:	bf00      	nop
 8006674:	40023800 	.word	0x40023800
 8006678:	00f42400 	.word	0x00f42400
 800667c:	007a1200 	.word	0x007a1200

08006680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006684:	4b03      	ldr	r3, [pc, #12]	@ (8006694 <HAL_RCC_GetHCLKFreq+0x14>)
 8006686:	681b      	ldr	r3, [r3, #0]
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000000 	.word	0x20000000

08006698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800669c:	f7ff fff0 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0a9b      	lsrs	r3, r3, #10
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4903      	ldr	r1, [pc, #12]	@ (80066bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	0801e344 	.word	0x0801e344

080066c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066c4:	f7ff ffdc 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0b5b      	lsrs	r3, r3, #13
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	@ (80066e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	0801e344 	.word	0x0801e344

080066e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e07b      	b.n	80067f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d108      	bne.n	8006714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800670a:	d009      	beq.n	8006720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	61da      	str	r2, [r3, #28]
 8006712:	e005      	b.n	8006720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fb f896 	bl	800186c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a4:	ea42 0103 	orr.w	r1, r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	0c1b      	lsrs	r3, r3, #16
 80067be:	f003 0104 	and.w	r1, r3, #4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	f003 0210 	and.w	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b088      	sub	sp, #32
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_SPI_Transmit+0x22>
 8006818:	2302      	movs	r3, #2
 800681a:	e12d      	b.n	8006a78 <HAL_SPI_Transmit+0x27e>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006824:	f010 f8b8 	bl	8016998 <HAL_GetTick>
 8006828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	d002      	beq.n	8006840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800683a:	2302      	movs	r3, #2
 800683c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800683e:	e116      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_SPI_Transmit+0x52>
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d102      	bne.n	8006852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006850:	e10d      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2203      	movs	r2, #3
 8006856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006898:	d10f      	bne.n	80068ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c4:	2b40      	cmp	r3, #64	@ 0x40
 80068c6:	d007      	beq.n	80068d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e0:	d14f      	bne.n	8006982 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_Transmit+0xf6>
 80068ea:	8afb      	ldrh	r3, [r7, #22]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d142      	bne.n	8006976 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	1c9a      	adds	r2, r3, #2
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006914:	e02f      	b.n	8006976 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d112      	bne.n	800694a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006934:	1c9a      	adds	r2, r3, #2
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006948:	e015      	b.n	8006976 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800694a:	f010 f825 	bl	8016998 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d803      	bhi.n	8006962 <HAL_SPI_Transmit+0x168>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d102      	bne.n	8006968 <HAL_SPI_Transmit+0x16e>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006974:	e07b      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ca      	bne.n	8006916 <HAL_SPI_Transmit+0x11c>
 8006980:	e050      	b.n	8006a24 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x196>
 800698a:	8afb      	ldrh	r3, [r7, #22]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d144      	bne.n	8006a1a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069b6:	e030      	b.n	8006a1a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d113      	bne.n	80069ee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069ec:	e015      	b.n	8006a1a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ee:	f00f ffd3 	bl	8016998 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d803      	bhi.n	8006a06 <HAL_SPI_Transmit+0x20c>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_Transmit+0x212>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006a18:	e029      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1c9      	bne.n	80069b8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f8b1 	bl	8006b90 <SPI_EndRxTxTransaction>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e003      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a90:	f00f ff82 	bl	8016998 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006aa0:	f00f ff7a 	bl	8016998 <HAL_GetTick>
 8006aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aa6:	4b39      	ldr	r3, [pc, #228]	@ (8006b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	015b      	lsls	r3, r3, #5
 8006aac:	0d1b      	lsrs	r3, r3, #20
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab6:	e054      	b.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d050      	beq.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ac0:	f00f ff6a 	bl	8016998 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d902      	bls.n	8006ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d13d      	bne.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aee:	d111      	bne.n	8006b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006af8:	d004      	beq.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b02:	d107      	bne.n	8006b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b1c:	d10f      	bne.n	8006b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e017      	b.n	8006b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d19b      	bne.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000000 	.word	0x20000000

08006b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff ff6a 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e032      	b.n	8006c28 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <SPI_EndRxTxTransaction+0xa0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c34 <SPI_EndRxTxTransaction+0xa4>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	0d5b      	lsrs	r3, r3, #21
 8006bce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006be0:	d112      	bne.n	8006c08 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	2180      	movs	r1, #128	@ 0x80
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff ff47 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d016      	beq.n	8006c26 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e00f      	b.n	8006c28 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1e:	2b80      	cmp	r3, #128	@ 0x80
 8006c20:	d0f2      	beq.n	8006c08 <SPI_EndRxTxTransaction+0x78>
 8006c22:	e000      	b.n	8006c26 <SPI_EndRxTxTransaction+0x96>
        break;
 8006c24:	bf00      	nop
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000000 	.word	0x20000000
 8006c34:	165e9f81 	.word	0x165e9f81

08006c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e041      	b.n	8006cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fb faa4 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f000 fe8c 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d001      	beq.n	8006cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e04e      	b.n	8006d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a23      	ldr	r2, [pc, #140]	@ (8006d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d022      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1a:	d01d      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1f      	ldr	r2, [pc, #124]	@ (8006da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d018      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	@ (8006da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dac <HAL_TIM_Base_Start_IT+0xd4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a19      	ldr	r2, [pc, #100]	@ (8006db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x80>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a18      	ldr	r2, [pc, #96]	@ (8006db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d111      	bne.n	8006d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d010      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0201 	orr.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7a:	e007      	b.n	8006d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40001800 	.word	0x40001800

08006db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e041      	b.n	8006e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fb f8fe 	bl	8001fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f000 fdcc 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d109      	bne.n	8006e7c <HAL_TIM_PWM_Start+0x24>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	bf14      	ite	ne
 8006e74:	2301      	movne	r3, #1
 8006e76:	2300      	moveq	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	e022      	b.n	8006ec2 <HAL_TIM_PWM_Start+0x6a>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d109      	bne.n	8006e96 <HAL_TIM_PWM_Start+0x3e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	bf14      	ite	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	2300      	moveq	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	e015      	b.n	8006ec2 <HAL_TIM_PWM_Start+0x6a>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d109      	bne.n	8006eb0 <HAL_TIM_PWM_Start+0x58>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	e008      	b.n	8006ec2 <HAL_TIM_PWM_Start+0x6a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e07c      	b.n	8006fc4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <HAL_TIM_PWM_Start+0x82>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ed8:	e013      	b.n	8006f02 <HAL_TIM_PWM_Start+0xaa>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_PWM_Start+0x92>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee8:	e00b      	b.n	8006f02 <HAL_TIM_PWM_Start+0xaa>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_PWM_Start+0xa2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef8:	e003      	b.n	8006f02 <HAL_TIM_PWM_Start+0xaa>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2201      	movs	r2, #1
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f8c8 	bl	80080a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	@ (8006fcc <HAL_TIM_PWM_Start+0x174>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_TIM_PWM_Start+0xcc>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd0 <HAL_TIM_PWM_Start+0x178>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d101      	bne.n	8006f28 <HAL_TIM_PWM_Start+0xd0>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_TIM_PWM_Start+0xd2>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a22      	ldr	r2, [pc, #136]	@ (8006fcc <HAL_TIM_PWM_Start+0x174>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d022      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f50:	d01d      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd4 <HAL_TIM_PWM_Start+0x17c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d018      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <HAL_TIM_PWM_Start+0x180>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fdc <HAL_TIM_PWM_Start+0x184>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00e      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <HAL_TIM_PWM_Start+0x178>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d009      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a18      	ldr	r2, [pc, #96]	@ (8006fe0 <HAL_TIM_PWM_Start+0x188>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d004      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x136>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a16      	ldr	r2, [pc, #88]	@ (8006fe4 <HAL_TIM_PWM_Start+0x18c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d111      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b06      	cmp	r3, #6
 8006f9e:	d010      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb0:	e007      	b.n	8006fc2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800
 8006fdc:	40000c00 	.word	0x40000c00
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40001800 	.word	0x40001800

08006fe8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e041      	b.n	800707e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fb f81e 	bl	8002050 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3304      	adds	r3, #4
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f000 fcb4 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_IC_Start_IT+0x1e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	e013      	b.n	80070ce <HAL_TIM_IC_Start_IT+0x46>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_IC_Start_IT+0x2e>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	e00b      	b.n	80070ce <HAL_TIM_IC_Start_IT+0x46>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_IC_Start_IT+0x3e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	e003      	b.n	80070ce <HAL_TIM_IC_Start_IT+0x46>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d104      	bne.n	80070e0 <HAL_TIM_IC_Start_IT+0x58>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	e013      	b.n	8007108 <HAL_TIM_IC_Start_IT+0x80>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d104      	bne.n	80070f0 <HAL_TIM_IC_Start_IT+0x68>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	e00b      	b.n	8007108 <HAL_TIM_IC_Start_IT+0x80>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d104      	bne.n	8007100 <HAL_TIM_IC_Start_IT+0x78>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	e003      	b.n	8007108 <HAL_TIM_IC_Start_IT+0x80>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007106:	b2db      	uxtb	r3, r3
 8007108:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d102      	bne.n	8007116 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007110:	7b7b      	ldrb	r3, [r7, #13]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d001      	beq.n	800711a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e0cc      	b.n	80072b4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <HAL_TIM_IC_Start_IT+0xa2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007128:	e013      	b.n	8007152 <HAL_TIM_IC_Start_IT+0xca>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b04      	cmp	r3, #4
 800712e:	d104      	bne.n	800713a <HAL_TIM_IC_Start_IT+0xb2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007138:	e00b      	b.n	8007152 <HAL_TIM_IC_Start_IT+0xca>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d104      	bne.n	800714a <HAL_TIM_IC_Start_IT+0xc2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007148:	e003      	b.n	8007152 <HAL_TIM_IC_Start_IT+0xca>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <HAL_TIM_IC_Start_IT+0xda>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007160:	e013      	b.n	800718a <HAL_TIM_IC_Start_IT+0x102>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d104      	bne.n	8007172 <HAL_TIM_IC_Start_IT+0xea>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007170:	e00b      	b.n	800718a <HAL_TIM_IC_Start_IT+0x102>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b08      	cmp	r3, #8
 8007176:	d104      	bne.n	8007182 <HAL_TIM_IC_Start_IT+0xfa>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007180:	e003      	b.n	800718a <HAL_TIM_IC_Start_IT+0x102>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b0c      	cmp	r3, #12
 800718e:	d841      	bhi.n	8007214 <HAL_TIM_IC_Start_IT+0x18c>
 8007190:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <HAL_TIM_IC_Start_IT+0x110>)
 8007192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007196:	bf00      	nop
 8007198:	080071cd 	.word	0x080071cd
 800719c:	08007215 	.word	0x08007215
 80071a0:	08007215 	.word	0x08007215
 80071a4:	08007215 	.word	0x08007215
 80071a8:	080071df 	.word	0x080071df
 80071ac:	08007215 	.word	0x08007215
 80071b0:	08007215 	.word	0x08007215
 80071b4:	08007215 	.word	0x08007215
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	08007215 	.word	0x08007215
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007215 	.word	0x08007215
 80071c8:	08007203 	.word	0x08007203
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0202 	orr.w	r2, r2, #2
 80071da:	60da      	str	r2, [r3, #12]
      break;
 80071dc:	e01d      	b.n	800721a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0204 	orr.w	r2, r2, #4
 80071ec:	60da      	str	r2, [r3, #12]
      break;
 80071ee:	e014      	b.n	800721a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0208 	orr.w	r2, r2, #8
 80071fe:	60da      	str	r2, [r3, #12]
      break;
 8007200:	e00b      	b.n	800721a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0210 	orr.w	r2, r2, #16
 8007210:	60da      	str	r2, [r3, #12]
      break;
 8007212:	e002      	b.n	800721a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	bf00      	nop
  }

  if (status == HAL_OK)
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d148      	bne.n	80072b2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2201      	movs	r2, #1
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 ff39 	bl	80080a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a22      	ldr	r2, [pc, #136]	@ (80072bc <HAL_TIM_IC_Start_IT+0x234>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d022      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007240:	d01d      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1e      	ldr	r2, [pc, #120]	@ (80072c0 <HAL_TIM_IC_Start_IT+0x238>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d018      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1c      	ldr	r2, [pc, #112]	@ (80072c4 <HAL_TIM_IC_Start_IT+0x23c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d013      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <HAL_TIM_IC_Start_IT+0x240>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00e      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a19      	ldr	r2, [pc, #100]	@ (80072cc <HAL_TIM_IC_Start_IT+0x244>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d009      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a18      	ldr	r2, [pc, #96]	@ (80072d0 <HAL_TIM_IC_Start_IT+0x248>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_TIM_IC_Start_IT+0x1f6>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a16      	ldr	r2, [pc, #88]	@ (80072d4 <HAL_TIM_IC_Start_IT+0x24c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d111      	bne.n	80072a2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b06      	cmp	r3, #6
 800728e:	d010      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a0:	e007      	b.n	80072b2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40010400 	.word	0x40010400
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40001800 	.word	0x40001800

080072d8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	d841      	bhi.n	8007370 <HAL_TIM_IC_Stop_IT+0x98>
 80072ec:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <HAL_TIM_IC_Stop_IT+0x1c>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	08007329 	.word	0x08007329
 80072f8:	08007371 	.word	0x08007371
 80072fc:	08007371 	.word	0x08007371
 8007300:	08007371 	.word	0x08007371
 8007304:	0800733b 	.word	0x0800733b
 8007308:	08007371 	.word	0x08007371
 800730c:	08007371 	.word	0x08007371
 8007310:	08007371 	.word	0x08007371
 8007314:	0800734d 	.word	0x0800734d
 8007318:	08007371 	.word	0x08007371
 800731c:	08007371 	.word	0x08007371
 8007320:	08007371 	.word	0x08007371
 8007324:	0800735f 	.word	0x0800735f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0202 	bic.w	r2, r2, #2
 8007336:	60da      	str	r2, [r3, #12]
      break;
 8007338:	e01d      	b.n	8007376 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0204 	bic.w	r2, r2, #4
 8007348:	60da      	str	r2, [r3, #12]
      break;
 800734a:	e014      	b.n	8007376 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0208 	bic.w	r2, r2, #8
 800735a:	60da      	str	r2, [r3, #12]
      break;
 800735c:	e00b      	b.n	8007376 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0210 	bic.w	r2, r2, #16
 800736c:	60da      	str	r2, [r3, #12]
      break;
 800736e:	e002      	b.n	8007376 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
      break;
 8007374:	bf00      	nop
  }

  if (status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d156      	bne.n	800742a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2200      	movs	r2, #0
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fe8b 	bl	80080a0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1a      	ldr	r2, [r3, #32]
 8007390:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <HAL_TIM_IC_Stop_IT+0xe2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6a1a      	ldr	r2, [r3, #32]
 80073a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d107      	bne.n	80073ba <HAL_TIM_IC_Stop_IT+0xe2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_TIM_IC_Stop_IT+0xf2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c8:	e013      	b.n	80073f2 <HAL_TIM_IC_Stop_IT+0x11a>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d104      	bne.n	80073da <HAL_TIM_IC_Stop_IT+0x102>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073d8:	e00b      	b.n	80073f2 <HAL_TIM_IC_Stop_IT+0x11a>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d104      	bne.n	80073ea <HAL_TIM_IC_Stop_IT+0x112>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073e8:	e003      	b.n	80073f2 <HAL_TIM_IC_Stop_IT+0x11a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_IC_Stop_IT+0x12a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007400:	e013      	b.n	800742a <HAL_TIM_IC_Stop_IT+0x152>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d104      	bne.n	8007412 <HAL_TIM_IC_Stop_IT+0x13a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007410:	e00b      	b.n	800742a <HAL_TIM_IC_Stop_IT+0x152>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d104      	bne.n	8007422 <HAL_TIM_IC_Stop_IT+0x14a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007420:	e003      	b.n	800742a <HAL_TIM_IC_Stop_IT+0x152>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d020      	beq.n	8007498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01b      	beq.n	8007498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0202 	mvn.w	r2, #2
 8007468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f003 f844 	bl	800a50c <HAL_TIM_IC_CaptureCallback>
 8007484:	e005      	b.n	8007492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa66 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fa6d 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d020      	beq.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01b      	beq.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0204 	mvn.w	r2, #4
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f003 f81e 	bl	800a50c <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa40 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa47 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d020      	beq.n	8007530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01b      	beq.n	8007530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0208 	mvn.w	r2, #8
 8007500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2204      	movs	r2, #4
 8007506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f002 fff8 	bl	800a50c <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa1a 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fa21 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b00      	cmp	r3, #0
 8007538:	d020      	beq.n	800757c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01b      	beq.n	800757c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0210 	mvn.w	r2, #16
 800754c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2208      	movs	r2, #8
 8007552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f002 ffd2 	bl	800a50c <HAL_TIM_IC_CaptureCallback>
 8007568:	e005      	b.n	8007576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f9f4 	bl	8007958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f9fb 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0201 	mvn.w	r2, #1
 8007598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fa f8aa 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fe6c 	bl	800829c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9cc 	bl	8007980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00c      	beq.n	800760c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0220 	mvn.w	r2, #32
 8007604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fe3e 	bl	8008288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_TIM_IC_ConfigChannel+0x1e>
 800762e:	2302      	movs	r3, #2
 8007630:	e088      	b.n	8007744 <HAL_TIM_IC_ConfigChannel+0x130>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11b      	bne.n	8007678 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007650:	f000 fbfc 	bl	8007e4c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 020c 	bic.w	r2, r2, #12
 8007662:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6999      	ldr	r1, [r3, #24]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	619a      	str	r2, [r3, #24]
 8007676:	e060      	b.n	800773a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b04      	cmp	r3, #4
 800767c:	d11c      	bne.n	80076b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800768e:	f000 fc51 	bl	8007f34 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699a      	ldr	r2, [r3, #24]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80076a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6999      	ldr	r1, [r3, #24]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	021a      	lsls	r2, r3, #8
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	619a      	str	r2, [r3, #24]
 80076b6:	e040      	b.n	800773a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d11b      	bne.n	80076f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076ce:	f000 fc6e 	bl	8007fae <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 020c 	bic.w	r2, r2, #12
 80076e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69d9      	ldr	r1, [r3, #28]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	61da      	str	r2, [r3, #28]
 80076f4:	e021      	b.n	800773a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b0c      	cmp	r3, #12
 80076fa:	d11c      	bne.n	8007736 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800770c:	f000 fc8b 	bl	8008026 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69da      	ldr	r2, [r3, #28]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800771e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69d9      	ldr	r1, [r3, #28]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	61da      	str	r2, [r3, #28]
 8007734:	e001      	b.n	800773a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007766:	2302      	movs	r3, #2
 8007768:	e0ae      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b0c      	cmp	r3, #12
 8007776:	f200 809f 	bhi.w	80078b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077b5 	.word	0x080077b5
 8007784:	080078b9 	.word	0x080078b9
 8007788:	080078b9 	.word	0x080078b9
 800778c:	080078b9 	.word	0x080078b9
 8007790:	080077f5 	.word	0x080077f5
 8007794:	080078b9 	.word	0x080078b9
 8007798:	080078b9 	.word	0x080078b9
 800779c:	080078b9 	.word	0x080078b9
 80077a0:	08007837 	.word	0x08007837
 80077a4:	080078b9 	.word	0x080078b9
 80077a8:	080078b9 	.word	0x080078b9
 80077ac:	080078b9 	.word	0x080078b9
 80077b0:	08007877 	.word	0x08007877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 f996 	bl	8007aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0208 	orr.w	r2, r2, #8
 80077ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0204 	bic.w	r2, r2, #4
 80077de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6999      	ldr	r1, [r3, #24]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	619a      	str	r2, [r3, #24]
      break;
 80077f2:	e064      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 f9e6 	bl	8007bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800780e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800781e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6999      	ldr	r1, [r3, #24]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	021a      	lsls	r2, r3, #8
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	619a      	str	r2, [r3, #24]
      break;
 8007834:	e043      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fa3b 	bl	8007cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0204 	bic.w	r2, r2, #4
 8007860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	61da      	str	r2, [r3, #28]
      break;
 8007874:	e023      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fa8f 	bl	8007da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69d9      	ldr	r1, [r3, #28]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	021a      	lsls	r2, r3, #8
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	61da      	str	r2, [r3, #28]
      break;
 80078b6:	e002      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b0c      	cmp	r3, #12
 80078e2:	d831      	bhi.n	8007948 <HAL_TIM_ReadCapturedValue+0x78>
 80078e4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007921 	.word	0x08007921
 80078f0:	08007949 	.word	0x08007949
 80078f4:	08007949 	.word	0x08007949
 80078f8:	08007949 	.word	0x08007949
 80078fc:	0800792b 	.word	0x0800792b
 8007900:	08007949 	.word	0x08007949
 8007904:	08007949 	.word	0x08007949
 8007908:	08007949 	.word	0x08007949
 800790c:	08007935 	.word	0x08007935
 8007910:	08007949 	.word	0x08007949
 8007914:	08007949 	.word	0x08007949
 8007918:	08007949 	.word	0x08007949
 800791c:	0800793f 	.word	0x0800793f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007926:	60fb      	str	r3, [r7, #12]

      break;
 8007928:	e00f      	b.n	800794a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007930:	60fb      	str	r3, [r7, #12]

      break;
 8007932:	e00a      	b.n	800794a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793a:	60fb      	str	r3, [r7, #12]

      break;
 800793c:	e005      	b.n	800794a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	60fb      	str	r3, [r7, #12]

      break;
 8007946:	e000      	b.n	800794a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007948:	bf00      	nop
  }

  return tmpreg;
 800794a:	68fb      	ldr	r3, [r7, #12]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a46      	ldr	r2, [pc, #280]	@ (8007ac0 <TIM_Base_SetConfig+0x12c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b2:	d00f      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a43      	ldr	r2, [pc, #268]	@ (8007ac4 <TIM_Base_SetConfig+0x130>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a42      	ldr	r2, [pc, #264]	@ (8007ac8 <TIM_Base_SetConfig+0x134>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a41      	ldr	r2, [pc, #260]	@ (8007acc <TIM_Base_SetConfig+0x138>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a40      	ldr	r2, [pc, #256]	@ (8007ad0 <TIM_Base_SetConfig+0x13c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d108      	bne.n	80079e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a35      	ldr	r2, [pc, #212]	@ (8007ac0 <TIM_Base_SetConfig+0x12c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d02b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f4:	d027      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a32      	ldr	r2, [pc, #200]	@ (8007ac4 <TIM_Base_SetConfig+0x130>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d023      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a31      	ldr	r2, [pc, #196]	@ (8007ac8 <TIM_Base_SetConfig+0x134>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d01f      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a30      	ldr	r2, [pc, #192]	@ (8007acc <TIM_Base_SetConfig+0x138>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d01b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2f      	ldr	r2, [pc, #188]	@ (8007ad0 <TIM_Base_SetConfig+0x13c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d017      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad4 <TIM_Base_SetConfig+0x140>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad8 <TIM_Base_SetConfig+0x144>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00f      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2c      	ldr	r2, [pc, #176]	@ (8007adc <TIM_Base_SetConfig+0x148>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae0 <TIM_Base_SetConfig+0x14c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d007      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae4 <TIM_Base_SetConfig+0x150>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a29      	ldr	r2, [pc, #164]	@ (8007ae8 <TIM_Base_SetConfig+0x154>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d108      	bne.n	8007a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a10      	ldr	r2, [pc, #64]	@ (8007ac0 <TIM_Base_SetConfig+0x12c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0xf8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a12      	ldr	r2, [pc, #72]	@ (8007ad0 <TIM_Base_SetConfig+0x13c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d103      	bne.n	8007a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d105      	bne.n	8007ab2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	611a      	str	r2, [r3, #16]
  }
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	40000c00 	.word	0x40000c00
 8007ad0:	40010400 	.word	0x40010400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800
 8007ae0:	40001800 	.word	0x40001800
 8007ae4:	40001c00 	.word	0x40001c00
 8007ae8:	40002000 	.word	0x40002000

08007aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f023 0201 	bic.w	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 0302 	bic.w	r3, r3, #2
 8007b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a20      	ldr	r2, [pc, #128]	@ (8007bc4 <TIM_OC1_SetConfig+0xd8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC1_SetConfig+0x64>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc8 <TIM_OC1_SetConfig+0xdc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10c      	bne.n	8007b6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0308 	bic.w	r3, r3, #8
 8007b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 0304 	bic.w	r3, r3, #4
 8007b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a15      	ldr	r2, [pc, #84]	@ (8007bc4 <TIM_OC1_SetConfig+0xd8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_OC1_SetConfig+0x8e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a14      	ldr	r2, [pc, #80]	@ (8007bc8 <TIM_OC1_SetConfig+0xdc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d111      	bne.n	8007b9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	621a      	str	r2, [r3, #32]
}
 8007bb8:	bf00      	nop
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40010400 	.word	0x40010400

08007bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	f023 0210 	bic.w	r2, r3, #16
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f023 0320 	bic.w	r3, r3, #32
 8007c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a22      	ldr	r2, [pc, #136]	@ (8007cb0 <TIM_OC2_SetConfig+0xe4>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_OC2_SetConfig+0x68>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a21      	ldr	r2, [pc, #132]	@ (8007cb4 <TIM_OC2_SetConfig+0xe8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d10d      	bne.n	8007c50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	011b      	lsls	r3, r3, #4
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <TIM_OC2_SetConfig+0xe4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_OC2_SetConfig+0x94>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a16      	ldr	r2, [pc, #88]	@ (8007cb4 <TIM_OC2_SetConfig+0xe8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d113      	bne.n	8007c88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	621a      	str	r2, [r3, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0303 	bic.w	r3, r3, #3
 8007cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a21      	ldr	r2, [pc, #132]	@ (8007d98 <TIM_OC3_SetConfig+0xe0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d003      	beq.n	8007d1e <TIM_OC3_SetConfig+0x66>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a20      	ldr	r2, [pc, #128]	@ (8007d9c <TIM_OC3_SetConfig+0xe4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d10d      	bne.n	8007d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a16      	ldr	r2, [pc, #88]	@ (8007d98 <TIM_OC3_SetConfig+0xe0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_OC3_SetConfig+0x92>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a15      	ldr	r2, [pc, #84]	@ (8007d9c <TIM_OC3_SetConfig+0xe4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d113      	bne.n	8007d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	621a      	str	r2, [r3, #32]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	40010000 	.word	0x40010000
 8007d9c:	40010400 	.word	0x40010400

08007da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	031b      	lsls	r3, r3, #12
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a12      	ldr	r2, [pc, #72]	@ (8007e44 <TIM_OC4_SetConfig+0xa4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_OC4_SetConfig+0x68>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a11      	ldr	r2, [pc, #68]	@ (8007e48 <TIM_OC4_SetConfig+0xa8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d109      	bne.n	8007e1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	019b      	lsls	r3, r3, #6
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	621a      	str	r2, [r3, #32]
}
 8007e36:	bf00      	nop
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40010400 	.word	0x40010400

08007e4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	f023 0201 	bic.w	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4a28      	ldr	r2, [pc, #160]	@ (8007f18 <TIM_TI1_SetConfig+0xcc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d01b      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e80:	d017      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4a25      	ldr	r2, [pc, #148]	@ (8007f1c <TIM_TI1_SetConfig+0xd0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4a24      	ldr	r2, [pc, #144]	@ (8007f20 <TIM_TI1_SetConfig+0xd4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00f      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4a23      	ldr	r2, [pc, #140]	@ (8007f24 <TIM_TI1_SetConfig+0xd8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00b      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4a22      	ldr	r2, [pc, #136]	@ (8007f28 <TIM_TI1_SetConfig+0xdc>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d007      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a21      	ldr	r2, [pc, #132]	@ (8007f2c <TIM_TI1_SetConfig+0xe0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d003      	beq.n	8007eb2 <TIM_TI1_SetConfig+0x66>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a20      	ldr	r2, [pc, #128]	@ (8007f30 <TIM_TI1_SetConfig+0xe4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d101      	bne.n	8007eb6 <TIM_TI1_SetConfig+0x6a>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <TIM_TI1_SetConfig+0x6c>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e003      	b.n	8007ed6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f023 030a 	bic.w	r3, r3, #10
 8007ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f003 030a 	and.w	r3, r3, #10
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	40010400 	.word	0x40010400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40001800 	.word	0x40001800

08007f34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	f023 0210 	bic.w	r2, r3, #16
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	031b      	lsls	r3, r3, #12
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b087      	sub	sp, #28
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007ffe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008052:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008064:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	031b      	lsls	r3, r3, #12
 800806a:	b29b      	uxth	r3, r3
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008078:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	031b      	lsls	r3, r3, #12
 800807e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	2201      	movs	r2, #1
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a1a      	ldr	r2, [r3, #32]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	43db      	mvns	r3, r3
 80080c2:	401a      	ands	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a1a      	ldr	r2, [r3, #32]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f003 031f 	and.w	r3, r3, #31
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	fa01 f303 	lsl.w	r3, r1, r3
 80080d8:	431a      	orrs	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008100:	2302      	movs	r3, #2
 8008102:	e05a      	b.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a21      	ldr	r2, [pc, #132]	@ (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d022      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008150:	d01d      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1d      	ldr	r2, [pc, #116]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d018      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a1b      	ldr	r2, [pc, #108]	@ (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d013      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1a      	ldr	r2, [pc, #104]	@ (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00e      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d009      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a17      	ldr	r2, [pc, #92]	@ (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d004      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a15      	ldr	r2, [pc, #84]	@ (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d10c      	bne.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4313      	orrs	r3, r2
 800819e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40001800 	.word	0x40001800

080081e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e03d      	b.n	800827c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e042      	b.n	8008348 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fa f81e 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2224      	movs	r2, #36	@ 0x24
 80082e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fdbd 	bl	8008e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695a      	ldr	r2, [r3, #20]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	@ 0x28
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b20      	cmp	r3, #32
 800836e:	d175      	bne.n	800845c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <HAL_UART_Transmit+0x2c>
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e06e      	b.n	800845e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2221      	movs	r2, #33	@ 0x21
 800838a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800838e:	f00e fb03 	bl	8016998 <HAL_GetTick>
 8008392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083a8:	d108      	bne.n	80083bc <HAL_UART_Transmit+0x6c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e003      	b.n	80083c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083c4:	e02e      	b.n	8008424 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2200      	movs	r2, #0
 80083ce:	2180      	movs	r1, #128	@ 0x80
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fb1f 	bl	8008a14 <UART_WaitOnFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e03a      	b.n	800845e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10b      	bne.n	8008406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	3302      	adds	r3, #2
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e007      	b.n	8008416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	3301      	adds	r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1cb      	bne.n	80083c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2200      	movs	r2, #0
 8008436:	2140      	movs	r1, #64	@ 0x40
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 faeb 	bl	8008a14 <UART_WaitOnFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e006      	b.n	800845e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	e000      	b.n	800845e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3720      	adds	r7, #32
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	4613      	mov	r3, r2
 8008472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b20      	cmp	r3, #32
 800847e:	d112      	bne.n	80084a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <HAL_UART_Receive_IT+0x26>
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e00b      	b.n	80084a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	461a      	mov	r2, r3
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fb12 	bl	8008ac6 <UART_Start_Receive_IT>
 80084a2:	4603      	mov	r3, r0
 80084a4:	e000      	b.n	80084a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80084a6:	2302      	movs	r3, #2
  }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b0ba      	sub	sp, #232	@ 0xe8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10f      	bne.n	8008516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_UART_IRQHandler+0x66>
 8008502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fbf2 	bl	8008cf8 <UART_Receive_IT>
      return;
 8008514:	e25b      	b.n	80089ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80de 	beq.w	80086dc <HAL_UART_IRQHandler+0x22c>
 8008520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008530:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80d1 	beq.w	80086dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <HAL_UART_IRQHandler+0xae>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800854a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008556:	f043 0201 	orr.w	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800855e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <HAL_UART_IRQHandler+0xd2>
 800856a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857a:	f043 0202 	orr.w	r2, r3, #2
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <HAL_UART_IRQHandler+0xf6>
 800858e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	f043 0204 	orr.w	r2, r3, #4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d011      	beq.n	80085d6 <HAL_UART_IRQHandler+0x126>
 80085b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ce:	f043 0208 	orr.w	r2, r3, #8
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 81f2 	beq.w	80089c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <HAL_UART_IRQHandler+0x14e>
 80085ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fb7d 	bl	8008cf8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d103      	bne.n	800862a <HAL_UART_IRQHandler+0x17a>
 8008622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008626:	2b00      	cmp	r3, #0
 8008628:	d04f      	beq.n	80086ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa85 	bl	8008b3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863a:	2b40      	cmp	r3, #64	@ 0x40
 800863c:	d141      	bne.n	80086c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3314      	adds	r3, #20
 8008644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800865c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3314      	adds	r3, #20
 8008666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800866a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800866e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1d9      	bne.n	800863e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008696:	4a7e      	ldr	r2, [pc, #504]	@ (8008890 <HAL_UART_IRQHandler+0x3e0>)
 8008698:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fa fa43 	bl	8002b2a <HAL_DMA_Abort_IT>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d016      	beq.n	80086d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e00e      	b.n	80086d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f994 	bl	80089e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	e00a      	b.n	80086d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f990 	bl	80089e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	e006      	b.n	80086d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f98c 	bl	80089e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086d6:	e175      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	bf00      	nop
    return;
 80086da:	e173      	b.n	80089c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	f040 814f 	bne.w	8008984 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ea:	f003 0310 	and.w	r3, r3, #16
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8148 	beq.w	8008984 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f8:	f003 0310 	and.w	r3, r3, #16
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8141 	beq.w	8008984 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008702:	2300      	movs	r3, #0
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	60bb      	str	r3, [r7, #8]
 8008716:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008722:	2b40      	cmp	r3, #64	@ 0x40
 8008724:	f040 80b6 	bne.w	8008894 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8145 	beq.w	80089c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008746:	429a      	cmp	r2, r3
 8008748:	f080 813e 	bcs.w	80089c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008752:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800875e:	f000 8088 	beq.w	8008872 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800877c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800878e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800879a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1d9      	bne.n	8008762 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e1      	bne.n	80087ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3314      	adds	r3, #20
 80087f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3314      	adds	r3, #20
 800880a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800880e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800881c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e3      	bne.n	80087ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	330c      	adds	r3, #12
 8008836:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008842:	f023 0310 	bic.w	r3, r3, #16
 8008846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008854:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008856:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800885a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e3      	bne.n	8008830 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886c:	4618      	mov	r0, r3
 800886e:	f7fa f8ec 	bl	8002a4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008880:	b29b      	uxth	r3, r3
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	b29b      	uxth	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f8b7 	bl	80089fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800888e:	e09b      	b.n	80089c8 <HAL_UART_IRQHandler+0x518>
 8008890:	08008c01 	.word	0x08008c01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800889c:	b29b      	uxth	r3, r3
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 808e 	beq.w	80089cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80088b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8089 	beq.w	80089cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	330c      	adds	r3, #12
 80088c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80088de:	647a      	str	r2, [r7, #68]	@ 0x44
 80088e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e3      	bne.n	80088ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3314      	adds	r3, #20
 80088f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	623b      	str	r3, [r7, #32]
   return(result);
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	f023 0301 	bic.w	r3, r3, #1
 8008908:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3314      	adds	r3, #20
 8008912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008916:	633a      	str	r2, [r7, #48]	@ 0x30
 8008918:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800891c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e3      	bne.n	80088f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	330c      	adds	r3, #12
 800893e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	60fb      	str	r3, [r7, #12]
   return(result);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0310 	bic.w	r3, r3, #16
 800894e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800895c:	61fa      	str	r2, [r7, #28]
 800895e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	69b9      	ldr	r1, [r7, #24]
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	617b      	str	r3, [r7, #20]
   return(result);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e3      	bne.n	8008938 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f83d 	bl	80089fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008982:	e023      	b.n	80089cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <HAL_UART_IRQHandler+0x4f4>
 8008990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f943 	bl	8008c28 <UART_Transmit_IT>
    return;
 80089a2:	e014      	b.n	80089ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00e      	beq.n	80089ce <HAL_UART_IRQHandler+0x51e>
 80089b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d008      	beq.n	80089ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f983 	bl	8008cc8 <UART_EndTransmit_IT>
    return;
 80089c2:	e004      	b.n	80089ce <HAL_UART_IRQHandler+0x51e>
    return;
 80089c4:	bf00      	nop
 80089c6:	e002      	b.n	80089ce <HAL_UART_IRQHandler+0x51e>
      return;
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <HAL_UART_IRQHandler+0x51e>
      return;
 80089cc:	bf00      	nop
  }
}
 80089ce:	37e8      	adds	r7, #232	@ 0xe8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a24:	e03b      	b.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d037      	beq.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2e:	f00d ffb3 	bl	8016998 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	6a3a      	ldr	r2, [r7, #32]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d302      	bcc.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e03a      	b.n	8008abe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f003 0304 	and.w	r3, r3, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d023      	beq.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b80      	cmp	r3, #128	@ 0x80
 8008a5a:	d020      	beq.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b40      	cmp	r3, #64	@ 0x40
 8008a60:	d01d      	beq.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d116      	bne.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f857 	bl	8008b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2208      	movs	r2, #8
 8008a90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e00f      	b.n	8008abe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	bf0c      	ite	eq
 8008aae:	2301      	moveq	r3, #1
 8008ab0:	2300      	movne	r3, #0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d0b4      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	88fa      	ldrh	r2, [r7, #6]
 8008ade:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2222      	movs	r2, #34	@ 0x22
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0220 	orr.w	r2, r2, #32
 8008b2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b095      	sub	sp, #84	@ 0x54
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	330c      	adds	r3, #12
 8008b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b62:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	f023 0301 	bic.w	r3, r3, #1
 8008b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3314      	adds	r3, #20
 8008b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e5      	bne.n	8008b76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d119      	bne.n	8008be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f023 0310 	bic.w	r3, r3, #16
 8008bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	330c      	adds	r3, #12
 8008bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bd2:	61ba      	str	r2, [r7, #24]
 8008bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6979      	ldr	r1, [r7, #20]
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	613b      	str	r3, [r7, #16]
   return(result);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e5      	bne.n	8008bb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bf4:	bf00      	nop
 8008bf6:	3754      	adds	r7, #84	@ 0x54
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff fee4 	bl	80089e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b21      	cmp	r3, #33	@ 0x21
 8008c3a:	d13e      	bne.n	8008cba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c44:	d114      	bne.n	8008c70 <UART_Transmit_IT+0x48>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d110      	bne.n	8008c70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	621a      	str	r2, [r3, #32]
 8008c6e:	e008      	b.n	8008c82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	1c59      	adds	r1, r3, #1
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6211      	str	r1, [r2, #32]
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10f      	bne.n	8008cb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ca4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e000      	b.n	8008cbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff fe73 	bl	80089d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08c      	sub	sp, #48	@ 0x30
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b22      	cmp	r3, #34	@ 0x22
 8008d0a:	f040 80ae 	bne.w	8008e6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d16:	d117      	bne.n	8008d48 <UART_Receive_IT+0x50>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d113      	bne.n	8008d48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d40:	1c9a      	adds	r2, r3, #2
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d46:	e026      	b.n	8008d96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d5a:	d007      	beq.n	8008d6c <UART_Receive_IT+0x74>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <UART_Receive_IT+0x82>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d106      	bne.n	8008d7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	e008      	b.n	8008d8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4619      	mov	r1, r3
 8008da4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d15d      	bne.n	8008e66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0220 	bic.w	r2, r2, #32
 8008db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695a      	ldr	r2, [r3, #20]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f022 0201 	bic.w	r2, r2, #1
 8008dd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d135      	bne.n	8008e5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	330c      	adds	r3, #12
 8008dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	613b      	str	r3, [r7, #16]
   return(result);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f023 0310 	bic.w	r3, r3, #16
 8008e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	330c      	adds	r3, #12
 8008e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e16:	623a      	str	r2, [r7, #32]
 8008e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	69f9      	ldr	r1, [r7, #28]
 8008e1c:	6a3a      	ldr	r2, [r7, #32]
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e5      	bne.n	8008df6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0310 	and.w	r3, r3, #16
 8008e34:	2b10      	cmp	r3, #16
 8008e36:	d10a      	bne.n	8008e4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fdd1 	bl	80089fc <HAL_UARTEx_RxEventCallback>
 8008e5a:	e002      	b.n	8008e62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f00d f933 	bl	80160c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e002      	b.n	8008e6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e000      	b.n	8008e6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e6a:	2302      	movs	r3, #2
  }
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3730      	adds	r7, #48	@ 0x30
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e78:	b0c0      	sub	sp, #256	@ 0x100
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e90:	68d9      	ldr	r1, [r3, #12]
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	ea40 0301 	orr.w	r3, r0, r1
 8008e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ecc:	f021 010c 	bic.w	r1, r1, #12
 8008ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008eda:	430b      	orrs	r3, r1
 8008edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eee:	6999      	ldr	r1, [r3, #24]
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	ea40 0301 	orr.w	r3, r0, r1
 8008efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b8f      	ldr	r3, [pc, #572]	@ (8009140 <UART_SetConfig+0x2cc>)
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d005      	beq.n	8008f14 <UART_SetConfig+0xa0>
 8008f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b8d      	ldr	r3, [pc, #564]	@ (8009144 <UART_SetConfig+0x2d0>)
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d104      	bne.n	8008f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f14:	f7fd fbd4 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 8008f18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008f1c:	e003      	b.n	8008f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f1e:	f7fd fbbb 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8008f22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f30:	f040 810c 	bne.w	800914c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f46:	4622      	mov	r2, r4
 8008f48:	462b      	mov	r3, r5
 8008f4a:	1891      	adds	r1, r2, r2
 8008f4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f4e:	415b      	adcs	r3, r3
 8008f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f56:	4621      	mov	r1, r4
 8008f58:	eb12 0801 	adds.w	r8, r2, r1
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	eb43 0901 	adc.w	r9, r3, r1
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	f04f 0300 	mov.w	r3, #0
 8008f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f76:	4690      	mov	r8, r2
 8008f78:	4699      	mov	r9, r3
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	eb18 0303 	adds.w	r3, r8, r3
 8008f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f84:	462b      	mov	r3, r5
 8008f86:	eb49 0303 	adc.w	r3, r9, r3
 8008f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	18db      	adds	r3, r3, r3
 8008fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fa8:	4613      	mov	r3, r2
 8008faa:	eb42 0303 	adc.w	r3, r2, r3
 8008fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008fb8:	f7f7 fe76 	bl	8000ca8 <__aeabi_uldivmod>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4b61      	ldr	r3, [pc, #388]	@ (8009148 <UART_SetConfig+0x2d4>)
 8008fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	011c      	lsls	r4, r3, #4
 8008fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	1891      	adds	r1, r2, r2
 8008fe2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008fe4:	415b      	adcs	r3, r3
 8008fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fec:	4641      	mov	r1, r8
 8008fee:	eb12 0a01 	adds.w	sl, r2, r1
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800900c:	4692      	mov	sl, r2
 800900e:	469b      	mov	fp, r3
 8009010:	4643      	mov	r3, r8
 8009012:	eb1a 0303 	adds.w	r3, sl, r3
 8009016:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800901a:	464b      	mov	r3, r9
 800901c:	eb4b 0303 	adc.w	r3, fp, r3
 8009020:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009030:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009038:	460b      	mov	r3, r1
 800903a:	18db      	adds	r3, r3, r3
 800903c:	643b      	str	r3, [r7, #64]	@ 0x40
 800903e:	4613      	mov	r3, r2
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	647b      	str	r3, [r7, #68]	@ 0x44
 8009046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800904a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800904e:	f7f7 fe2b 	bl	8000ca8 <__aeabi_uldivmod>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4611      	mov	r1, r2
 8009058:	4b3b      	ldr	r3, [pc, #236]	@ (8009148 <UART_SetConfig+0x2d4>)
 800905a:	fba3 2301 	umull	r2, r3, r3, r1
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	2264      	movs	r2, #100	@ 0x64
 8009062:	fb02 f303 	mul.w	r3, r2, r3
 8009066:	1acb      	subs	r3, r1, r3
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800906e:	4b36      	ldr	r3, [pc, #216]	@ (8009148 <UART_SetConfig+0x2d4>)
 8009070:	fba3 2302 	umull	r2, r3, r3, r2
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800907c:	441c      	add	r4, r3
 800907e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009082:	2200      	movs	r2, #0
 8009084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009088:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800908c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	1891      	adds	r1, r2, r2
 8009096:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009098:	415b      	adcs	r3, r3
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800909c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80090a0:	4641      	mov	r1, r8
 80090a2:	1851      	adds	r1, r2, r1
 80090a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80090a6:	4649      	mov	r1, r9
 80090a8:	414b      	adcs	r3, r1
 80090aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80090b8:	4659      	mov	r1, fp
 80090ba:	00cb      	lsls	r3, r1, #3
 80090bc:	4651      	mov	r1, sl
 80090be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090c2:	4651      	mov	r1, sl
 80090c4:	00ca      	lsls	r2, r1, #3
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	4603      	mov	r3, r0
 80090cc:	4642      	mov	r2, r8
 80090ce:	189b      	adds	r3, r3, r2
 80090d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090d4:	464b      	mov	r3, r9
 80090d6:	460a      	mov	r2, r1
 80090d8:	eb42 0303 	adc.w	r3, r2, r3
 80090dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80090f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090f4:	460b      	mov	r3, r1
 80090f6:	18db      	adds	r3, r3, r3
 80090f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090fa:	4613      	mov	r3, r2
 80090fc:	eb42 0303 	adc.w	r3, r2, r3
 8009100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800910a:	f7f7 fdcd 	bl	8000ca8 <__aeabi_uldivmod>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <UART_SetConfig+0x2d4>)
 8009114:	fba3 1302 	umull	r1, r3, r3, r2
 8009118:	095b      	lsrs	r3, r3, #5
 800911a:	2164      	movs	r1, #100	@ 0x64
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	3332      	adds	r3, #50	@ 0x32
 8009126:	4a08      	ldr	r2, [pc, #32]	@ (8009148 <UART_SetConfig+0x2d4>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	095b      	lsrs	r3, r3, #5
 800912e:	f003 0207 	and.w	r2, r3, #7
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4422      	add	r2, r4
 800913a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800913c:	e106      	b.n	800934c <UART_SetConfig+0x4d8>
 800913e:	bf00      	nop
 8009140:	40011000 	.word	0x40011000
 8009144:	40011400 	.word	0x40011400
 8009148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800914c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009150:	2200      	movs	r2, #0
 8009152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009156:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800915a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800915e:	4642      	mov	r2, r8
 8009160:	464b      	mov	r3, r9
 8009162:	1891      	adds	r1, r2, r2
 8009164:	6239      	str	r1, [r7, #32]
 8009166:	415b      	adcs	r3, r3
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
 800916a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800916e:	4641      	mov	r1, r8
 8009170:	1854      	adds	r4, r2, r1
 8009172:	4649      	mov	r1, r9
 8009174:	eb43 0501 	adc.w	r5, r3, r1
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	00eb      	lsls	r3, r5, #3
 8009182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009186:	00e2      	lsls	r2, r4, #3
 8009188:	4614      	mov	r4, r2
 800918a:	461d      	mov	r5, r3
 800918c:	4643      	mov	r3, r8
 800918e:	18e3      	adds	r3, r4, r3
 8009190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009194:	464b      	mov	r3, r9
 8009196:	eb45 0303 	adc.w	r3, r5, r3
 800919a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800919e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80091ba:	4629      	mov	r1, r5
 80091bc:	008b      	lsls	r3, r1, #2
 80091be:	4621      	mov	r1, r4
 80091c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091c4:	4621      	mov	r1, r4
 80091c6:	008a      	lsls	r2, r1, #2
 80091c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80091cc:	f7f7 fd6c 	bl	8000ca8 <__aeabi_uldivmod>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4b60      	ldr	r3, [pc, #384]	@ (8009358 <UART_SetConfig+0x4e4>)
 80091d6:	fba3 2302 	umull	r2, r3, r3, r2
 80091da:	095b      	lsrs	r3, r3, #5
 80091dc:	011c      	lsls	r4, r3, #4
 80091de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80091ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80091f0:	4642      	mov	r2, r8
 80091f2:	464b      	mov	r3, r9
 80091f4:	1891      	adds	r1, r2, r2
 80091f6:	61b9      	str	r1, [r7, #24]
 80091f8:	415b      	adcs	r3, r3
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009200:	4641      	mov	r1, r8
 8009202:	1851      	adds	r1, r2, r1
 8009204:	6139      	str	r1, [r7, #16]
 8009206:	4649      	mov	r1, r9
 8009208:	414b      	adcs	r3, r1
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009218:	4659      	mov	r1, fp
 800921a:	00cb      	lsls	r3, r1, #3
 800921c:	4651      	mov	r1, sl
 800921e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009222:	4651      	mov	r1, sl
 8009224:	00ca      	lsls	r2, r1, #3
 8009226:	4610      	mov	r0, r2
 8009228:	4619      	mov	r1, r3
 800922a:	4603      	mov	r3, r0
 800922c:	4642      	mov	r2, r8
 800922e:	189b      	adds	r3, r3, r2
 8009230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009234:	464b      	mov	r3, r9
 8009236:	460a      	mov	r2, r1
 8009238:	eb42 0303 	adc.w	r3, r2, r3
 800923c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	67bb      	str	r3, [r7, #120]	@ 0x78
 800924a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009258:	4649      	mov	r1, r9
 800925a:	008b      	lsls	r3, r1, #2
 800925c:	4641      	mov	r1, r8
 800925e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009262:	4641      	mov	r1, r8
 8009264:	008a      	lsls	r2, r1, #2
 8009266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800926a:	f7f7 fd1d 	bl	8000ca8 <__aeabi_uldivmod>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4611      	mov	r1, r2
 8009274:	4b38      	ldr	r3, [pc, #224]	@ (8009358 <UART_SetConfig+0x4e4>)
 8009276:	fba3 2301 	umull	r2, r3, r3, r1
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	2264      	movs	r2, #100	@ 0x64
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	1acb      	subs	r3, r1, r3
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	3332      	adds	r3, #50	@ 0x32
 8009288:	4a33      	ldr	r2, [pc, #204]	@ (8009358 <UART_SetConfig+0x4e4>)
 800928a:	fba2 2303 	umull	r2, r3, r2, r3
 800928e:	095b      	lsrs	r3, r3, #5
 8009290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009294:	441c      	add	r4, r3
 8009296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800929a:	2200      	movs	r2, #0
 800929c:	673b      	str	r3, [r7, #112]	@ 0x70
 800929e:	677a      	str	r2, [r7, #116]	@ 0x74
 80092a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80092a4:	4642      	mov	r2, r8
 80092a6:	464b      	mov	r3, r9
 80092a8:	1891      	adds	r1, r2, r2
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	415b      	adcs	r3, r3
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092b4:	4641      	mov	r1, r8
 80092b6:	1851      	adds	r1, r2, r1
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	4649      	mov	r1, r9
 80092bc:	414b      	adcs	r3, r1
 80092be:	607b      	str	r3, [r7, #4]
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	f04f 0300 	mov.w	r3, #0
 80092c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092cc:	4659      	mov	r1, fp
 80092ce:	00cb      	lsls	r3, r1, #3
 80092d0:	4651      	mov	r1, sl
 80092d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092d6:	4651      	mov	r1, sl
 80092d8:	00ca      	lsls	r2, r1, #3
 80092da:	4610      	mov	r0, r2
 80092dc:	4619      	mov	r1, r3
 80092de:	4603      	mov	r3, r0
 80092e0:	4642      	mov	r2, r8
 80092e2:	189b      	adds	r3, r3, r2
 80092e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092e6:	464b      	mov	r3, r9
 80092e8:	460a      	mov	r2, r1
 80092ea:	eb42 0303 	adc.w	r3, r2, r3
 80092ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80092fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009308:	4649      	mov	r1, r9
 800930a:	008b      	lsls	r3, r1, #2
 800930c:	4641      	mov	r1, r8
 800930e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009312:	4641      	mov	r1, r8
 8009314:	008a      	lsls	r2, r1, #2
 8009316:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800931a:	f7f7 fcc5 	bl	8000ca8 <__aeabi_uldivmod>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <UART_SetConfig+0x4e4>)
 8009324:	fba3 1302 	umull	r1, r3, r3, r2
 8009328:	095b      	lsrs	r3, r3, #5
 800932a:	2164      	movs	r1, #100	@ 0x64
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	3332      	adds	r3, #50	@ 0x32
 8009336:	4a08      	ldr	r2, [pc, #32]	@ (8009358 <UART_SetConfig+0x4e4>)
 8009338:	fba2 2303 	umull	r2, r3, r2, r3
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	f003 020f 	and.w	r2, r3, #15
 8009342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4422      	add	r2, r4
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	bf00      	nop
 800934e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009352:	46bd      	mov	sp, r7
 8009354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009358:	51eb851f 	.word	0x51eb851f

0800935c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009362:	4b87      	ldr	r3, [pc, #540]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009364:	22c0      	movs	r2, #192	@ 0xc0
 8009366:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009368:	4b85      	ldr	r3, [pc, #532]	@ (8009580 <MX_LWIP_Init+0x224>)
 800936a:	22a8      	movs	r2, #168	@ 0xa8
 800936c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 800936e:	4b84      	ldr	r3, [pc, #528]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009370:	2232      	movs	r2, #50	@ 0x32
 8009372:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8009374:	4b82      	ldr	r3, [pc, #520]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009376:	2264      	movs	r2, #100	@ 0x64
 8009378:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800937a:	4b82      	ldr	r3, [pc, #520]	@ (8009584 <MX_LWIP_Init+0x228>)
 800937c:	22ff      	movs	r2, #255	@ 0xff
 800937e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009380:	4b80      	ldr	r3, [pc, #512]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009382:	22ff      	movs	r2, #255	@ 0xff
 8009384:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009386:	4b7f      	ldr	r3, [pc, #508]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009388:	22ff      	movs	r2, #255	@ 0xff
 800938a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800938c:	4b7d      	ldr	r3, [pc, #500]	@ (8009584 <MX_LWIP_Init+0x228>)
 800938e:	2200      	movs	r2, #0
 8009390:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009392:	4b7d      	ldr	r3, [pc, #500]	@ (8009588 <MX_LWIP_Init+0x22c>)
 8009394:	22c0      	movs	r2, #192	@ 0xc0
 8009396:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009398:	4b7b      	ldr	r3, [pc, #492]	@ (8009588 <MX_LWIP_Init+0x22c>)
 800939a:	22a8      	movs	r2, #168	@ 0xa8
 800939c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 50;
 800939e:	4b7a      	ldr	r3, [pc, #488]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80093a0:	2232      	movs	r2, #50	@ 0x32
 80093a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80093a4:	4b78      	ldr	r3, [pc, #480]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80093aa:	f001 fd60 	bl	800ae6e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80093ae:	4b74      	ldr	r3, [pc, #464]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	061a      	lsls	r2, r3, #24
 80093b4:	4b72      	ldr	r3, [pc, #456]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	041b      	lsls	r3, r3, #16
 80093ba:	431a      	orrs	r2, r3
 80093bc:	4b70      	ldr	r3, [pc, #448]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093be:	789b      	ldrb	r3, [r3, #2]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	4313      	orrs	r3, r2
 80093c4:	4a6e      	ldr	r2, [pc, #440]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093c6:	78d2      	ldrb	r2, [r2, #3]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	061a      	lsls	r2, r3, #24
 80093cc:	4b6c      	ldr	r3, [pc, #432]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	0619      	lsls	r1, r3, #24
 80093d2:	4b6b      	ldr	r3, [pc, #428]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	4319      	orrs	r1, r3
 80093da:	4b69      	ldr	r3, [pc, #420]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093dc:	789b      	ldrb	r3, [r3, #2]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	430b      	orrs	r3, r1
 80093e2:	4967      	ldr	r1, [pc, #412]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093e4:	78c9      	ldrb	r1, [r1, #3]
 80093e6:	430b      	orrs	r3, r1
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80093ee:	431a      	orrs	r2, r3
 80093f0:	4b63      	ldr	r3, [pc, #396]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	0619      	lsls	r1, r3, #24
 80093f6:	4b62      	ldr	r3, [pc, #392]	@ (8009580 <MX_LWIP_Init+0x224>)
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	041b      	lsls	r3, r3, #16
 80093fc:	4319      	orrs	r1, r3
 80093fe:	4b60      	ldr	r3, [pc, #384]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009400:	789b      	ldrb	r3, [r3, #2]
 8009402:	021b      	lsls	r3, r3, #8
 8009404:	430b      	orrs	r3, r1
 8009406:	495e      	ldr	r1, [pc, #376]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009408:	78c9      	ldrb	r1, [r1, #3]
 800940a:	430b      	orrs	r3, r1
 800940c:	0a1b      	lsrs	r3, r3, #8
 800940e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009412:	431a      	orrs	r2, r3
 8009414:	4b5a      	ldr	r3, [pc, #360]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	0619      	lsls	r1, r3, #24
 800941a:	4b59      	ldr	r3, [pc, #356]	@ (8009580 <MX_LWIP_Init+0x224>)
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	4319      	orrs	r1, r3
 8009422:	4b57      	ldr	r3, [pc, #348]	@ (8009580 <MX_LWIP_Init+0x224>)
 8009424:	789b      	ldrb	r3, [r3, #2]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	430b      	orrs	r3, r1
 800942a:	4955      	ldr	r1, [pc, #340]	@ (8009580 <MX_LWIP_Init+0x224>)
 800942c:	78c9      	ldrb	r1, [r1, #3]
 800942e:	430b      	orrs	r3, r1
 8009430:	0e1b      	lsrs	r3, r3, #24
 8009432:	4313      	orrs	r3, r2
 8009434:	4a55      	ldr	r2, [pc, #340]	@ (800958c <MX_LWIP_Init+0x230>)
 8009436:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009438:	4b52      	ldr	r3, [pc, #328]	@ (8009584 <MX_LWIP_Init+0x228>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	061a      	lsls	r2, r3, #24
 800943e:	4b51      	ldr	r3, [pc, #324]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	041b      	lsls	r3, r3, #16
 8009444:	431a      	orrs	r2, r3
 8009446:	4b4f      	ldr	r3, [pc, #316]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009448:	789b      	ldrb	r3, [r3, #2]
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	4313      	orrs	r3, r2
 800944e:	4a4d      	ldr	r2, [pc, #308]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009450:	78d2      	ldrb	r2, [r2, #3]
 8009452:	4313      	orrs	r3, r2
 8009454:	061a      	lsls	r2, r3, #24
 8009456:	4b4b      	ldr	r3, [pc, #300]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	0619      	lsls	r1, r3, #24
 800945c:	4b49      	ldr	r3, [pc, #292]	@ (8009584 <MX_LWIP_Init+0x228>)
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	041b      	lsls	r3, r3, #16
 8009462:	4319      	orrs	r1, r3
 8009464:	4b47      	ldr	r3, [pc, #284]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009466:	789b      	ldrb	r3, [r3, #2]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	430b      	orrs	r3, r1
 800946c:	4945      	ldr	r1, [pc, #276]	@ (8009584 <MX_LWIP_Init+0x228>)
 800946e:	78c9      	ldrb	r1, [r1, #3]
 8009470:	430b      	orrs	r3, r1
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009478:	431a      	orrs	r2, r3
 800947a:	4b42      	ldr	r3, [pc, #264]	@ (8009584 <MX_LWIP_Init+0x228>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	0619      	lsls	r1, r3, #24
 8009480:	4b40      	ldr	r3, [pc, #256]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009482:	785b      	ldrb	r3, [r3, #1]
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	4319      	orrs	r1, r3
 8009488:	4b3e      	ldr	r3, [pc, #248]	@ (8009584 <MX_LWIP_Init+0x228>)
 800948a:	789b      	ldrb	r3, [r3, #2]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	430b      	orrs	r3, r1
 8009490:	493c      	ldr	r1, [pc, #240]	@ (8009584 <MX_LWIP_Init+0x228>)
 8009492:	78c9      	ldrb	r1, [r1, #3]
 8009494:	430b      	orrs	r3, r1
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800949c:	431a      	orrs	r2, r3
 800949e:	4b39      	ldr	r3, [pc, #228]	@ (8009584 <MX_LWIP_Init+0x228>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	0619      	lsls	r1, r3, #24
 80094a4:	4b37      	ldr	r3, [pc, #220]	@ (8009584 <MX_LWIP_Init+0x228>)
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	4319      	orrs	r1, r3
 80094ac:	4b35      	ldr	r3, [pc, #212]	@ (8009584 <MX_LWIP_Init+0x228>)
 80094ae:	789b      	ldrb	r3, [r3, #2]
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	430b      	orrs	r3, r1
 80094b4:	4933      	ldr	r1, [pc, #204]	@ (8009584 <MX_LWIP_Init+0x228>)
 80094b6:	78c9      	ldrb	r1, [r1, #3]
 80094b8:	430b      	orrs	r3, r1
 80094ba:	0e1b      	lsrs	r3, r3, #24
 80094bc:	4313      	orrs	r3, r2
 80094be:	4a34      	ldr	r2, [pc, #208]	@ (8009590 <MX_LWIP_Init+0x234>)
 80094c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80094c2:	4b31      	ldr	r3, [pc, #196]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	061a      	lsls	r2, r3, #24
 80094c8:	4b2f      	ldr	r3, [pc, #188]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094ca:	785b      	ldrb	r3, [r3, #1]
 80094cc:	041b      	lsls	r3, r3, #16
 80094ce:	431a      	orrs	r2, r3
 80094d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094d2:	789b      	ldrb	r3, [r3, #2]
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	4313      	orrs	r3, r2
 80094d8:	4a2b      	ldr	r2, [pc, #172]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094da:	78d2      	ldrb	r2, [r2, #3]
 80094dc:	4313      	orrs	r3, r2
 80094de:	061a      	lsls	r2, r3, #24
 80094e0:	4b29      	ldr	r3, [pc, #164]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	0619      	lsls	r1, r3, #24
 80094e6:	4b28      	ldr	r3, [pc, #160]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	041b      	lsls	r3, r3, #16
 80094ec:	4319      	orrs	r1, r3
 80094ee:	4b26      	ldr	r3, [pc, #152]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094f0:	789b      	ldrb	r3, [r3, #2]
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	430b      	orrs	r3, r1
 80094f6:	4924      	ldr	r1, [pc, #144]	@ (8009588 <MX_LWIP_Init+0x22c>)
 80094f8:	78c9      	ldrb	r1, [r1, #3]
 80094fa:	430b      	orrs	r3, r1
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009502:	431a      	orrs	r2, r3
 8009504:	4b20      	ldr	r3, [pc, #128]	@ (8009588 <MX_LWIP_Init+0x22c>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	0619      	lsls	r1, r3, #24
 800950a:	4b1f      	ldr	r3, [pc, #124]	@ (8009588 <MX_LWIP_Init+0x22c>)
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	4319      	orrs	r1, r3
 8009512:	4b1d      	ldr	r3, [pc, #116]	@ (8009588 <MX_LWIP_Init+0x22c>)
 8009514:	789b      	ldrb	r3, [r3, #2]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	430b      	orrs	r3, r1
 800951a:	491b      	ldr	r1, [pc, #108]	@ (8009588 <MX_LWIP_Init+0x22c>)
 800951c:	78c9      	ldrb	r1, [r1, #3]
 800951e:	430b      	orrs	r3, r1
 8009520:	0a1b      	lsrs	r3, r3, #8
 8009522:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009526:	431a      	orrs	r2, r3
 8009528:	4b17      	ldr	r3, [pc, #92]	@ (8009588 <MX_LWIP_Init+0x22c>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	0619      	lsls	r1, r3, #24
 800952e:	4b16      	ldr	r3, [pc, #88]	@ (8009588 <MX_LWIP_Init+0x22c>)
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	4319      	orrs	r1, r3
 8009536:	4b14      	ldr	r3, [pc, #80]	@ (8009588 <MX_LWIP_Init+0x22c>)
 8009538:	789b      	ldrb	r3, [r3, #2]
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	430b      	orrs	r3, r1
 800953e:	4912      	ldr	r1, [pc, #72]	@ (8009588 <MX_LWIP_Init+0x22c>)
 8009540:	78c9      	ldrb	r1, [r1, #3]
 8009542:	430b      	orrs	r3, r1
 8009544:	0e1b      	lsrs	r3, r3, #24
 8009546:	4313      	orrs	r3, r2
 8009548:	4a12      	ldr	r2, [pc, #72]	@ (8009594 <MX_LWIP_Init+0x238>)
 800954a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800954c:	4b12      	ldr	r3, [pc, #72]	@ (8009598 <MX_LWIP_Init+0x23c>)
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	4b12      	ldr	r3, [pc, #72]	@ (800959c <MX_LWIP_Init+0x240>)
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	2300      	movs	r3, #0
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4b0e      	ldr	r3, [pc, #56]	@ (8009594 <MX_LWIP_Init+0x238>)
 800955a:	4a0d      	ldr	r2, [pc, #52]	@ (8009590 <MX_LWIP_Init+0x234>)
 800955c:	490b      	ldr	r1, [pc, #44]	@ (800958c <MX_LWIP_Init+0x230>)
 800955e:	4810      	ldr	r0, [pc, #64]	@ (80095a0 <MX_LWIP_Init+0x244>)
 8009560:	f002 f972 	bl	800b848 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009564:	480e      	ldr	r0, [pc, #56]	@ (80095a0 <MX_LWIP_Init+0x244>)
 8009566:	f002 fb35 	bl	800bbd4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800956a:	480d      	ldr	r0, [pc, #52]	@ (80095a0 <MX_LWIP_Init+0x244>)
 800956c:	f002 fb42 	bl	800bbf4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009570:	490c      	ldr	r1, [pc, #48]	@ (80095a4 <MX_LWIP_Init+0x248>)
 8009572:	480b      	ldr	r0, [pc, #44]	@ (80095a0 <MX_LWIP_Init+0x244>)
 8009574:	f002 fc4a 	bl	800be0c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009578:	bf00      	nop
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	2000051c 	.word	0x2000051c
 8009584:	20000520 	.word	0x20000520
 8009588:	20000524 	.word	0x20000524
 800958c:	20000510 	.word	0x20000510
 8009590:	20000514 	.word	0x20000514
 8009594:	20000518 	.word	0x20000518
 8009598:	080159b1 	.word	0x080159b1
 800959c:	08009889 	.word	0x08009889
 80095a0:	200004d4 	.word	0x200004d4
 80095a4:	080095a9 	.word	0x080095a9

080095a8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80095c8:	4b49      	ldr	r3, [pc, #292]	@ (80096f0 <low_level_init+0x134>)
 80095ca:	4a4a      	ldr	r2, [pc, #296]	@ (80096f4 <low_level_init+0x138>)
 80095cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80095ce:	2300      	movs	r3, #0
 80095d0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80095d2:	2380      	movs	r3, #128	@ 0x80
 80095d4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80095d6:	23e1      	movs	r3, #225	@ 0xe1
 80095d8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80095da:	2300      	movs	r3, #0
 80095dc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80095de:	2300      	movs	r3, #0
 80095e0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80095e2:	2300      	movs	r3, #0
 80095e4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80095e6:	4a42      	ldr	r2, [pc, #264]	@ (80096f0 <low_level_init+0x134>)
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80095ee:	4b40      	ldr	r3, [pc, #256]	@ (80096f0 <low_level_init+0x134>)
 80095f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80095f4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80095f6:	4b3e      	ldr	r3, [pc, #248]	@ (80096f0 <low_level_init+0x134>)
 80095f8:	4a3f      	ldr	r2, [pc, #252]	@ (80096f8 <low_level_init+0x13c>)
 80095fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80095fc:	4b3c      	ldr	r3, [pc, #240]	@ (80096f0 <low_level_init+0x134>)
 80095fe:	4a3f      	ldr	r2, [pc, #252]	@ (80096fc <low_level_init+0x140>)
 8009600:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009602:	4b3b      	ldr	r3, [pc, #236]	@ (80096f0 <low_level_init+0x134>)
 8009604:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009608:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800960a:	4839      	ldr	r0, [pc, #228]	@ (80096f0 <low_level_init+0x134>)
 800960c:	f7f9 fab0 	bl	8002b70 <HAL_ETH_Init>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009614:	2238      	movs	r2, #56	@ 0x38
 8009616:	2100      	movs	r1, #0
 8009618:	4839      	ldr	r0, [pc, #228]	@ (8009700 <low_level_init+0x144>)
 800961a:	f00f f891 	bl	8018740 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800961e:	4b38      	ldr	r3, [pc, #224]	@ (8009700 <low_level_init+0x144>)
 8009620:	2221      	movs	r2, #33	@ 0x21
 8009622:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009624:	4b36      	ldr	r3, [pc, #216]	@ (8009700 <low_level_init+0x144>)
 8009626:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800962a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800962c:	4b34      	ldr	r3, [pc, #208]	@ (8009700 <low_level_init+0x144>)
 800962e:	2200      	movs	r2, #0
 8009630:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009632:	4834      	ldr	r0, [pc, #208]	@ (8009704 <low_level_init+0x148>)
 8009634:	f001 ffd0 	bl	800b5d8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2206      	movs	r2, #6
 800963c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009640:	4b2b      	ldr	r3, [pc, #172]	@ (80096f0 <low_level_init+0x134>)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	781a      	ldrb	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800964c:	4b28      	ldr	r3, [pc, #160]	@ (80096f0 <low_level_init+0x134>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	785a      	ldrb	r2, [r3, #1]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009658:	4b25      	ldr	r3, [pc, #148]	@ (80096f0 <low_level_init+0x134>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	789a      	ldrb	r2, [r3, #2]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009664:	4b22      	ldr	r3, [pc, #136]	@ (80096f0 <low_level_init+0x134>)
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	78da      	ldrb	r2, [r3, #3]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009670:	4b1f      	ldr	r3, [pc, #124]	@ (80096f0 <low_level_init+0x134>)
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	791a      	ldrb	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800967c:	4b1c      	ldr	r3, [pc, #112]	@ (80096f0 <low_level_init+0x134>)
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	795a      	ldrb	r2, [r3, #5]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800968e:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009696:	f043 030a 	orr.w	r3, r3, #10
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80096a2:	4919      	ldr	r1, [pc, #100]	@ (8009708 <low_level_init+0x14c>)
 80096a4:	4819      	ldr	r0, [pc, #100]	@ (800970c <low_level_init+0x150>)
 80096a6:	f7f8 feb0 	bl	800240a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80096aa:	4818      	ldr	r0, [pc, #96]	@ (800970c <low_level_init+0x150>)
 80096ac:	f7f8 fedf 	bl	800246e <LAN8742_Init>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f002 fb78 	bl	800bdac <netif_set_link_down>
    netif_set_down(netif);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 fb0f 	bl	800bce0 <netif_set_down>
 80096c2:	e011      	b.n	80096e8 <low_level_init+0x12c>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa48 	bl	8009b60 <ethernet_link_check_state>
 80096d0:	e001      	b.n	80096d6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80096d2:	f7f8 f88f 	bl	80017f4 <Error_Handler>
  }
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
  netif->flags |= NETIF_FLAG_IGMP;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80096dc:	f043 0320 	orr.w	r3, r3, #32
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
/* USER CODE END LOW_LEVEL_INIT */
}
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20004ff4 	.word	0x20004ff4
 80096f4:	40028000 	.word	0x40028000
 80096f8:	20004f54 	.word	0x20004f54
 80096fc:	20004eb4 	.word	0x20004eb4
 8009700:	200050a4 	.word	0x200050a4
 8009704:	0801e34c 	.word	0x0801e34c
 8009708:	2000000c 	.word	0x2000000c
 800970c:	200050dc 	.word	0x200050dc

08009710 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b092      	sub	sp, #72	@ 0x48
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800971a:	2300      	movs	r3, #0
 800971c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800971e:	2300      	movs	r3, #0
 8009720:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	2230      	movs	r2, #48	@ 0x30
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f00f f805 	bl	8018740 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	2230      	movs	r2, #48	@ 0x30
 800973c:	2100      	movs	r1, #0
 800973e:	4618      	mov	r0, r3
 8009740:	f00e fffe 	bl	8018740 <memset>

  for(q = p; q != NULL; q = q->next)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	643b      	str	r3, [r7, #64]	@ 0x40
 8009748:	e045      	b.n	80097d6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800974a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800974c:	2b03      	cmp	r3, #3
 800974e:	d902      	bls.n	8009756 <low_level_output+0x46>
      return ERR_IF;
 8009750:	f06f 030b 	mvn.w	r3, #11
 8009754:	e055      	b.n	8009802 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009758:	6859      	ldr	r1, [r3, #4]
 800975a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800975c:	4613      	mov	r3, r2
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	4413      	add	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	3348      	adds	r3, #72	@ 0x48
 8009766:	443b      	add	r3, r7
 8009768:	3b3c      	subs	r3, #60	@ 0x3c
 800976a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800976c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800976e:	895b      	ldrh	r3, [r3, #10]
 8009770:	4619      	mov	r1, r3
 8009772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009774:	4613      	mov	r3, r2
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	3348      	adds	r3, #72	@ 0x48
 800977e:	443b      	add	r3, r7
 8009780:	3b38      	subs	r3, #56	@ 0x38
 8009782:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009786:	2b00      	cmp	r3, #0
 8009788:	d011      	beq.n	80097ae <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800978a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800978c:	1e5a      	subs	r2, r3, #1
 800978e:	f107 000c 	add.w	r0, r7, #12
 8009792:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009794:	460b      	mov	r3, r1
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	440b      	add	r3, r1
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	18c1      	adds	r1, r0, r3
 800979e:	4613      	mov	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	3348      	adds	r3, #72	@ 0x48
 80097a8:	443b      	add	r3, r7
 80097aa:	3b34      	subs	r3, #52	@ 0x34
 80097ac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80097ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80097b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097b8:	4613      	mov	r3, r2
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	3348      	adds	r3, #72	@ 0x48
 80097c2:	443b      	add	r3, r7
 80097c4:	3b34      	subs	r3, #52	@ 0x34
 80097c6:	2200      	movs	r2, #0
 80097c8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80097ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097cc:	3301      	adds	r3, #1
 80097ce:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80097d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80097d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1b6      	bne.n	800974a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	891b      	ldrh	r3, [r3, #8]
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b0a      	ldr	r3, [pc, #40]	@ (800980c <low_level_output+0xfc>)
 80097e4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80097e6:	4a09      	ldr	r2, [pc, #36]	@ (800980c <low_level_output+0xfc>)
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80097ee:	4a07      	ldr	r2, [pc, #28]	@ (800980c <low_level_output+0xfc>)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80097f4:	2214      	movs	r2, #20
 80097f6:	4905      	ldr	r1, [pc, #20]	@ (800980c <low_level_output+0xfc>)
 80097f8:	4805      	ldr	r0, [pc, #20]	@ (8009810 <low_level_output+0x100>)
 80097fa:	f7f9 fb44 	bl	8002e86 <HAL_ETH_Transmit>

  return errval;
 80097fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009802:	4618      	mov	r0, r3
 8009804:	3748      	adds	r7, #72	@ 0x48
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	200050a4 	.word	0x200050a4
 8009810:	20004ff4 	.word	0x20004ff4

08009814 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009820:	4b07      	ldr	r3, [pc, #28]	@ (8009840 <low_level_input+0x2c>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d105      	bne.n	8009834 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009828:	f107 030c 	add.w	r3, r7, #12
 800982c:	4619      	mov	r1, r3
 800982e:	4805      	ldr	r0, [pc, #20]	@ (8009844 <low_level_input+0x30>)
 8009830:	f7f9 fbbd 	bl	8002fae <HAL_ETH_ReadData>
  }

  return p;
 8009834:	68fb      	ldr	r3, [r7, #12]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20004eb0 	.word	0x20004eb0
 8009844:	20004ff4 	.word	0x20004ff4

08009848 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ffdd 	bl	8009814 <low_level_input>
 800985a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00a      	beq.n	8009878 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	4798      	blx	r3
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f002 fe4a 	bl	800c50c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1ea      	bne.n	8009854 <ethernetif_input+0xc>
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <ethernetif_init+0x1c>
 8009896:	4b0e      	ldr	r3, [pc, #56]	@ (80098d0 <ethernetif_init+0x48>)
 8009898:	f240 126f 	movw	r2, #367	@ 0x16f
 800989c:	490d      	ldr	r1, [pc, #52]	@ (80098d4 <ethernetif_init+0x4c>)
 800989e:	480e      	ldr	r0, [pc, #56]	@ (80098d8 <ethernetif_init+0x50>)
 80098a0:	f00e fce4 	bl	801826c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2273      	movs	r2, #115	@ 0x73
 80098a8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2274      	movs	r2, #116	@ 0x74
 80098b0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a09      	ldr	r2, [pc, #36]	@ (80098dc <ethernetif_init+0x54>)
 80098b8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a08      	ldr	r2, [pc, #32]	@ (80098e0 <ethernetif_init+0x58>)
 80098be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fe7b 	bl	80095bc <low_level_init>

  return ERR_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	0801b23c 	.word	0x0801b23c
 80098d4:	0801b258 	.word	0x0801b258
 80098d8:	0801b268 	.word	0x0801b268
 80098dc:	080134bd 	.word	0x080134bd
 80098e0:	08009711 	.word	0x08009711

080098e4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	4807      	ldr	r0, [pc, #28]	@ (8009910 <pbuf_free_custom+0x2c>)
 80098f4:	f001 ff52 	bl	800b79c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80098f8:	4b06      	ldr	r3, [pc, #24]	@ (8009914 <pbuf_free_custom+0x30>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d102      	bne.n	8009906 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009900:	4b04      	ldr	r3, [pc, #16]	@ (8009914 <pbuf_free_custom+0x30>)
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
  }
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	0801e34c 	.word	0x0801e34c
 8009914:	20004eb0 	.word	0x20004eb0

08009918 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800991c:	f00d f83c 	bl	8016998 <HAL_GetTick>
 8009920:	4603      	mov	r3, r0
}
 8009922:	4618      	mov	r0, r3
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08e      	sub	sp, #56	@ 0x38
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	605a      	str	r2, [r3, #4]
 800993a:	609a      	str	r2, [r3, #8]
 800993c:	60da      	str	r2, [r3, #12]
 800993e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a59      	ldr	r2, [pc, #356]	@ (8009aac <HAL_ETH_MspInit+0x184>)
 8009946:	4293      	cmp	r3, r2
 8009948:	f040 80ac 	bne.w	8009aa4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800994c:	2300      	movs	r3, #0
 800994e:	623b      	str	r3, [r7, #32]
 8009950:	4b57      	ldr	r3, [pc, #348]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 8009952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009954:	4a56      	ldr	r2, [pc, #344]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 8009956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800995a:	6313      	str	r3, [r2, #48]	@ 0x30
 800995c:	4b54      	ldr	r3, [pc, #336]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 800995e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009964:	623b      	str	r3, [r7, #32]
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	2300      	movs	r3, #0
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	4b50      	ldr	r3, [pc, #320]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 800996e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009970:	4a4f      	ldr	r2, [pc, #316]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 8009972:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009976:	6313      	str	r3, [r2, #48]	@ 0x30
 8009978:	4b4d      	ldr	r3, [pc, #308]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 800997a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009980:	61fb      	str	r3, [r7, #28]
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2300      	movs	r3, #0
 8009986:	61bb      	str	r3, [r7, #24]
 8009988:	4b49      	ldr	r3, [pc, #292]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 800998a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998c:	4a48      	ldr	r2, [pc, #288]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 800998e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009992:	6313      	str	r3, [r2, #48]	@ 0x30
 8009994:	4b46      	ldr	r3, [pc, #280]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800999c:	61bb      	str	r3, [r7, #24]
 800999e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80099a0:	2300      	movs	r3, #0
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	4b42      	ldr	r3, [pc, #264]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099a8:	4a41      	ldr	r2, [pc, #260]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099aa:	f043 0304 	orr.w	r3, r3, #4
 80099ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80099b0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c4:	4a3a      	ldr	r2, [pc, #232]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80099cc:	4b38      	ldr	r3, [pc, #224]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	4b34      	ldr	r3, [pc, #208]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e0:	4a33      	ldr	r2, [pc, #204]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099e2:	f043 0302 	orr.w	r3, r3, #2
 80099e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80099e8:	4b31      	ldr	r3, [pc, #196]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	f003 0302 	and.w	r3, r3, #2
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80099f4:	2300      	movs	r3, #0
 80099f6:	60bb      	str	r3, [r7, #8]
 80099f8:	4b2d      	ldr	r3, [pc, #180]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fc:	4a2c      	ldr	r2, [pc, #176]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 80099fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a04:	4b2a      	ldr	r3, [pc, #168]	@ (8009ab0 <HAL_ETH_MspInit+0x188>)
 8009a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a0c:	60bb      	str	r3, [r7, #8]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009a10:	2332      	movs	r3, #50	@ 0x32
 8009a12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a14:	2302      	movs	r3, #2
 8009a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a20:	230b      	movs	r3, #11
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4822      	ldr	r0, [pc, #136]	@ (8009ab4 <HAL_ETH_MspInit+0x18c>)
 8009a2c:	f7fa fbd4 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009a30:	2386      	movs	r3, #134	@ 0x86
 8009a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a34:	2302      	movs	r3, #2
 8009a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a40:	230b      	movs	r3, #11
 8009a42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a48:	4619      	mov	r1, r3
 8009a4a:	481b      	ldr	r0, [pc, #108]	@ (8009ab8 <HAL_ETH_MspInit+0x190>)
 8009a4c:	f7fa fbc4 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a56:	2302      	movs	r3, #2
 8009a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a62:	230b      	movs	r3, #11
 8009a64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4813      	ldr	r0, [pc, #76]	@ (8009abc <HAL_ETH_MspInit+0x194>)
 8009a6e:	f7fa fbb3 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009a72:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a80:	2303      	movs	r3, #3
 8009a82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a84:	230b      	movs	r3, #11
 8009a86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	480c      	ldr	r0, [pc, #48]	@ (8009ac0 <HAL_ETH_MspInit+0x198>)
 8009a90:	f7fa fba2 	bl	80041d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009a94:	2200      	movs	r2, #0
 8009a96:	2100      	movs	r1, #0
 8009a98:	203d      	movs	r0, #61	@ 0x3d
 8009a9a:	f7f8 ff8c 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009a9e:	203d      	movs	r0, #61	@ 0x3d
 8009aa0:	f7f8 ffa5 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	3738      	adds	r7, #56	@ 0x38
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	40028000 	.word	0x40028000
 8009ab0:	40023800 	.word	0x40023800
 8009ab4:	40020800 	.word	0x40020800
 8009ab8:	40020000 	.word	0x40020000
 8009abc:	40020400 	.word	0x40020400
 8009ac0:	40021800 	.word	0x40021800

08009ac4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009ac8:	4802      	ldr	r0, [pc, #8]	@ (8009ad4 <ETH_PHY_IO_Init+0x10>)
 8009aca:	f7f9 fe3f 	bl	800374c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20004ff4 	.word	0x20004ff4

08009ad8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	af00      	add	r7, sp, #0
  return 0;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	4807      	ldr	r0, [pc, #28]	@ (8009b18 <ETH_PHY_IO_ReadReg+0x30>)
 8009afc:	f7f9 fc8e 	bl	800341c <HAL_ETH_ReadPHYRegister>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	e000      	b.n	8009b0e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20004ff4 	.word	0x20004ff4

08009b1c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	68f9      	ldr	r1, [r7, #12]
 8009b2e:	4807      	ldr	r0, [pc, #28]	@ (8009b4c <ETH_PHY_IO_WriteReg+0x30>)
 8009b30:	f7f9 fcbf 	bl	80034b2 <HAL_ETH_WritePHYRegister>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3e:	e000      	b.n	8009b42 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20004ff4 	.word	0x20004ff4

08009b50 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b54:	f00c ff20 	bl	8016998 <HAL_GetTick>
 8009b58:	4603      	mov	r3, r0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b0a0      	sub	sp, #128	@ 0x80
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009b68:	f107 030c 	add.w	r3, r7, #12
 8009b6c:	2264      	movs	r2, #100	@ 0x64
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4618      	mov	r0, r3
 8009b72:	f00e fde5 	bl	8018740 <memset>
  int32_t PHYLinkState = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b7e:	2300      	movs	r3, #0
 8009b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b82:	2300      	movs	r3, #0
 8009b84:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009b86:	483a      	ldr	r0, [pc, #232]	@ (8009c70 <ethernet_link_check_state+0x110>)
 8009b88:	f7f8 fd19 	bl	80025be <LAN8742_GetLinkState>
 8009b8c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009b94:	089b      	lsrs	r3, r3, #2
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00c      	beq.n	8009bba <ethernet_link_check_state+0x5a>
 8009ba0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	dc09      	bgt.n	8009bba <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8009ba6:	4833      	ldr	r0, [pc, #204]	@ (8009c74 <ethernet_link_check_state+0x114>)
 8009ba8:	f7f9 f8ee 	bl	8002d88 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f002 f897 	bl	800bce0 <netif_set_down>
    netif_set_link_down(netif);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f002 f8fa 	bl	800bdac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009bb8:	e055      	b.n	8009c66 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009bc0:	f003 0304 	and.w	r3, r3, #4
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d14e      	bne.n	8009c66 <ethernet_link_check_state+0x106>
 8009bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	dd4b      	ble.n	8009c66 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bd0:	3b02      	subs	r3, #2
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d82a      	bhi.n	8009c2c <ethernet_link_check_state+0xcc>
 8009bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bdc <ethernet_link_check_state+0x7c>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009bed 	.word	0x08009bed
 8009be0:	08009bff 	.word	0x08009bff
 8009be4:	08009c0f 	.word	0x08009c0f
 8009be8:	08009c1f 	.word	0x08009c1f
      duplex = ETH_FULLDUPLEX_MODE;
 8009bec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bf0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009bf2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009bfc:	e017      	b.n	8009c2e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009c02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c06:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009c0c:	e00f      	b.n	8009c2e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009c0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c12:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009c14:	2300      	movs	r3, #0
 8009c16:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009c1c:	e007      	b.n	8009c2e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009c22:	2300      	movs	r3, #0
 8009c24:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009c26:	2301      	movs	r3, #1
 8009c28:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009c2a:	e000      	b.n	8009c2e <ethernet_link_check_state+0xce>
      break;
 8009c2c:	bf00      	nop
    if(linkchanged)
 8009c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d018      	beq.n	8009c66 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009c34:	f107 030c 	add.w	r3, r7, #12
 8009c38:	4619      	mov	r1, r3
 8009c3a:	480e      	ldr	r0, [pc, #56]	@ (8009c74 <ethernet_link_check_state+0x114>)
 8009c3c:	f7f9 fc82 	bl	8003544 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8009c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c46:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009c48:	f107 030c 	add.w	r3, r7, #12
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4809      	ldr	r0, [pc, #36]	@ (8009c74 <ethernet_link_check_state+0x114>)
 8009c50:	f7f9 fd62 	bl	8003718 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009c54:	4807      	ldr	r0, [pc, #28]	@ (8009c74 <ethernet_link_check_state+0x114>)
 8009c56:	f7f9 f809 	bl	8002c6c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 ffca 	bl	800bbf4 <netif_set_up>
      netif_set_link_up(netif);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f002 f86f 	bl	800bd44 <netif_set_link_up>
}
 8009c66:	bf00      	nop
 8009c68:	3780      	adds	r7, #128	@ 0x80
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200050dc 	.word	0x200050dc
 8009c74:	20004ff4 	.word	0x20004ff4

08009c78 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009c80:	4812      	ldr	r0, [pc, #72]	@ (8009ccc <HAL_ETH_RxAllocateCallback+0x54>)
 8009c82:	f001 fd1d 	bl	800b6c0 <memp_malloc_pool>
 8009c86:	60f8      	str	r0, [r7, #12]
  if (p)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d014      	beq.n	8009cb8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f103 0220 	add.w	r2, r3, #32
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8009cd0 <HAL_ETH_RxAllocateCallback+0x58>)
 8009c9c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009ca6:	9201      	str	r2, [sp, #4]
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2241      	movs	r2, #65	@ 0x41
 8009cae:	2100      	movs	r1, #0
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f002 fa71 	bl	800c198 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009cb6:	e005      	b.n	8009cc4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009cb8:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009cba:	2201      	movs	r2, #1
 8009cbc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	0801e34c 	.word	0x0801e34c
 8009cd0:	080098e5 	.word	0x080098e5
 8009cd4:	20004eb0 	.word	0x20004eb0

08009cd8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b089      	sub	sp, #36	@ 0x24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3b20      	subs	r3, #32
 8009cf6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	2200      	movs	r2, #0
 8009d02:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	887a      	ldrh	r2, [r7, #2]
 8009d08:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d103      	bne.n	8009d1a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	e003      	b.n	8009d22 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	61fb      	str	r3, [r7, #28]
 8009d2e:	e009      	b.n	8009d44 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	891a      	ldrh	r2, [r3, #8]
 8009d34:	887b      	ldrh	r3, [r7, #2]
 8009d36:	4413      	add	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1f2      	bne.n	8009d30 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009d4a:	bf00      	nop
 8009d4c:	bf00      	nop
 8009d4e:	3724      	adds	r7, #36	@ 0x24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <ReadBq34z100>:

void ReadBq34z100(void);
void PrintBq34z100Data(void);

void ReadBq34z100(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
      BatData16[0] = bq34z100_StdCmd(SOC);
 8009d5c:	2002      	movs	r0, #2
 8009d5e:	f000 f82b 	bl	8009db8 <bq34z100_StdCmd>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461a      	mov	r2, r3
 8009d66:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <ReadBq34z100+0x5c>)
 8009d68:	801a      	strh	r2, [r3, #0]
      BatData16[1] = bq34z100_StdCmd(VOLT);
 8009d6a:	2008      	movs	r0, #8
 8009d6c:	f000 f824 	bl	8009db8 <bq34z100_StdCmd>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b0f      	ldr	r3, [pc, #60]	@ (8009db4 <ReadBq34z100+0x5c>)
 8009d76:	805a      	strh	r2, [r3, #2]
      BatData16[2] = bq34z100_StdCmd(AI);
 8009d78:	200a      	movs	r0, #10
 8009d7a:	f000 f81d 	bl	8009db8 <bq34z100_StdCmd>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	4b0c      	ldr	r3, [pc, #48]	@ (8009db4 <ReadBq34z100+0x5c>)
 8009d84:	809a      	strh	r2, [r3, #4]
      //ai_val = (int16_t)(BatData16[2]&0xFFFF);
      BatData16[3] = bq34z100_ExtCmd(CC);
 8009d86:	202c      	movs	r0, #44	@ 0x2c
 8009d88:	f000 f858 	bl	8009e3c <bq34z100_ExtCmd>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	461a      	mov	r2, r3
 8009d90:	4b08      	ldr	r3, [pc, #32]	@ (8009db4 <ReadBq34z100+0x5c>)
 8009d92:	80da      	strh	r2, [r3, #6]
      BatData16[4] = bq34z100_ExtCmd(INTTEMP);
 8009d94:	202a      	movs	r0, #42	@ 0x2a
 8009d96:	f000 f851 	bl	8009e3c <bq34z100_ExtCmd>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <ReadBq34z100+0x5c>)
 8009da0:	811a      	strh	r2, [r3, #8]
      //temp_val = (float)( (float)BatData16[4]/10.0f - KELVIN);
      BatData16[5] = bq34z100_SubCmd(FW_VERSION);
 8009da2:	2002      	movs	r0, #2
 8009da4:	f000 f88c 	bl	8009ec0 <bq34z100_SubCmd>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	4b01      	ldr	r3, [pc, #4]	@ (8009db4 <ReadBq34z100+0x5c>)
 8009dae:	815a      	strh	r2, [r3, #10]
}
 8009db0:	bf00      	nop
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20005110 	.word	0x20005110

08009db8 <bq34z100_StdCmd>:



uint16_t bq34z100_StdCmd(uint8_t command)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af04      	add	r7, sp, #16
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	81fb      	strh	r3, [r7, #14]

  error = HAL_I2C_Mem_Read(&hi2c3, I2C_BQ34Z100_ADDR, command, 1,(uint8_t*)rxbuf, 2, HAL_MAX_DELAY);
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	f04f 33ff 	mov.w	r3, #4294967295
 8009dce:	9302      	str	r3, [sp, #8]
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	4b13      	ldr	r3, [pc, #76]	@ (8009e24 <bq34z100_StdCmd+0x6c>)
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	2301      	movs	r3, #1
 8009dda:	21aa      	movs	r1, #170	@ 0xaa
 8009ddc:	4812      	ldr	r0, [pc, #72]	@ (8009e28 <bq34z100_StdCmd+0x70>)
 8009dde:	f7fb f87f 	bl	8004ee0 <HAL_I2C_Mem_Read>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b11      	ldr	r3, [pc, #68]	@ (8009e2c <bq34z100_StdCmd+0x74>)
 8009de8:	701a      	strb	r2, [r3, #0]
  if (error != HAL_OK)
 8009dea:	4b10      	ldr	r3, [pc, #64]	@ (8009e2c <bq34z100_StdCmd+0x74>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <bq34z100_StdCmd+0x42>
  {
	i2c3_error = 1;
 8009df2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e30 <bq34z100_StdCmd+0x78>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	e008      	b.n	8009e0c <bq34z100_StdCmd+0x54>
    //printf("i2c rx error: STD_CMD\n");
  }
  else
  {
	i2c3_error = 0;
 8009dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009e30 <bq34z100_StdCmd+0x78>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	701a      	strb	r2, [r3, #0]
    ret = make16(&rxbuf[1], &rxbuf[0]);
 8009e00:	4908      	ldr	r1, [pc, #32]	@ (8009e24 <bq34z100_StdCmd+0x6c>)
 8009e02:	480c      	ldr	r0, [pc, #48]	@ (8009e34 <bq34z100_StdCmd+0x7c>)
 8009e04:	f00c fe45 	bl	8016a92 <make16>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	81fb      	strh	r3, [r7, #14]
  }
  
   //print e2c3 error
  if(i2c3_error==1) {
 8009e0c:	4b08      	ldr	r3, [pc, #32]	@ (8009e30 <bq34z100_StdCmd+0x78>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d102      	bne.n	8009e1a <bq34z100_StdCmd+0x62>
	  printf("i2c3_comm_error1\n");
 8009e14:	4808      	ldr	r0, [pc, #32]	@ (8009e38 <bq34z100_StdCmd+0x80>)
 8009e16:	f00e fa99 	bl	801834c <puts>
  }


  return ret;
 8009e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	2000510c 	.word	0x2000510c
 8009e28:	20000268 	.word	0x20000268
 8009e2c:	20005108 	.word	0x20005108
 8009e30:	2000511c 	.word	0x2000511c
 8009e34:	2000510d 	.word	0x2000510d
 8009e38:	0801b290 	.word	0x0801b290

08009e3c <bq34z100_ExtCmd>:

uint16_t bq34z100_ExtCmd(uint8_t command)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	81fb      	strh	r3, [r7, #14]

  error = HAL_I2C_Mem_Read(&hi2c3, I2C_BQ34Z100_ADDR, command, 1,(uint8_t*)rxbuf, 2, HAL_MAX_DELAY);
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	2302      	movs	r3, #2
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	4b13      	ldr	r3, [pc, #76]	@ (8009ea8 <bq34z100_ExtCmd+0x6c>)
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	21aa      	movs	r1, #170	@ 0xaa
 8009e60:	4812      	ldr	r0, [pc, #72]	@ (8009eac <bq34z100_ExtCmd+0x70>)
 8009e62:	f7fb f83d 	bl	8004ee0 <HAL_I2C_Mem_Read>
 8009e66:	4603      	mov	r3, r0
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4b11      	ldr	r3, [pc, #68]	@ (8009eb0 <bq34z100_ExtCmd+0x74>)
 8009e6c:	701a      	strb	r2, [r3, #0]
  if (error != HAL_OK)
 8009e6e:	4b10      	ldr	r3, [pc, #64]	@ (8009eb0 <bq34z100_ExtCmd+0x74>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <bq34z100_ExtCmd+0x42>
  {
	i2c3_error = 1;
 8009e76:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb4 <bq34z100_ExtCmd+0x78>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	701a      	strb	r2, [r3, #0]
 8009e7c:	e008      	b.n	8009e90 <bq34z100_ExtCmd+0x54>
    //printf("i2c rx error: EXT_CMD\n");
  }
  else {
    i2c3_error = 0;
 8009e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009eb4 <bq34z100_ExtCmd+0x78>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
    ret = make16(&rxbuf[1], &rxbuf[0]);
 8009e84:	4908      	ldr	r1, [pc, #32]	@ (8009ea8 <bq34z100_ExtCmd+0x6c>)
 8009e86:	480c      	ldr	r0, [pc, #48]	@ (8009eb8 <bq34z100_ExtCmd+0x7c>)
 8009e88:	f00c fe03 	bl	8016a92 <make16>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	81fb      	strh	r3, [r7, #14]
  }

  //print e2c3 error
  if(i2c3_error==1) {
 8009e90:	4b08      	ldr	r3, [pc, #32]	@ (8009eb4 <bq34z100_ExtCmd+0x78>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d102      	bne.n	8009e9e <bq34z100_ExtCmd+0x62>
	  printf("i2c3_comm_error2\n");
 8009e98:	4808      	ldr	r0, [pc, #32]	@ (8009ebc <bq34z100_ExtCmd+0x80>)
 8009e9a:	f00e fa57 	bl	801834c <puts>
  }

  return ret;
 8009e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	2000510c 	.word	0x2000510c
 8009eac:	20000268 	.word	0x20000268
 8009eb0:	20005108 	.word	0x20005108
 8009eb4:	2000511c 	.word	0x2000511c
 8009eb8:	2000510d 	.word	0x2000510d
 8009ebc:	0801b2a4 	.word	0x0801b2a4

08009ec0 <bq34z100_SubCmd>:

uint16_t bq34z100_SubCmd(uint16_t subcommand)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af04      	add	r7, sp, #16
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	80fb      	strh	r3, [r7, #6]
  uint16_t ret = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	81fb      	strh	r3, [r7, #14]

  uint8_t command[3];
  command[0] = 0x00;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	723b      	strb	r3, [r7, #8]
  command[1] = make8(subcommand, 0);
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f00c fdf5 	bl	8016ac6 <make8>
 8009edc:	4603      	mov	r3, r0
 8009ede:	727b      	strb	r3, [r7, #9]
  command[2] = make8(subcommand, 1);
 8009ee0:	88fb      	ldrh	r3, [r7, #6]
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f00c fdee 	bl	8016ac6 <make8>
 8009eea:	4603      	mov	r3, r0
 8009eec:	72bb      	strb	r3, [r7, #10]

  error = HAL_I2C_Master_Transmit(&hi2c3, I2C_BQ34Z100_ADDR, command, 3, HAL_MAX_DELAY);
 8009eee:	f107 0208 	add.w	r2, r7, #8
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	2303      	movs	r3, #3
 8009efa:	21aa      	movs	r1, #170	@ 0xaa
 8009efc:	481f      	ldr	r0, [pc, #124]	@ (8009f7c <bq34z100_SubCmd+0xbc>)
 8009efe:	f7fa fcbf 	bl	8004880 <HAL_I2C_Master_Transmit>
 8009f02:	4603      	mov	r3, r0
 8009f04:	461a      	mov	r2, r3
 8009f06:	4b1e      	ldr	r3, [pc, #120]	@ (8009f80 <bq34z100_SubCmd+0xc0>)
 8009f08:	701a      	strb	r2, [r3, #0]
  if (error != HAL_OK)
 8009f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009f80 <bq34z100_SubCmd+0xc0>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <bq34z100_SubCmd+0x5a>
  {
	i2c3_error = 1;
 8009f12:	4b1c      	ldr	r3, [pc, #112]	@ (8009f84 <bq34z100_SubCmd+0xc4>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e002      	b.n	8009f20 <bq34z100_SubCmd+0x60>
    //printf("i2c tx error: SUB_CMD_TX\n");
  }
  else {
	i2c3_error = 0;
 8009f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f84 <bq34z100_SubCmd+0xc4>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	701a      	strb	r2, [r3, #0]
  }
  error = HAL_I2C_Mem_Read(&hi2c3, I2C_BQ34Z100_ADDR, CNTL, 1,(uint8_t*)rxbuf, 2, HAL_MAX_DELAY);
 8009f20:	f04f 33ff 	mov.w	r3, #4294967295
 8009f24:	9302      	str	r3, [sp, #8]
 8009f26:	2302      	movs	r3, #2
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	4b17      	ldr	r3, [pc, #92]	@ (8009f88 <bq34z100_SubCmd+0xc8>)
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	2301      	movs	r3, #1
 8009f30:	2200      	movs	r2, #0
 8009f32:	21aa      	movs	r1, #170	@ 0xaa
 8009f34:	4811      	ldr	r0, [pc, #68]	@ (8009f7c <bq34z100_SubCmd+0xbc>)
 8009f36:	f7fa ffd3 	bl	8004ee0 <HAL_I2C_Mem_Read>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4b10      	ldr	r3, [pc, #64]	@ (8009f80 <bq34z100_SubCmd+0xc0>)
 8009f40:	701a      	strb	r2, [r3, #0]
  if (error != HAL_OK)
 8009f42:	4b0f      	ldr	r3, [pc, #60]	@ (8009f80 <bq34z100_SubCmd+0xc0>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <bq34z100_SubCmd+0x92>
  {
	i2c3_error = 1;
 8009f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f84 <bq34z100_SubCmd+0xc4>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	701a      	strb	r2, [r3, #0]
 8009f50:	e008      	b.n	8009f64 <bq34z100_SubCmd+0xa4>
    //printf("i2c rx error: SUB_CMD_RX\n");
  }
  else
  {
	i2c3_error = 0;
 8009f52:	4b0c      	ldr	r3, [pc, #48]	@ (8009f84 <bq34z100_SubCmd+0xc4>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
    ret = make16(&rxbuf[1], &rxbuf[0]);
 8009f58:	490b      	ldr	r1, [pc, #44]	@ (8009f88 <bq34z100_SubCmd+0xc8>)
 8009f5a:	480c      	ldr	r0, [pc, #48]	@ (8009f8c <bq34z100_SubCmd+0xcc>)
 8009f5c:	f00c fd99 	bl	8016a92 <make16>
 8009f60:	4603      	mov	r3, r0
 8009f62:	81fb      	strh	r3, [r7, #14]
  }

  //print e2c3 error
  if(i2c3_error==1) {
 8009f64:	4b07      	ldr	r3, [pc, #28]	@ (8009f84 <bq34z100_SubCmd+0xc4>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d102      	bne.n	8009f72 <bq34z100_SubCmd+0xb2>
	  printf("i2c_comm_error3\n");
 8009f6c:	4808      	ldr	r0, [pc, #32]	@ (8009f90 <bq34z100_SubCmd+0xd0>)
 8009f6e:	f00e f9ed 	bl	801834c <puts>
  }

  return ret;
 8009f72:	89fb      	ldrh	r3, [r7, #14]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20000268 	.word	0x20000268
 8009f80:	20005108 	.word	0x20005108
 8009f84:	2000511c 	.word	0x2000511c
 8009f88:	2000510c 	.word	0x2000510c
 8009f8c:	2000510d 	.word	0x2000510d
 8009f90:	0801b2b8 	.word	0x0801b2b8

08009f94 <Buzzer_Init>:

extern TIM_HandleTypeDef htim5;
double timer5_cnt_freq=0;

void Buzzer_Init(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
  Buzzer_Off();
 8009f98:	f000 f80e 	bl	8009fb8 <Buzzer_Off>
  //Set_Buzzer_Frequency(BUZ_FREQ);
}
 8009f9c:	bf00      	nop
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <Buzzer_On>:

void Buzzer_On(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, SET);
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	2108      	movs	r1, #8
 8009fa8:	4802      	ldr	r0, [pc, #8]	@ (8009fb4 <Buzzer_On+0x14>)
 8009faa:	f7fa fad9 	bl	8004560 <HAL_GPIO_WritePin>
    //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
}
 8009fae:	bf00      	nop
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	40020000 	.word	0x40020000

08009fb8 <Buzzer_Off>:

void Buzzer_Off(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, RESET);
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2108      	movs	r1, #8
 8009fc0:	4802      	ldr	r0, [pc, #8]	@ (8009fcc <Buzzer_Off+0x14>)
 8009fc2:	f7fa facd 	bl	8004560 <HAL_GPIO_WritePin>
    //HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
}
 8009fc6:	bf00      	nop
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	40020000 	.word	0x40020000

08009fd0 <FAN_Init>:
FanData_t DbgFan[MAX_FAN_QTY];  // for Debug

static uint8_t FAN_IsRPMOverRange(uint8_t ch, uint16_t rpm);

void FAN_Init(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0

  TIM1->CCR1 = 0;
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <FAN_Init+0x34>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0;
 8009fda:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <FAN_Init+0x34>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	639a      	str	r2, [r3, #56]	@ 0x38
  //TIM3->CCR1 = 0;
  //TIM3->CCR2 = 0;
  //TIM3->CCR3 = 0;


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4809      	ldr	r0, [pc, #36]	@ (800a008 <FAN_Init+0x38>)
 8009fe4:	f7fc ff38 	bl	8006e58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8009fe8:	2104      	movs	r1, #4
 8009fea:	4807      	ldr	r0, [pc, #28]	@ (800a008 <FAN_Init+0x38>)
 8009fec:	f7fc ff34 	bl	8006e58 <HAL_TIM_PWM_Start>

  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4806      	ldr	r0, [pc, #24]	@ (800a00c <FAN_Init+0x3c>)
 8009ff4:	f7fd f848 	bl	8007088 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8009ff8:	2108      	movs	r1, #8
 8009ffa:	4804      	ldr	r0, [pc, #16]	@ (800a00c <FAN_Init+0x3c>)
 8009ffc:	f7fd f844 	bl	8007088 <HAL_TIM_IC_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);

  //HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  //HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
  //HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
}
 800a000:	bf00      	nop
 800a002:	bd80      	pop	{r7, pc}
 800a004:	40010000 	.word	0x40010000
 800a008:	20000320 	.word	0x20000320
 800a00c:	20000368 	.word	0x20000368

0800a010 <FAN_Set_RPM>:


void FAN_Set_RPM(uint8_t fan_step)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	71fb      	strb	r3, [r7, #7]
  if(fan_step == 0) {
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d112      	bne.n	800a046 <FAN_Set_RPM+0x36>
    set_rpm = 0;
 800a020:	4b3d      	ldr	r3, [pc, #244]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a022:	2200      	movs	r2, #0
 800a024:	801a      	strh	r2, [r3, #0]
    ccr = (set_rpm*(TIM1->ARR))/MAX_RPM;
 800a026:	4b3c      	ldr	r3, [pc, #240]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	4b3b      	ldr	r3, [pc, #236]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	fb02 f303 	mul.w	r3, r2, r3
 800a034:	08db      	lsrs	r3, r3, #3
 800a036:	4a3a      	ldr	r2, [pc, #232]	@ (800a120 <FAN_Set_RPM+0x110>)
 800a038:	fba2 2303 	umull	r2, r3, r2, r3
 800a03c:	095b      	lsrs	r3, r3, #5
 800a03e:	b29a      	uxth	r2, r3
 800a040:	4b38      	ldr	r3, [pc, #224]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	e05a      	b.n	800a0fc <FAN_Set_RPM+0xec>
  }
  else if(fan_step == 1) {
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d113      	bne.n	800a074 <FAN_Set_RPM+0x64>
    set_rpm = 1000;
 800a04c:	4b32      	ldr	r3, [pc, #200]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a04e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a052:	801a      	strh	r2, [r3, #0]
    ccr = (set_rpm*(TIM1->ARR))/MAX_RPM;
 800a054:	4b30      	ldr	r3, [pc, #192]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	4b30      	ldr	r3, [pc, #192]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05e:	fb02 f303 	mul.w	r3, r2, r3
 800a062:	08db      	lsrs	r3, r3, #3
 800a064:	4a2e      	ldr	r2, [pc, #184]	@ (800a120 <FAN_Set_RPM+0x110>)
 800a066:	fba2 2303 	umull	r2, r3, r2, r3
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	4b2d      	ldr	r3, [pc, #180]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a070:	801a      	strh	r2, [r3, #0]
 800a072:	e043      	b.n	800a0fc <FAN_Set_RPM+0xec>
  }
  else if(fan_step == 2) {
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d113      	bne.n	800a0a2 <FAN_Set_RPM+0x92>
    set_rpm = 1500;
 800a07a:	4b27      	ldr	r3, [pc, #156]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a07c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a080:	801a      	strh	r2, [r3, #0]
    ccr = (set_rpm*(TIM1->ARR))/MAX_RPM;
 800a082:	4b25      	ldr	r3, [pc, #148]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	4b24      	ldr	r3, [pc, #144]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08c:	fb02 f303 	mul.w	r3, r2, r3
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	4a23      	ldr	r2, [pc, #140]	@ (800a120 <FAN_Set_RPM+0x110>)
 800a094:	fba2 2303 	umull	r2, r3, r2, r3
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	4b21      	ldr	r3, [pc, #132]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a09e:	801a      	strh	r2, [r3, #0]
 800a0a0:	e02c      	b.n	800a0fc <FAN_Set_RPM+0xec>
  }
  else if(fan_step == 3) {
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d113      	bne.n	800a0d0 <FAN_Set_RPM+0xc0>
    set_rpm = 2000;
 800a0a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a0aa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a0ae:	801a      	strh	r2, [r3, #0]
    ccr = (set_rpm*(TIM1->ARR))/MAX_RPM;
 800a0b0:	4b19      	ldr	r3, [pc, #100]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4b19      	ldr	r3, [pc, #100]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	4a17      	ldr	r2, [pc, #92]	@ (800a120 <FAN_Set_RPM+0x110>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	095b      	lsrs	r3, r3, #5
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	4b16      	ldr	r3, [pc, #88]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	e015      	b.n	800a0fc <FAN_Set_RPM+0xec>
 }
  else if(fan_step == 4) {
 800a0d0:	79fb      	ldrb	r3, [r7, #7]
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d112      	bne.n	800a0fc <FAN_Set_RPM+0xec>
    set_rpm = MAX_RPM;
 800a0d6:	4b10      	ldr	r3, [pc, #64]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a0d8:	f640 0298 	movw	r2, #2200	@ 0x898
 800a0dc:	801a      	strh	r2, [r3, #0]
    ccr = (set_rpm*(TIM1->ARR))/MAX_RPM;
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <FAN_Set_RPM+0x108>)
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
 800a0ec:	08db      	lsrs	r3, r3, #3
 800a0ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a120 <FAN_Set_RPM+0x110>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a0fa:	801a      	strh	r2, [r3, #0]
  }
  else {
   ;
  }
  TIM1->CCR1 = ccr;
 800a0fc:	4b09      	ldr	r3, [pc, #36]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a0fe:	881a      	ldrh	r2, [r3, #0]
 800a100:	4b06      	ldr	r3, [pc, #24]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a102:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = ccr;
 800a104:	4b07      	ldr	r3, [pc, #28]	@ (800a124 <FAN_Set_RPM+0x114>)
 800a106:	881a      	ldrh	r2, [r3, #0]
 800a108:	4b04      	ldr	r3, [pc, #16]	@ (800a11c <FAN_Set_RPM+0x10c>)
 800a10a:	639a      	str	r2, [r3, #56]	@ 0x38
//  TIM1->CCR3 = ccr;
//  TIM3->CCR1 = ccr;
//  TIM3->CCR2 = ccr;
//  TIM3->CCR3 = ccr;

}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	20000020 	.word	0x20000020
 800a11c:	40010000 	.word	0x40010000
 800a120:	1dca01dd 	.word	0x1dca01dd
 800a124:	20005146 	.word	0x20005146

0800a128 <FAN_Read_FansStatus>:

void FAN_Read_FansStatus(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  FAN_Set_RPM(fan_step);
 800a12c:	4b08      	ldr	r3, [pc, #32]	@ (800a150 <FAN_Read_FansStatus+0x28>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff ff6d 	bl	800a010 <FAN_Set_RPM>

  if(fan_done == 0) {
 800a136:	4b07      	ldr	r3, [pc, #28]	@ (800a154 <FAN_Read_FansStatus+0x2c>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d105      	bne.n	800a14a <FAN_Read_FansStatus+0x22>
    fan_done = FAN_Read_RPM();
 800a13e:	f000 f80b 	bl	800a158 <FAN_Read_RPM>
 800a142:	4603      	mov	r3, r0
 800a144:	461a      	mov	r2, r3
 800a146:	4b03      	ldr	r3, [pc, #12]	@ (800a154 <FAN_Read_FansStatus+0x2c>)
 800a148:	701a      	strb	r2, [r3, #0]
  }

}
 800a14a:	bf00      	nop
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000022 	.word	0x20000022
 800a154:	2000514a 	.word	0x2000514a

0800a158 <FAN_Read_RPM>:

uint8_t FAN_Read_RPM(void)
{
 800a158:	b590      	push	{r4, r7, lr}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]

	 switch(step)
 800a162:	4b6a      	ldr	r3, [pc, #424]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	2b03      	cmp	r3, #3
 800a168:	f200 80c7 	bhi.w	800a2fa <FAN_Read_RPM+0x1a2>
 800a16c:	a201      	add	r2, pc, #4	@ (adr r2, 800a174 <FAN_Read_RPM+0x1c>)
 800a16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a172:	bf00      	nop
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a1b5 	.word	0x0800a1b5
 800a17c:	0800a203 	.word	0x0800a203
 800a180:	0800a27d 	.word	0x0800a27d
	 {
	 case 0:
		Stop_InputCapute();
 800a184:	f000 f918 	bl	800a3b8 <Stop_InputCapute>
		Start_InputCapute(ch);
 800a188:	4b61      	ldr	r3, [pc, #388]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f921 	bl	800a3d4 <Start_InputCapute>
		if(fan_step==2) {
 800a192:	4b60      	ldr	r3, [pc, #384]	@ (800a314 <FAN_Read_RPM+0x1bc>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d104      	bne.n	800a1a4 <FAN_Read_RPM+0x4c>
			uTimer_Regist(((uint8_t)uTimerFanCheck), FAN_TIMERCNT1);
 800a19a:	2196      	movs	r1, #150	@ 0x96
 800a19c:	2001      	movs	r0, #1
 800a19e:	f00c fb83 	bl	80168a8 <uTimer_Regist>
 800a1a2:	e003      	b.n	800a1ac <FAN_Read_RPM+0x54>
		}
		else {
			uTimer_Regist(((uint8_t)uTimerFanCheck), FAN_TIMERCNT2);
 800a1a4:	2196      	movs	r1, #150	@ 0x96
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	f00c fb7e 	bl	80168a8 <uTimer_Regist>
		}
		step = 1;
 800a1ac:	4b57      	ldr	r3, [pc, #348]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	701a      	strb	r2, [r3, #0]
		break;
 800a1b2:	e0a6      	b.n	800a302 <FAN_Read_RPM+0x1aa>

	 case 1:
		  if(uTimer_CheckTimeOut((uint8_t)uTimerFanCheck) == TRUE)
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f00c fb8d 	bl	80168d4 <uTimer_CheckTimeOut>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d10a      	bne.n	800a1d6 <FAN_Read_RPM+0x7e>
		  {
        Fan[ch].err = 1;
 800a1c0:	4b53      	ldr	r3, [pc, #332]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	4a54      	ldr	r2, [pc, #336]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	709a      	strb	r2, [r3, #2]
        step = 2;
 800a1ce:	4b4f      	ldr	r3, [pc, #316]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	701a      	strb	r2, [r3, #0]
        break;
 800a1d4:	e095      	b.n	800a302 <FAN_Read_RPM+0x1aa>
		  }
		  if(capture_done[ch] == 1 )
 800a1d6:	4b4e      	ldr	r3, [pc, #312]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	4b4f      	ldr	r3, [pc, #316]	@ (800a31c <FAN_Read_RPM+0x1c4>)
 800a1de:	5c9b      	ldrb	r3, [r3, r2]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d10a      	bne.n	800a1fa <FAN_Read_RPM+0xa2>
		  {
		    Fan[ch].err = 0;
 800a1e4:	4b4a      	ldr	r3, [pc, #296]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	4a4b      	ldr	r2, [pc, #300]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	709a      	strb	r2, [r3, #2]
        step = 2;
 800a1f2:	4b46      	ldr	r3, [pc, #280]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	701a      	strb	r2, [r3, #0]
        break;
 800a1f8:	e083      	b.n	800a302 <FAN_Read_RPM+0x1aa>
		  }

      step = 1;
 800a1fa:	4b44      	ldr	r3, [pc, #272]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
      break;
 800a200:	e07f      	b.n	800a302 <FAN_Read_RPM+0x1aa>

	 case 2:
		Stop_InputCapute();
 800a202:	f000 f8d9 	bl	800a3b8 <Stop_InputCapute>
		Fan[ch].rpm = (int16_t) (frequency[ch]*60/2);
 800a206:	4b42      	ldr	r3, [pc, #264]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	4a45      	ldr	r2, [pc, #276]	@ (800a320 <FAN_Read_RPM+0x1c8>)
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	edd3 7a00 	vldr	s15, [r3]
 800a214:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800a324 <FAN_Read_RPM+0x1cc>
 800a218:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a21c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a224:	4b3a      	ldr	r3, [pc, #232]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a22e:	ee17 3a90 	vmov	r3, s15
 800a232:	b219      	sxth	r1, r3
 800a234:	4b38      	ldr	r3, [pc, #224]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a236:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		Fan[ch].err = FAN_IsRPMOverRange(ch, Fan[ch].rpm);
 800a23a:	4b35      	ldr	r3, [pc, #212]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	4a34      	ldr	r2, [pc, #208]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a240:	7812      	ldrb	r2, [r2, #0]
 800a242:	4611      	mov	r1, r2
 800a244:	4a34      	ldr	r2, [pc, #208]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a246:	f932 2021 	ldrsh.w	r2, [r2, r1, lsl #2]
 800a24a:	b292      	uxth	r2, r2
 800a24c:	4930      	ldr	r1, [pc, #192]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a24e:	7809      	ldrb	r1, [r1, #0]
 800a250:	460c      	mov	r4, r1
 800a252:	4611      	mov	r1, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f869 	bl	800a32c <FAN_IsRPMOverRange>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4619      	mov	r1, r3
 800a25e:	4a2e      	ldr	r2, [pc, #184]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a260:	00a3      	lsls	r3, r4, #2
 800a262:	4413      	add	r3, r2
 800a264:	460a      	mov	r2, r1
 800a266:	709a      	strb	r2, [r3, #2]

		capture_done[ch] = 0;
 800a268:	4b29      	ldr	r3, [pc, #164]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	4b2b      	ldr	r3, [pc, #172]	@ (800a31c <FAN_Read_RPM+0x1c4>)
 800a270:	2100      	movs	r1, #0
 800a272:	5499      	strb	r1, [r3, r2]

		step = 3;
 800a274:	4b25      	ldr	r3, [pc, #148]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a276:	2203      	movs	r2, #3
 800a278:	701a      	strb	r2, [r3, #0]
		break;
 800a27a:	e042      	b.n	800a302 <FAN_Read_RPM+0x1aa>

	 case 3:
		ch++;
 800a27c:	4b24      	ldr	r3, [pc, #144]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	3301      	adds	r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	4b22      	ldr	r3, [pc, #136]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a286:	701a      	strb	r2, [r3, #0]
		if(ch>(MAX_FAN_QTY-1))
 800a288:	4b21      	ldr	r3, [pc, #132]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d930      	bls.n	800a2f2 <FAN_Read_RPM+0x19a>
		{
			//copy the result for debugging
		  for(int i=0; i<MAX_FAN_QTY; i++)
 800a290:	2300      	movs	r3, #0
 800a292:	60bb      	str	r3, [r7, #8]
 800a294:	e015      	b.n	800a2c2 <FAN_Read_RPM+0x16a>
		  {
		    DbgFan[i].rpm = Fan[i].rpm;
 800a296:	4a20      	ldr	r2, [pc, #128]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 800a29e:	4a22      	ldr	r2, [pc, #136]	@ (800a328 <FAN_Read_RPM+0x1d0>)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		    DbgFan[i].err = Fan[i].err;
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <FAN_Read_RPM+0x1c0>)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	7899      	ldrb	r1, [r3, #2]
 800a2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a328 <FAN_Read_RPM+0x1d0>)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	709a      	strb	r2, [r3, #2]
		  for(int i=0; i<MAX_FAN_QTY; i++)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	60bb      	str	r3, [r7, #8]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	dde6      	ble.n	800a296 <FAN_Read_RPM+0x13e>
		  }
		  //clear frequency
			for(int i=0; i<MAX_FAN_QTY; i++) { frequency[i] = 0; }
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	e009      	b.n	800a2e2 <FAN_Read_RPM+0x18a>
 800a2ce:	4a14      	ldr	r2, [pc, #80]	@ (800a320 <FAN_Read_RPM+0x1c8>)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f04f 0200 	mov.w	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	607b      	str	r3, [r7, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	ddf2      	ble.n	800a2ce <FAN_Read_RPM+0x176>
      ch = 0;
 800a2e8:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <FAN_Read_RPM+0x1b8>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	701a      	strb	r2, [r3, #0]
			ret = 1;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	73fb      	strb	r3, [r7, #15]
		}
		//HAL_Delay(10);
		step = 0;
 800a2f2:	4b06      	ldr	r3, [pc, #24]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
		break;
 800a2f8:	e003      	b.n	800a302 <FAN_Read_RPM+0x1aa>

	 default:
		 step = 0;
 800a2fa:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <FAN_Read_RPM+0x1b4>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	701a      	strb	r2, [r3, #0]
		 break;
 800a300:	bf00      	nop
	 }//switch

	return ret;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd90      	pop	{r4, r7, pc}
 800a30c:	20005149 	.word	0x20005149
 800a310:	20005148 	.word	0x20005148
 800a314:	20000022 	.word	0x20000022
 800a318:	2000514c 	.word	0x2000514c
 800a31c:	20005144 	.word	0x20005144
 800a320:	20005138 	.word	0x20005138
 800a324:	42700000 	.word	0x42700000
 800a328:	20005154 	.word	0x20005154

0800a32c <FAN_IsRPMOverRange>:

static uint8_t FAN_IsRPMOverRange(uint8_t ch, uint16_t rpm)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	4603      	mov	r3, r0
 800a334:	460a      	mov	r2, r1
 800a336:	71fb      	strb	r3, [r7, #7]
 800a338:	4613      	mov	r3, r2
 800a33a:	80bb      	strh	r3, [r7, #4]
  uint8_t error = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73fb      	strb	r3, [r7, #15]

  if(rpm<MIN_RPM || rpm>OVER_MAX_RPM)
 800a340:	88bb      	ldrh	r3, [r7, #4]
 800a342:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800a346:	d304      	bcc.n	800a352 <FAN_IsRPMOverRange+0x26>
 800a348:	88bb      	ldrh	r3, [r7, #4]
 800a34a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800a34e:	4293      	cmp	r3, r2
 800a350:	d902      	bls.n	800a358 <FAN_IsRPMOverRange+0x2c>
    error = 1;
 800a352:	2301      	movs	r3, #1
 800a354:	73fb      	strb	r3, [r7, #15]
 800a356:	e001      	b.n	800a35c <FAN_IsRPMOverRange+0x30>
  else
    error = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	73fb      	strb	r3, [r7, #15]

  return error;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <Print_FanStatus>:

  return pFan;
}

void Print_FanStatus(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
	printf("\nFanStep[%d] ", fan_step);
 800a370:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <Print_FanStatus+0x3c>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	4619      	mov	r1, r3
 800a376:	480d      	ldr	r0, [pc, #52]	@ (800a3ac <Print_FanStatus+0x40>)
 800a378:	f00d ff78 	bl	801826c <iprintf>
	printf("%d %d \n", DbgFan[0].err, DbgFan[1].err );
 800a37c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b0 <Print_FanStatus+0x44>)
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	4619      	mov	r1, r3
 800a382:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b0 <Print_FanStatus+0x44>)
 800a384:	799b      	ldrb	r3, [r3, #6]
 800a386:	461a      	mov	r2, r3
 800a388:	480a      	ldr	r0, [pc, #40]	@ (800a3b4 <Print_FanStatus+0x48>)
 800a38a:	f00d ff6f 	bl	801826c <iprintf>
	printf("%d %d \n", DbgFan[0].rpm, DbgFan[1].rpm );
 800a38e:	4b08      	ldr	r3, [pc, #32]	@ (800a3b0 <Print_FanStatus+0x44>)
 800a390:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a394:	4619      	mov	r1, r3
 800a396:	4b06      	ldr	r3, [pc, #24]	@ (800a3b0 <Print_FanStatus+0x44>)
 800a398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a39c:	461a      	mov	r2, r3
 800a39e:	4805      	ldr	r0, [pc, #20]	@ (800a3b4 <Print_FanStatus+0x48>)
 800a3a0:	f00d ff64 	bl	801826c <iprintf>
}
 800a3a4:	bf00      	nop
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000022 	.word	0x20000022
 800a3ac:	0801b37c 	.word	0x0801b37c
 800a3b0:	20005154 	.word	0x20005154
 800a3b4:	0801b38c 	.word	0x0801b38c

0800a3b8 <Stop_InputCapute>:


void Stop_InputCapute(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4804      	ldr	r0, [pc, #16]	@ (800a3d0 <Stop_InputCapute+0x18>)
 800a3c0:	f7fc ff8a 	bl	80072d8 <HAL_TIM_IC_Stop_IT>
  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_3);
 800a3c4:	2108      	movs	r1, #8
 800a3c6:	4802      	ldr	r0, [pc, #8]	@ (800a3d0 <Stop_InputCapute+0x18>)
 800a3c8:	f7fc ff86 	bl	80072d8 <HAL_TIM_IC_Stop_IT>

  //HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
  //HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
  //HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_3);

}
 800a3cc:	bf00      	nop
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20000368 	.word	0x20000368

0800a3d4 <Start_InputCapute>:

void Start_InputCapute(uint8_t channel)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]

  if(channel == 0)
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d104      	bne.n	800a3ee <Start_InputCapute+0x1a>
  {
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	4807      	ldr	r0, [pc, #28]	@ (800a404 <Start_InputCapute+0x30>)
 800a3e8:	f7fc fe4e 	bl	8007088 <HAL_TIM_IC_Start_IT>
//  else if(channel == 5)
//  {
//    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
//  }
//  pwm_ch = channel;
}
 800a3ec:	e006      	b.n	800a3fc <Start_InputCapute+0x28>
  else if(channel == 1)
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d103      	bne.n	800a3fc <Start_InputCapute+0x28>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800a3f4:	2108      	movs	r1, #8
 800a3f6:	4803      	ldr	r0, [pc, #12]	@ (800a404 <Start_InputCapute+0x30>)
 800a3f8:	f7fc fe46 	bl	8007088 <HAL_TIM_IC_Start_IT>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000368 	.word	0x20000368

0800a408 <TIM_IC_Capture>:

/* Measure Frequency */
void TIM_IC_Capture(TIM_HandleTypeDef *htim, uint8_t ch, uint32_t tim_channel)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	460b      	mov	r3, r1
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	72fb      	strb	r3, [r7, #11]
  if (Is_First_Captured[ch]==0) // if the first rising edge is not captured
 800a416:	7afb      	ldrb	r3, [r7, #11]
 800a418:	4a35      	ldr	r2, [pc, #212]	@ (800a4f0 <TIM_IC_Capture+0xe8>)
 800a41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10e      	bne.n	800a440 <TIM_IC_Capture+0x38>
  {
    IC_Val1[ch] = HAL_TIM_ReadCapturedValue(htim, tim_channel); // read the first value
 800a422:	7afc      	ldrb	r4, [r7, #11]
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7fd fa52 	bl	80078d0 <HAL_TIM_ReadCapturedValue>
 800a42c:	4603      	mov	r3, r0
 800a42e:	4a31      	ldr	r2, [pc, #196]	@ (800a4f4 <TIM_IC_Capture+0xec>)
 800a430:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    Is_First_Captured[ch] = 1;  // set the first captured as true
 800a434:	7afb      	ldrb	r3, [r7, #11]
 800a436:	4a2e      	ldr	r2, [pc, #184]	@ (800a4f0 <TIM_IC_Capture+0xe8>)
 800a438:	2101      	movs	r1, #1
 800a43a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
    Is_First_Captured[ch] = 0; // set it back to false
    capture_done[ch] = 1;
  }
}
 800a43e:	e053      	b.n	800a4e8 <TIM_IC_Capture+0xe0>
    IC_Val2[ch] = HAL_TIM_ReadCapturedValue(htim, tim_channel);  // read second value
 800a440:	7afc      	ldrb	r4, [r7, #11]
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7fd fa43 	bl	80078d0 <HAL_TIM_ReadCapturedValue>
 800a44a:	4603      	mov	r3, r0
 800a44c:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f8 <TIM_IC_Capture+0xf0>)
 800a44e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (IC_Val2[ch] > IC_Val1[ch])
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	4a28      	ldr	r2, [pc, #160]	@ (800a4f8 <TIM_IC_Capture+0xf0>)
 800a456:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a45a:	7afb      	ldrb	r3, [r7, #11]
 800a45c:	4925      	ldr	r1, [pc, #148]	@ (800a4f4 <TIM_IC_Capture+0xec>)
 800a45e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a462:	429a      	cmp	r2, r3
 800a464:	d90b      	bls.n	800a47e <TIM_IC_Capture+0x76>
      Difference = IC_Val2[ch]-IC_Val1[ch];
 800a466:	7afb      	ldrb	r3, [r7, #11]
 800a468:	4a23      	ldr	r2, [pc, #140]	@ (800a4f8 <TIM_IC_Capture+0xf0>)
 800a46a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	4920      	ldr	r1, [pc, #128]	@ (800a4f4 <TIM_IC_Capture+0xec>)
 800a472:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	4a20      	ldr	r2, [pc, #128]	@ (800a4fc <TIM_IC_Capture+0xf4>)
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	e015      	b.n	800a4aa <TIM_IC_Capture+0xa2>
    else if (IC_Val1[ch] > IC_Val2[ch])
 800a47e:	7afb      	ldrb	r3, [r7, #11]
 800a480:	4a1c      	ldr	r2, [pc, #112]	@ (800a4f4 <TIM_IC_Capture+0xec>)
 800a482:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a486:	7afb      	ldrb	r3, [r7, #11]
 800a488:	491b      	ldr	r1, [pc, #108]	@ (800a4f8 <TIM_IC_Capture+0xf0>)
 800a48a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d90b      	bls.n	800a4aa <TIM_IC_Capture+0xa2>
      Difference = (0xffffffff - IC_Val1[ch]) + IC_Val2[ch];
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	4a18      	ldr	r2, [pc, #96]	@ (800a4f8 <TIM_IC_Capture+0xf0>)
 800a496:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a49a:	7afb      	ldrb	r3, [r7, #11]
 800a49c:	4915      	ldr	r1, [pc, #84]	@ (800a4f4 <TIM_IC_Capture+0xec>)
 800a49e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	4a15      	ldr	r2, [pc, #84]	@ (800a4fc <TIM_IC_Capture+0xf4>)
 800a4a8:	6013      	str	r3, [r2, #0]
    float refClock = TIMCLOCK/(PRESCALAR);
 800a4aa:	4b15      	ldr	r3, [pc, #84]	@ (800a500 <TIM_IC_Capture+0xf8>)
 800a4ac:	617b      	str	r3, [r7, #20]
    frequency[ch] = refClock/Difference;
 800a4ae:	4b13      	ldr	r3, [pc, #76]	@ (800a4fc <TIM_IC_Capture+0xf4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	ee07 3a90 	vmov	s15, r3
 800a4b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	edd7 6a05 	vldr	s13, [r7, #20]
 800a4c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c4:	4a0f      	ldr	r2, [pc, #60]	@ (800a504 <TIM_IC_Capture+0xfc>)
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	edc3 7a00 	vstr	s15, [r3]
    __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	625a      	str	r2, [r3, #36]	@ 0x24
    Is_First_Captured[ch] = 0; // set it back to false
 800a4d6:	7afb      	ldrb	r3, [r7, #11]
 800a4d8:	4a05      	ldr	r2, [pc, #20]	@ (800a4f0 <TIM_IC_Capture+0xe8>)
 800a4da:	2100      	movs	r1, #0
 800a4dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    capture_done[ch] = 1;
 800a4e0:	7afb      	ldrb	r3, [r7, #11]
 800a4e2:	4a09      	ldr	r2, [pc, #36]	@ (800a508 <TIM_IC_Capture+0x100>)
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	54d1      	strb	r1, [r2, r3]
}
 800a4e8:	bf00      	nop
 800a4ea:	371c      	adds	r7, #28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd90      	pop	{r4, r7, pc}
 800a4f0:	20005130 	.word	0x20005130
 800a4f4:	20005120 	.word	0x20005120
 800a4f8:	20005128 	.word	0x20005128
 800a4fc:	20005140 	.word	0x20005140
 800a500:	49742400 	.word	0x49742400
 800a504:	20005138 	.word	0x20005138
 800a508:	20005144 	.word	0x20005144

0800a50c <HAL_TIM_IC_CaptureCallback>:

//Input Capture time a channel  = 30ms
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]

  if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && (pwm_ch == 0))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a51c:	d10d      	bne.n	800a53a <HAL_TIM_IC_CaptureCallback+0x2e>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	7f1b      	ldrb	r3, [r3, #28]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d109      	bne.n	800a53a <HAL_TIM_IC_CaptureCallback+0x2e>
 800a526:	4b10      	ldr	r3, [pc, #64]	@ (800a568 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d105      	bne.n	800a53a <HAL_TIM_IC_CaptureCallback+0x2e>
  {
    TIM_IC_Capture(htim, 0, TIM_CHANNEL_1);
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff ff68 	bl	800a408 <TIM_IC_Capture>
    return;
 800a538:	e012      	b.n	800a560 <HAL_TIM_IC_CaptureCallback+0x54>
  }

  if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) && (pwm_ch == 1))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a542:	d10d      	bne.n	800a560 <HAL_TIM_IC_CaptureCallback+0x54>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7f1b      	ldrb	r3, [r3, #28]
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d109      	bne.n	800a560 <HAL_TIM_IC_CaptureCallback+0x54>
 800a54c:	4b06      	ldr	r3, [pc, #24]	@ (800a568 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d105      	bne.n	800a560 <HAL_TIM_IC_CaptureCallback+0x54>
  {
    TIM_IC_Capture(htim, 1, TIM_CHANNEL_2);
 800a554:	2204      	movs	r2, #4
 800a556:	2101      	movs	r1, #1
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff ff55 	bl	800a408 <TIM_IC_Capture>
    return;
 800a55e:	bf00      	nop
//  if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) && (pwm_ch == 5))
//  {
//    TIM_IC_Capture(htim, 5, TIM_CHANNEL_3);
//    return;
//  }
}
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	2000511d 	.word	0x2000511d

0800a56c <Control_Fan>:



void Control_Fan(Console_Status_t *Status)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]

  uint8_t temp_status = GetTempStatus();
 800a574:	f00b fc6c 	bl	8015e50 <GetTempStatus>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]

  // Temp is within Normal range
  if( temp_status == 0 )
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d103      	bne.n	800a58a <Control_Fan+0x1e>
  {
    fan_step = 2;
 800a582:	4b0e      	ldr	r3, [pc, #56]	@ (800a5bc <Control_Fan+0x50>)
 800a584:	2202      	movs	r2, #2
 800a586:	701a      	strb	r2, [r3, #0]
  else if( temp_status == 3 )
  {
    fan_step = 0;
  }

}
 800a588:	e013      	b.n	800a5b2 <Control_Fan+0x46>
  else if( temp_status == 2 )
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d103      	bne.n	800a598 <Control_Fan+0x2c>
    fan_step = 3;
 800a590:	4b0a      	ldr	r3, [pc, #40]	@ (800a5bc <Control_Fan+0x50>)
 800a592:	2203      	movs	r2, #3
 800a594:	701a      	strb	r2, [r3, #0]
}
 800a596:	e00c      	b.n	800a5b2 <Control_Fan+0x46>
  else if( temp_status == 1 )
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d103      	bne.n	800a5a6 <Control_Fan+0x3a>
    fan_step = 4;
 800a59e:	4b07      	ldr	r3, [pc, #28]	@ (800a5bc <Control_Fan+0x50>)
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	701a      	strb	r2, [r3, #0]
}
 800a5a4:	e005      	b.n	800a5b2 <Control_Fan+0x46>
  else if( temp_status == 3 )
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d102      	bne.n	800a5b2 <Control_Fan+0x46>
    fan_step = 0;
 800a5ac:	4b03      	ldr	r3, [pc, #12]	@ (800a5bc <Control_Fan+0x50>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
}
 800a5b2:	bf00      	nop
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000022 	.word	0x20000022

0800a5c0 <HMTP_Read_Temp_Value>:
uint8_t i2c_error[2] = {0,};

static void HMTP_Reset(void);

void HMTP_Read_Temp_Value(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  Read_HIH8131Data();
 800a5c4:	f000 f830 	bl	800a628 <Read_HIH8131Data>
  HMTP_CnvData(data_buf);
 800a5c8:	4802      	ldr	r0, [pc, #8]	@ (800a5d4 <HMTP_Read_Temp_Value+0x14>)
 800a5ca:	f000 f889 	bl	800a6e0 <HMTP_CnvData>
}
 800a5ce:	bf00      	nop
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20005174 	.word	0x20005174

0800a5d8 <HMTP_Init>:

void HMTP_Init(void) {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0

    HMTP_Reset();
 800a5dc:	f000 f806 	bl	800a5ec <HMTP_Reset>

    Delay_clock(1U);/*범용 지연함수*/
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f00c f9e5 	bl	80169b0 <Delay_clock>
}
 800a5e6:	bf00      	nop
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <HMTP_Reset>:

static void HMTP_Reset(void) {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TEMP_I2C1_nRESET_GPIO_Port, TEMP_I2C1_nRESET_Pin,GPIO_PIN_SET);
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	2140      	movs	r1, #64	@ 0x40
 800a5f4:	480b      	ldr	r0, [pc, #44]	@ (800a624 <HMTP_Reset+0x38>)
 800a5f6:	f7f9 ffb3 	bl	8004560 <HAL_GPIO_WritePin>
	Delay_clock(10U);
 800a5fa:	200a      	movs	r0, #10
 800a5fc:	f00c f9d8 	bl	80169b0 <Delay_clock>
	HAL_GPIO_WritePin(TEMP_I2C1_nRESET_GPIO_Port, TEMP_I2C1_nRESET_Pin,GPIO_PIN_RESET);
 800a600:	2200      	movs	r2, #0
 800a602:	2140      	movs	r1, #64	@ 0x40
 800a604:	4807      	ldr	r0, [pc, #28]	@ (800a624 <HMTP_Reset+0x38>)
 800a606:	f7f9 ffab 	bl	8004560 <HAL_GPIO_WritePin>
	Delay_clock(200U);
 800a60a:	20c8      	movs	r0, #200	@ 0xc8
 800a60c:	f00c f9d0 	bl	80169b0 <Delay_clock>
	HAL_GPIO_WritePin(TEMP_I2C1_nRESET_GPIO_Port, TEMP_I2C1_nRESET_Pin,GPIO_PIN_SET);
 800a610:	2201      	movs	r2, #1
 800a612:	2140      	movs	r1, #64	@ 0x40
 800a614:	4803      	ldr	r0, [pc, #12]	@ (800a624 <HMTP_Reset+0x38>)
 800a616:	f7f9 ffa3 	bl	8004560 <HAL_GPIO_WritePin>
	Delay_clock(10U);
 800a61a:	200a      	movs	r0, #10
 800a61c:	f00c f9c8 	bl	80169b0 <Delay_clock>
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}
 800a624:	40020400 	.word	0x40020400

0800a628 <Read_HIH8131Data>:

void Read_HIH8131Data(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af02      	add	r7, sp, #8
  for(int ch=0; ch<MAX_HMTP_CH; ch++)
 800a62e:	2300      	movs	r3, #0
 800a630:	607b      	str	r3, [r7, #4]
 800a632:	e044      	b.n	800a6be <Read_HIH8131Data+0x96>
  {
    uint8_t ch_data = 0x01U << ch;
 800a634:	2201      	movs	r2, #1
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	70fb      	strb	r3, [r7, #3]

    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_TCA9546, &ch_data, 1U, I2C_TIMEOUT);
 800a640:	1cfa      	adds	r2, r7, #3
 800a642:	230a      	movs	r3, #10
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	2301      	movs	r3, #1
 800a648:	21e0      	movs	r1, #224	@ 0xe0
 800a64a:	4821      	ldr	r0, [pc, #132]	@ (800a6d0 <Read_HIH8131Data+0xa8>)
 800a64c:	f7fa f918 	bl	8004880 <HAL_I2C_Master_Transmit>
    Delay_clock(100U);
 800a650:	2064      	movs	r0, #100	@ 0x64
 800a652:	f00c f9ad 	bl	80169b0 <Delay_clock>

    HAL_I2C_Master_Transmit(&hi2c1, devAddr, &ch_data, 0U, I2C_TIMEOUT);
 800a656:	4b1f      	ldr	r3, [pc, #124]	@ (800a6d4 <Read_HIH8131Data+0xac>)
 800a658:	8819      	ldrh	r1, [r3, #0]
 800a65a:	1cfa      	adds	r2, r7, #3
 800a65c:	230a      	movs	r3, #10
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	2300      	movs	r3, #0
 800a662:	481b      	ldr	r0, [pc, #108]	@ (800a6d0 <Read_HIH8131Data+0xa8>)
 800a664:	f7fa f90c 	bl	8004880 <HAL_I2C_Master_Transmit>
    HAL_Delay(100U);
 800a668:	2064      	movs	r0, #100	@ 0x64
 800a66a:	f7f8 f881 	bl	8002770 <HAL_Delay>

    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_TCA9546, &ch_data, 1, I2C_TIMEOUT);
 800a66e:	1cfa      	adds	r2, r7, #3
 800a670:	230a      	movs	r3, #10
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2301      	movs	r3, #1
 800a676:	21e0      	movs	r1, #224	@ 0xe0
 800a678:	4815      	ldr	r0, [pc, #84]	@ (800a6d0 <Read_HIH8131Data+0xa8>)
 800a67a:	f7fa f901 	bl	8004880 <HAL_I2C_Master_Transmit>
    Delay_clock(200U);
 800a67e:	20c8      	movs	r0, #200	@ 0xc8
 800a680:	f00c f996 	bl	80169b0 <Delay_clock>
    if(HAL_I2C_Master_Receive(&hi2c1, devAddr, (uint8_t *)&data_buf[ch], 4, I2C_TIMEOUT) != HAL_OK)
 800a684:	4b13      	ldr	r3, [pc, #76]	@ (800a6d4 <Read_HIH8131Data+0xac>)
 800a686:	8819      	ldrh	r1, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4a12      	ldr	r2, [pc, #72]	@ (800a6d8 <Read_HIH8131Data+0xb0>)
 800a68e:	441a      	add	r2, r3
 800a690:	230a      	movs	r3, #10
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2304      	movs	r3, #4
 800a696:	480e      	ldr	r0, [pc, #56]	@ (800a6d0 <Read_HIH8131Data+0xa8>)
 800a698:	f7fa f9f0 	bl	8004a7c <HAL_I2C_Master_Receive>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <Read_HIH8131Data+0x86>
    {
      i2c_error[ch] = 1;
 800a6a2:	4a0e      	ldr	r2, [pc, #56]	@ (800a6dc <Read_HIH8131Data+0xb4>)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e004      	b.n	800a6b8 <Read_HIH8131Data+0x90>
    }
    else
    {
      i2c_error[ch] = 0;
 800a6ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a6dc <Read_HIH8131Data+0xb4>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]
  for(int ch=0; ch<MAX_HMTP_CH; ch++)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	ddb7      	ble.n	800a634 <Read_HIH8131Data+0xc>
    }

  }
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000214 	.word	0x20000214
 800a6d4:	20000024 	.word	0x20000024
 800a6d8:	20005174 	.word	0x20005174
 800a6dc:	2000517c 	.word	0x2000517c

0800a6e0 <HMTP_CnvData>:

void HMTP_CnvData(uint8_t data_buf[][4]) {
 800a6e0:	b480      	push	{r7}
 800a6e2:	b089      	sub	sp, #36	@ 0x24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]

	for(int ch=0; ch<MAX_HMTP_CH; ch++)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e086      	b.n	800a7fc <HMTP_CnvData+0x11c>
	{
		uint16_t  Humidity, Humidity_H, Humidity_L;
		uint16_t  Temperature, Temperature_H, Temperature_L;

		if(i2c_error[ch] == 0)
 800a6ee:	4a49      	ldr	r2, [pc, #292]	@ (800a814 <HMTP_CnvData+0x134>)
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d173      	bne.n	800a7e2 <HMTP_CnvData+0x102>
		{
		  uint8_t temp_data_buf = data_buf[ch][0U];
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	4413      	add	r3, r2
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	76fb      	strb	r3, [r7, #27]
		  Humidity_H = ((uint16_t)temp_data_buf);
 800a706:	7efb      	ldrb	r3, [r7, #27]
 800a708:	833b      	strh	r3, [r7, #24]
		  Humidity_H = Humidity_H << 8U;
 800a70a:	8b3b      	ldrh	r3, [r7, #24]
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	833b      	strh	r3, [r7, #24]
		  temp_data_buf = data_buf[ch][1U];
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	4413      	add	r3, r2
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	76fb      	strb	r3, [r7, #27]
		  Humidity_L = ((uint16_t)temp_data_buf);
 800a71c:	7efb      	ldrb	r3, [r7, #27]
 800a71e:	82fb      	strh	r3, [r7, #22]
		  Humidity = (Humidity_H | Humidity_L) & 0x3FFFU;
 800a720:	8b3a      	ldrh	r2, [r7, #24]
 800a722:	8afb      	ldrh	r3, [r7, #22]
 800a724:	4313      	orrs	r3, r2
 800a726:	b29b      	uxth	r3, r3
 800a728:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a72c:	82bb      	strh	r3, [r7, #20]

		  temp_data_buf = data_buf[ch][2U];
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	4413      	add	r3, r2
 800a736:	789b      	ldrb	r3, [r3, #2]
 800a738:	76fb      	strb	r3, [r7, #27]
		  Temperature_H = ((uint16_t)temp_data_buf);
 800a73a:	7efb      	ldrb	r3, [r7, #27]
 800a73c:	827b      	strh	r3, [r7, #18]
		  Temperature_H = Temperature_H << 8U;
 800a73e:	8a7b      	ldrh	r3, [r7, #18]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	827b      	strh	r3, [r7, #18]
		  temp_data_buf = data_buf[ch][3U];
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	4413      	add	r3, r2
 800a74c:	78db      	ldrb	r3, [r3, #3]
 800a74e:	76fb      	strb	r3, [r7, #27]
		  Temperature_L = ((uint16_t)temp_data_buf);
 800a750:	7efb      	ldrb	r3, [r7, #27]
 800a752:	823b      	strh	r3, [r7, #16]
		  Temperature = (((Temperature_H | Temperature_L) >> 2U) + 1U) & 0x3FFFU;
 800a754:	8a7a      	ldrh	r2, [r7, #18]
 800a756:	8a3b      	ldrh	r3, [r7, #16]
 800a758:	4313      	orrs	r3, r2
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	089b      	lsrs	r3, r3, #2
 800a75e:	b29b      	uxth	r3, r3
 800a760:	3301      	adds	r3, #1
 800a762:	b29b      	uxth	r3, r3
 800a764:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a768:	81fb      	strh	r3, [r7, #14]

		  HMTP_Data[ch].fHum = ((float)Humidity * 100.0F)/(16383.0F);
 800a76a:	8abb      	ldrh	r3, [r7, #20]
 800a76c:	ee07 3a90 	vmov	s15, r3
 800a770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a774:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800a818 <HMTP_CnvData+0x138>
 800a778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a77c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a81c <HMTP_CnvData+0x13c>
 800a780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a784:	4926      	ldr	r1, [pc, #152]	@ (800a820 <HMTP_CnvData+0x140>)
 800a786:	69fa      	ldr	r2, [r7, #28]
 800a788:	4613      	mov	r3, r2
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	3304      	adds	r3, #4
 800a794:	edc3 7a00 	vstr	s15, [r3]
		  HMTP_Data[ch].fTemp = (((float)Temperature * 165.0F)/(16383.0F)) - 40.0F;
 800a798:	89fb      	ldrh	r3, [r7, #14]
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800a824 <HMTP_CnvData+0x144>
 800a7a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7aa:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800a81c <HMTP_CnvData+0x13c>
 800a7ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800a828 <HMTP_CnvData+0x148>
 800a7b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7ba:	4919      	ldr	r1, [pc, #100]	@ (800a820 <HMTP_CnvData+0x140>)
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	440b      	add	r3, r1
 800a7c8:	edc3 7a00 	vstr	s15, [r3]

      HMTP_Data[ch].error = 0;
 800a7cc:	4914      	ldr	r1, [pc, #80]	@ (800a820 <HMTP_CnvData+0x140>)
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	440b      	add	r3, r1
 800a7da:	3308      	adds	r3, #8
 800a7dc:	2200      	movs	r2, #0
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	e009      	b.n	800a7f6 <HMTP_CnvData+0x116>
		}
		else
		{
      HMTP_Data[ch].error = 1;
 800a7e2:	490f      	ldr	r1, [pc, #60]	@ (800a820 <HMTP_CnvData+0x140>)
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	440b      	add	r3, r1
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	701a      	strb	r2, [r3, #0]
	for(int ch=0; ch<MAX_HMTP_CH; ch++)
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	f77f af75 	ble.w	800a6ee <HMTP_CnvData+0xe>

		}
	}
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	3724      	adds	r7, #36	@ 0x24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	2000517c 	.word	0x2000517c
 800a818:	42c80000 	.word	0x42c80000
 800a81c:	467ffc00 	.word	0x467ffc00
 800a820:	2000515c 	.word	0x2000515c
 800a824:	43250000 	.word	0x43250000
 800a828:	42200000 	.word	0x42200000

0800a82c <MAX7219_Write>:
//    0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x3D, 0x76, 0x06, 0x1E, // 100-109 (c, d, e, f, g, h, i, j, k, l)
//    0x76, 0x38, 0x37, 0x3F, 0x3F, 0x73, 0x67, 0x77, 0x7C, 0x39, // 110-119 (m, n, o, p, q, r, s, t, u, v)
//    0x5E, 0x79, 0x71, 0x3D, 0x76, 0x06, 0x1E, 0x76, 0x00,       // 120-127 (w, x, y, z, {, |, }, ~)
//};

void MAX7219_Write(uint8_t address, uint8_t data) {
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	4603      	mov	r3, r0
 800a834:	460a      	mov	r2, r1
 800a836:	71fb      	strb	r3, [r7, #7]
 800a838:	4613      	mov	r3, r2
 800a83a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {address, data};
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	733b      	strb	r3, [r7, #12]
 800a840:	79bb      	ldrb	r3, [r7, #6]
 800a842:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(SEG_LOAD_GPIO_Port, SEG_LOAD_Pin, GPIO_PIN_RESET); // CS 핀 LOW
 800a844:	2200      	movs	r2, #0
 800a846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a84a:	480a      	ldr	r0, [pc, #40]	@ (800a874 <MAX7219_Write+0x48>)
 800a84c:	f7f9 fe88 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, txData, 2, HAL_MAX_DELAY);
 800a850:	f107 010c 	add.w	r1, r7, #12
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	2202      	movs	r2, #2
 800a85a:	4807      	ldr	r0, [pc, #28]	@ (800a878 <MAX7219_Write+0x4c>)
 800a85c:	f7fb ffcd 	bl	80067fa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SEG_LOAD_GPIO_Port, SEG_LOAD_Pin, GPIO_PIN_SET);   // CS 핀 HIGH
 800a860:	2201      	movs	r2, #1
 800a862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a866:	4803      	ldr	r0, [pc, #12]	@ (800a874 <MAX7219_Write+0x48>)
 800a868:	f7f9 fe7a 	bl	8004560 <HAL_GPIO_WritePin>
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	40020000 	.word	0x40020000
 800a878:	200002c4 	.word	0x200002c4

0800a87c <MAX7219_Clear_3Digits>:
    for (uint8_t i = 0; i < 8; i++) {
        MAX7219_Write(i, 0x0F); // 모든 digit을 OFF
    }
}

static void MAX7219_Clear_3Digits(void) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
    MAX7219_Write(MAX7219_DIGIT0, 0x0F); // 첫 번째 digit OFF
 800a880:	210f      	movs	r1, #15
 800a882:	2001      	movs	r0, #1
 800a884:	f7ff ffd2 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_DIGIT1, 0x0F); // 두 번째 digit OFF
 800a888:	210f      	movs	r1, #15
 800a88a:	2002      	movs	r0, #2
 800a88c:	f7ff ffce 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_DIGIT2, 0x0F); // 세 번째 digit OFF
 800a890:	210f      	movs	r1, #15
 800a892:	2003      	movs	r0, #3
 800a894:	f7ff ffca 	bl	800a82c <MAX7219_Write>
}
 800a898:	bf00      	nop
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <MAX7219_Init>:

void MAX7219_Init(void) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	af00      	add	r7, sp, #0
    MAX7219_Write(MAX7219_SCAN_LIMIT, 0x02);  // 3-digit 사용
 800a8a0:	2102      	movs	r1, #2
 800a8a2:	200b      	movs	r0, #11
 800a8a4:	f7ff ffc2 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_DECODE_MODE, 0x00); // no decode mode
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	2009      	movs	r0, #9
 800a8ac:	f7ff ffbe 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_INTENSITY, 0x0F);   // 최대 밝기
 800a8b0:	210f      	movs	r1, #15
 800a8b2:	200a      	movs	r0, #10
 800a8b4:	f7ff ffba 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_SHUTDOWN, 0x01);    // 정상 작동 모드
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	200c      	movs	r0, #12
 800a8bc:	f7ff ffb6 	bl	800a82c <MAX7219_Write>

    MAX7219_Clear_3Digits();
 800a8c0:	f7ff ffdc 	bl	800a87c <MAX7219_Clear_3Digits>
    Display_3Digit("   ");
 800a8c4:	4802      	ldr	r0, [pc, #8]	@ (800a8d0 <MAX7219_Init+0x34>)
 800a8c6:	f000 f805 	bl	800a8d4 <Display_3Digit>
}
 800a8ca:	bf00      	nop
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	0801b394 	.word	0x0801b394

0800a8d4 <Display_3Digit>:

void Display_3Digit(const char* str) {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
    if (str == NULL) return;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d01d      	beq.n	800a91e <Display_3Digit+0x4a>

    MAX7219_Write(MAX7219_DIGIT0, char_map[(uint8_t)str[0]]);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a928 <Display_3Digit+0x54>)
 800a8ea:	5c9b      	ldrb	r3, [r3, r2]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	f7ff ff9c 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_DIGIT1, char_map[(uint8_t)str[1]]);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a928 <Display_3Digit+0x54>)
 800a8fe:	5c9b      	ldrb	r3, [r3, r2]
 800a900:	4619      	mov	r1, r3
 800a902:	2002      	movs	r0, #2
 800a904:	f7ff ff92 	bl	800a82c <MAX7219_Write>
    MAX7219_Write(MAX7219_DIGIT2, char_map[(uint8_t)str[2]]);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3302      	adds	r3, #2
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	4b05      	ldr	r3, [pc, #20]	@ (800a928 <Display_3Digit+0x54>)
 800a912:	5c9b      	ldrb	r3, [r3, r2]
 800a914:	4619      	mov	r1, r3
 800a916:	2003      	movs	r0, #3
 800a918:	f7ff ff88 	bl	800a82c <MAX7219_Write>
 800a91c:	e000      	b.n	800a920 <Display_3Digit+0x4c>
    if (str == NULL) return;
 800a91e:	bf00      	nop
}
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	0801e358 	.word	0x0801e358

0800a92c <Display_Number>:

void Display_Number(uint32_t num) {
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
    char str[4]; // 최대 3자리 숫자 + null terminator
    snprintf(str, sizeof(str), "%3lu", (unsigned long)num); // 숫자를 문자열로 변환, 공백 포함
 800a934:	f107 000c 	add.w	r0, r7, #12
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a0b      	ldr	r2, [pc, #44]	@ (800a968 <Display_Number+0x3c>)
 800a93c:	2104      	movs	r1, #4
 800a93e:	f00d fdc9 	bl	80184d4 <sniprintf>

    // 맨 앞에 0이 나오는 디지트를 꺼서 표시
    if (str[0] == '0') {
 800a942:	7b3b      	ldrb	r3, [r7, #12]
 800a944:	2b30      	cmp	r3, #48	@ 0x30
 800a946:	d106      	bne.n	800a956 <Display_Number+0x2a>
        str[0] = ' ';
 800a948:	2320      	movs	r3, #32
 800a94a:	733b      	strb	r3, [r7, #12]
        if (str[1] == '0') {
 800a94c:	7b7b      	ldrb	r3, [r7, #13]
 800a94e:	2b30      	cmp	r3, #48	@ 0x30
 800a950:	d101      	bne.n	800a956 <Display_Number+0x2a>
            str[1] = ' ';
 800a952:	2320      	movs	r3, #32
 800a954:	737b      	strb	r3, [r7, #13]
        }
    }

    Display_3Digit(str);
 800a956:	f107 030c 	add.w	r3, r7, #12
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff ffba 	bl	800a8d4 <Display_3Digit>
}
 800a960:	bf00      	nop
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	0801b398 	.word	0x0801b398

0800a96c <configure_mac_filter>:
2. Bind the socket to server address.
3. Wait until datagram status arrives from client.
4. Process the datagram status and send a reply to client.
5. Go back to Step 3.
*/
void configure_mac_filter(void) {
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
    ETH_MACFilterConfigTypeDef MACFilterConfig;

    // 현재 MAC 필터 설정을 가져옵니다.
    HAL_ETH_GetMACFilterConfig(&heth, &MACFilterConfig);
 800a972:	463b      	mov	r3, r7
 800a974:	4619      	mov	r1, r3
 800a976:	4807      	ldr	r0, [pc, #28]	@ (800a994 <configure_mac_filter+0x28>)
 800a978:	f7f8 ff94 	bl	80038a4 <HAL_ETH_GetMACFilterConfig>

    // 멀티캐스트 프레임 필터 설정
    MACFilterConfig.PassAllMulticast = ENABLE;
 800a97c:	2301      	movs	r3, #1
 800a97e:	717b      	strb	r3, [r7, #5]

    // MAC 필터 설정을 적용합니다.
    HAL_ETH_SetMACFilterConfig(&heth, &MACFilterConfig);
 800a980:	463b      	mov	r3, r7
 800a982:	4619      	mov	r1, r3
 800a984:	4803      	ldr	r0, [pc, #12]	@ (800a994 <configure_mac_filter+0x28>)
 800a986:	f7f8 ff37 	bl	80037f8 <HAL_ETH_SetMACFilterConfig>
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20004ff4 	.word	0x20004ff4

0800a998 <udpServer_init>:

void udpServer_init(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   //struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 800a99e:	f008 f8f7 	bl	8012b90 <udp_new>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	4a11      	ldr	r2, [pc, #68]	@ (800a9ec <udpServer_init+0x54>)
 800a9a6:	6013      	str	r3, [r2, #0]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 50, 100);
 800a9a8:	4b11      	ldr	r3, [pc, #68]	@ (800a9f0 <udpServer_init+0x58>)
 800a9aa:	603b      	str	r3, [r7, #0]

   err = udp_bind(upcb, &myIPADDR, 9000);  // 7 is the server UDP port
 800a9ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a9ec <udpServer_init+0x54>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f242 3228 	movw	r2, #9000	@ 0x2328
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f007 ff6a 	bl	8012890 <udp_bind>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	71fb      	strb	r3, [r7, #7]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 800a9c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d107      	bne.n	800a9d8 <udpServer_init+0x40>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 800a9c8:	4b08      	ldr	r3, [pc, #32]	@ (800a9ec <udpServer_init+0x54>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4909      	ldr	r1, [pc, #36]	@ (800a9f4 <udpServer_init+0x5c>)
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f008 f87b 	bl	8012acc <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 800a9d6:	e004      	b.n	800a9e2 <udpServer_init+0x4a>
	   udp_remove(upcb);
 800a9d8:	4b04      	ldr	r3, [pc, #16]	@ (800a9ec <udpServer_init+0x54>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f008 f895 	bl	8012b0c <udp_remove>
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20005180 	.word	0x20005180
 800a9f0:	6432a8c0 	.word	0x6432a8c0
 800a9f4:	0800a9f9 	.word	0x0800a9f9

0800a9f8 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram status and send a reply to client. */
//void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
void udp_receive_callback(void *arg, struct udp_pcb *upcbx, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800a9f8:	b5b0      	push	{r4, r5, r7, lr}
 800a9fa:	b08c      	sub	sp, #48	@ 0x30
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
    char *remoteIP = ipaddr_ntoa(addr);
 800aa06:	6838      	ldr	r0, [r7, #0]
 800aa08:	f00a f904 	bl	8014c14 <ip4addr_ntoa>
 800aa0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint16_t port_no = 9000;
 800aa0e:	f242 3328 	movw	r3, #9000	@ 0x2328
 800aa12:	857b      	strh	r3, [r7, #42]	@ 0x2a
    RequsetPacket_t *requestPacket = (RequsetPacket_t *)p->payload;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24

    //Set MineDet_Num
    mine_det_num = requestPacket->MineDet_Num;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	7b1a      	ldrb	r2, [r3, #12]
 800aa1e:	4b13      	ldr	r3, [pc, #76]	@ (800aa6c <udp_receive_callback+0x74>)
 800aa20:	701a      	strb	r2, [r3, #0]

    // print requestPacket
    print_request_packet(remoteIP, requestPacket);
 800aa22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa26:	f000 f833 	bl	800aa90 <print_request_packet>

    // create ReplyPacket for client
    uint8_t buffer[sizeof(ReplyPacket_t)];
    UDP_Make_ReplyPacket(requestPacket);
 800aa2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa2c:	f00b fee6 	bl	80167fc <UDP_Make_ReplyPacket>
    memcpy(buffer, &reply, sizeof(ReplyPacket_t));
 800aa30:	4b0f      	ldr	r3, [pc, #60]	@ (800aa70 <udp_receive_callback+0x78>)
 800aa32:	f107 0410 	add.w	r4, r7, #16
 800aa36:	461d      	mov	r5, r3
 800aa38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	6023      	str	r3, [r4, #0]
    print_reply_packet(remoteIP, (ReplyPacket_t *)&buffer);
 800aa40:	f107 0310 	add.w	r3, r7, #16
 800aa44:	4619      	mov	r1, r3
 800aa46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa48:	f000 f864 	bl	800ab14 <print_reply_packet>

    // reply to the received remote client
     udp_send_to_client(upcb, addr, port_no, (char *)buffer);
 800aa4c:	4b09      	ldr	r3, [pc, #36]	@ (800aa74 <udp_receive_callback+0x7c>)
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	f107 0310 	add.w	r3, r7, #16
 800aa54:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	f000 f8a6 	bl	800aba8 <udp_send_to_client>

    pbuf_free(p);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 fd55 	bl	800c50c <pbuf_free>
}
 800aa62:	bf00      	nop
 800aa64:	3730      	adds	r7, #48	@ 0x30
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bdb0      	pop	{r4, r5, r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20005184 	.word	0x20005184
 800aa70:	20008af4 	.word	0x20008af4
 800aa74:	20005180 	.word	0x20005180

0800aa78 <UDP_Get_MineDetNum>:

uint8_t UDP_Get_MineDetNum(void)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	af00      	add	r7, sp, #0
  return mine_det_num;
 800aa7c:	4b03      	ldr	r3, [pc, #12]	@ (800aa8c <UDP_Get_MineDetNum+0x14>)
 800aa7e:	781b      	ldrb	r3, [r3, #0]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20005184 	.word	0x20005184

0800aa90 <print_request_packet>:

void print_request_packet(const char *remoteIP, const RequsetPacket_t *request)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
    printf("[ REQUEST ] from %s\n", remoteIP);
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	4816      	ldr	r0, [pc, #88]	@ (800aaf8 <print_request_packet+0x68>)
 800aa9e:	f00d fbe5 	bl	801826c <iprintf>
    printf(" - Sender  : 0x%02X\n", request->Sender);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4814      	ldr	r0, [pc, #80]	@ (800aafc <print_request_packet+0x6c>)
 800aaaa:	f00d fbdf 	bl	801826c <iprintf>
    printf(" - Receiver: 0x%02X\n", request->Receiver);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	4619      	mov	r1, r3
 800aab4:	4812      	ldr	r0, [pc, #72]	@ (800ab00 <print_request_packet+0x70>)
 800aab6:	f00d fbd9 	bl	801826c <iprintf>
    printf(" - Command : 0x%04X\n", request->Command);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	885b      	ldrh	r3, [r3, #2]
 800aabe:	4619      	mov	r1, r3
 800aac0:	4810      	ldr	r0, [pc, #64]	@ (800ab04 <print_request_packet+0x74>)
 800aac2:	f00d fbd3 	bl	801826c <iprintf>
    printf(" - Size    : %d\n", request->Size);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	889b      	ldrh	r3, [r3, #4]
 800aaca:	4619      	mov	r1, r3
 800aacc:	480e      	ldr	r0, [pc, #56]	@ (800ab08 <print_request_packet+0x78>)
 800aace:	f00d fbcd 	bl	801826c <iprintf>
    printf(" - Count   : %lu\n", request->Count);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	4619      	mov	r1, r3
 800aad8:	480c      	ldr	r0, [pc, #48]	@ (800ab0c <print_request_packet+0x7c>)
 800aada:	f00d fbc7 	bl	801826c <iprintf>

    printf(" - MineDet : %d\n", request->MineDet_Num);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	7b1b      	ldrb	r3, [r3, #12]
 800aae2:	4619      	mov	r1, r3
 800aae4:	480a      	ldr	r0, [pc, #40]	@ (800ab10 <print_request_packet+0x80>)
 800aae6:	f00d fbc1 	bl	801826c <iprintf>
    printf("\n");
 800aaea:	200a      	movs	r0, #10
 800aaec:	f00d fbd0 	bl	8018290 <putchar>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	0801b3a0 	.word	0x0801b3a0
 800aafc:	0801b3b8 	.word	0x0801b3b8
 800ab00:	0801b3d0 	.word	0x0801b3d0
 800ab04:	0801b3e8 	.word	0x0801b3e8
 800ab08:	0801b400 	.word	0x0801b400
 800ab0c:	0801b414 	.word	0x0801b414
 800ab10:	0801b428 	.word	0x0801b428

0800ab14 <print_reply_packet>:

void print_reply_packet(const char *remoteIP, const ReplyPacket_t *reply)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
    printf("[ REPLY ] from %s\n", remoteIP);
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4819      	ldr	r0, [pc, #100]	@ (800ab88 <print_reply_packet+0x74>)
 800ab22:	f00d fba3 	bl	801826c <iprintf>
    printf(" - Sender  : 0x%02X\n", reply->Sender);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4817      	ldr	r0, [pc, #92]	@ (800ab8c <print_reply_packet+0x78>)
 800ab2e:	f00d fb9d 	bl	801826c <iprintf>
    printf(" - Receiver: 0x%02X\n", reply->Receiver);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	4619      	mov	r1, r3
 800ab38:	4815      	ldr	r0, [pc, #84]	@ (800ab90 <print_reply_packet+0x7c>)
 800ab3a:	f00d fb97 	bl	801826c <iprintf>
    printf(" - Command : 0x%04X\n", reply->Command);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	4619      	mov	r1, r3
 800ab44:	4813      	ldr	r0, [pc, #76]	@ (800ab94 <print_reply_packet+0x80>)
 800ab46:	f00d fb91 	bl	801826c <iprintf>
    printf(" - Pkt Size: %d\n", reply->Size);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	889b      	ldrh	r3, [r3, #4]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4811      	ldr	r0, [pc, #68]	@ (800ab98 <print_reply_packet+0x84>)
 800ab52:	f00d fb8b 	bl	801826c <iprintf>
    printf(" - Count   : %lu\n", reply->Count);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	480f      	ldr	r0, [pc, #60]	@ (800ab9c <print_reply_packet+0x88>)
 800ab5e:	f00d fb85 	bl	801826c <iprintf>

    printf(" - SeqNo : %lu\n", reply->SeqNo);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	4619      	mov	r1, r3
 800ab68:	480d      	ldr	r0, [pc, #52]	@ (800aba0 <print_reply_packet+0x8c>)
 800ab6a:	f00d fb7f 	bl	801826c <iprintf>
    printf(" - Result : %d\n", reply->Result);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	7c1b      	ldrb	r3, [r3, #16]
 800ab72:	4619      	mov	r1, r3
 800ab74:	480b      	ldr	r0, [pc, #44]	@ (800aba4 <print_reply_packet+0x90>)
 800ab76:	f00d fb79 	bl	801826c <iprintf>
    printf("\n");
 800ab7a:	200a      	movs	r0, #10
 800ab7c:	f00d fb88 	bl	8018290 <putchar>
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	0801b43c 	.word	0x0801b43c
 800ab8c:	0801b3b8 	.word	0x0801b3b8
 800ab90:	0801b3d0 	.word	0x0801b3d0
 800ab94:	0801b3e8 	.word	0x0801b3e8
 800ab98:	0801b450 	.word	0x0801b450
 800ab9c:	0801b414 	.word	0x0801b414
 800aba0:	0801b464 	.word	0x0801b464
 800aba4:	0801b474 	.word	0x0801b474

0800aba8 <udp_send_to_client>:


void udp_send_to_client(struct udp_pcb *upcbx, const ip_addr_t *addr, u16_t port, const char *data)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	80fb      	strh	r3, [r7, #6]
    struct pbuf *txBuf;
    int len = sizeof(ReplyPacket_t);
 800abb8:	2314      	movs	r3, #20
 800abba:	61fb      	str	r3, [r7, #28]

    txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800abc4:	4619      	mov	r1, r3
 800abc6:	2036      	movs	r0, #54	@ 0x36
 800abc8:	f001 f9bc 	bl	800bf44 <pbuf_alloc>
 800abcc:	61b8      	str	r0, [r7, #24]
    if (txBuf == NULL) {
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d103      	bne.n	800abdc <udp_send_to_client+0x34>
        printf("Error: pbuf allocation failed\n");
 800abd4:	4824      	ldr	r0, [pc, #144]	@ (800ac68 <udp_send_to_client+0xc0>)
 800abd6:	f00d fbb9 	bl	801834c <puts>
        return;
 800abda:	e041      	b.n	800ac60 <udp_send_to_client+0xb8>
    }

    pbuf_take(txBuf, data, len);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	461a      	mov	r2, r3
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	69b8      	ldr	r0, [r7, #24]
 800abe6:	f001 fefd 	bl	800c9e4 <pbuf_take>

    err_t err = udp_connect(upcb, addr, port);
 800abea:	4b20      	ldr	r3, [pc, #128]	@ (800ac6c <udp_send_to_client+0xc4>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	88fa      	ldrh	r2, [r7, #6]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f007 fed4 	bl	80129a0 <udp_connect>
 800abf8:	4603      	mov	r3, r0
 800abfa:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800abfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d009      	beq.n	800ac18 <udp_send_to_client+0x70>
        printf("Error: udp_connect failed with code %d\n", err);
 800ac04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4819      	ldr	r0, [pc, #100]	@ (800ac70 <udp_send_to_client+0xc8>)
 800ac0c:	f00d fb2e 	bl	801826c <iprintf>
        pbuf_free(txBuf);
 800ac10:	69b8      	ldr	r0, [r7, #24]
 800ac12:	f001 fc7b 	bl	800c50c <pbuf_free>
        return;
 800ac16:	e023      	b.n	800ac60 <udp_send_to_client+0xb8>
    }

    err = udp_send(upcb, txBuf);
 800ac18:	4b14      	ldr	r3, [pc, #80]	@ (800ac6c <udp_send_to_client+0xc4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	69b9      	ldr	r1, [r7, #24]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f007 fc08 	bl	8012434 <udp_send>
 800ac24:	4603      	mov	r3, r0
 800ac26:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800ac28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <udp_send_to_client+0x96>
        printf("Error: udp_send failed with code %d\n", err);
 800ac30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac34:	4619      	mov	r1, r3
 800ac36:	480f      	ldr	r0, [pc, #60]	@ (800ac74 <udp_send_to_client+0xcc>)
 800ac38:	f00d fb18 	bl	801826c <iprintf>
 800ac3c:	e008      	b.n	800ac50 <udp_send_to_client+0xa8>
    } else {
        printf("Message sent to %s:%d\n", ipaddr_ntoa(addr), port);
 800ac3e:	68b8      	ldr	r0, [r7, #8]
 800ac40:	f009 ffe8 	bl	8014c14 <ip4addr_ntoa>
 800ac44:	4601      	mov	r1, r0
 800ac46:	88fb      	ldrh	r3, [r7, #6]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	480b      	ldr	r0, [pc, #44]	@ (800ac78 <udp_send_to_client+0xd0>)
 800ac4c:	f00d fb0e 	bl	801826c <iprintf>
    }

    udp_disconnect(upcb);
 800ac50:	4b06      	ldr	r3, [pc, #24]	@ (800ac6c <udp_send_to_client+0xc4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f007 ff11 	bl	8012a7c <udp_disconnect>
    pbuf_free(txBuf);
 800ac5a:	69b8      	ldr	r0, [r7, #24]
 800ac5c:	f001 fc56 	bl	800c50c <pbuf_free>
}
 800ac60:	3720      	adds	r7, #32
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	0801b484 	.word	0x0801b484
 800ac6c:	20005180 	.word	0x20005180
 800ac70:	0801b4a4 	.word	0x0801b4a4
 800ac74:	0801b4cc 	.word	0x0801b4cc
 800ac78:	0801b4f4 	.word	0x0801b4f4

0800ac7c <udp_send_multicast>:
    udp_remove(pcb);
}


void udp_send_multicast(const StatusPacket_t *status)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
    struct udp_pcb *pcb;
    struct pbuf *p;
    err_t err;

    pcb = udp_new();
 800ac84:	f007 ff84 	bl	8012b90 <udp_new>
 800ac88:	6178      	str	r0, [r7, #20]
    if (pcb == NULL) {
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <udp_send_multicast+0x1c>
      printf("error: usp creation fail !!\n");
 800ac90:	4823      	ldr	r0, [pc, #140]	@ (800ad20 <udp_send_multicast+0xa4>)
 800ac92:	f00d fb5b 	bl	801834c <puts>
      return;
 800ac96:	e03f      	b.n	800ad18 <udp_send_multicast+0x9c>
    }

    // 변경된 포트 번호 사용
    err = udp_bind(pcb, IP_ADDR_ANY, 9001); // 포트를 9001로 변경
 800ac98:	f242 3229 	movw	r2, #9001	@ 0x2329
 800ac9c:	4921      	ldr	r1, [pc, #132]	@ (800ad24 <udp_send_multicast+0xa8>)
 800ac9e:	6978      	ldr	r0, [r7, #20]
 800aca0:	f007 fdf6 	bl	8012890 <udp_bind>
 800aca4:	4603      	mov	r3, r0
 800aca6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800aca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <udp_send_multicast+0x3c>
        // Handle error
        printf("error: binding fail !!\n");
 800acb0:	481d      	ldr	r0, [pc, #116]	@ (800ad28 <udp_send_multicast+0xac>)
 800acb2:	f00d fb4b 	bl	801834c <puts>
        return;
 800acb6:	e02f      	b.n	800ad18 <udp_send_multicast+0x9c>
    }

    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(StatusPacket_t), PBUF_RAM);
 800acb8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800acbc:	2124      	movs	r1, #36	@ 0x24
 800acbe:	2036      	movs	r0, #54	@ 0x36
 800acc0:	f001 f940 	bl	800bf44 <pbuf_alloc>
 800acc4:	60f8      	str	r0, [r7, #12]
    if (p != NULL) {
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d022      	beq.n	800ad12 <udp_send_multicast+0x96>
        memcpy(p->payload, status, sizeof(StatusPacket_t));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	2224      	movs	r2, #36	@ 0x24
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f00d fe34 	bl	8018942 <memcpy>

        ip_addr_t multicast_ip;
        IP_ADDR4(&multicast_ip, 224, 0, 1, 129); // Multicast IP address
 800acda:	4b14      	ldr	r3, [pc, #80]	@ (800ad2c <udp_send_multicast+0xb0>)
 800acdc:	60bb      	str	r3, [r7, #8]

#if LWIP_IGMP
        igmp_joingroup(IP_ADDR_ANY, &multicast_ip);
 800acde:	f107 0308 	add.w	r3, r7, #8
 800ace2:	4619      	mov	r1, r3
 800ace4:	480f      	ldr	r0, [pc, #60]	@ (800ad24 <udp_send_multicast+0xa8>)
 800ace6:	f009 f9f5 	bl	80140d4 <igmp_joingroup>
#endif

        err = udp_sendto(pcb, p, &multicast_ip, 9000);
 800acea:	f107 0208 	add.w	r2, r7, #8
 800acee:	f242 3328 	movw	r3, #9000	@ 0x2328
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	6978      	ldr	r0, [r7, #20]
 800acf6:	f007 fbd1 	bl	801249c <udp_sendto>
 800acfa:	4603      	mov	r3, r0
 800acfc:	74fb      	strb	r3, [r7, #19]
        if (err != ERR_OK) {
 800acfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <udp_send_multicast+0x90>
            // Handle error
            printf("error: pbuf memory allocation fail !!\n");
 800ad06:	480a      	ldr	r0, [pc, #40]	@ (800ad30 <udp_send_multicast+0xb4>)
 800ad08:	f00d fb20 	bl	801834c <puts>
        }

        pbuf_free(p);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f001 fbfd 	bl	800c50c <pbuf_free>
    }

    udp_remove(pcb);
 800ad12:	6978      	ldr	r0, [r7, #20]
 800ad14:	f007 fefa 	bl	8012b0c <udp_remove>
}
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	0801b50c 	.word	0x0801b50c
 800ad24:	0801e4c0 	.word	0x0801e4c0
 800ad28:	0801b528 	.word	0x0801b528
 800ad2c:	810100e0 	.word	0x810100e0
 800ad30:	0801b540 	.word	0x0801b540

0800ad34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	021b      	lsls	r3, r3, #8
 800ad42:	b21a      	sxth	r2, r3
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	b21b      	sxth	r3, r3
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	b21b      	sxth	r3, r3
 800ad50:	b29b      	uxth	r3, r3
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b083      	sub	sp, #12
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	061a      	lsls	r2, r3, #24
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	0e1b      	lsrs	r3, r3, #24
 800ad82:	4313      	orrs	r3, r2
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b089      	sub	sp, #36	@ 0x24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00d      	beq.n	800add0 <lwip_standard_chksum+0x40>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dd0a      	ble.n	800add0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800adba:	69fa      	ldr	r2, [r7, #28]
 800adbc:	1c53      	adds	r3, r2, #1
 800adbe:	61fb      	str	r3, [r7, #28]
 800adc0:	f107 030e 	add.w	r3, r7, #14
 800adc4:	3301      	adds	r3, #1
 800adc6:	7812      	ldrb	r2, [r2, #0]
 800adc8:	701a      	strb	r2, [r3, #0]
    len--;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	3b01      	subs	r3, #1
 800adce:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800add4:	e00a      	b.n	800adec <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	1c9a      	adds	r2, r3, #2
 800adda:	61ba      	str	r2, [r7, #24]
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	4413      	add	r3, r2
 800ade4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	3b02      	subs	r3, #2
 800adea:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	dcf1      	bgt.n	800add6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dd04      	ble.n	800ae02 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800adf8:	f107 030e 	add.w	r3, r7, #14
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ae02:	89fb      	ldrh	r3, [r7, #14]
 800ae04:	461a      	mov	r2, r3
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	0c1a      	lsrs	r2, r3, #16
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	4413      	add	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	0c1a      	lsrs	r2, r3, #16
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4413      	add	r3, r2
 800ae22:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	4313      	orrs	r3, r2
 800ae38:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	b29b      	uxth	r3, r3
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3724      	adds	r7, #36	@ 0x24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ae56:	887b      	ldrh	r3, [r7, #2]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ff98 	bl	800ad90 <lwip_standard_chksum>
 800ae60:	4603      	mov	r3, r0
 800ae62:	43db      	mvns	r3, r3
 800ae64:	b29b      	uxth	r3, r3
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ae78:	f000 f8d6 	bl	800b028 <mem_init>
  memp_init();
 800ae7c:	f000 fbdc 	bl	800b638 <memp_init>
  pbuf_init();
  netif_init();
 800ae80:	f000 fcda 	bl	800b838 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ae84:	f007 f914 	bl	80120b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ae88:	f001 fe70 	bl	800cb6c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800ae8c:	f008 ffa4 	bl	8013dd8 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ae90:	f007 f884 	bl	8011f9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4603      	mov	r3, r0
 800aea4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aea6:	4b05      	ldr	r3, [pc, #20]	@ (800aebc <ptr_to_mem+0x20>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	88fb      	ldrh	r3, [r7, #6]
 800aeac:	4413      	add	r3, r2
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	200057f4 	.word	0x200057f4

0800aec0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aec8:	4b05      	ldr	r3, [pc, #20]	@ (800aee0 <mem_to_ptr+0x20>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	b29b      	uxth	r3, r3
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	200057f4 	.word	0x200057f4

0800aee4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aee4:	b590      	push	{r4, r7, lr}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aeec:	4b45      	ldr	r3, [pc, #276]	@ (800b004 <plug_holes+0x120>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d206      	bcs.n	800af04 <plug_holes+0x20>
 800aef6:	4b44      	ldr	r3, [pc, #272]	@ (800b008 <plug_holes+0x124>)
 800aef8:	f240 12df 	movw	r2, #479	@ 0x1df
 800aefc:	4943      	ldr	r1, [pc, #268]	@ (800b00c <plug_holes+0x128>)
 800aefe:	4844      	ldr	r0, [pc, #272]	@ (800b010 <plug_holes+0x12c>)
 800af00:	f00d f9b4 	bl	801826c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800af04:	4b43      	ldr	r3, [pc, #268]	@ (800b014 <plug_holes+0x130>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d306      	bcc.n	800af1c <plug_holes+0x38>
 800af0e:	4b3e      	ldr	r3, [pc, #248]	@ (800b008 <plug_holes+0x124>)
 800af10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800af14:	4940      	ldr	r1, [pc, #256]	@ (800b018 <plug_holes+0x134>)
 800af16:	483e      	ldr	r0, [pc, #248]	@ (800b010 <plug_holes+0x12c>)
 800af18:	f00d f9a8 	bl	801826c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	791b      	ldrb	r3, [r3, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d006      	beq.n	800af32 <plug_holes+0x4e>
 800af24:	4b38      	ldr	r3, [pc, #224]	@ (800b008 <plug_holes+0x124>)
 800af26:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800af2a:	493c      	ldr	r1, [pc, #240]	@ (800b01c <plug_holes+0x138>)
 800af2c:	4838      	ldr	r0, [pc, #224]	@ (800b010 <plug_holes+0x12c>)
 800af2e:	f00d f99d 	bl	801826c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af3a:	d906      	bls.n	800af4a <plug_holes+0x66>
 800af3c:	4b32      	ldr	r3, [pc, #200]	@ (800b008 <plug_holes+0x124>)
 800af3e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800af42:	4937      	ldr	r1, [pc, #220]	@ (800b020 <plug_holes+0x13c>)
 800af44:	4832      	ldr	r0, [pc, #200]	@ (800b010 <plug_holes+0x12c>)
 800af46:	f00d f991 	bl	801826c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7ff ffa4 	bl	800ae9c <ptr_to_mem>
 800af54:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d024      	beq.n	800afa8 <plug_holes+0xc4>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	791b      	ldrb	r3, [r3, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d120      	bne.n	800afa8 <plug_holes+0xc4>
 800af66:	4b2b      	ldr	r3, [pc, #172]	@ (800b014 <plug_holes+0x130>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d01b      	beq.n	800afa8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800af70:	4b2c      	ldr	r3, [pc, #176]	@ (800b024 <plug_holes+0x140>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d102      	bne.n	800af80 <plug_holes+0x9c>
      lfree = mem;
 800af7a:	4a2a      	ldr	r2, [pc, #168]	@ (800b024 <plug_holes+0x140>)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	881a      	ldrh	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af90:	d00a      	beq.n	800afa8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff ff80 	bl	800ae9c <ptr_to_mem>
 800af9c:	4604      	mov	r4, r0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ff8e 	bl	800aec0 <mem_to_ptr>
 800afa4:	4603      	mov	r3, r0
 800afa6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	885b      	ldrh	r3, [r3, #2]
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff ff75 	bl	800ae9c <ptr_to_mem>
 800afb2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d01f      	beq.n	800affc <plug_holes+0x118>
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	791b      	ldrb	r3, [r3, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d11b      	bne.n	800affc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800afc4:	4b17      	ldr	r3, [pc, #92]	@ (800b024 <plug_holes+0x140>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d102      	bne.n	800afd4 <plug_holes+0xf0>
      lfree = pmem;
 800afce:	4a15      	ldr	r2, [pc, #84]	@ (800b024 <plug_holes+0x140>)
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	881a      	ldrh	r2, [r3, #0]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800afe4:	d00a      	beq.n	800affc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff ff56 	bl	800ae9c <ptr_to_mem>
 800aff0:	4604      	mov	r4, r0
 800aff2:	68b8      	ldr	r0, [r7, #8]
 800aff4:	f7ff ff64 	bl	800aec0 <mem_to_ptr>
 800aff8:	4603      	mov	r3, r0
 800affa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800affc:	bf00      	nop
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	bd90      	pop	{r4, r7, pc}
 800b004:	200057f4 	.word	0x200057f4
 800b008:	0801b568 	.word	0x0801b568
 800b00c:	0801b598 	.word	0x0801b598
 800b010:	0801b5b0 	.word	0x0801b5b0
 800b014:	200057f8 	.word	0x200057f8
 800b018:	0801b5d8 	.word	0x0801b5d8
 800b01c:	0801b5f4 	.word	0x0801b5f4
 800b020:	0801b610 	.word	0x0801b610
 800b024:	200057fc 	.word	0x200057fc

0800b028 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b02e:	4b18      	ldr	r3, [pc, #96]	@ (800b090 <mem_init+0x68>)
 800b030:	3303      	adds	r3, #3
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	461a      	mov	r2, r3
 800b038:	4b16      	ldr	r3, [pc, #88]	@ (800b094 <mem_init+0x6c>)
 800b03a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b03c:	4b15      	ldr	r3, [pc, #84]	@ (800b094 <mem_init+0x6c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b048:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b056:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b05a:	f7ff ff1f 	bl	800ae9c <ptr_to_mem>
 800b05e:	4603      	mov	r3, r0
 800b060:	4a0d      	ldr	r2, [pc, #52]	@ (800b098 <mem_init+0x70>)
 800b062:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b064:	4b0c      	ldr	r3, [pc, #48]	@ (800b098 <mem_init+0x70>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2201      	movs	r2, #1
 800b06a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <mem_init+0x70>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b074:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b076:	4b08      	ldr	r3, [pc, #32]	@ (800b098 <mem_init+0x70>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b07e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b080:	4b04      	ldr	r3, [pc, #16]	@ (800b094 <mem_init+0x6c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a05      	ldr	r2, [pc, #20]	@ (800b09c <mem_init+0x74>)
 800b086:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	200051a0 	.word	0x200051a0
 800b094:	200057f4 	.word	0x200057f4
 800b098:	200057f8 	.word	0x200057f8
 800b09c:	200057fc 	.word	0x200057fc

0800b0a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff ff09 	bl	800aec0 <mem_to_ptr>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7ff fef0 	bl	800ae9c <ptr_to_mem>
 800b0bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	885b      	ldrh	r3, [r3, #2]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff feea 	bl	800ae9c <ptr_to_mem>
 800b0c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0d2:	d818      	bhi.n	800b106 <mem_link_valid+0x66>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	885b      	ldrh	r3, [r3, #2]
 800b0d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0dc:	d813      	bhi.n	800b106 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b0e2:	8afa      	ldrh	r2, [r7, #22]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d004      	beq.n	800b0f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	8afa      	ldrh	r2, [r7, #22]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d109      	bne.n	800b106 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b0f2:	4b08      	ldr	r3, [pc, #32]	@ (800b114 <mem_link_valid+0x74>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d006      	beq.n	800b10a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	885b      	ldrh	r3, [r3, #2]
 800b100:	8afa      	ldrh	r2, [r7, #22]
 800b102:	429a      	cmp	r2, r3
 800b104:	d001      	beq.n	800b10a <mem_link_valid+0x6a>
    return 0;
 800b106:	2300      	movs	r3, #0
 800b108:	e000      	b.n	800b10c <mem_link_valid+0x6c>
  }
  return 1;
 800b10a:	2301      	movs	r3, #1
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200057f8 	.word	0x200057f8

0800b118 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d04c      	beq.n	800b1c0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f003 0303 	and.w	r3, r3, #3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d007      	beq.n	800b140 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b130:	4b25      	ldr	r3, [pc, #148]	@ (800b1c8 <mem_free+0xb0>)
 800b132:	f240 2273 	movw	r2, #627	@ 0x273
 800b136:	4925      	ldr	r1, [pc, #148]	@ (800b1cc <mem_free+0xb4>)
 800b138:	4825      	ldr	r0, [pc, #148]	@ (800b1d0 <mem_free+0xb8>)
 800b13a:	f00d f897 	bl	801826c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b13e:	e040      	b.n	800b1c2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3b08      	subs	r3, #8
 800b144:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b146:	4b23      	ldr	r3, [pc, #140]	@ (800b1d4 <mem_free+0xbc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d306      	bcc.n	800b15e <mem_free+0x46>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f103 020c 	add.w	r2, r3, #12
 800b156:	4b20      	ldr	r3, [pc, #128]	@ (800b1d8 <mem_free+0xc0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d907      	bls.n	800b16e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b15e:	4b1a      	ldr	r3, [pc, #104]	@ (800b1c8 <mem_free+0xb0>)
 800b160:	f240 227f 	movw	r2, #639	@ 0x27f
 800b164:	491d      	ldr	r1, [pc, #116]	@ (800b1dc <mem_free+0xc4>)
 800b166:	481a      	ldr	r0, [pc, #104]	@ (800b1d0 <mem_free+0xb8>)
 800b168:	f00d f880 	bl	801826c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b16c:	e029      	b.n	800b1c2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	791b      	ldrb	r3, [r3, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d107      	bne.n	800b186 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b176:	4b14      	ldr	r3, [pc, #80]	@ (800b1c8 <mem_free+0xb0>)
 800b178:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b17c:	4918      	ldr	r1, [pc, #96]	@ (800b1e0 <mem_free+0xc8>)
 800b17e:	4814      	ldr	r0, [pc, #80]	@ (800b1d0 <mem_free+0xb8>)
 800b180:	f00d f874 	bl	801826c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b184:	e01d      	b.n	800b1c2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff ff8a 	bl	800b0a0 <mem_link_valid>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d107      	bne.n	800b1a2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b192:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c8 <mem_free+0xb0>)
 800b194:	f240 2295 	movw	r2, #661	@ 0x295
 800b198:	4912      	ldr	r1, [pc, #72]	@ (800b1e4 <mem_free+0xcc>)
 800b19a:	480d      	ldr	r0, [pc, #52]	@ (800b1d0 <mem_free+0xb8>)
 800b19c:	f00d f866 	bl	801826c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b1a0:	e00f      	b.n	800b1c2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e8 <mem_free+0xd0>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d202      	bcs.n	800b1b8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b1b2:	4a0d      	ldr	r2, [pc, #52]	@ (800b1e8 <mem_free+0xd0>)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f7ff fe93 	bl	800aee4 <plug_holes>
 800b1be:	e000      	b.n	800b1c2 <mem_free+0xaa>
    return;
 800b1c0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	0801b568 	.word	0x0801b568
 800b1cc:	0801b63c 	.word	0x0801b63c
 800b1d0:	0801b5b0 	.word	0x0801b5b0
 800b1d4:	200057f4 	.word	0x200057f4
 800b1d8:	200057f8 	.word	0x200057f8
 800b1dc:	0801b660 	.word	0x0801b660
 800b1e0:	0801b67c 	.word	0x0801b67c
 800b1e4:	0801b6a4 	.word	0x0801b6a4
 800b1e8:	200057fc 	.word	0x200057fc

0800b1ec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b1f8:	887b      	ldrh	r3, [r7, #2]
 800b1fa:	3303      	adds	r3, #3
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	f023 0303 	bic.w	r3, r3, #3
 800b202:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b204:	8bfb      	ldrh	r3, [r7, #30]
 800b206:	2b0b      	cmp	r3, #11
 800b208:	d801      	bhi.n	800b20e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b20a:	230c      	movs	r3, #12
 800b20c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b20e:	8bfb      	ldrh	r3, [r7, #30]
 800b210:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b214:	d803      	bhi.n	800b21e <mem_trim+0x32>
 800b216:	8bfa      	ldrh	r2, [r7, #30]
 800b218:	887b      	ldrh	r3, [r7, #2]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d201      	bcs.n	800b222 <mem_trim+0x36>
    return NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	e0cc      	b.n	800b3bc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b222:	4b68      	ldr	r3, [pc, #416]	@ (800b3c4 <mem_trim+0x1d8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d304      	bcc.n	800b236 <mem_trim+0x4a>
 800b22c:	4b66      	ldr	r3, [pc, #408]	@ (800b3c8 <mem_trim+0x1dc>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	429a      	cmp	r2, r3
 800b234:	d306      	bcc.n	800b244 <mem_trim+0x58>
 800b236:	4b65      	ldr	r3, [pc, #404]	@ (800b3cc <mem_trim+0x1e0>)
 800b238:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b23c:	4964      	ldr	r1, [pc, #400]	@ (800b3d0 <mem_trim+0x1e4>)
 800b23e:	4865      	ldr	r0, [pc, #404]	@ (800b3d4 <mem_trim+0x1e8>)
 800b240:	f00d f814 	bl	801826c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b244:	4b5f      	ldr	r3, [pc, #380]	@ (800b3c4 <mem_trim+0x1d8>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d304      	bcc.n	800b258 <mem_trim+0x6c>
 800b24e:	4b5e      	ldr	r3, [pc, #376]	@ (800b3c8 <mem_trim+0x1dc>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d301      	bcc.n	800b25c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	e0af      	b.n	800b3bc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3b08      	subs	r3, #8
 800b260:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b262:	69b8      	ldr	r0, [r7, #24]
 800b264:	f7ff fe2c 	bl	800aec0 <mem_to_ptr>
 800b268:	4603      	mov	r3, r0
 800b26a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	881a      	ldrh	r2, [r3, #0]
 800b270:	8afb      	ldrh	r3, [r7, #22]
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	b29b      	uxth	r3, r3
 800b276:	3b08      	subs	r3, #8
 800b278:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b27a:	8bfa      	ldrh	r2, [r7, #30]
 800b27c:	8abb      	ldrh	r3, [r7, #20]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d906      	bls.n	800b290 <mem_trim+0xa4>
 800b282:	4b52      	ldr	r3, [pc, #328]	@ (800b3cc <mem_trim+0x1e0>)
 800b284:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b288:	4953      	ldr	r1, [pc, #332]	@ (800b3d8 <mem_trim+0x1ec>)
 800b28a:	4852      	ldr	r0, [pc, #328]	@ (800b3d4 <mem_trim+0x1e8>)
 800b28c:	f00c ffee 	bl	801826c <iprintf>
  if (newsize > size) {
 800b290:	8bfa      	ldrh	r2, [r7, #30]
 800b292:	8abb      	ldrh	r3, [r7, #20]
 800b294:	429a      	cmp	r2, r3
 800b296:	d901      	bls.n	800b29c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	e08f      	b.n	800b3bc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b29c:	8bfa      	ldrh	r2, [r7, #30]
 800b29e:	8abb      	ldrh	r3, [r7, #20]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d101      	bne.n	800b2a8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	e089      	b.n	800b3bc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fdf5 	bl	800ae9c <ptr_to_mem>
 800b2b2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	791b      	ldrb	r3, [r3, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d13f      	bne.n	800b33c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b2c4:	d106      	bne.n	800b2d4 <mem_trim+0xe8>
 800b2c6:	4b41      	ldr	r3, [pc, #260]	@ (800b3cc <mem_trim+0x1e0>)
 800b2c8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b2cc:	4943      	ldr	r1, [pc, #268]	@ (800b3dc <mem_trim+0x1f0>)
 800b2ce:	4841      	ldr	r0, [pc, #260]	@ (800b3d4 <mem_trim+0x1e8>)
 800b2d0:	f00c ffcc 	bl	801826c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b2da:	8afa      	ldrh	r2, [r7, #22]
 800b2dc:	8bfb      	ldrh	r3, [r7, #30]
 800b2de:	4413      	add	r3, r2
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b2e6:	4b3e      	ldr	r3, [pc, #248]	@ (800b3e0 <mem_trim+0x1f4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d106      	bne.n	800b2fe <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b2f0:	89fb      	ldrh	r3, [r7, #14]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff fdd2 	bl	800ae9c <ptr_to_mem>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	4a39      	ldr	r2, [pc, #228]	@ (800b3e0 <mem_trim+0x1f4>)
 800b2fc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b2fe:	89fb      	ldrh	r3, [r7, #14]
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fdcb 	bl	800ae9c <ptr_to_mem>
 800b306:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	2200      	movs	r2, #0
 800b30c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	89ba      	ldrh	r2, [r7, #12]
 800b312:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	8afa      	ldrh	r2, [r7, #22]
 800b318:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	89fa      	ldrh	r2, [r7, #14]
 800b31e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b328:	d047      	beq.n	800b3ba <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fdb4 	bl	800ae9c <ptr_to_mem>
 800b334:	4602      	mov	r2, r0
 800b336:	89fb      	ldrh	r3, [r7, #14]
 800b338:	8053      	strh	r3, [r2, #2]
 800b33a:	e03e      	b.n	800b3ba <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b33c:	8bfb      	ldrh	r3, [r7, #30]
 800b33e:	f103 0214 	add.w	r2, r3, #20
 800b342:	8abb      	ldrh	r3, [r7, #20]
 800b344:	429a      	cmp	r2, r3
 800b346:	d838      	bhi.n	800b3ba <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b348:	8afa      	ldrh	r2, [r7, #22]
 800b34a:	8bfb      	ldrh	r3, [r7, #30]
 800b34c:	4413      	add	r3, r2
 800b34e:	b29b      	uxth	r3, r3
 800b350:	3308      	adds	r3, #8
 800b352:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b35c:	d106      	bne.n	800b36c <mem_trim+0x180>
 800b35e:	4b1b      	ldr	r3, [pc, #108]	@ (800b3cc <mem_trim+0x1e0>)
 800b360:	f240 3216 	movw	r2, #790	@ 0x316
 800b364:	491d      	ldr	r1, [pc, #116]	@ (800b3dc <mem_trim+0x1f0>)
 800b366:	481b      	ldr	r0, [pc, #108]	@ (800b3d4 <mem_trim+0x1e8>)
 800b368:	f00c ff80 	bl	801826c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b36c:	89fb      	ldrh	r3, [r7, #14]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff fd94 	bl	800ae9c <ptr_to_mem>
 800b374:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b376:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e0 <mem_trim+0x1f4>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d202      	bcs.n	800b386 <mem_trim+0x19a>
      lfree = mem2;
 800b380:	4a17      	ldr	r2, [pc, #92]	@ (800b3e0 <mem_trim+0x1f4>)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2200      	movs	r2, #0
 800b38a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	881a      	ldrh	r2, [r3, #0]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	8afa      	ldrh	r2, [r7, #22]
 800b398:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	89fa      	ldrh	r2, [r7, #14]
 800b39e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b3a8:	d007      	beq.n	800b3ba <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fd74 	bl	800ae9c <ptr_to_mem>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	89fb      	ldrh	r3, [r7, #14]
 800b3b8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b3ba:	687b      	ldr	r3, [r7, #4]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	200057f4 	.word	0x200057f4
 800b3c8:	200057f8 	.word	0x200057f8
 800b3cc:	0801b568 	.word	0x0801b568
 800b3d0:	0801b6d8 	.word	0x0801b6d8
 800b3d4:	0801b5b0 	.word	0x0801b5b0
 800b3d8:	0801b6f0 	.word	0x0801b6f0
 800b3dc:	0801b710 	.word	0x0801b710
 800b3e0:	200057fc 	.word	0x200057fc

0800b3e4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b3ee:	88fb      	ldrh	r3, [r7, #6]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <mem_malloc+0x14>
    return NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e0d9      	b.n	800b5ac <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	3303      	adds	r3, #3
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	f023 0303 	bic.w	r3, r3, #3
 800b402:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b404:	8bbb      	ldrh	r3, [r7, #28]
 800b406:	2b0b      	cmp	r3, #11
 800b408:	d801      	bhi.n	800b40e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b40a:	230c      	movs	r3, #12
 800b40c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b40e:	8bbb      	ldrh	r3, [r7, #28]
 800b410:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b414:	d803      	bhi.n	800b41e <mem_malloc+0x3a>
 800b416:	8bba      	ldrh	r2, [r7, #28]
 800b418:	88fb      	ldrh	r3, [r7, #6]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d201      	bcs.n	800b422 <mem_malloc+0x3e>
    return NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	e0c4      	b.n	800b5ac <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b422:	4b64      	ldr	r3, [pc, #400]	@ (800b5b4 <mem_malloc+0x1d0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff fd4a 	bl	800aec0 <mem_to_ptr>
 800b42c:	4603      	mov	r3, r0
 800b42e:	83fb      	strh	r3, [r7, #30]
 800b430:	e0b4      	b.n	800b59c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b432:	8bfb      	ldrh	r3, [r7, #30]
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff fd31 	bl	800ae9c <ptr_to_mem>
 800b43a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	791b      	ldrb	r3, [r3, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f040 80a4 	bne.w	800b58e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	8bfb      	ldrh	r3, [r7, #30]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	f1a3 0208 	sub.w	r2, r3, #8
 800b454:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b456:	429a      	cmp	r2, r3
 800b458:	f0c0 8099 	bcc.w	800b58e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	461a      	mov	r2, r3
 800b462:	8bfb      	ldrh	r3, [r7, #30]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	f1a3 0208 	sub.w	r2, r3, #8
 800b46a:	8bbb      	ldrh	r3, [r7, #28]
 800b46c:	3314      	adds	r3, #20
 800b46e:	429a      	cmp	r2, r3
 800b470:	d333      	bcc.n	800b4da <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b472:	8bfa      	ldrh	r2, [r7, #30]
 800b474:	8bbb      	ldrh	r3, [r7, #28]
 800b476:	4413      	add	r3, r2
 800b478:	b29b      	uxth	r3, r3
 800b47a:	3308      	adds	r3, #8
 800b47c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b47e:	8a7b      	ldrh	r3, [r7, #18]
 800b480:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b484:	d106      	bne.n	800b494 <mem_malloc+0xb0>
 800b486:	4b4c      	ldr	r3, [pc, #304]	@ (800b5b8 <mem_malloc+0x1d4>)
 800b488:	f240 3287 	movw	r2, #903	@ 0x387
 800b48c:	494b      	ldr	r1, [pc, #300]	@ (800b5bc <mem_malloc+0x1d8>)
 800b48e:	484c      	ldr	r0, [pc, #304]	@ (800b5c0 <mem_malloc+0x1dc>)
 800b490:	f00c feec 	bl	801826c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b494:	8a7b      	ldrh	r3, [r7, #18]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff fd00 	bl	800ae9c <ptr_to_mem>
 800b49c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	881a      	ldrh	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8bfa      	ldrh	r2, [r7, #30]
 800b4b0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	8a7a      	ldrh	r2, [r7, #18]
 800b4b6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b4c6:	d00b      	beq.n	800b4e0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7ff fce5 	bl	800ae9c <ptr_to_mem>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	8a7b      	ldrh	r3, [r7, #18]
 800b4d6:	8053      	strh	r3, [r2, #2]
 800b4d8:	e002      	b.n	800b4e0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b4e0:	4b34      	ldr	r3, [pc, #208]	@ (800b5b4 <mem_malloc+0x1d0>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d127      	bne.n	800b53a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b4ea:	4b32      	ldr	r3, [pc, #200]	@ (800b5b4 <mem_malloc+0x1d0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b4f0:	e005      	b.n	800b4fe <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff fcd0 	bl	800ae9c <ptr_to_mem>
 800b4fc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	791b      	ldrb	r3, [r3, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <mem_malloc+0x12c>
 800b506:	4b2f      	ldr	r3, [pc, #188]	@ (800b5c4 <mem_malloc+0x1e0>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d1f0      	bne.n	800b4f2 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b510:	4a28      	ldr	r2, [pc, #160]	@ (800b5b4 <mem_malloc+0x1d0>)
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b516:	4b27      	ldr	r3, [pc, #156]	@ (800b5b4 <mem_malloc+0x1d0>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c4 <mem_malloc+0x1e0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d00b      	beq.n	800b53a <mem_malloc+0x156>
 800b522:	4b24      	ldr	r3, [pc, #144]	@ (800b5b4 <mem_malloc+0x1d0>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <mem_malloc+0x156>
 800b52c:	4b22      	ldr	r3, [pc, #136]	@ (800b5b8 <mem_malloc+0x1d4>)
 800b52e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b532:	4925      	ldr	r1, [pc, #148]	@ (800b5c8 <mem_malloc+0x1e4>)
 800b534:	4822      	ldr	r0, [pc, #136]	@ (800b5c0 <mem_malloc+0x1dc>)
 800b536:	f00c fe99 	bl	801826c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b53a:	8bba      	ldrh	r2, [r7, #28]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	4413      	add	r3, r2
 800b540:	3308      	adds	r3, #8
 800b542:	4a20      	ldr	r2, [pc, #128]	@ (800b5c4 <mem_malloc+0x1e0>)
 800b544:	6812      	ldr	r2, [r2, #0]
 800b546:	4293      	cmp	r3, r2
 800b548:	d906      	bls.n	800b558 <mem_malloc+0x174>
 800b54a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5b8 <mem_malloc+0x1d4>)
 800b54c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b550:	491e      	ldr	r1, [pc, #120]	@ (800b5cc <mem_malloc+0x1e8>)
 800b552:	481b      	ldr	r0, [pc, #108]	@ (800b5c0 <mem_malloc+0x1dc>)
 800b554:	f00c fe8a 	bl	801826c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f003 0303 	and.w	r3, r3, #3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <mem_malloc+0x18c>
 800b562:	4b15      	ldr	r3, [pc, #84]	@ (800b5b8 <mem_malloc+0x1d4>)
 800b564:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b568:	4919      	ldr	r1, [pc, #100]	@ (800b5d0 <mem_malloc+0x1ec>)
 800b56a:	4815      	ldr	r0, [pc, #84]	@ (800b5c0 <mem_malloc+0x1dc>)
 800b56c:	f00c fe7e 	bl	801826c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <mem_malloc+0x1a4>
 800b57a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b8 <mem_malloc+0x1d4>)
 800b57c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b580:	4914      	ldr	r1, [pc, #80]	@ (800b5d4 <mem_malloc+0x1f0>)
 800b582:	480f      	ldr	r0, [pc, #60]	@ (800b5c0 <mem_malloc+0x1dc>)
 800b584:	f00c fe72 	bl	801826c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	3308      	adds	r3, #8
 800b58c:	e00e      	b.n	800b5ac <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b58e:	8bfb      	ldrh	r3, [r7, #30]
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff fc83 	bl	800ae9c <ptr_to_mem>
 800b596:	4603      	mov	r3, r0
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b59c:	8bfa      	ldrh	r2, [r7, #30]
 800b59e:	8bbb      	ldrh	r3, [r7, #28]
 800b5a0:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	f4ff af44 	bcc.w	800b432 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3720      	adds	r7, #32
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200057fc 	.word	0x200057fc
 800b5b8:	0801b568 	.word	0x0801b568
 800b5bc:	0801b710 	.word	0x0801b710
 800b5c0:	0801b5b0 	.word	0x0801b5b0
 800b5c4:	200057f8 	.word	0x200057f8
 800b5c8:	0801b724 	.word	0x0801b724
 800b5cc:	0801b740 	.word	0x0801b740
 800b5d0:	0801b770 	.word	0x0801b770
 800b5d4:	0801b7a0 	.word	0x0801b7a0

0800b5d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	3303      	adds	r3, #3
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	e011      	b.n	800b61e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	4413      	add	r3, r2
 800b616:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3301      	adds	r3, #1
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	885b      	ldrh	r3, [r3, #2]
 800b622:	461a      	mov	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4293      	cmp	r3, r2
 800b628:	dbe7      	blt.n	800b5fa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b62a:	bf00      	nop
 800b62c:	bf00      	nop
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b63e:	2300      	movs	r3, #0
 800b640:	80fb      	strh	r3, [r7, #6]
 800b642:	e009      	b.n	800b658 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b644:	88fb      	ldrh	r3, [r7, #6]
 800b646:	4a08      	ldr	r2, [pc, #32]	@ (800b668 <memp_init+0x30>)
 800b648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff ffc3 	bl	800b5d8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b652:	88fb      	ldrh	r3, [r7, #6]
 800b654:	3301      	adds	r3, #1
 800b656:	80fb      	strh	r3, [r7, #6]
 800b658:	88fb      	ldrh	r3, [r7, #6]
 800b65a:	2b09      	cmp	r3, #9
 800b65c:	d9f2      	bls.n	800b644 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b65e:	bf00      	nop
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	0801e450 	.word	0x0801e450

0800b66c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d012      	beq.n	800b6a8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	6812      	ldr	r2, [r2, #0]
 800b68a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f003 0303 	and.w	r3, r3, #3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d006      	beq.n	800b6a4 <do_memp_malloc_pool+0x38>
 800b696:	4b07      	ldr	r3, [pc, #28]	@ (800b6b4 <do_memp_malloc_pool+0x48>)
 800b698:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b69c:	4906      	ldr	r1, [pc, #24]	@ (800b6b8 <do_memp_malloc_pool+0x4c>)
 800b69e:	4807      	ldr	r0, [pc, #28]	@ (800b6bc <do_memp_malloc_pool+0x50>)
 800b6a0:	f00c fde4 	bl	801826c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	e000      	b.n	800b6aa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0801b7c4 	.word	0x0801b7c4
 800b6b8:	0801b7f4 	.word	0x0801b7f4
 800b6bc:	0801b818 	.word	0x0801b818

0800b6c0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <memp_malloc_pool+0x1c>
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <memp_malloc_pool+0x38>)
 800b6d0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b6d4:	4909      	ldr	r1, [pc, #36]	@ (800b6fc <memp_malloc_pool+0x3c>)
 800b6d6:	480a      	ldr	r0, [pc, #40]	@ (800b700 <memp_malloc_pool+0x40>)
 800b6d8:	f00c fdc8 	bl	801826c <iprintf>
  if (desc == NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <memp_malloc_pool+0x26>
    return NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e003      	b.n	800b6ee <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ffc0 	bl	800b66c <do_memp_malloc_pool>
 800b6ec:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	0801b7c4 	.word	0x0801b7c4
 800b6fc:	0801b840 	.word	0x0801b840
 800b700:	0801b818 	.word	0x0801b818

0800b704 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	2b09      	cmp	r3, #9
 800b712:	d908      	bls.n	800b726 <memp_malloc+0x22>
 800b714:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <memp_malloc+0x3c>)
 800b716:	f240 1257 	movw	r2, #343	@ 0x157
 800b71a:	490a      	ldr	r1, [pc, #40]	@ (800b744 <memp_malloc+0x40>)
 800b71c:	480a      	ldr	r0, [pc, #40]	@ (800b748 <memp_malloc+0x44>)
 800b71e:	f00c fda5 	bl	801826c <iprintf>
 800b722:	2300      	movs	r3, #0
 800b724:	e008      	b.n	800b738 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	4a08      	ldr	r2, [pc, #32]	@ (800b74c <memp_malloc+0x48>)
 800b72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff ff9c 	bl	800b66c <do_memp_malloc_pool>
 800b734:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b736:	68fb      	ldr	r3, [r7, #12]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	0801b7c4 	.word	0x0801b7c4
 800b744:	0801b854 	.word	0x0801b854
 800b748:	0801b818 	.word	0x0801b818
 800b74c:	0801e450 	.word	0x0801e450

0800b750 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	f003 0303 	and.w	r3, r3, #3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d006      	beq.n	800b772 <do_memp_free_pool+0x22>
 800b764:	4b0a      	ldr	r3, [pc, #40]	@ (800b790 <do_memp_free_pool+0x40>)
 800b766:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b76a:	490a      	ldr	r1, [pc, #40]	@ (800b794 <do_memp_free_pool+0x44>)
 800b76c:	480a      	ldr	r0, [pc, #40]	@ (800b798 <do_memp_free_pool+0x48>)
 800b76e:	f00c fd7d 	bl	801826c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	0801b7c4 	.word	0x0801b7c4
 800b794:	0801b874 	.word	0x0801b874
 800b798:	0801b818 	.word	0x0801b818

0800b79c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <memp_free_pool+0x1e>
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b7d8 <memp_free_pool+0x3c>)
 800b7ae:	f240 1295 	movw	r2, #405	@ 0x195
 800b7b2:	490a      	ldr	r1, [pc, #40]	@ (800b7dc <memp_free_pool+0x40>)
 800b7b4:	480a      	ldr	r0, [pc, #40]	@ (800b7e0 <memp_free_pool+0x44>)
 800b7b6:	f00c fd59 	bl	801826c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <memp_free_pool+0x34>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7ff ffc1 	bl	800b750 <do_memp_free_pool>
 800b7ce:	e000      	b.n	800b7d2 <memp_free_pool+0x36>
    return;
 800b7d0:	bf00      	nop
}
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	0801b7c4 	.word	0x0801b7c4
 800b7dc:	0801b840 	.word	0x0801b840
 800b7e0:	0801b818 	.word	0x0801b818

0800b7e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b09      	cmp	r3, #9
 800b7f4:	d907      	bls.n	800b806 <memp_free+0x22>
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b828 <memp_free+0x44>)
 800b7f8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b7fc:	490b      	ldr	r1, [pc, #44]	@ (800b82c <memp_free+0x48>)
 800b7fe:	480c      	ldr	r0, [pc, #48]	@ (800b830 <memp_free+0x4c>)
 800b800:	f00c fd34 	bl	801826c <iprintf>
 800b804:	e00c      	b.n	800b820 <memp_free+0x3c>

  if (mem == NULL) {
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d008      	beq.n	800b81e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	4a09      	ldr	r2, [pc, #36]	@ (800b834 <memp_free+0x50>)
 800b810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff ff9a 	bl	800b750 <do_memp_free_pool>
 800b81c:	e000      	b.n	800b820 <memp_free+0x3c>
    return;
 800b81e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	0801b7c4 	.word	0x0801b7c4
 800b82c:	0801b894 	.word	0x0801b894
 800b830:	0801b818 	.word	0x0801b818
 800b834:	0801e450 	.word	0x0801e450

0800b838 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b838:	b480      	push	{r7}
 800b83a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b83c:	bf00      	nop
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
	...

0800b848 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d108      	bne.n	800b86e <netif_add+0x26>
 800b85c:	4b61      	ldr	r3, [pc, #388]	@ (800b9e4 <netif_add+0x19c>)
 800b85e:	f240 1227 	movw	r2, #295	@ 0x127
 800b862:	4961      	ldr	r1, [pc, #388]	@ (800b9e8 <netif_add+0x1a0>)
 800b864:	4861      	ldr	r0, [pc, #388]	@ (800b9ec <netif_add+0x1a4>)
 800b866:	f00c fd01 	bl	801826c <iprintf>
 800b86a:	2300      	movs	r3, #0
 800b86c:	e0b6      	b.n	800b9dc <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	d108      	bne.n	800b886 <netif_add+0x3e>
 800b874:	4b5b      	ldr	r3, [pc, #364]	@ (800b9e4 <netif_add+0x19c>)
 800b876:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b87a:	495d      	ldr	r1, [pc, #372]	@ (800b9f0 <netif_add+0x1a8>)
 800b87c:	485b      	ldr	r0, [pc, #364]	@ (800b9ec <netif_add+0x1a4>)
 800b87e:	f00c fcf5 	bl	801826c <iprintf>
 800b882:	2300      	movs	r3, #0
 800b884:	e0aa      	b.n	800b9dc <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b88c:	4b59      	ldr	r3, [pc, #356]	@ (800b9f4 <netif_add+0x1ac>)
 800b88e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b896:	4b57      	ldr	r3, [pc, #348]	@ (800b9f4 <netif_add+0x1ac>)
 800b898:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b8a0:	4b54      	ldr	r3, [pc, #336]	@ (800b9f4 <netif_add+0x1ac>)
 800b8a2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4a4f      	ldr	r2, [pc, #316]	@ (800b9f8 <netif_add+0x1b0>)
 800b8ba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3324      	adds	r3, #36	@ 0x24
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f00c ff34 	bl	8018740 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	639a      	str	r2, [r3, #56]	@ 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a3a      	ldr	r2, [r7, #32]
 800b8e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b8ea:	4b44      	ldr	r3, [pc, #272]	@ (800b9fc <netif_add+0x1b4>)
 800b8ec:	781a      	ldrb	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	68b9      	ldr	r1, [r7, #8]
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f91d 	bl	800bb40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	4798      	blx	r3
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <netif_add+0xce>
    return NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	e062      	b.n	800b9dc <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b91c:	2bff      	cmp	r3, #255	@ 0xff
 800b91e:	d103      	bne.n	800b928 <netif_add+0xe0>
        netif->num = 0;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b92c:	4b34      	ldr	r3, [pc, #208]	@ (800ba00 <netif_add+0x1b8>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	e02b      	b.n	800b98c <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d106      	bne.n	800b94a <netif_add+0x102>
 800b93c:	4b29      	ldr	r3, [pc, #164]	@ (800b9e4 <netif_add+0x19c>)
 800b93e:	f240 128b 	movw	r2, #395	@ 0x18b
 800b942:	4930      	ldr	r1, [pc, #192]	@ (800ba04 <netif_add+0x1bc>)
 800b944:	4829      	ldr	r0, [pc, #164]	@ (800b9ec <netif_add+0x1a4>)
 800b946:	f00c fc91 	bl	801826c <iprintf>
        num_netifs++;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	3301      	adds	r3, #1
 800b94e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2bff      	cmp	r3, #255	@ 0xff
 800b954:	dd06      	ble.n	800b964 <netif_add+0x11c>
 800b956:	4b23      	ldr	r3, [pc, #140]	@ (800b9e4 <netif_add+0x19c>)
 800b958:	f240 128d 	movw	r2, #397	@ 0x18d
 800b95c:	492a      	ldr	r1, [pc, #168]	@ (800ba08 <netif_add+0x1c0>)
 800b95e:	4823      	ldr	r0, [pc, #140]	@ (800b9ec <netif_add+0x1a4>)
 800b960:	f00c fc84 	bl	801826c <iprintf>
        if (netif2->num == netif->num) {
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b970:	429a      	cmp	r2, r3
 800b972:	d108      	bne.n	800b986 <netif_add+0x13e>
          netif->num++;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b97a:	3301      	adds	r3, #1
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800b984:	e005      	b.n	800b992 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1d0      	bne.n	800b934 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1be      	bne.n	800b916 <netif_add+0xce>
  }
  if (netif->num == 254) {
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b99e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b9a0:	d103      	bne.n	800b9aa <netif_add+0x162>
    netif_num = 0;
 800b9a2:	4b16      	ldr	r3, [pc, #88]	@ (800b9fc <netif_add+0x1b4>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	e006      	b.n	800b9b8 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	4b11      	ldr	r3, [pc, #68]	@ (800b9fc <netif_add+0x1b4>)
 800b9b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b9b8:	4b11      	ldr	r3, [pc, #68]	@ (800ba00 <netif_add+0x1b8>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b9c0:	4a0f      	ldr	r2, [pc, #60]	@ (800ba00 <netif_add+0x1b8>)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b9cc:	f003 0320 	and.w	r3, r3, #32
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <netif_add+0x192>
    igmp_start(netif);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f008 fa15 	bl	8013e04 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b9da:	68fb      	ldr	r3, [r7, #12]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	0801b8b0 	.word	0x0801b8b0
 800b9e8:	0801b944 	.word	0x0801b944
 800b9ec:	0801b900 	.word	0x0801b900
 800b9f0:	0801b960 	.word	0x0801b960
 800b9f4:	0801e4c0 	.word	0x0801e4c0
 800b9f8:	0800be2f 	.word	0x0800be2f
 800b9fc:	200087ac 	.word	0x200087ac
 800ba00:	200087a4 	.word	0x200087a4
 800ba04:	0801b984 	.word	0x0801b984
 800ba08:	0801b998 	.word	0x0801b998

0800ba0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f002 fbf1 	bl	800e200 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f007 f8cf 	bl	8012bc4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
	...

0800ba30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <netif_do_set_ipaddr+0x20>
 800ba42:	4b1d      	ldr	r3, [pc, #116]	@ (800bab8 <netif_do_set_ipaddr+0x88>)
 800ba44:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ba48:	491c      	ldr	r1, [pc, #112]	@ (800babc <netif_do_set_ipaddr+0x8c>)
 800ba4a:	481d      	ldr	r0, [pc, #116]	@ (800bac0 <netif_do_set_ipaddr+0x90>)
 800ba4c:	f00c fc0e 	bl	801826c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <netif_do_set_ipaddr+0x34>
 800ba56:	4b18      	ldr	r3, [pc, #96]	@ (800bab8 <netif_do_set_ipaddr+0x88>)
 800ba58:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ba5c:	4917      	ldr	r1, [pc, #92]	@ (800babc <netif_do_set_ipaddr+0x8c>)
 800ba5e:	4818      	ldr	r0, [pc, #96]	@ (800bac0 <netif_do_set_ipaddr+0x90>)
 800ba60:	f00c fc04 	bl	801826c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d01c      	beq.n	800baac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ba82:	f107 0314 	add.w	r3, r7, #20
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff ffbf 	bl	800ba0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <netif_do_set_ipaddr+0x6a>
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	e000      	b.n	800ba9c <netif_do_set_ipaddr+0x6c>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800baa0:	2101      	movs	r1, #1
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 f8d2 	bl	800bc4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800baa8:	2301      	movs	r3, #1
 800baaa:	e000      	b.n	800baae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	0801b8b0 	.word	0x0801b8b0
 800babc:	0801b9c8 	.word	0x0801b9c8
 800bac0:	0801b900 	.word	0x0801b900

0800bac4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3308      	adds	r3, #8
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d00a      	beq.n	800baf4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <netif_do_set_netmask+0x26>
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	e000      	b.n	800baec <netif_do_set_netmask+0x28>
 800baea:	2300      	movs	r3, #0
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b085      	sub	sp, #20
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	330c      	adds	r3, #12
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d00a      	beq.n	800bb32 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d002      	beq.n	800bb28 <netif_do_set_gw+0x26>
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	e000      	b.n	800bb2a <netif_do_set_gw+0x28>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e000      	b.n	800bb34 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b088      	sub	sp, #32
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
 800bb4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bb5c:	4b1c      	ldr	r3, [pc, #112]	@ (800bbd0 <netif_set_addr+0x90>)
 800bb5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bb66:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd0 <netif_set_addr+0x90>)
 800bb68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bb70:	4b17      	ldr	r3, [pc, #92]	@ (800bbd0 <netif_set_addr+0x90>)
 800bb72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <netif_set_addr+0x42>
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <netif_set_addr+0x46>
 800bb82:	2301      	movs	r3, #1
 800bb84:	e000      	b.n	800bb88 <netif_set_addr+0x48>
 800bb86:	2300      	movs	r3, #0
 800bb88:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d006      	beq.n	800bb9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bb90:	f107 0310 	add.w	r3, r7, #16
 800bb94:	461a      	mov	r2, r3
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff ff49 	bl	800ba30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bb9e:	69fa      	ldr	r2, [r7, #28]
 800bba0:	6879      	ldr	r1, [r7, #4]
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff ff8e 	bl	800bac4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bba8:	69ba      	ldr	r2, [r7, #24]
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f7ff ffa8 	bl	800bb02 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d106      	bne.n	800bbc6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bbb8:	f107 0310 	add.w	r3, r7, #16
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	68b9      	ldr	r1, [r7, #8]
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f7ff ff35 	bl	800ba30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bbc6:	bf00      	nop
 800bbc8:	3720      	adds	r7, #32
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	0801e4c0 	.word	0x0801e4c0

0800bbd4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bbdc:	4a04      	ldr	r2, [pc, #16]	@ (800bbf0 <netif_set_default+0x1c>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	200087a8 	.word	0x200087a8

0800bbf4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d107      	bne.n	800bc12 <netif_set_up+0x1e>
 800bc02:	4b0f      	ldr	r3, [pc, #60]	@ (800bc40 <netif_set_up+0x4c>)
 800bc04:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bc08:	490e      	ldr	r1, [pc, #56]	@ (800bc44 <netif_set_up+0x50>)
 800bc0a:	480f      	ldr	r0, [pc, #60]	@ (800bc48 <netif_set_up+0x54>)
 800bc0c:	f00c fb2e 	bl	801826c <iprintf>
 800bc10:	e013      	b.n	800bc3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10c      	bne.n	800bc3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bc26:	f043 0301 	orr.w	r3, r3, #1
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bc32:	2103      	movs	r1, #3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f809 	bl	800bc4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	0801b8b0 	.word	0x0801b8b0
 800bc44:	0801ba38 	.word	0x0801ba38
 800bc48:	0801b900 	.word	0x0801b900

0800bc4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <netif_issue_reports+0x20>
 800bc5e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd4 <netif_issue_reports+0x88>)
 800bc60:	f240 326d 	movw	r2, #877	@ 0x36d
 800bc64:	491c      	ldr	r1, [pc, #112]	@ (800bcd8 <netif_issue_reports+0x8c>)
 800bc66:	481d      	ldr	r0, [pc, #116]	@ (800bcdc <netif_issue_reports+0x90>)
 800bc68:	f00c fb00 	bl	801826c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d028      	beq.n	800bccc <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bc80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d021      	beq.n	800bccc <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bc88:	78fb      	ldrb	r3, [r7, #3]
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01d      	beq.n	800bcce <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3304      	adds	r3, #4
 800bc96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d018      	beq.n	800bcce <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d005      	beq.n	800bcb6 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f007 fef1 	bl	8013a98 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bcbc:	f003 0320 	and.w	r3, r3, #32
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f008 f8c7 	bl	8013e58 <igmp_report_groups>
 800bcca:	e000      	b.n	800bcce <netif_issue_reports+0x82>
    return;
 800bccc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0801b8b0 	.word	0x0801b8b0
 800bcd8:	0801ba54 	.word	0x0801ba54
 800bcdc:	0801b900 	.word	0x0801b900

0800bce0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d107      	bne.n	800bcfe <netif_set_down+0x1e>
 800bcee:	4b12      	ldr	r3, [pc, #72]	@ (800bd38 <netif_set_down+0x58>)
 800bcf0:	f240 329b 	movw	r2, #923	@ 0x39b
 800bcf4:	4911      	ldr	r1, [pc, #68]	@ (800bd3c <netif_set_down+0x5c>)
 800bcf6:	4812      	ldr	r0, [pc, #72]	@ (800bd40 <netif_set_down+0x60>)
 800bcf8:	f00c fab8 	bl	801826c <iprintf>
 800bcfc:	e019      	b.n	800bd32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d012      	beq.n	800bd32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bd12:	f023 0301 	bic.w	r3, r3, #1
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bd24:	f003 0308 	and.w	r3, r3, #8
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f007 fa71 	bl	8013214 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	0801b8b0 	.word	0x0801b8b0
 800bd3c:	0801ba78 	.word	0x0801ba78
 800bd40:	0801b900 	.word	0x0801b900

0800bd44 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d107      	bne.n	800bd62 <netif_set_link_up+0x1e>
 800bd52:	4b13      	ldr	r3, [pc, #76]	@ (800bda0 <netif_set_link_up+0x5c>)
 800bd54:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bd58:	4912      	ldr	r1, [pc, #72]	@ (800bda4 <netif_set_link_up+0x60>)
 800bd5a:	4813      	ldr	r0, [pc, #76]	@ (800bda8 <netif_set_link_up+0x64>)
 800bd5c:	f00c fa86 	bl	801826c <iprintf>
 800bd60:	e01b      	b.n	800bd9a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bd68:	f003 0304 	and.w	r3, r3, #4
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d114      	bne.n	800bd9a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bd76:	f043 0304 	orr.w	r3, r3, #4
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bd82:	2103      	movs	r1, #3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff ff61 	bl	800bc4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <netif_set_link_up+0x56>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	0801b8b0 	.word	0x0801b8b0
 800bda4:	0801ba98 	.word	0x0801ba98
 800bda8:	0801b900 	.word	0x0801b900

0800bdac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d107      	bne.n	800bdca <netif_set_link_down+0x1e>
 800bdba:	4b11      	ldr	r3, [pc, #68]	@ (800be00 <netif_set_link_down+0x54>)
 800bdbc:	f240 4206 	movw	r2, #1030	@ 0x406
 800bdc0:	4910      	ldr	r1, [pc, #64]	@ (800be04 <netif_set_link_down+0x58>)
 800bdc2:	4811      	ldr	r0, [pc, #68]	@ (800be08 <netif_set_link_down+0x5c>)
 800bdc4:	f00c fa52 	bl	801826c <iprintf>
 800bdc8:	e017      	b.n	800bdfa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d010      	beq.n	800bdfa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bdde:	f023 0304 	bic.w	r3, r3, #4
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <netif_set_link_down+0x4e>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	69db      	ldr	r3, [r3, #28]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	0801b8b0 	.word	0x0801b8b0
 800be04:	0801babc 	.word	0x0801babc
 800be08:	0801b900 	.word	0x0801b900

0800be0c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	61da      	str	r2, [r3, #28]
  }
}
 800be22:	bf00      	nop
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800be2e:	b480      	push	{r7}
 800be30:	b085      	sub	sp, #20
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800be3a:	f06f 030b 	mvn.w	r3, #11
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
	...

0800be4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d013      	beq.n	800be84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800be5c:	4b0d      	ldr	r3, [pc, #52]	@ (800be94 <netif_get_by_index+0x48>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e00c      	b.n	800be7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800be6a:	3301      	adds	r3, #1
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	79fa      	ldrb	r2, [r7, #7]
 800be70:	429a      	cmp	r2, r3
 800be72:	d101      	bne.n	800be78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	e006      	b.n	800be86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1ef      	bne.n	800be64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	200087a4 	.word	0x200087a4

0800be98 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800be9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bed0 <pbuf_free_ooseq+0x38>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bea4:	4b0b      	ldr	r3, [pc, #44]	@ (800bed4 <pbuf_free_ooseq+0x3c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	607b      	str	r3, [r7, #4]
 800beaa:	e00a      	b.n	800bec2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f002 f9e1 	bl	800e27c <tcp_free_ooseq>
      return;
 800beba:	e005      	b.n	800bec8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	607b      	str	r3, [r7, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1f1      	bne.n	800beac <pbuf_free_ooseq+0x14>
    }
  }
}
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	200087ad 	.word	0x200087ad
 800bed4:	200087bc 	.word	0x200087bc

0800bed8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bed8:	b480      	push	{r7}
 800beda:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bedc:	4b03      	ldr	r3, [pc, #12]	@ (800beec <pbuf_pool_is_empty+0x14>)
 800bede:	2201      	movs	r2, #1
 800bee0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bee2:	bf00      	nop
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	200087ad 	.word	0x200087ad

0800bef0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4611      	mov	r1, r2
 800befc:	461a      	mov	r2, r3
 800befe:	460b      	mov	r3, r1
 800bf00:	80fb      	strh	r3, [r7, #6]
 800bf02:	4613      	mov	r3, r2
 800bf04:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	88fa      	ldrh	r2, [r7, #6]
 800bf16:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	88ba      	ldrh	r2, [r7, #4]
 800bf1c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bf1e:	8b3b      	ldrh	r3, [r7, #24]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	7f3a      	ldrb	r2, [r7, #28]
 800bf2a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	73da      	strb	r2, [r3, #15]
}
 800bf38:	bf00      	nop
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08c      	sub	sp, #48	@ 0x30
 800bf48:	af02      	add	r7, sp, #8
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	71fb      	strb	r3, [r7, #7]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	80bb      	strh	r3, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bf5a:	887b      	ldrh	r3, [r7, #2]
 800bf5c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bf60:	d07f      	beq.n	800c062 <pbuf_alloc+0x11e>
 800bf62:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bf66:	f300 80c8 	bgt.w	800c0fa <pbuf_alloc+0x1b6>
 800bf6a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bf6e:	d010      	beq.n	800bf92 <pbuf_alloc+0x4e>
 800bf70:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bf74:	f300 80c1 	bgt.w	800c0fa <pbuf_alloc+0x1b6>
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d002      	beq.n	800bf82 <pbuf_alloc+0x3e>
 800bf7c:	2b41      	cmp	r3, #65	@ 0x41
 800bf7e:	f040 80bc 	bne.w	800c0fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bf82:	887a      	ldrh	r2, [r7, #2]
 800bf84:	88bb      	ldrh	r3, [r7, #4]
 800bf86:	4619      	mov	r1, r3
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f000 f8d1 	bl	800c130 <pbuf_alloc_reference>
 800bf8e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800bf90:	e0bd      	b.n	800c10e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800bf96:	2300      	movs	r3, #0
 800bf98:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bf9a:	88bb      	ldrh	r3, [r7, #4]
 800bf9c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bf9e:	2009      	movs	r0, #9
 800bfa0:	f7ff fbb0 	bl	800b704 <memp_malloc>
 800bfa4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bfac:	f7ff ff94 	bl	800bed8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <pbuf_alloc+0x78>
            pbuf_free(p);
 800bfb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bfb8:	f000 faa8 	bl	800c50c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e0a7      	b.n	800c110 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bfc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f023 0303 	bic.w	r3, r3, #3
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	8b7a      	ldrh	r2, [r7, #26]
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	bf28      	it	cs
 800bfd8:	4613      	movcs	r3, r2
 800bfda:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bfdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bfde:	3310      	adds	r3, #16
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	3303      	adds	r3, #3
 800bfe6:	f023 0303 	bic.w	r3, r3, #3
 800bfea:	4618      	mov	r0, r3
 800bfec:	89f9      	ldrh	r1, [r7, #14]
 800bfee:	8b7a      	ldrh	r2, [r7, #26]
 800bff0:	2300      	movs	r3, #0
 800bff2:	9301      	str	r3, [sp, #4]
 800bff4:	887b      	ldrh	r3, [r7, #2]
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	460b      	mov	r3, r1
 800bffa:	4601      	mov	r1, r0
 800bffc:	6938      	ldr	r0, [r7, #16]
 800bffe:	f7ff ff77 	bl	800bef0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f003 0303 	and.w	r3, r3, #3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d006      	beq.n	800c01c <pbuf_alloc+0xd8>
 800c00e:	4b42      	ldr	r3, [pc, #264]	@ (800c118 <pbuf_alloc+0x1d4>)
 800c010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c014:	4941      	ldr	r1, [pc, #260]	@ (800c11c <pbuf_alloc+0x1d8>)
 800c016:	4842      	ldr	r0, [pc, #264]	@ (800c120 <pbuf_alloc+0x1dc>)
 800c018:	f00c f928 	bl	801826c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c01c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c01e:	3303      	adds	r3, #3
 800c020:	f023 0303 	bic.w	r3, r3, #3
 800c024:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c028:	d106      	bne.n	800c038 <pbuf_alloc+0xf4>
 800c02a:	4b3b      	ldr	r3, [pc, #236]	@ (800c118 <pbuf_alloc+0x1d4>)
 800c02c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c030:	493c      	ldr	r1, [pc, #240]	@ (800c124 <pbuf_alloc+0x1e0>)
 800c032:	483b      	ldr	r0, [pc, #236]	@ (800c120 <pbuf_alloc+0x1dc>)
 800c034:	f00c f91a 	bl	801826c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	627b      	str	r3, [r7, #36]	@ 0x24
 800c042:	e002      	b.n	800c04a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	693a      	ldr	r2, [r7, #16]
 800c048:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c04e:	8b7a      	ldrh	r2, [r7, #26]
 800c050:	89fb      	ldrh	r3, [r7, #14]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c05a:	8b7b      	ldrh	r3, [r7, #26]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d19e      	bne.n	800bf9e <pbuf_alloc+0x5a>
      break;
 800c060:	e055      	b.n	800c10e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c062:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c064:	3303      	adds	r3, #3
 800c066:	b29b      	uxth	r3, r3
 800c068:	f023 0303 	bic.w	r3, r3, #3
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	88bb      	ldrh	r3, [r7, #4]
 800c070:	3303      	adds	r3, #3
 800c072:	b29b      	uxth	r3, r3
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	b29b      	uxth	r3, r3
 800c07a:	4413      	add	r3, r2
 800c07c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c07e:	8b3b      	ldrh	r3, [r7, #24]
 800c080:	3310      	adds	r3, #16
 800c082:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c084:	8b3a      	ldrh	r2, [r7, #24]
 800c086:	88bb      	ldrh	r3, [r7, #4]
 800c088:	3303      	adds	r3, #3
 800c08a:	f023 0303 	bic.w	r3, r3, #3
 800c08e:	429a      	cmp	r2, r3
 800c090:	d306      	bcc.n	800c0a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c092:	8afa      	ldrh	r2, [r7, #22]
 800c094:	88bb      	ldrh	r3, [r7, #4]
 800c096:	3303      	adds	r3, #3
 800c098:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d201      	bcs.n	800c0a4 <pbuf_alloc+0x160>
        return NULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	e035      	b.n	800c110 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c0a4:	8afb      	ldrh	r3, [r7, #22]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff f99c 	bl	800b3e4 <mem_malloc>
 800c0ac:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <pbuf_alloc+0x174>
        return NULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e02b      	b.n	800c110 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c0b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0ba:	3310      	adds	r3, #16
 800c0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0be:	4413      	add	r3, r2
 800c0c0:	3303      	adds	r3, #3
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	88b9      	ldrh	r1, [r7, #4]
 800c0ca:	88ba      	ldrh	r2, [r7, #4]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	887b      	ldrh	r3, [r7, #2]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0da:	f7ff ff09 	bl	800bef0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d010      	beq.n	800c10c <pbuf_alloc+0x1c8>
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c118 <pbuf_alloc+0x1d4>)
 800c0ec:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c0f0:	490d      	ldr	r1, [pc, #52]	@ (800c128 <pbuf_alloc+0x1e4>)
 800c0f2:	480b      	ldr	r0, [pc, #44]	@ (800c120 <pbuf_alloc+0x1dc>)
 800c0f4:	f00c f8ba 	bl	801826c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c0f8:	e008      	b.n	800c10c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c0fa:	4b07      	ldr	r3, [pc, #28]	@ (800c118 <pbuf_alloc+0x1d4>)
 800c0fc:	f240 1227 	movw	r2, #295	@ 0x127
 800c100:	490a      	ldr	r1, [pc, #40]	@ (800c12c <pbuf_alloc+0x1e8>)
 800c102:	4807      	ldr	r0, [pc, #28]	@ (800c120 <pbuf_alloc+0x1dc>)
 800c104:	f00c f8b2 	bl	801826c <iprintf>
      return NULL;
 800c108:	2300      	movs	r3, #0
 800c10a:	e001      	b.n	800c110 <pbuf_alloc+0x1cc>
      break;
 800c10c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c110:	4618      	mov	r0, r3
 800c112:	3728      	adds	r7, #40	@ 0x28
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	0801bae0 	.word	0x0801bae0
 800c11c:	0801bb10 	.word	0x0801bb10
 800c120:	0801bb40 	.word	0x0801bb40
 800c124:	0801bb68 	.word	0x0801bb68
 800c128:	0801bb9c 	.word	0x0801bb9c
 800c12c:	0801bbc8 	.word	0x0801bbc8

0800c130 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af02      	add	r7, sp, #8
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	807b      	strh	r3, [r7, #2]
 800c13c:	4613      	mov	r3, r2
 800c13e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c140:	883b      	ldrh	r3, [r7, #0]
 800c142:	2b41      	cmp	r3, #65	@ 0x41
 800c144:	d009      	beq.n	800c15a <pbuf_alloc_reference+0x2a>
 800c146:	883b      	ldrh	r3, [r7, #0]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d006      	beq.n	800c15a <pbuf_alloc_reference+0x2a>
 800c14c:	4b0f      	ldr	r3, [pc, #60]	@ (800c18c <pbuf_alloc_reference+0x5c>)
 800c14e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c152:	490f      	ldr	r1, [pc, #60]	@ (800c190 <pbuf_alloc_reference+0x60>)
 800c154:	480f      	ldr	r0, [pc, #60]	@ (800c194 <pbuf_alloc_reference+0x64>)
 800c156:	f00c f889 	bl	801826c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c15a:	2008      	movs	r0, #8
 800c15c:	f7ff fad2 	bl	800b704 <memp_malloc>
 800c160:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c168:	2300      	movs	r3, #0
 800c16a:	e00b      	b.n	800c184 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c16c:	8879      	ldrh	r1, [r7, #2]
 800c16e:	887a      	ldrh	r2, [r7, #2]
 800c170:	2300      	movs	r3, #0
 800c172:	9301      	str	r3, [sp, #4]
 800c174:	883b      	ldrh	r3, [r7, #0]
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	460b      	mov	r3, r1
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f7ff feb7 	bl	800bef0 <pbuf_init_alloced_pbuf>
  return p;
 800c182:	68fb      	ldr	r3, [r7, #12]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	0801bae0 	.word	0x0801bae0
 800c190:	0801bbe4 	.word	0x0801bbe4
 800c194:	0801bb40 	.word	0x0801bb40

0800c198 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73fb      	strb	r3, [r7, #15]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	81bb      	strh	r3, [r7, #12]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c1b0:	8a7b      	ldrh	r3, [r7, #18]
 800c1b2:	3303      	adds	r3, #3
 800c1b4:	f023 0203 	bic.w	r2, r3, #3
 800c1b8:	89bb      	ldrh	r3, [r7, #12]
 800c1ba:	441a      	add	r2, r3
 800c1bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d901      	bls.n	800c1c6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e018      	b.n	800c1f8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c1cc:	8a7b      	ldrh	r3, [r7, #18]
 800c1ce:	3303      	adds	r3, #3
 800c1d0:	f023 0303 	bic.w	r3, r3, #3
 800c1d4:	6a3a      	ldr	r2, [r7, #32]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	e001      	b.n	800c1e0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	89b9      	ldrh	r1, [r7, #12]
 800c1e4:	89ba      	ldrh	r2, [r7, #12]
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	897b      	ldrh	r3, [r7, #10]
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	6979      	ldr	r1, [r7, #20]
 800c1f2:	f7ff fe7d 	bl	800bef0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c1f6:	687b      	ldr	r3, [r7, #4]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <pbuf_realloc+0x20>
 800c212:	4b3a      	ldr	r3, [pc, #232]	@ (800c2fc <pbuf_realloc+0xfc>)
 800c214:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c218:	4939      	ldr	r1, [pc, #228]	@ (800c300 <pbuf_realloc+0x100>)
 800c21a:	483a      	ldr	r0, [pc, #232]	@ (800c304 <pbuf_realloc+0x104>)
 800c21c:	f00c f826 	bl	801826c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	891b      	ldrh	r3, [r3, #8]
 800c224:	887a      	ldrh	r2, [r7, #2]
 800c226:	429a      	cmp	r2, r3
 800c228:	d263      	bcs.n	800c2f2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	891a      	ldrh	r2, [r3, #8]
 800c22e:	887b      	ldrh	r3, [r7, #2]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c234:	887b      	ldrh	r3, [r7, #2]
 800c236:	817b      	strh	r3, [r7, #10]
  q = p;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c23c:	e018      	b.n	800c270 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	895b      	ldrh	r3, [r3, #10]
 800c242:	897a      	ldrh	r2, [r7, #10]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	891a      	ldrh	r2, [r3, #8]
 800c24c:	893b      	ldrh	r3, [r7, #8]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	b29a      	uxth	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <pbuf_realloc+0x70>
 800c262:	4b26      	ldr	r3, [pc, #152]	@ (800c2fc <pbuf_realloc+0xfc>)
 800c264:	f240 12af 	movw	r2, #431	@ 0x1af
 800c268:	4927      	ldr	r1, [pc, #156]	@ (800c308 <pbuf_realloc+0x108>)
 800c26a:	4826      	ldr	r0, [pc, #152]	@ (800c304 <pbuf_realloc+0x104>)
 800c26c:	f00b fffe 	bl	801826c <iprintf>
  while (rem_len > q->len) {
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	895b      	ldrh	r3, [r3, #10]
 800c274:	897a      	ldrh	r2, [r7, #10]
 800c276:	429a      	cmp	r2, r3
 800c278:	d8e1      	bhi.n	800c23e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	7b1b      	ldrb	r3, [r3, #12]
 800c27e:	f003 030f 	and.w	r3, r3, #15
 800c282:	2b00      	cmp	r3, #0
 800c284:	d121      	bne.n	800c2ca <pbuf_realloc+0xca>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	895b      	ldrh	r3, [r3, #10]
 800c28a:	897a      	ldrh	r2, [r7, #10]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d01c      	beq.n	800c2ca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	7b5b      	ldrb	r3, [r3, #13]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d116      	bne.n	800c2ca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	897b      	ldrh	r3, [r7, #10]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f7fe ff9c 	bl	800b1ec <mem_trim>
 800c2b4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d106      	bne.n	800c2ca <pbuf_realloc+0xca>
 800c2bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c2fc <pbuf_realloc+0xfc>)
 800c2be:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c2c2:	4912      	ldr	r1, [pc, #72]	@ (800c30c <pbuf_realloc+0x10c>)
 800c2c4:	480f      	ldr	r0, [pc, #60]	@ (800c304 <pbuf_realloc+0x104>)
 800c2c6:	f00b ffd1 	bl	801826c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	897a      	ldrh	r2, [r7, #10]
 800c2ce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	895a      	ldrh	r2, [r3, #10]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 f911 	bl	800c50c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	e000      	b.n	800c2f4 <pbuf_realloc+0xf4>
    return;
 800c2f2:	bf00      	nop

}
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	0801bae0 	.word	0x0801bae0
 800c300:	0801bbf8 	.word	0x0801bbf8
 800c304:	0801bb40 	.word	0x0801bb40
 800c308:	0801bc10 	.word	0x0801bc10
 800c30c:	0801bc28 	.word	0x0801bc28

0800c310 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d106      	bne.n	800c332 <pbuf_add_header_impl+0x22>
 800c324:	4b2b      	ldr	r3, [pc, #172]	@ (800c3d4 <pbuf_add_header_impl+0xc4>)
 800c326:	f240 12df 	movw	r2, #479	@ 0x1df
 800c32a:	492b      	ldr	r1, [pc, #172]	@ (800c3d8 <pbuf_add_header_impl+0xc8>)
 800c32c:	482b      	ldr	r0, [pc, #172]	@ (800c3dc <pbuf_add_header_impl+0xcc>)
 800c32e:	f00b ff9d 	bl	801826c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d003      	beq.n	800c340 <pbuf_add_header_impl+0x30>
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c33e:	d301      	bcc.n	800c344 <pbuf_add_header_impl+0x34>
    return 1;
 800c340:	2301      	movs	r3, #1
 800c342:	e043      	b.n	800c3cc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <pbuf_add_header_impl+0x3e>
    return 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	e03e      	b.n	800c3cc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	891a      	ldrh	r2, [r3, #8]
 800c356:	8a7b      	ldrh	r3, [r7, #18]
 800c358:	4413      	add	r3, r2
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	8a7a      	ldrh	r2, [r7, #18]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d901      	bls.n	800c366 <pbuf_add_header_impl+0x56>
    return 1;
 800c362:	2301      	movs	r3, #1
 800c364:	e032      	b.n	800c3cc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	7b1b      	ldrb	r3, [r3, #12]
 800c36a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c36c:	8a3b      	ldrh	r3, [r7, #16]
 800c36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00c      	beq.n	800c390 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	425b      	negs	r3, r3
 800c37e:	4413      	add	r3, r2
 800c380:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3310      	adds	r3, #16
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d20d      	bcs.n	800c3a8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e01d      	b.n	800c3cc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c390:	79fb      	ldrb	r3, [r7, #7]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d006      	beq.n	800c3a4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	425b      	negs	r3, r3
 800c39e:	4413      	add	r3, r2
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	e001      	b.n	800c3a8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e011      	b.n	800c3cc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	895a      	ldrh	r2, [r3, #10]
 800c3b2:	8a7b      	ldrh	r3, [r7, #18]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	891a      	ldrh	r2, [r3, #8]
 800c3c0:	8a7b      	ldrh	r3, [r7, #18]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	811a      	strh	r2, [r3, #8]


  return 0;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	0801bae0 	.word	0x0801bae0
 800c3d8:	0801bc44 	.word	0x0801bc44
 800c3dc:	0801bb40 	.word	0x0801bb40

0800c3e0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff ff8e 	bl	800c310 <pbuf_add_header_impl>
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d106      	bne.n	800c41e <pbuf_remove_header+0x1e>
 800c410:	4b20      	ldr	r3, [pc, #128]	@ (800c494 <pbuf_remove_header+0x94>)
 800c412:	f240 224b 	movw	r2, #587	@ 0x24b
 800c416:	4920      	ldr	r1, [pc, #128]	@ (800c498 <pbuf_remove_header+0x98>)
 800c418:	4820      	ldr	r0, [pc, #128]	@ (800c49c <pbuf_remove_header+0x9c>)
 800c41a:	f00b ff27 	bl	801826c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d003      	beq.n	800c42c <pbuf_remove_header+0x2c>
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c42a:	d301      	bcc.n	800c430 <pbuf_remove_header+0x30>
    return 1;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e02c      	b.n	800c48a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <pbuf_remove_header+0x3a>
    return 0;
 800c436:	2300      	movs	r3, #0
 800c438:	e027      	b.n	800c48a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	895b      	ldrh	r3, [r3, #10]
 800c442:	89fa      	ldrh	r2, [r7, #14]
 800c444:	429a      	cmp	r2, r3
 800c446:	d908      	bls.n	800c45a <pbuf_remove_header+0x5a>
 800c448:	4b12      	ldr	r3, [pc, #72]	@ (800c494 <pbuf_remove_header+0x94>)
 800c44a:	f240 2255 	movw	r2, #597	@ 0x255
 800c44e:	4914      	ldr	r1, [pc, #80]	@ (800c4a0 <pbuf_remove_header+0xa0>)
 800c450:	4812      	ldr	r0, [pc, #72]	@ (800c49c <pbuf_remove_header+0x9c>)
 800c452:	f00b ff0b 	bl	801826c <iprintf>
 800c456:	2301      	movs	r3, #1
 800c458:	e017      	b.n	800c48a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	441a      	add	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	895a      	ldrh	r2, [r3, #10]
 800c470:	89fb      	ldrh	r3, [r7, #14]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	891a      	ldrh	r2, [r3, #8]
 800c47e:	89fb      	ldrh	r3, [r7, #14]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0801bae0 	.word	0x0801bae0
 800c498:	0801bc44 	.word	0x0801bc44
 800c49c:	0801bb40 	.word	0x0801bb40
 800c4a0:	0801bc50 	.word	0x0801bc50

0800c4a4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	807b      	strh	r3, [r7, #2]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c4b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	da08      	bge.n	800c4ce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c4bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4c0:	425b      	negs	r3, r3
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff ff9b 	bl	800c400 <pbuf_remove_header>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	e007      	b.n	800c4de <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c4ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4d2:	787a      	ldrb	r2, [r7, #1]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff ff1a 	bl	800c310 <pbuf_add_header_impl>
 800c4dc:	4603      	mov	r3, r0
  }
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c4f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ffd2 	bl	800c4a4 <pbuf_header_impl>
 800c500:	4603      	mov	r3, r0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b086      	sub	sp, #24
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10b      	bne.n	800c532 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d106      	bne.n	800c52e <pbuf_free+0x22>
 800c520:	4b38      	ldr	r3, [pc, #224]	@ (800c604 <pbuf_free+0xf8>)
 800c522:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c526:	4938      	ldr	r1, [pc, #224]	@ (800c608 <pbuf_free+0xfc>)
 800c528:	4838      	ldr	r0, [pc, #224]	@ (800c60c <pbuf_free+0x100>)
 800c52a:	f00b fe9f 	bl	801826c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	e063      	b.n	800c5fa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c536:	e05c      	b.n	800c5f2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	7b9b      	ldrb	r3, [r3, #14]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d106      	bne.n	800c54e <pbuf_free+0x42>
 800c540:	4b30      	ldr	r3, [pc, #192]	@ (800c604 <pbuf_free+0xf8>)
 800c542:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c546:	4932      	ldr	r1, [pc, #200]	@ (800c610 <pbuf_free+0x104>)
 800c548:	4830      	ldr	r0, [pc, #192]	@ (800c60c <pbuf_free+0x100>)
 800c54a:	f00b fe8f 	bl	801826c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	7b9b      	ldrb	r3, [r3, #14]
 800c552:	3b01      	subs	r3, #1
 800c554:	b2da      	uxtb	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	739a      	strb	r2, [r3, #14]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7b9b      	ldrb	r3, [r3, #14]
 800c55e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c560:	7dbb      	ldrb	r3, [r7, #22]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d143      	bne.n	800c5ee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	7b1b      	ldrb	r3, [r3, #12]
 800c570:	f003 030f 	and.w	r3, r3, #15
 800c574:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7b5b      	ldrb	r3, [r3, #13]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d011      	beq.n	800c5a6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <pbuf_free+0x90>
 800c58e:	4b1d      	ldr	r3, [pc, #116]	@ (800c604 <pbuf_free+0xf8>)
 800c590:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c594:	491f      	ldr	r1, [pc, #124]	@ (800c614 <pbuf_free+0x108>)
 800c596:	481d      	ldr	r0, [pc, #116]	@ (800c60c <pbuf_free+0x100>)
 800c598:	f00b fe68 	bl	801826c <iprintf>
        pc->custom_free_function(p);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	4798      	blx	r3
 800c5a4:	e01d      	b.n	800c5e2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d104      	bne.n	800c5b6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c5ac:	6879      	ldr	r1, [r7, #4]
 800c5ae:	2009      	movs	r0, #9
 800c5b0:	f7ff f918 	bl	800b7e4 <memp_free>
 800c5b4:	e015      	b.n	800c5e2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d104      	bne.n	800c5c6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c5bc:	6879      	ldr	r1, [r7, #4]
 800c5be:	2008      	movs	r0, #8
 800c5c0:	f7ff f910 	bl	800b7e4 <memp_free>
 800c5c4:	e00d      	b.n	800c5e2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d103      	bne.n	800c5d4 <pbuf_free+0xc8>
          mem_free(p);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7fe fda3 	bl	800b118 <mem_free>
 800c5d2:	e006      	b.n	800c5e2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c604 <pbuf_free+0xf8>)
 800c5d6:	f240 320f 	movw	r2, #783	@ 0x30f
 800c5da:	490f      	ldr	r1, [pc, #60]	@ (800c618 <pbuf_free+0x10c>)
 800c5dc:	480b      	ldr	r0, [pc, #44]	@ (800c60c <pbuf_free+0x100>)
 800c5de:	f00b fe45 	bl	801826c <iprintf>
        }
      }
      count++;
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	607b      	str	r3, [r7, #4]
 800c5ec:	e001      	b.n	800c5f2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d19f      	bne.n	800c538 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3718      	adds	r7, #24
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	0801bae0 	.word	0x0801bae0
 800c608:	0801bc44 	.word	0x0801bc44
 800c60c:	0801bb40 	.word	0x0801bb40
 800c610:	0801bc70 	.word	0x0801bc70
 800c614:	0801bc88 	.word	0x0801bc88
 800c618:	0801bcac 	.word	0x0801bcac

0800c61c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c624:	2300      	movs	r3, #0
 800c626:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c628:	e005      	b.n	800c636 <pbuf_clen+0x1a>
    ++len;
 800c62a:	89fb      	ldrh	r3, [r7, #14]
 800c62c:	3301      	adds	r3, #1
 800c62e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f6      	bne.n	800c62a <pbuf_clen+0xe>
  }
  return len;
 800c63c:	89fb      	ldrh	r3, [r7, #14]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
	...

0800c64c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d010      	beq.n	800c67c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	7b9b      	ldrb	r3, [r3, #14]
 800c65e:	3301      	adds	r3, #1
 800c660:	b2da      	uxtb	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	7b9b      	ldrb	r3, [r3, #14]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d106      	bne.n	800c67c <pbuf_ref+0x30>
 800c66e:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <pbuf_ref+0x38>)
 800c670:	f240 3242 	movw	r2, #834	@ 0x342
 800c674:	4904      	ldr	r1, [pc, #16]	@ (800c688 <pbuf_ref+0x3c>)
 800c676:	4805      	ldr	r0, [pc, #20]	@ (800c68c <pbuf_ref+0x40>)
 800c678:	f00b fdf8 	bl	801826c <iprintf>
  }
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	0801bae0 	.word	0x0801bae0
 800c688:	0801bcc0 	.word	0x0801bcc0
 800c68c:	0801bb40 	.word	0x0801bb40

0800c690 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <pbuf_cat+0x16>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d107      	bne.n	800c6b6 <pbuf_cat+0x26>
 800c6a6:	4b20      	ldr	r3, [pc, #128]	@ (800c728 <pbuf_cat+0x98>)
 800c6a8:	f240 3259 	movw	r2, #857	@ 0x359
 800c6ac:	491f      	ldr	r1, [pc, #124]	@ (800c72c <pbuf_cat+0x9c>)
 800c6ae:	4820      	ldr	r0, [pc, #128]	@ (800c730 <pbuf_cat+0xa0>)
 800c6b0:	f00b fddc 	bl	801826c <iprintf>
 800c6b4:	e034      	b.n	800c720 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	e00a      	b.n	800c6d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	891a      	ldrh	r2, [r3, #8]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	891b      	ldrh	r3, [r3, #8]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1f0      	bne.n	800c6bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	891a      	ldrh	r2, [r3, #8]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	895b      	ldrh	r3, [r3, #10]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d006      	beq.n	800c6f4 <pbuf_cat+0x64>
 800c6e6:	4b10      	ldr	r3, [pc, #64]	@ (800c728 <pbuf_cat+0x98>)
 800c6e8:	f240 3262 	movw	r2, #866	@ 0x362
 800c6ec:	4911      	ldr	r1, [pc, #68]	@ (800c734 <pbuf_cat+0xa4>)
 800c6ee:	4810      	ldr	r0, [pc, #64]	@ (800c730 <pbuf_cat+0xa0>)
 800c6f0:	f00b fdbc 	bl	801826c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d006      	beq.n	800c70a <pbuf_cat+0x7a>
 800c6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c728 <pbuf_cat+0x98>)
 800c6fe:	f240 3263 	movw	r2, #867	@ 0x363
 800c702:	490d      	ldr	r1, [pc, #52]	@ (800c738 <pbuf_cat+0xa8>)
 800c704:	480a      	ldr	r0, [pc, #40]	@ (800c730 <pbuf_cat+0xa0>)
 800c706:	f00b fdb1 	bl	801826c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	891a      	ldrh	r2, [r3, #8]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	891b      	ldrh	r3, [r3, #8]
 800c712:	4413      	add	r3, r2
 800c714:	b29a      	uxth	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	0801bae0 	.word	0x0801bae0
 800c72c:	0801bcd4 	.word	0x0801bcd4
 800c730:	0801bb40 	.word	0x0801bb40
 800c734:	0801bd0c 	.word	0x0801bd0c
 800c738:	0801bd3c 	.word	0x0801bd3c

0800c73c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7ff ffa1 	bl	800c690 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c74e:	6838      	ldr	r0, [r7, #0]
 800c750:	f7ff ff7c 	bl	800c64c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	2300      	movs	r3, #0
 800c76c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d008      	beq.n	800c786 <pbuf_copy+0x2a>
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d005      	beq.n	800c786 <pbuf_copy+0x2a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	891a      	ldrh	r2, [r3, #8]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	891b      	ldrh	r3, [r3, #8]
 800c782:	429a      	cmp	r2, r3
 800c784:	d209      	bcs.n	800c79a <pbuf_copy+0x3e>
 800c786:	4b57      	ldr	r3, [pc, #348]	@ (800c8e4 <pbuf_copy+0x188>)
 800c788:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c78c:	4956      	ldr	r1, [pc, #344]	@ (800c8e8 <pbuf_copy+0x18c>)
 800c78e:	4857      	ldr	r0, [pc, #348]	@ (800c8ec <pbuf_copy+0x190>)
 800c790:	f00b fd6c 	bl	801826c <iprintf>
 800c794:	f06f 030f 	mvn.w	r3, #15
 800c798:	e09f      	b.n	800c8da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	895b      	ldrh	r3, [r3, #10]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	1ad2      	subs	r2, r2, r3
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	895b      	ldrh	r3, [r3, #10]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	1acb      	subs	r3, r1, r3
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d306      	bcc.n	800c7c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	895b      	ldrh	r3, [r3, #10]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	e005      	b.n	800c7cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	895b      	ldrh	r3, [r3, #10]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	18d0      	adds	r0, r2, r3
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	4413      	add	r3, r2
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	f00c f8af 	bl	8018942 <memcpy>
    offset_to += len;
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	895b      	ldrh	r3, [r3, #10]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d906      	bls.n	800c80e <pbuf_copy+0xb2>
 800c800:	4b38      	ldr	r3, [pc, #224]	@ (800c8e4 <pbuf_copy+0x188>)
 800c802:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c806:	493a      	ldr	r1, [pc, #232]	@ (800c8f0 <pbuf_copy+0x194>)
 800c808:	4838      	ldr	r0, [pc, #224]	@ (800c8ec <pbuf_copy+0x190>)
 800c80a:	f00b fd2f 	bl	801826c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	895b      	ldrh	r3, [r3, #10]
 800c812:	461a      	mov	r2, r3
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	4293      	cmp	r3, r2
 800c818:	d906      	bls.n	800c828 <pbuf_copy+0xcc>
 800c81a:	4b32      	ldr	r3, [pc, #200]	@ (800c8e4 <pbuf_copy+0x188>)
 800c81c:	f240 32da 	movw	r2, #986	@ 0x3da
 800c820:	4934      	ldr	r1, [pc, #208]	@ (800c8f4 <pbuf_copy+0x198>)
 800c822:	4832      	ldr	r0, [pc, #200]	@ (800c8ec <pbuf_copy+0x190>)
 800c824:	f00b fd22 	bl	801826c <iprintf>
    if (offset_from >= p_from->len) {
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	895b      	ldrh	r3, [r3, #10]
 800c82c:	461a      	mov	r2, r3
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	4293      	cmp	r3, r2
 800c832:	d304      	bcc.n	800c83e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	895b      	ldrh	r3, [r3, #10]
 800c842:	461a      	mov	r2, r3
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	4293      	cmp	r3, r2
 800c848:	d114      	bne.n	800c874 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10c      	bne.n	800c874 <pbuf_copy+0x118>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d009      	beq.n	800c874 <pbuf_copy+0x118>
 800c860:	4b20      	ldr	r3, [pc, #128]	@ (800c8e4 <pbuf_copy+0x188>)
 800c862:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c866:	4924      	ldr	r1, [pc, #144]	@ (800c8f8 <pbuf_copy+0x19c>)
 800c868:	4820      	ldr	r0, [pc, #128]	@ (800c8ec <pbuf_copy+0x190>)
 800c86a:	f00b fcff 	bl	801826c <iprintf>
 800c86e:	f06f 030f 	mvn.w	r3, #15
 800c872:	e032      	b.n	800c8da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d013      	beq.n	800c8a2 <pbuf_copy+0x146>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	895a      	ldrh	r2, [r3, #10]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	891b      	ldrh	r3, [r3, #8]
 800c882:	429a      	cmp	r2, r3
 800c884:	d10d      	bne.n	800c8a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d009      	beq.n	800c8a2 <pbuf_copy+0x146>
 800c88e:	4b15      	ldr	r3, [pc, #84]	@ (800c8e4 <pbuf_copy+0x188>)
 800c890:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c894:	4919      	ldr	r1, [pc, #100]	@ (800c8fc <pbuf_copy+0x1a0>)
 800c896:	4815      	ldr	r0, [pc, #84]	@ (800c8ec <pbuf_copy+0x190>)
 800c898:	f00b fce8 	bl	801826c <iprintf>
 800c89c:	f06f 0305 	mvn.w	r3, #5
 800c8a0:	e01b      	b.n	800c8da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d013      	beq.n	800c8d0 <pbuf_copy+0x174>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	895a      	ldrh	r2, [r3, #10]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	891b      	ldrh	r3, [r3, #8]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d10d      	bne.n	800c8d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d009      	beq.n	800c8d0 <pbuf_copy+0x174>
 800c8bc:	4b09      	ldr	r3, [pc, #36]	@ (800c8e4 <pbuf_copy+0x188>)
 800c8be:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c8c2:	490e      	ldr	r1, [pc, #56]	@ (800c8fc <pbuf_copy+0x1a0>)
 800c8c4:	4809      	ldr	r0, [pc, #36]	@ (800c8ec <pbuf_copy+0x190>)
 800c8c6:	f00b fcd1 	bl	801826c <iprintf>
 800c8ca:	f06f 0305 	mvn.w	r3, #5
 800c8ce:	e004      	b.n	800c8da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f47f af61 	bne.w	800c79a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	0801bae0 	.word	0x0801bae0
 800c8e8:	0801bd88 	.word	0x0801bd88
 800c8ec:	0801bb40 	.word	0x0801bb40
 800c8f0:	0801bdb8 	.word	0x0801bdb8
 800c8f4:	0801bdd0 	.word	0x0801bdd0
 800c8f8:	0801bdec 	.word	0x0801bdec
 800c8fc:	0801bdfc 	.word	0x0801bdfc

0800c900 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	4611      	mov	r1, r2
 800c90c:	461a      	mov	r2, r3
 800c90e:	460b      	mov	r3, r1
 800c910:	80fb      	strh	r3, [r7, #6]
 800c912:	4613      	mov	r3, r2
 800c914:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d108      	bne.n	800c936 <pbuf_copy_partial+0x36>
 800c924:	4b2b      	ldr	r3, [pc, #172]	@ (800c9d4 <pbuf_copy_partial+0xd4>)
 800c926:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c92a:	492b      	ldr	r1, [pc, #172]	@ (800c9d8 <pbuf_copy_partial+0xd8>)
 800c92c:	482b      	ldr	r0, [pc, #172]	@ (800c9dc <pbuf_copy_partial+0xdc>)
 800c92e:	f00b fc9d 	bl	801826c <iprintf>
 800c932:	2300      	movs	r3, #0
 800c934:	e04a      	b.n	800c9cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d108      	bne.n	800c94e <pbuf_copy_partial+0x4e>
 800c93c:	4b25      	ldr	r3, [pc, #148]	@ (800c9d4 <pbuf_copy_partial+0xd4>)
 800c93e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c942:	4927      	ldr	r1, [pc, #156]	@ (800c9e0 <pbuf_copy_partial+0xe0>)
 800c944:	4825      	ldr	r0, [pc, #148]	@ (800c9dc <pbuf_copy_partial+0xdc>)
 800c946:	f00b fc91 	bl	801826c <iprintf>
 800c94a:	2300      	movs	r3, #0
 800c94c:	e03e      	b.n	800c9cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	61fb      	str	r3, [r7, #28]
 800c952:	e034      	b.n	800c9be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c954:	88bb      	ldrh	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <pbuf_copy_partial+0x70>
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	895b      	ldrh	r3, [r3, #10]
 800c95e:	88ba      	ldrh	r2, [r7, #4]
 800c960:	429a      	cmp	r2, r3
 800c962:	d305      	bcc.n	800c970 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	895b      	ldrh	r3, [r3, #10]
 800c968:	88ba      	ldrh	r2, [r7, #4]
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	80bb      	strh	r3, [r7, #4]
 800c96e:	e023      	b.n	800c9b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	895a      	ldrh	r2, [r3, #10]
 800c974:	88bb      	ldrh	r3, [r7, #4]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c97a:	8b3a      	ldrh	r2, [r7, #24]
 800c97c:	88fb      	ldrh	r3, [r7, #6]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d901      	bls.n	800c986 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c982:	88fb      	ldrh	r3, [r7, #6]
 800c984:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c986:	8b7b      	ldrh	r3, [r7, #26]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	18d0      	adds	r0, r2, r3
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	88bb      	ldrh	r3, [r7, #4]
 800c992:	4413      	add	r3, r2
 800c994:	8b3a      	ldrh	r2, [r7, #24]
 800c996:	4619      	mov	r1, r3
 800c998:	f00b ffd3 	bl	8018942 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c99c:	8afa      	ldrh	r2, [r7, #22]
 800c99e:	8b3b      	ldrh	r3, [r7, #24]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c9a4:	8b7a      	ldrh	r2, [r7, #26]
 800c9a6:	8b3b      	ldrh	r3, [r7, #24]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c9ac:	88fa      	ldrh	r2, [r7, #6]
 800c9ae:	8b3b      	ldrh	r3, [r7, #24]
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	88fb      	ldrh	r3, [r7, #6]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <pbuf_copy_partial+0xca>
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1c4      	bne.n	800c954 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c9ca:	8afb      	ldrh	r3, [r7, #22]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3720      	adds	r7, #32
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	0801bae0 	.word	0x0801bae0
 800c9d8:	0801be28 	.word	0x0801be28
 800c9dc:	0801bb40 	.word	0x0801bb40
 800c9e0:	0801be48 	.word	0x0801be48

0800c9e4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b088      	sub	sp, #32
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c9f2:	88fb      	ldrh	r3, [r7, #6]
 800c9f4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d109      	bne.n	800ca14 <pbuf_take+0x30>
 800ca00:	4b3a      	ldr	r3, [pc, #232]	@ (800caec <pbuf_take+0x108>)
 800ca02:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800ca06:	493a      	ldr	r1, [pc, #232]	@ (800caf0 <pbuf_take+0x10c>)
 800ca08:	483a      	ldr	r0, [pc, #232]	@ (800caf4 <pbuf_take+0x110>)
 800ca0a:	f00b fc2f 	bl	801826c <iprintf>
 800ca0e:	f06f 030f 	mvn.w	r3, #15
 800ca12:	e067      	b.n	800cae4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d109      	bne.n	800ca2e <pbuf_take+0x4a>
 800ca1a:	4b34      	ldr	r3, [pc, #208]	@ (800caec <pbuf_take+0x108>)
 800ca1c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800ca20:	4935      	ldr	r1, [pc, #212]	@ (800caf8 <pbuf_take+0x114>)
 800ca22:	4834      	ldr	r0, [pc, #208]	@ (800caf4 <pbuf_take+0x110>)
 800ca24:	f00b fc22 	bl	801826c <iprintf>
 800ca28:	f06f 030f 	mvn.w	r3, #15
 800ca2c:	e05a      	b.n	800cae4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	891b      	ldrh	r3, [r3, #8]
 800ca32:	88fa      	ldrh	r2, [r7, #6]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d909      	bls.n	800ca4c <pbuf_take+0x68>
 800ca38:	4b2c      	ldr	r3, [pc, #176]	@ (800caec <pbuf_take+0x108>)
 800ca3a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800ca3e:	492f      	ldr	r1, [pc, #188]	@ (800cafc <pbuf_take+0x118>)
 800ca40:	482c      	ldr	r0, [pc, #176]	@ (800caf4 <pbuf_take+0x110>)
 800ca42:	f00b fc13 	bl	801826c <iprintf>
 800ca46:	f04f 33ff 	mov.w	r3, #4294967295
 800ca4a:	e04b      	b.n	800cae4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <pbuf_take+0x7e>
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d004      	beq.n	800ca62 <pbuf_take+0x7e>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	891b      	ldrh	r3, [r3, #8]
 800ca5c:	88fa      	ldrh	r2, [r7, #6]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d902      	bls.n	800ca68 <pbuf_take+0x84>
    return ERR_ARG;
 800ca62:	f06f 030f 	mvn.w	r3, #15
 800ca66:	e03d      	b.n	800cae4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	61fb      	str	r3, [r7, #28]
 800ca6c:	e028      	b.n	800cac0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d106      	bne.n	800ca82 <pbuf_take+0x9e>
 800ca74:	4b1d      	ldr	r3, [pc, #116]	@ (800caec <pbuf_take+0x108>)
 800ca76:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800ca7a:	4921      	ldr	r1, [pc, #132]	@ (800cb00 <pbuf_take+0x11c>)
 800ca7c:	481d      	ldr	r0, [pc, #116]	@ (800caf4 <pbuf_take+0x110>)
 800ca7e:	f00b fbf5 	bl	801826c <iprintf>
    buf_copy_len = total_copy_len;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	895b      	ldrh	r3, [r3, #10]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d902      	bls.n	800ca98 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	895b      	ldrh	r3, [r3, #10]
 800ca96:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	6858      	ldr	r0, [r3, #4]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	4413      	add	r3, r2
 800caa2:	69ba      	ldr	r2, [r7, #24]
 800caa4:	4619      	mov	r1, r3
 800caa6:	f00b ff4c 	bl	8018942 <memcpy>
    total_copy_len -= buf_copy_len;
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	4413      	add	r3, r2
 800cab8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	61fb      	str	r3, [r7, #28]
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1d3      	bne.n	800ca6e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d103      	bne.n	800cad4 <pbuf_take+0xf0>
 800cacc:	88fb      	ldrh	r3, [r7, #6]
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d006      	beq.n	800cae2 <pbuf_take+0xfe>
 800cad4:	4b05      	ldr	r3, [pc, #20]	@ (800caec <pbuf_take+0x108>)
 800cad6:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800cada:	490a      	ldr	r1, [pc, #40]	@ (800cb04 <pbuf_take+0x120>)
 800cadc:	4805      	ldr	r0, [pc, #20]	@ (800caf4 <pbuf_take+0x110>)
 800cade:	f00b fbc5 	bl	801826c <iprintf>
  return ERR_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3720      	adds	r7, #32
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	0801bae0 	.word	0x0801bae0
 800caf0:	0801beb8 	.word	0x0801beb8
 800caf4:	0801bb40 	.word	0x0801bb40
 800caf8:	0801bed0 	.word	0x0801bed0
 800cafc:	0801beec 	.word	0x0801beec
 800cb00:	0801bf0c 	.word	0x0801bf0c
 800cb04:	0801bf24 	.word	0x0801bf24

0800cb08 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	603a      	str	r2, [r7, #0]
 800cb12:	71fb      	strb	r3, [r7, #7]
 800cb14:	460b      	mov	r3, r1
 800cb16:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	8919      	ldrh	r1, [r3, #8]
 800cb1c:	88ba      	ldrh	r2, [r7, #4]
 800cb1e:	79fb      	ldrb	r3, [r7, #7]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fa0f 	bl	800bf44 <pbuf_alloc>
 800cb26:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <pbuf_clone+0x2a>
    return NULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e011      	b.n	800cb56 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7ff fe11 	bl	800c75c <pbuf_copy>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cb3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d006      	beq.n	800cb54 <pbuf_clone+0x4c>
 800cb46:	4b06      	ldr	r3, [pc, #24]	@ (800cb60 <pbuf_clone+0x58>)
 800cb48:	f240 5224 	movw	r2, #1316	@ 0x524
 800cb4c:	4905      	ldr	r1, [pc, #20]	@ (800cb64 <pbuf_clone+0x5c>)
 800cb4e:	4806      	ldr	r0, [pc, #24]	@ (800cb68 <pbuf_clone+0x60>)
 800cb50:	f00b fb8c 	bl	801826c <iprintf>
  return q;
 800cb54:	68fb      	ldr	r3, [r7, #12]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	0801bae0 	.word	0x0801bae0
 800cb64:	0801bf54 	.word	0x0801bf54
 800cb68:	0801bb40 	.word	0x0801bb40

0800cb6c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cb70:	f009 ffbe 	bl	8016af0 <rand>
 800cb74:	4603      	mov	r3, r0
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	4b01      	ldr	r3, [pc, #4]	@ (800cb8c <tcp_init+0x20>)
 800cb86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cb88:	bf00      	nop
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	20000026 	.word	0x20000026

0800cb90 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d105      	bne.n	800cbac <tcp_free+0x1c>
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <tcp_free+0x2c>)
 800cba2:	22d4      	movs	r2, #212	@ 0xd4
 800cba4:	4906      	ldr	r1, [pc, #24]	@ (800cbc0 <tcp_free+0x30>)
 800cba6:	4807      	ldr	r0, [pc, #28]	@ (800cbc4 <tcp_free+0x34>)
 800cba8:	f00b fb60 	bl	801826c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	2001      	movs	r0, #1
 800cbb0:	f7fe fe18 	bl	800b7e4 <memp_free>
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0801bfe0 	.word	0x0801bfe0
 800cbc0:	0801c010 	.word	0x0801c010
 800cbc4:	0801c024 	.word	0x0801c024

0800cbc8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d105      	bne.n	800cbe4 <tcp_free_listen+0x1c>
 800cbd8:	4b06      	ldr	r3, [pc, #24]	@ (800cbf4 <tcp_free_listen+0x2c>)
 800cbda:	22df      	movs	r2, #223	@ 0xdf
 800cbdc:	4906      	ldr	r1, [pc, #24]	@ (800cbf8 <tcp_free_listen+0x30>)
 800cbde:	4807      	ldr	r0, [pc, #28]	@ (800cbfc <tcp_free_listen+0x34>)
 800cbe0:	f00b fb44 	bl	801826c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cbe4:	6879      	ldr	r1, [r7, #4]
 800cbe6:	2002      	movs	r0, #2
 800cbe8:	f7fe fdfc 	bl	800b7e4 <memp_free>
}
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	0801bfe0 	.word	0x0801bfe0
 800cbf8:	0801c04c 	.word	0x0801c04c
 800cbfc:	0801c024 	.word	0x0801c024

0800cc00 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cc04:	f000 fea4 	bl	800d950 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cc08:	4b07      	ldr	r3, [pc, #28]	@ (800cc28 <tcp_tmr+0x28>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	4b05      	ldr	r3, [pc, #20]	@ (800cc28 <tcp_tmr+0x28>)
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	4b04      	ldr	r3, [pc, #16]	@ (800cc28 <tcp_tmr+0x28>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cc20:	f000 fb54 	bl	800d2cc <tcp_slowtmr>
  }
}
 800cc24:	bf00      	nop
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	200087c5 	.word	0x200087c5

0800cc2c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d105      	bne.n	800cc48 <tcp_remove_listener+0x1c>
 800cc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <tcp_remove_listener+0x48>)
 800cc3e:	22ff      	movs	r2, #255	@ 0xff
 800cc40:	490d      	ldr	r1, [pc, #52]	@ (800cc78 <tcp_remove_listener+0x4c>)
 800cc42:	480e      	ldr	r0, [pc, #56]	@ (800cc7c <tcp_remove_listener+0x50>)
 800cc44:	f00b fb12 	bl	801826c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	e00a      	b.n	800cc64 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d102      	bne.n	800cc5e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f1      	bne.n	800cc4e <tcp_remove_listener+0x22>
    }
  }
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	0801bfe0 	.word	0x0801bfe0
 800cc78:	0801c068 	.word	0x0801c068
 800cc7c:	0801c024 	.word	0x0801c024

0800cc80 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <tcp_listen_closed+0x1c>
 800cc8e:	4b14      	ldr	r3, [pc, #80]	@ (800cce0 <tcp_listen_closed+0x60>)
 800cc90:	f240 1211 	movw	r2, #273	@ 0x111
 800cc94:	4913      	ldr	r1, [pc, #76]	@ (800cce4 <tcp_listen_closed+0x64>)
 800cc96:	4814      	ldr	r0, [pc, #80]	@ (800cce8 <tcp_listen_closed+0x68>)
 800cc98:	f00b fae8 	bl	801826c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7d1b      	ldrb	r3, [r3, #20]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d006      	beq.n	800ccb2 <tcp_listen_closed+0x32>
 800cca4:	4b0e      	ldr	r3, [pc, #56]	@ (800cce0 <tcp_listen_closed+0x60>)
 800cca6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ccaa:	4910      	ldr	r1, [pc, #64]	@ (800ccec <tcp_listen_closed+0x6c>)
 800ccac:	480e      	ldr	r0, [pc, #56]	@ (800cce8 <tcp_listen_closed+0x68>)
 800ccae:	f00b fadd 	bl	801826c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e00b      	b.n	800ccd0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ccb8:	4a0d      	ldr	r2, [pc, #52]	@ (800ccf0 <tcp_listen_closed+0x70>)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff ffb1 	bl	800cc2c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3301      	adds	r3, #1
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d9f0      	bls.n	800ccb8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	0801bfe0 	.word	0x0801bfe0
 800cce4:	0801c090 	.word	0x0801c090
 800cce8:	0801c024 	.word	0x0801c024
 800ccec:	0801c09c 	.word	0x0801c09c
 800ccf0:	0801e490 	.word	0x0801e490

0800ccf4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ccf4:	b5b0      	push	{r4, r5, r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af04      	add	r7, sp, #16
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <tcp_close_shutdown+0x20>
 800cd06:	4b63      	ldr	r3, [pc, #396]	@ (800ce94 <tcp_close_shutdown+0x1a0>)
 800cd08:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cd0c:	4962      	ldr	r1, [pc, #392]	@ (800ce98 <tcp_close_shutdown+0x1a4>)
 800cd0e:	4863      	ldr	r0, [pc, #396]	@ (800ce9c <tcp_close_shutdown+0x1a8>)
 800cd10:	f00b faac 	bl	801826c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d066      	beq.n	800cde8 <tcp_close_shutdown+0xf4>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7d1b      	ldrb	r3, [r3, #20]
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	d003      	beq.n	800cd2a <tcp_close_shutdown+0x36>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	7d1b      	ldrb	r3, [r3, #20]
 800cd26:	2b07      	cmp	r3, #7
 800cd28:	d15e      	bne.n	800cde8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d104      	bne.n	800cd3c <tcp_close_shutdown+0x48>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd36:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cd3a:	d055      	beq.n	800cde8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d106      	bne.n	800cd56 <tcp_close_shutdown+0x62>
 800cd48:	4b52      	ldr	r3, [pc, #328]	@ (800ce94 <tcp_close_shutdown+0x1a0>)
 800cd4a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800cd4e:	4954      	ldr	r1, [pc, #336]	@ (800cea0 <tcp_close_shutdown+0x1ac>)
 800cd50:	4852      	ldr	r0, [pc, #328]	@ (800ce9c <tcp_close_shutdown+0x1a8>)
 800cd52:	f00b fa8b 	bl	801826c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cd5e:	687d      	ldr	r5, [r7, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3304      	adds	r3, #4
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	8ad2      	ldrh	r2, [r2, #22]
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	8b09      	ldrh	r1, [r1, #24]
 800cd6c:	9102      	str	r1, [sp, #8]
 800cd6e:	9201      	str	r2, [sp, #4]
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	462b      	mov	r3, r5
 800cd74:	4622      	mov	r2, r4
 800cd76:	4601      	mov	r1, r0
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f004 fe8d 	bl	8011a98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 f8c8 	bl	800df14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cd84:	4b47      	ldr	r3, [pc, #284]	@ (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d105      	bne.n	800cd9a <tcp_close_shutdown+0xa6>
 800cd8e:	4b45      	ldr	r3, [pc, #276]	@ (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	4a43      	ldr	r2, [pc, #268]	@ (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd96:	6013      	str	r3, [r2, #0]
 800cd98:	e013      	b.n	800cdc2 <tcp_close_shutdown+0xce>
 800cd9a:	4b42      	ldr	r3, [pc, #264]	@ (800cea4 <tcp_close_shutdown+0x1b0>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	e00c      	b.n	800cdbc <tcp_close_shutdown+0xc8>
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d104      	bne.n	800cdb6 <tcp_close_shutdown+0xc2>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68da      	ldr	r2, [r3, #12]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	60da      	str	r2, [r3, #12]
 800cdb4:	e005      	b.n	800cdc2 <tcp_close_shutdown+0xce>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1ef      	bne.n	800cda2 <tcp_close_shutdown+0xae>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	60da      	str	r2, [r3, #12]
 800cdc8:	4b37      	ldr	r3, [pc, #220]	@ (800cea8 <tcp_close_shutdown+0x1b4>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cdce:	4b37      	ldr	r3, [pc, #220]	@ (800ceac <tcp_close_shutdown+0x1b8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d102      	bne.n	800cdde <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cdd8:	f003 fd5c 	bl	8010894 <tcp_trigger_input_pcb_close>
 800cddc:	e002      	b.n	800cde4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fed6 	bl	800cb90 <tcp_free>
      }
      return ERR_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	e050      	b.n	800ce8a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7d1b      	ldrb	r3, [r3, #20]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d03b      	beq.n	800ce68 <tcp_close_shutdown+0x174>
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	dc44      	bgt.n	800ce7e <tcp_close_shutdown+0x18a>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <tcp_close_shutdown+0x10a>
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d02a      	beq.n	800ce52 <tcp_close_shutdown+0x15e>
 800cdfc:	e03f      	b.n	800ce7e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	8adb      	ldrh	r3, [r3, #22]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d021      	beq.n	800ce4a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce06:	4b2a      	ldr	r3, [pc, #168]	@ (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d105      	bne.n	800ce1c <tcp_close_shutdown+0x128>
 800ce10:	4b27      	ldr	r3, [pc, #156]	@ (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	4a26      	ldr	r2, [pc, #152]	@ (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	e013      	b.n	800ce44 <tcp_close_shutdown+0x150>
 800ce1c:	4b24      	ldr	r3, [pc, #144]	@ (800ceb0 <tcp_close_shutdown+0x1bc>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60bb      	str	r3, [r7, #8]
 800ce22:	e00c      	b.n	800ce3e <tcp_close_shutdown+0x14a>
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d104      	bne.n	800ce38 <tcp_close_shutdown+0x144>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	60da      	str	r2, [r3, #12]
 800ce36:	e005      	b.n	800ce44 <tcp_close_shutdown+0x150>
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	60bb      	str	r3, [r7, #8]
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1ef      	bne.n	800ce24 <tcp_close_shutdown+0x130>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff fea0 	bl	800cb90 <tcp_free>
      break;
 800ce50:	e01a      	b.n	800ce88 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff ff14 	bl	800cc80 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	4816      	ldr	r0, [pc, #88]	@ (800ceb4 <tcp_close_shutdown+0x1c0>)
 800ce5c:	f001 f8aa 	bl	800dfb4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff feb1 	bl	800cbc8 <tcp_free_listen>
      break;
 800ce66:	e00f      	b.n	800ce88 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	480e      	ldr	r0, [pc, #56]	@ (800cea4 <tcp_close_shutdown+0x1b0>)
 800ce6c:	f001 f8a2 	bl	800dfb4 <tcp_pcb_remove>
 800ce70:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <tcp_close_shutdown+0x1b4>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7ff fe8a 	bl	800cb90 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ce7c:	e004      	b.n	800ce88 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f81a 	bl	800ceb8 <tcp_close_shutdown_fin>
 800ce84:	4603      	mov	r3, r0
 800ce86:	e000      	b.n	800ce8a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bdb0      	pop	{r4, r5, r7, pc}
 800ce92:	bf00      	nop
 800ce94:	0801bfe0 	.word	0x0801bfe0
 800ce98:	0801c0b4 	.word	0x0801c0b4
 800ce9c:	0801c024 	.word	0x0801c024
 800cea0:	0801c0d4 	.word	0x0801c0d4
 800cea4:	200087bc 	.word	0x200087bc
 800cea8:	200087c4 	.word	0x200087c4
 800ceac:	200087fc 	.word	0x200087fc
 800ceb0:	200087b4 	.word	0x200087b4
 800ceb4:	200087b8 	.word	0x200087b8

0800ceb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <tcp_close_shutdown_fin+0x1c>
 800cec6:	4b2e      	ldr	r3, [pc, #184]	@ (800cf80 <tcp_close_shutdown_fin+0xc8>)
 800cec8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cecc:	492d      	ldr	r1, [pc, #180]	@ (800cf84 <tcp_close_shutdown_fin+0xcc>)
 800cece:	482e      	ldr	r0, [pc, #184]	@ (800cf88 <tcp_close_shutdown_fin+0xd0>)
 800ced0:	f00b f9cc 	bl	801826c <iprintf>

  switch (pcb->state) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7d1b      	ldrb	r3, [r3, #20]
 800ced8:	2b07      	cmp	r3, #7
 800ceda:	d020      	beq.n	800cf1e <tcp_close_shutdown_fin+0x66>
 800cedc:	2b07      	cmp	r3, #7
 800cede:	dc2b      	bgt.n	800cf38 <tcp_close_shutdown_fin+0x80>
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d002      	beq.n	800ceea <tcp_close_shutdown_fin+0x32>
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	d00d      	beq.n	800cf04 <tcp_close_shutdown_fin+0x4c>
 800cee8:	e026      	b.n	800cf38 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f003 fee2 	bl	8010cb4 <tcp_send_fin>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d11f      	bne.n	800cf3c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2205      	movs	r2, #5
 800cf00:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf02:	e01b      	b.n	800cf3c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f003 fed5 	bl	8010cb4 <tcp_send_fin>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cf0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d114      	bne.n	800cf40 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2205      	movs	r2, #5
 800cf1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf1c:	e010      	b.n	800cf40 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f003 fec8 	bl	8010cb4 <tcp_send_fin>
 800cf24:	4603      	mov	r3, r0
 800cf26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d109      	bne.n	800cf44 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2209      	movs	r2, #9
 800cf34:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf36:	e005      	b.n	800cf44 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e01c      	b.n	800cf76 <tcp_close_shutdown_fin+0xbe>
      break;
 800cf3c:	bf00      	nop
 800cf3e:	e002      	b.n	800cf46 <tcp_close_shutdown_fin+0x8e>
      break;
 800cf40:	bf00      	nop
 800cf42:	e000      	b.n	800cf46 <tcp_close_shutdown_fin+0x8e>
      break;
 800cf44:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cf46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d103      	bne.n	800cf56 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f003 ffee 	bl	8010f30 <tcp_output>
 800cf54:	e00d      	b.n	800cf72 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cf56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5e:	d108      	bne.n	800cf72 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8b5b      	ldrh	r3, [r3, #26]
 800cf64:	f043 0308 	orr.w	r3, r3, #8
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e001      	b.n	800cf76 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cf72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	0801bfe0 	.word	0x0801bfe0
 800cf84:	0801c090 	.word	0x0801c090
 800cf88:	0801c024 	.word	0x0801c024

0800cf8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d109      	bne.n	800cfae <tcp_close+0x22>
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd8 <tcp_close+0x4c>)
 800cf9c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cfa0:	490e      	ldr	r1, [pc, #56]	@ (800cfdc <tcp_close+0x50>)
 800cfa2:	480f      	ldr	r0, [pc, #60]	@ (800cfe0 <tcp_close+0x54>)
 800cfa4:	f00b f962 	bl	801826c <iprintf>
 800cfa8:	f06f 030f 	mvn.w	r3, #15
 800cfac:	e00f      	b.n	800cfce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7d1b      	ldrb	r3, [r3, #20]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d006      	beq.n	800cfc4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	8b5b      	ldrh	r3, [r3, #26]
 800cfba:	f043 0310 	orr.w	r3, r3, #16
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fe94 	bl	800ccf4 <tcp_close_shutdown>
 800cfcc:	4603      	mov	r3, r0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0801bfe0 	.word	0x0801bfe0
 800cfdc:	0801c0f0 	.word	0x0801c0f0
 800cfe0:	0801c024 	.word	0x0801c024

0800cfe4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08e      	sub	sp, #56	@ 0x38
 800cfe8:	af04      	add	r7, sp, #16
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d107      	bne.n	800d004 <tcp_abandon+0x20>
 800cff4:	4b52      	ldr	r3, [pc, #328]	@ (800d140 <tcp_abandon+0x15c>)
 800cff6:	f240 223d 	movw	r2, #573	@ 0x23d
 800cffa:	4952      	ldr	r1, [pc, #328]	@ (800d144 <tcp_abandon+0x160>)
 800cffc:	4852      	ldr	r0, [pc, #328]	@ (800d148 <tcp_abandon+0x164>)
 800cffe:	f00b f935 	bl	801826c <iprintf>
 800d002:	e099      	b.n	800d138 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7d1b      	ldrb	r3, [r3, #20]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d106      	bne.n	800d01a <tcp_abandon+0x36>
 800d00c:	4b4c      	ldr	r3, [pc, #304]	@ (800d140 <tcp_abandon+0x15c>)
 800d00e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d012:	494e      	ldr	r1, [pc, #312]	@ (800d14c <tcp_abandon+0x168>)
 800d014:	484c      	ldr	r0, [pc, #304]	@ (800d148 <tcp_abandon+0x164>)
 800d016:	f00b f929 	bl	801826c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	7d1b      	ldrb	r3, [r3, #20]
 800d01e:	2b0a      	cmp	r3, #10
 800d020:	d107      	bne.n	800d032 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	484a      	ldr	r0, [pc, #296]	@ (800d150 <tcp_abandon+0x16c>)
 800d026:	f000 ffc5 	bl	800dfb4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff fdb0 	bl	800cb90 <tcp_free>
 800d030:	e082      	b.n	800d138 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d03e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d044:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d04c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7d1b      	ldrb	r3, [r3, #20]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d126      	bne.n	800d0aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	8adb      	ldrh	r3, [r3, #22]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d02e      	beq.n	800d0c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d064:	4b3b      	ldr	r3, [pc, #236]	@ (800d154 <tcp_abandon+0x170>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d105      	bne.n	800d07a <tcp_abandon+0x96>
 800d06e:	4b39      	ldr	r3, [pc, #228]	@ (800d154 <tcp_abandon+0x170>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	4a37      	ldr	r2, [pc, #220]	@ (800d154 <tcp_abandon+0x170>)
 800d076:	6013      	str	r3, [r2, #0]
 800d078:	e013      	b.n	800d0a2 <tcp_abandon+0xbe>
 800d07a:	4b36      	ldr	r3, [pc, #216]	@ (800d154 <tcp_abandon+0x170>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e00c      	b.n	800d09c <tcp_abandon+0xb8>
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d104      	bne.n	800d096 <tcp_abandon+0xb2>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68da      	ldr	r2, [r3, #12]
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	60da      	str	r2, [r3, #12]
 800d094:	e005      	b.n	800d0a2 <tcp_abandon+0xbe>
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	61fb      	str	r3, [r7, #28]
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1ef      	bne.n	800d082 <tcp_abandon+0x9e>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	60da      	str	r2, [r3, #12]
 800d0a8:	e00b      	b.n	800d0c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	8adb      	ldrh	r3, [r3, #22]
 800d0b2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	4828      	ldr	r0, [pc, #160]	@ (800d158 <tcp_abandon+0x174>)
 800d0b8:	f000 ff7c 	bl	800dfb4 <tcp_pcb_remove>
 800d0bc:	4b27      	ldr	r3, [pc, #156]	@ (800d15c <tcp_abandon+0x178>)
 800d0be:	2201      	movs	r2, #1
 800d0c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d004      	beq.n	800d0d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fd1e 	bl	800db10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d004      	beq.n	800d0e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fd15 	bl	800db10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d004      	beq.n	800d0f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fd0c 	bl	800db10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00e      	beq.n	800d11c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3304      	adds	r3, #4
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	8b12      	ldrh	r2, [r2, #24]
 800d108:	9202      	str	r2, [sp, #8]
 800d10a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d10c:	9201      	str	r2, [sp, #4]
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	460b      	mov	r3, r1
 800d112:	697a      	ldr	r2, [r7, #20]
 800d114:	69b9      	ldr	r1, [r7, #24]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f004 fcbe 	bl	8011a98 <tcp_rst>
    }
    last_state = pcb->state;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	7d1b      	ldrb	r3, [r3, #20]
 800d120:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fd34 	bl	800cb90 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d004      	beq.n	800d138 <tcp_abandon+0x154>
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	f06f 010c 	mvn.w	r1, #12
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	4798      	blx	r3
  }
}
 800d138:	3728      	adds	r7, #40	@ 0x28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	0801bfe0 	.word	0x0801bfe0
 800d144:	0801c124 	.word	0x0801c124
 800d148:	0801c024 	.word	0x0801c024
 800d14c:	0801c140 	.word	0x0801c140
 800d150:	200087c0 	.word	0x200087c0
 800d154:	200087b4 	.word	0x200087b4
 800d158:	200087bc 	.word	0x200087bc
 800d15c:	200087c4 	.word	0x200087c4

0800d160 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d168:	2101      	movs	r1, #1
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff ff3a 	bl	800cfe4 <tcp_abandon>
}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d106      	bne.n	800d194 <tcp_update_rcv_ann_wnd+0x1c>
 800d186:	4b25      	ldr	r3, [pc, #148]	@ (800d21c <tcp_update_rcv_ann_wnd+0xa4>)
 800d188:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d18c:	4924      	ldr	r1, [pc, #144]	@ (800d220 <tcp_update_rcv_ann_wnd+0xa8>)
 800d18e:	4825      	ldr	r0, [pc, #148]	@ (800d224 <tcp_update_rcv_ann_wnd+0xac>)
 800d190:	f00b f86c 	bl	801826c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d19c:	4413      	add	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d1a8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d1ac:	bf28      	it	cs
 800d1ae:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d1b2:	b292      	uxth	r2, r2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	db08      	blt.n	800d1d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	e020      	b.n	800d212 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dd03      	ble.n	800d1e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d1e4:	e014      	b.n	800d210 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1f8:	d306      	bcc.n	800d208 <tcp_update_rcv_ann_wnd+0x90>
 800d1fa:	4b08      	ldr	r3, [pc, #32]	@ (800d21c <tcp_update_rcv_ann_wnd+0xa4>)
 800d1fc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d200:	4909      	ldr	r1, [pc, #36]	@ (800d228 <tcp_update_rcv_ann_wnd+0xb0>)
 800d202:	4808      	ldr	r0, [pc, #32]	@ (800d224 <tcp_update_rcv_ann_wnd+0xac>)
 800d204:	f00b f832 	bl	801826c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d210:	2300      	movs	r3, #0
  }
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	0801bfe0 	.word	0x0801bfe0
 800d220:	0801c23c 	.word	0x0801c23c
 800d224:	0801c024 	.word	0x0801c024
 800d228:	0801c260 	.word	0x0801c260

0800d22c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	460b      	mov	r3, r1
 800d236:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d107      	bne.n	800d24e <tcp_recved+0x22>
 800d23e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2bc <tcp_recved+0x90>)
 800d240:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d244:	491e      	ldr	r1, [pc, #120]	@ (800d2c0 <tcp_recved+0x94>)
 800d246:	481f      	ldr	r0, [pc, #124]	@ (800d2c4 <tcp_recved+0x98>)
 800d248:	f00b f810 	bl	801826c <iprintf>
 800d24c:	e032      	b.n	800d2b4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	7d1b      	ldrb	r3, [r3, #20]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d106      	bne.n	800d264 <tcp_recved+0x38>
 800d256:	4b19      	ldr	r3, [pc, #100]	@ (800d2bc <tcp_recved+0x90>)
 800d258:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d25c:	491a      	ldr	r1, [pc, #104]	@ (800d2c8 <tcp_recved+0x9c>)
 800d25e:	4819      	ldr	r0, [pc, #100]	@ (800d2c4 <tcp_recved+0x98>)
 800d260:	f00b f804 	bl	801826c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d268:	887b      	ldrh	r3, [r7, #2]
 800d26a:	4413      	add	r3, r2
 800d26c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d26e:	89fb      	ldrh	r3, [r7, #14]
 800d270:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d274:	d804      	bhi.n	800d280 <tcp_recved+0x54>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d27a:	89fa      	ldrh	r2, [r7, #14]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d204      	bcs.n	800d28a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d286:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d288:	e002      	b.n	800d290 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	89fa      	ldrh	r2, [r7, #14]
 800d28e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7ff ff71 	bl	800d178 <tcp_update_rcv_ann_wnd>
 800d296:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d29e:	d309      	bcc.n	800d2b4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	8b5b      	ldrh	r3, [r3, #26]
 800d2a4:	f043 0302 	orr.w	r3, r3, #2
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f003 fe3e 	bl	8010f30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	0801bfe0 	.word	0x0801bfe0
 800d2c0:	0801c27c 	.word	0x0801c27c
 800d2c4:	0801c024 	.word	0x0801c024
 800d2c8:	0801c294 	.word	0x0801c294

0800d2cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d2cc:	b5b0      	push	{r4, r5, r7, lr}
 800d2ce:	b090      	sub	sp, #64	@ 0x40
 800d2d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d2d8:	4b95      	ldr	r3, [pc, #596]	@ (800d530 <tcp_slowtmr+0x264>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	4a94      	ldr	r2, [pc, #592]	@ (800d530 <tcp_slowtmr+0x264>)
 800d2e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d2e2:	4b94      	ldr	r3, [pc, #592]	@ (800d534 <tcp_slowtmr+0x268>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	4b92      	ldr	r3, [pc, #584]	@ (800d534 <tcp_slowtmr+0x268>)
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	e000      	b.n	800d2f2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d2f0:	bf00      	nop
  prev = NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d2f6:	4b90      	ldr	r3, [pc, #576]	@ (800d538 <tcp_slowtmr+0x26c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d2fc:	e29f      	b.n	800d83e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d300:	7d1b      	ldrb	r3, [r3, #20]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <tcp_slowtmr+0x48>
 800d306:	4b8d      	ldr	r3, [pc, #564]	@ (800d53c <tcp_slowtmr+0x270>)
 800d308:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d30c:	498c      	ldr	r1, [pc, #560]	@ (800d540 <tcp_slowtmr+0x274>)
 800d30e:	488d      	ldr	r0, [pc, #564]	@ (800d544 <tcp_slowtmr+0x278>)
 800d310:	f00a ffac 	bl	801826c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d106      	bne.n	800d32a <tcp_slowtmr+0x5e>
 800d31c:	4b87      	ldr	r3, [pc, #540]	@ (800d53c <tcp_slowtmr+0x270>)
 800d31e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d322:	4989      	ldr	r1, [pc, #548]	@ (800d548 <tcp_slowtmr+0x27c>)
 800d324:	4887      	ldr	r0, [pc, #540]	@ (800d544 <tcp_slowtmr+0x278>)
 800d326:	f00a ffa1 	bl	801826c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32c:	7d1b      	ldrb	r3, [r3, #20]
 800d32e:	2b0a      	cmp	r3, #10
 800d330:	d106      	bne.n	800d340 <tcp_slowtmr+0x74>
 800d332:	4b82      	ldr	r3, [pc, #520]	@ (800d53c <tcp_slowtmr+0x270>)
 800d334:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d338:	4984      	ldr	r1, [pc, #528]	@ (800d54c <tcp_slowtmr+0x280>)
 800d33a:	4882      	ldr	r0, [pc, #520]	@ (800d544 <tcp_slowtmr+0x278>)
 800d33c:	f00a ff96 	bl	801826c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d342:	7f9a      	ldrb	r2, [r3, #30]
 800d344:	4b7b      	ldr	r3, [pc, #492]	@ (800d534 <tcp_slowtmr+0x268>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d105      	bne.n	800d358 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d356:	e272      	b.n	800d83e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800d358:	4b76      	ldr	r3, [pc, #472]	@ (800d534 <tcp_slowtmr+0x268>)
 800d35a:	781a      	ldrb	r2, [r3, #0]
 800d35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d360:	2300      	movs	r3, #0
 800d362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36e:	7d1b      	ldrb	r3, [r3, #20]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d10a      	bne.n	800d38a <tcp_slowtmr+0xbe>
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d37a:	2b05      	cmp	r3, #5
 800d37c:	d905      	bls.n	800d38a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d37e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d382:	3301      	adds	r3, #1
 800d384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d388:	e11e      	b.n	800d5c8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d390:	2b0b      	cmp	r3, #11
 800d392:	d905      	bls.n	800d3a0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d398:	3301      	adds	r3, #1
 800d39a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d39e:	e113      	b.n	800d5c8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d075      	beq.n	800d496 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d006      	beq.n	800d3c0 <tcp_slowtmr+0xf4>
 800d3b2:	4b62      	ldr	r3, [pc, #392]	@ (800d53c <tcp_slowtmr+0x270>)
 800d3b4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d3b8:	4965      	ldr	r1, [pc, #404]	@ (800d550 <tcp_slowtmr+0x284>)
 800d3ba:	4862      	ldr	r0, [pc, #392]	@ (800d544 <tcp_slowtmr+0x278>)
 800d3bc:	f00a ff56 	bl	801826c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d106      	bne.n	800d3d6 <tcp_slowtmr+0x10a>
 800d3c8:	4b5c      	ldr	r3, [pc, #368]	@ (800d53c <tcp_slowtmr+0x270>)
 800d3ca:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d3ce:	4961      	ldr	r1, [pc, #388]	@ (800d554 <tcp_slowtmr+0x288>)
 800d3d0:	485c      	ldr	r0, [pc, #368]	@ (800d544 <tcp_slowtmr+0x278>)
 800d3d2:	f00a ff4b 	bl	801826c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d3dc:	2b0b      	cmp	r3, #11
 800d3de:	d905      	bls.n	800d3ec <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3ea:	e0ed      	b.n	800d5c8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	4a58      	ldr	r2, [pc, #352]	@ (800d558 <tcp_slowtmr+0x28c>)
 800d3f6:	5cd3      	ldrb	r3, [r2, r3]
 800d3f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d400:	7c7a      	ldrb	r2, [r7, #17]
 800d402:	429a      	cmp	r2, r3
 800d404:	d907      	bls.n	800d416 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d408:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d40c:	3301      	adds	r3, #1
 800d40e:	b2da      	uxtb	r2, r3
 800d410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d412:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d418:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d41c:	7c7a      	ldrb	r2, [r7, #17]
 800d41e:	429a      	cmp	r2, r3
 800d420:	f200 80d2 	bhi.w	800d5c8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d424:	2301      	movs	r3, #1
 800d426:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d108      	bne.n	800d444 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d432:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d434:	f004 fc24 	bl	8011c80 <tcp_zero_window_probe>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d014      	beq.n	800d468 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d43e:	2300      	movs	r3, #0
 800d440:	623b      	str	r3, [r7, #32]
 800d442:	e011      	b.n	800d468 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d44a:	4619      	mov	r1, r3
 800d44c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d44e:	f003 fae9 	bl	8010a24 <tcp_split_unsent_seg>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d107      	bne.n	800d468 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d45a:	f003 fd69 	bl	8010f30 <tcp_output>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d468:	6a3b      	ldr	r3, [r7, #32]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 80ac 	beq.w	800d5c8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d472:	2200      	movs	r2, #0
 800d474:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d47a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d47e:	2b06      	cmp	r3, #6
 800d480:	f200 80a2 	bhi.w	800d5c8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d486:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d48a:	3301      	adds	r3, #1
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d490:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d494:	e098      	b.n	800d5c8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d498:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	db0f      	blt.n	800d4c0 <tcp_slowtmr+0x1f4>
 800d4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d4a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d008      	beq.n	800d4c0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	b21a      	sxth	r2, r3
 800d4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4be:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	db7b      	blt.n	800d5c8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d4d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4d2:	f004 f821 	bl	8011518 <tcp_rexmit_rto_prepare>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d007      	beq.n	800d4ec <tcp_slowtmr+0x220>
 800d4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d171      	bne.n	800d5c8 <tcp_slowtmr+0x2fc>
 800d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d06d      	beq.n	800d5c8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ee:	7d1b      	ldrb	r3, [r3, #20]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d03a      	beq.n	800d56a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4fa:	2b0c      	cmp	r3, #12
 800d4fc:	bf28      	it	cs
 800d4fe:	230c      	movcs	r3, #12
 800d500:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d504:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d508:	10db      	asrs	r3, r3, #3
 800d50a:	b21b      	sxth	r3, r3
 800d50c:	461a      	mov	r2, r3
 800d50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d510:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d514:	4413      	add	r3, r2
 800d516:	7efa      	ldrb	r2, [r7, #27]
 800d518:	4910      	ldr	r1, [pc, #64]	@ (800d55c <tcp_slowtmr+0x290>)
 800d51a:	5c8a      	ldrb	r2, [r1, r2]
 800d51c:	4093      	lsls	r3, r2
 800d51e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d526:	4293      	cmp	r3, r2
 800d528:	dc1a      	bgt.n	800d560 <tcp_slowtmr+0x294>
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	b21a      	sxth	r2, r3
 800d52e:	e019      	b.n	800d564 <tcp_slowtmr+0x298>
 800d530:	200087b0 	.word	0x200087b0
 800d534:	200087c6 	.word	0x200087c6
 800d538:	200087bc 	.word	0x200087bc
 800d53c:	0801bfe0 	.word	0x0801bfe0
 800d540:	0801c324 	.word	0x0801c324
 800d544:	0801c024 	.word	0x0801c024
 800d548:	0801c350 	.word	0x0801c350
 800d54c:	0801c37c 	.word	0x0801c37c
 800d550:	0801c3ac 	.word	0x0801c3ac
 800d554:	0801c3e0 	.word	0x0801c3e0
 800d558:	0801e488 	.word	0x0801e488
 800d55c:	0801e478 	.word	0x0801e478
 800d560:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d566:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	2200      	movs	r2, #0
 800d56e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d57c:	4293      	cmp	r3, r2
 800d57e:	bf28      	it	cs
 800d580:	4613      	movcs	r3, r2
 800d582:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d584:	8a7b      	ldrh	r3, [r7, #18]
 800d586:	085b      	lsrs	r3, r3, #1
 800d588:	b29a      	uxth	r2, r3
 800d58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d206      	bcs.n	800d5b0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d5c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5c4:	f004 f818 	bl	80115f8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ca:	7d1b      	ldrb	r3, [r3, #20]
 800d5cc:	2b06      	cmp	r3, #6
 800d5ce:	d111      	bne.n	800d5f4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d2:	8b5b      	ldrh	r3, [r3, #26]
 800d5d4:	f003 0310 	and.w	r3, r3, #16
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00b      	beq.n	800d5f4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5dc:	4b9d      	ldr	r3, [pc, #628]	@ (800d854 <tcp_slowtmr+0x588>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e2:	6a1b      	ldr	r3, [r3, #32]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b28      	cmp	r3, #40	@ 0x28
 800d5e8:	d904      	bls.n	800d5f4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d5ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f6:	7a5b      	ldrb	r3, [r3, #9]
 800d5f8:	f003 0308 	and.w	r3, r3, #8
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d04c      	beq.n	800d69a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800d600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d602:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d604:	2b04      	cmp	r3, #4
 800d606:	d003      	beq.n	800d610 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d60a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d60c:	2b07      	cmp	r3, #7
 800d60e:	d144      	bne.n	800d69a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d610:	4b90      	ldr	r3, [pc, #576]	@ (800d854 <tcp_slowtmr+0x588>)
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d620:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800d624:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800d628:	498b      	ldr	r1, [pc, #556]	@ (800d858 <tcp_slowtmr+0x58c>)
 800d62a:	fba1 1303 	umull	r1, r3, r1, r3
 800d62e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d630:	429a      	cmp	r2, r3
 800d632:	d90a      	bls.n	800d64a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800d634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d638:	3301      	adds	r3, #1
 800d63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d63e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d642:	3301      	adds	r3, #1
 800d644:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d648:	e027      	b.n	800d69a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d64a:	4b82      	ldr	r3, [pc, #520]	@ (800d854 <tcp_slowtmr+0x588>)
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d660:	4618      	mov	r0, r3
 800d662:	4b7e      	ldr	r3, [pc, #504]	@ (800d85c <tcp_slowtmr+0x590>)
 800d664:	fb00 f303 	mul.w	r3, r0, r3
 800d668:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d66a:	497b      	ldr	r1, [pc, #492]	@ (800d858 <tcp_slowtmr+0x58c>)
 800d66c:	fba1 1303 	umull	r1, r3, r1, r3
 800d670:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d672:	429a      	cmp	r2, r3
 800d674:	d911      	bls.n	800d69a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800d676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d678:	f004 fac2 	bl	8011c00 <tcp_keepalive>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d682:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d686:	2b00      	cmp	r3, #0
 800d688:	d107      	bne.n	800d69a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800d68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d690:	3301      	adds	r3, #1
 800d692:	b2da      	uxtb	r2, r3
 800d694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d696:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d011      	beq.n	800d6c6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d6a2:	4b6c      	ldr	r3, [pc, #432]	@ (800d854 <tcp_slowtmr+0x588>)
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a8:	6a1b      	ldr	r3, [r3, #32]
 800d6aa:	1ad2      	subs	r2, r2, r3
 800d6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	440b      	add	r3, r1
 800d6ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d302      	bcc.n	800d6c6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800d6c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6c2:	f000 fddb 	bl	800e27c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	7d1b      	ldrb	r3, [r3, #20]
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d10b      	bne.n	800d6e6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6ce:	4b61      	ldr	r3, [pc, #388]	@ (800d854 <tcp_slowtmr+0x588>)
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	2b28      	cmp	r3, #40	@ 0x28
 800d6da:	d904      	bls.n	800d6e6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800d6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e8:	7d1b      	ldrb	r3, [r3, #20]
 800d6ea:	2b09      	cmp	r3, #9
 800d6ec:	d10b      	bne.n	800d706 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6ee:	4b59      	ldr	r3, [pc, #356]	@ (800d854 <tcp_slowtmr+0x588>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	2bf0      	cmp	r3, #240	@ 0xf0
 800d6fa:	d904      	bls.n	800d706 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800d6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d700:	3301      	adds	r3, #1
 800d702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d060      	beq.n	800d7d0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800d70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d714:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d716:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d718:	f000 fbfc 	bl	800df14 <tcp_pcb_purge>
      if (prev != NULL) {
 800d71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d010      	beq.n	800d744 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d722:	4b4f      	ldr	r3, [pc, #316]	@ (800d860 <tcp_slowtmr+0x594>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d728:	429a      	cmp	r2, r3
 800d72a:	d106      	bne.n	800d73a <tcp_slowtmr+0x46e>
 800d72c:	4b4d      	ldr	r3, [pc, #308]	@ (800d864 <tcp_slowtmr+0x598>)
 800d72e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d732:	494d      	ldr	r1, [pc, #308]	@ (800d868 <tcp_slowtmr+0x59c>)
 800d734:	484d      	ldr	r0, [pc, #308]	@ (800d86c <tcp_slowtmr+0x5a0>)
 800d736:	f00a fd99 	bl	801826c <iprintf>
        prev->next = pcb->next;
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	68da      	ldr	r2, [r3, #12]
 800d73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d740:	60da      	str	r2, [r3, #12]
 800d742:	e00f      	b.n	800d764 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d744:	4b46      	ldr	r3, [pc, #280]	@ (800d860 <tcp_slowtmr+0x594>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d006      	beq.n	800d75c <tcp_slowtmr+0x490>
 800d74e:	4b45      	ldr	r3, [pc, #276]	@ (800d864 <tcp_slowtmr+0x598>)
 800d750:	f240 5271 	movw	r2, #1393	@ 0x571
 800d754:	4946      	ldr	r1, [pc, #280]	@ (800d870 <tcp_slowtmr+0x5a4>)
 800d756:	4845      	ldr	r0, [pc, #276]	@ (800d86c <tcp_slowtmr+0x5a0>)
 800d758:	f00a fd88 	bl	801826c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	4a3f      	ldr	r2, [pc, #252]	@ (800d860 <tcp_slowtmr+0x594>)
 800d762:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d764:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d013      	beq.n	800d794 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d772:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d774:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d778:	3304      	adds	r3, #4
 800d77a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d77c:	8ad2      	ldrh	r2, [r2, #22]
 800d77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d780:	8b09      	ldrh	r1, [r1, #24]
 800d782:	9102      	str	r1, [sp, #8]
 800d784:	9201      	str	r2, [sp, #4]
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	462b      	mov	r3, r5
 800d78a:	4622      	mov	r2, r4
 800d78c:	4601      	mov	r1, r0
 800d78e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d790:	f004 f982 	bl	8011a98 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79c:	7d1b      	ldrb	r3, [r3, #20]
 800d79e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d7aa:	6838      	ldr	r0, [r7, #0]
 800d7ac:	f7ff f9f0 	bl	800cb90 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d7b0:	4b30      	ldr	r3, [pc, #192]	@ (800d874 <tcp_slowtmr+0x5a8>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d004      	beq.n	800d7c6 <tcp_slowtmr+0x4fa>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f06f 010c 	mvn.w	r1, #12
 800d7c2:	68b8      	ldr	r0, [r7, #8]
 800d7c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d7c6:	4b2b      	ldr	r3, [pc, #172]	@ (800d874 <tcp_slowtmr+0x5a8>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d037      	beq.n	800d83e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800d7ce:	e590      	b.n	800d2f2 <tcp_slowtmr+0x26>
      prev = pcb;
 800d7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	7f1b      	ldrb	r3, [r3, #28]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e8:	7f1a      	ldrb	r2, [r3, #28]
 800d7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ec:	7f5b      	ldrb	r3, [r3, #29]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d325      	bcc.n	800d83e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800d7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d7f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d874 <tcp_slowtmr+0x5a8>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00b      	beq.n	800d820 <tcp_slowtmr+0x554>
 800d808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d80e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d810:	6912      	ldr	r2, [r2, #16]
 800d812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d814:	4610      	mov	r0, r2
 800d816:	4798      	blx	r3
 800d818:	4603      	mov	r3, r0
 800d81a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d81e:	e002      	b.n	800d826 <tcp_slowtmr+0x55a>
 800d820:	2300      	movs	r3, #0
 800d822:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d826:	4b13      	ldr	r3, [pc, #76]	@ (800d874 <tcp_slowtmr+0x5a8>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f47f ad60 	bne.w	800d2f0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d830:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <tcp_slowtmr+0x572>
          tcp_output(prev);
 800d838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d83a:	f003 fb79 	bl	8010f30 <tcp_output>
  while (pcb != NULL) {
 800d83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d840:	2b00      	cmp	r3, #0
 800d842:	f47f ad5c 	bne.w	800d2fe <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d846:	2300      	movs	r3, #0
 800d848:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d84a:	4b0b      	ldr	r3, [pc, #44]	@ (800d878 <tcp_slowtmr+0x5ac>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d850:	e067      	b.n	800d922 <tcp_slowtmr+0x656>
 800d852:	bf00      	nop
 800d854:	200087b0 	.word	0x200087b0
 800d858:	10624dd3 	.word	0x10624dd3
 800d85c:	000124f8 	.word	0x000124f8
 800d860:	200087bc 	.word	0x200087bc
 800d864:	0801bfe0 	.word	0x0801bfe0
 800d868:	0801c418 	.word	0x0801c418
 800d86c:	0801c024 	.word	0x0801c024
 800d870:	0801c444 	.word	0x0801c444
 800d874:	200087c4 	.word	0x200087c4
 800d878:	200087c0 	.word	0x200087c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87e:	7d1b      	ldrb	r3, [r3, #20]
 800d880:	2b0a      	cmp	r3, #10
 800d882:	d006      	beq.n	800d892 <tcp_slowtmr+0x5c6>
 800d884:	4b2b      	ldr	r3, [pc, #172]	@ (800d934 <tcp_slowtmr+0x668>)
 800d886:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d88a:	492b      	ldr	r1, [pc, #172]	@ (800d938 <tcp_slowtmr+0x66c>)
 800d88c:	482b      	ldr	r0, [pc, #172]	@ (800d93c <tcp_slowtmr+0x670>)
 800d88e:	f00a fced 	bl	801826c <iprintf>
    pcb_remove = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d898:	4b29      	ldr	r3, [pc, #164]	@ (800d940 <tcp_slowtmr+0x674>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	6a1b      	ldr	r3, [r3, #32]
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	2bf0      	cmp	r3, #240	@ 0xf0
 800d8a4:	d904      	bls.n	800d8b0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d02f      	beq.n	800d918 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d8b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8ba:	f000 fb2b 	bl	800df14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d010      	beq.n	800d8e6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d8c4:	4b1f      	ldr	r3, [pc, #124]	@ (800d944 <tcp_slowtmr+0x678>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d106      	bne.n	800d8dc <tcp_slowtmr+0x610>
 800d8ce:	4b19      	ldr	r3, [pc, #100]	@ (800d934 <tcp_slowtmr+0x668>)
 800d8d0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d8d4:	491c      	ldr	r1, [pc, #112]	@ (800d948 <tcp_slowtmr+0x67c>)
 800d8d6:	4819      	ldr	r0, [pc, #100]	@ (800d93c <tcp_slowtmr+0x670>)
 800d8d8:	f00a fcc8 	bl	801826c <iprintf>
        prev->next = pcb->next;
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	68da      	ldr	r2, [r3, #12]
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	60da      	str	r2, [r3, #12]
 800d8e4:	e00f      	b.n	800d906 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d8e6:	4b17      	ldr	r3, [pc, #92]	@ (800d944 <tcp_slowtmr+0x678>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d006      	beq.n	800d8fe <tcp_slowtmr+0x632>
 800d8f0:	4b10      	ldr	r3, [pc, #64]	@ (800d934 <tcp_slowtmr+0x668>)
 800d8f2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d8f6:	4915      	ldr	r1, [pc, #84]	@ (800d94c <tcp_slowtmr+0x680>)
 800d8f8:	4810      	ldr	r0, [pc, #64]	@ (800d93c <tcp_slowtmr+0x670>)
 800d8fa:	f00a fcb7 	bl	801826c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	4a10      	ldr	r2, [pc, #64]	@ (800d944 <tcp_slowtmr+0x678>)
 800d904:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d908:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d910:	69f8      	ldr	r0, [r7, #28]
 800d912:	f7ff f93d 	bl	800cb90 <tcp_free>
 800d916:	e004      	b.n	800d922 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1a9      	bne.n	800d87c <tcp_slowtmr+0x5b0>
    }
  }
}
 800d928:	bf00      	nop
 800d92a:	bf00      	nop
 800d92c:	3730      	adds	r7, #48	@ 0x30
 800d92e:	46bd      	mov	sp, r7
 800d930:	bdb0      	pop	{r4, r5, r7, pc}
 800d932:	bf00      	nop
 800d934:	0801bfe0 	.word	0x0801bfe0
 800d938:	0801c470 	.word	0x0801c470
 800d93c:	0801c024 	.word	0x0801c024
 800d940:	200087b0 	.word	0x200087b0
 800d944:	200087c0 	.word	0x200087c0
 800d948:	0801c4a0 	.word	0x0801c4a0
 800d94c:	0801c4c8 	.word	0x0801c4c8

0800d950 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d956:	4b2d      	ldr	r3, [pc, #180]	@ (800da0c <tcp_fasttmr+0xbc>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	4b2b      	ldr	r3, [pc, #172]	@ (800da0c <tcp_fasttmr+0xbc>)
 800d960:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d962:	4b2b      	ldr	r3, [pc, #172]	@ (800da10 <tcp_fasttmr+0xc0>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d968:	e048      	b.n	800d9fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	7f9a      	ldrb	r2, [r3, #30]
 800d96e:	4b27      	ldr	r3, [pc, #156]	@ (800da0c <tcp_fasttmr+0xbc>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	429a      	cmp	r2, r3
 800d974:	d03f      	beq.n	800d9f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d976:	4b25      	ldr	r3, [pc, #148]	@ (800da0c <tcp_fasttmr+0xbc>)
 800d978:	781a      	ldrb	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	8b5b      	ldrh	r3, [r3, #26]
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	2b00      	cmp	r3, #0
 800d988:	d010      	beq.n	800d9ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	8b5b      	ldrh	r3, [r3, #26]
 800d98e:	f043 0302 	orr.w	r3, r3, #2
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f003 fac9 	bl	8010f30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	8b5b      	ldrh	r3, [r3, #26]
 800d9a2:	f023 0303 	bic.w	r3, r3, #3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	8b5b      	ldrh	r3, [r3, #26]
 800d9b0:	f003 0308 	and.w	r3, r3, #8
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d009      	beq.n	800d9cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	8b5b      	ldrh	r3, [r3, #26]
 800d9bc:	f023 0308 	bic.w	r3, r3, #8
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7ff fa76 	bl	800ceb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d9da:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <tcp_fasttmr+0xc4>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f819 	bl	800da18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800da14 <tcp_fasttmr+0xc4>)
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d000      	beq.n	800d9f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d9ee:	e7b8      	b.n	800d962 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	607b      	str	r3, [r7, #4]
 800d9f4:	e002      	b.n	800d9fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1b3      	bne.n	800d96a <tcp_fasttmr+0x1a>
    }
  }
}
 800da02:	bf00      	nop
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	200087c6 	.word	0x200087c6
 800da10:	200087bc 	.word	0x200087bc
 800da14:	200087c4 	.word	0x200087c4

0800da18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800da18:	b590      	push	{r4, r7, lr}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d109      	bne.n	800da3a <tcp_process_refused_data+0x22>
 800da26:	4b37      	ldr	r3, [pc, #220]	@ (800db04 <tcp_process_refused_data+0xec>)
 800da28:	f240 6209 	movw	r2, #1545	@ 0x609
 800da2c:	4936      	ldr	r1, [pc, #216]	@ (800db08 <tcp_process_refused_data+0xf0>)
 800da2e:	4837      	ldr	r0, [pc, #220]	@ (800db0c <tcp_process_refused_data+0xf4>)
 800da30:	f00a fc1c 	bl	801826c <iprintf>
 800da34:	f06f 030f 	mvn.w	r3, #15
 800da38:	e060      	b.n	800dafc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da3e:	7b5b      	ldrb	r3, [r3, #13]
 800da40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00b      	beq.n	800da70 <tcp_process_refused_data+0x58>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6918      	ldr	r0, [r3, #16]
 800da62:	2300      	movs	r3, #0
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	6879      	ldr	r1, [r7, #4]
 800da68:	47a0      	blx	r4
 800da6a:	4603      	mov	r3, r0
 800da6c:	73fb      	strb	r3, [r7, #15]
 800da6e:	e007      	b.n	800da80 <tcp_process_refused_data+0x68>
 800da70:	2300      	movs	r3, #0
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	6879      	ldr	r1, [r7, #4]
 800da76:	2000      	movs	r0, #0
 800da78:	f000 f8a4 	bl	800dbc4 <tcp_recv_null>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d12a      	bne.n	800dade <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800da88:	7bbb      	ldrb	r3, [r7, #14]
 800da8a:	f003 0320 	and.w	r3, r3, #32
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d033      	beq.n	800dafa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da96:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800da9a:	d005      	beq.n	800daa8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daa0:	3301      	adds	r3, #1
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <tcp_process_refused_data+0xb2>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6918      	ldr	r0, [r3, #16]
 800dabc:	2300      	movs	r3, #0
 800dabe:	2200      	movs	r2, #0
 800dac0:	6879      	ldr	r1, [r7, #4]
 800dac2:	47a0      	blx	r4
 800dac4:	4603      	mov	r3, r0
 800dac6:	73fb      	strb	r3, [r7, #15]
 800dac8:	e001      	b.n	800dace <tcp_process_refused_data+0xb6>
 800daca:	2300      	movs	r3, #0
 800dacc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad2:	f113 0f0d 	cmn.w	r3, #13
 800dad6:	d110      	bne.n	800dafa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dad8:	f06f 030c 	mvn.w	r3, #12
 800dadc:	e00e      	b.n	800dafc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dae2:	f113 0f0d 	cmn.w	r3, #13
 800dae6:	d102      	bne.n	800daee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dae8:	f06f 030c 	mvn.w	r3, #12
 800daec:	e006      	b.n	800dafc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800daf4:	f06f 0304 	mvn.w	r3, #4
 800daf8:	e000      	b.n	800dafc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	bd90      	pop	{r4, r7, pc}
 800db04:	0801bfe0 	.word	0x0801bfe0
 800db08:	0801c4f0 	.word	0x0801c4f0
 800db0c:	0801c024 	.word	0x0801c024

0800db10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800db18:	e007      	b.n	800db2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f80a 	bl	800db3a <tcp_seg_free>
    seg = next;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1f4      	bne.n	800db1a <tcp_segs_free+0xa>
  }
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b082      	sub	sp, #8
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00c      	beq.n	800db62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d004      	beq.n	800db5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	4618      	mov	r0, r3
 800db56:	f7fe fcd9 	bl	800c50c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	2003      	movs	r0, #3
 800db5e:	f7fd fe41 	bl	800b7e4 <memp_free>
  }
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <tcp_seg_copy+0x1c>
 800db7a:	4b0f      	ldr	r3, [pc, #60]	@ (800dbb8 <tcp_seg_copy+0x4c>)
 800db7c:	f240 6282 	movw	r2, #1666	@ 0x682
 800db80:	490e      	ldr	r1, [pc, #56]	@ (800dbbc <tcp_seg_copy+0x50>)
 800db82:	480f      	ldr	r0, [pc, #60]	@ (800dbc0 <tcp_seg_copy+0x54>)
 800db84:	f00a fb72 	bl	801826c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800db88:	2003      	movs	r0, #3
 800db8a:	f7fd fdbb 	bl	800b704 <memp_malloc>
 800db8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <tcp_seg_copy+0x2e>
    return NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	e00a      	b.n	800dbb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800db9a:	2210      	movs	r2, #16
 800db9c:	6879      	ldr	r1, [r7, #4]
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f00a fecf 	bl	8018942 <memcpy>
  pbuf_ref(cseg->p);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fd4f 	bl	800c64c <pbuf_ref>
  return cseg;
 800dbae:	68fb      	ldr	r3, [r7, #12]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	0801bfe0 	.word	0x0801bfe0
 800dbbc:	0801c534 	.word	0x0801c534
 800dbc0:	0801c024 	.word	0x0801c024

0800dbc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d109      	bne.n	800dbec <tcp_recv_null+0x28>
 800dbd8:	4b12      	ldr	r3, [pc, #72]	@ (800dc24 <tcp_recv_null+0x60>)
 800dbda:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800dbde:	4912      	ldr	r1, [pc, #72]	@ (800dc28 <tcp_recv_null+0x64>)
 800dbe0:	4812      	ldr	r0, [pc, #72]	@ (800dc2c <tcp_recv_null+0x68>)
 800dbe2:	f00a fb43 	bl	801826c <iprintf>
 800dbe6:	f06f 030f 	mvn.w	r3, #15
 800dbea:	e016      	b.n	800dc1a <tcp_recv_null+0x56>

  if (p != NULL) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d009      	beq.n	800dc06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	891b      	ldrh	r3, [r3, #8]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68b8      	ldr	r0, [r7, #8]
 800dbfa:	f7ff fb17 	bl	800d22c <tcp_recved>
    pbuf_free(p);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7fe fc84 	bl	800c50c <pbuf_free>
 800dc04:	e008      	b.n	800dc18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dc06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d104      	bne.n	800dc18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dc0e:	68b8      	ldr	r0, [r7, #8]
 800dc10:	f7ff f9bc 	bl	800cf8c <tcp_close>
 800dc14:	4603      	mov	r3, r0
 800dc16:	e000      	b.n	800dc1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	0801bfe0 	.word	0x0801bfe0
 800dc28:	0801c550 	.word	0x0801c550
 800dc2c:	0801c024 	.word	0x0801c024

0800dc30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dc3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	db01      	blt.n	800dc46 <tcp_kill_prio+0x16>
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	e000      	b.n	800dc48 <tcp_kill_prio+0x18>
 800dc46:	237f      	movs	r3, #127	@ 0x7f
 800dc48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dc4a:	7afb      	ldrb	r3, [r7, #11]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d034      	beq.n	800dcba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dc50:	7afb      	ldrb	r3, [r7, #11]
 800dc52:	3b01      	subs	r3, #1
 800dc54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc5e:	4b19      	ldr	r3, [pc, #100]	@ (800dcc4 <tcp_kill_prio+0x94>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	617b      	str	r3, [r7, #20]
 800dc64:	e01f      	b.n	800dca6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	7d5b      	ldrb	r3, [r3, #21]
 800dc6a:	7afa      	ldrb	r2, [r7, #11]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d80c      	bhi.n	800dc8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dc74:	7afa      	ldrb	r2, [r7, #11]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d112      	bne.n	800dca0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc7a:	4b13      	ldr	r3, [pc, #76]	@ (800dcc8 <tcp_kill_prio+0x98>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	1ad3      	subs	r3, r2, r3
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d80a      	bhi.n	800dca0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800dcc8 <tcp_kill_prio+0x98>)
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	7d5b      	ldrb	r3, [r3, #21]
 800dc9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	617b      	str	r3, [r7, #20]
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1dc      	bne.n	800dc66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d004      	beq.n	800dcbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dcb2:	6938      	ldr	r0, [r7, #16]
 800dcb4:	f7ff fa54 	bl	800d160 <tcp_abort>
 800dcb8:	e000      	b.n	800dcbc <tcp_kill_prio+0x8c>
    return;
 800dcba:	bf00      	nop
  }
}
 800dcbc:	3718      	adds	r7, #24
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200087bc 	.word	0x200087bc
 800dcc8:	200087b0 	.word	0x200087b0

0800dccc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d009      	beq.n	800dcf0 <tcp_kill_state+0x24>
 800dcdc:	79fb      	ldrb	r3, [r7, #7]
 800dcde:	2b09      	cmp	r3, #9
 800dce0:	d006      	beq.n	800dcf0 <tcp_kill_state+0x24>
 800dce2:	4b1a      	ldr	r3, [pc, #104]	@ (800dd4c <tcp_kill_state+0x80>)
 800dce4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800dce8:	4919      	ldr	r1, [pc, #100]	@ (800dd50 <tcp_kill_state+0x84>)
 800dcea:	481a      	ldr	r0, [pc, #104]	@ (800dd54 <tcp_kill_state+0x88>)
 800dcec:	f00a fabe 	bl	801826c <iprintf>

  inactivity = 0;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcf8:	4b17      	ldr	r3, [pc, #92]	@ (800dd58 <tcp_kill_state+0x8c>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	617b      	str	r3, [r7, #20]
 800dcfe:	e017      	b.n	800dd30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	79fa      	ldrb	r2, [r7, #7]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d10f      	bne.n	800dd2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd0a:	4b14      	ldr	r3, [pc, #80]	@ (800dd5c <tcp_kill_state+0x90>)
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d807      	bhi.n	800dd2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dd1a:	4b10      	ldr	r3, [pc, #64]	@ (800dd5c <tcp_kill_state+0x90>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	6a1b      	ldr	r3, [r3, #32]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	617b      	str	r3, [r7, #20]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1e4      	bne.n	800dd00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d003      	beq.n	800dd44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	6938      	ldr	r0, [r7, #16]
 800dd40:	f7ff f950 	bl	800cfe4 <tcp_abandon>
  }
}
 800dd44:	bf00      	nop
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	0801bfe0 	.word	0x0801bfe0
 800dd50:	0801c56c 	.word	0x0801c56c
 800dd54:	0801c024 	.word	0x0801c024
 800dd58:	200087bc 	.word	0x200087bc
 800dd5c:	200087b0 	.word	0x200087b0

0800dd60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd6e:	4b12      	ldr	r3, [pc, #72]	@ (800ddb8 <tcp_kill_timewait+0x58>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	e012      	b.n	800dd9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd76:	4b11      	ldr	r3, [pc, #68]	@ (800ddbc <tcp_kill_timewait+0x5c>)
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6a1b      	ldr	r3, [r3, #32]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d807      	bhi.n	800dd96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dd86:	4b0d      	ldr	r3, [pc, #52]	@ (800ddbc <tcp_kill_timewait+0x5c>)
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e9      	bne.n	800dd76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dda8:	68b8      	ldr	r0, [r7, #8]
 800ddaa:	f7ff f9d9 	bl	800d160 <tcp_abort>
  }
}
 800ddae:	bf00      	nop
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	200087c0 	.word	0x200087c0
 800ddbc:	200087b0 	.word	0x200087b0

0800ddc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ddc6:	4b10      	ldr	r3, [pc, #64]	@ (800de08 <tcp_handle_closepend+0x48>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ddcc:	e014      	b.n	800ddf8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	8b5b      	ldrh	r3, [r3, #26]
 800ddd8:	f003 0308 	and.w	r3, r3, #8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d009      	beq.n	800ddf4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	8b5b      	ldrh	r3, [r3, #26]
 800dde4:	f023 0308 	bic.w	r3, r3, #8
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff f862 	bl	800ceb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1e7      	bne.n	800ddce <tcp_handle_closepend+0xe>
  }
}
 800ddfe:	bf00      	nop
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	200087bc 	.word	0x200087bc

0800de0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	4603      	mov	r3, r0
 800de14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de16:	2001      	movs	r0, #1
 800de18:	f7fd fc74 	bl	800b704 <memp_malloc>
 800de1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d126      	bne.n	800de72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800de24:	f7ff ffcc 	bl	800ddc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800de28:	f7ff ff9a 	bl	800dd60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de2c:	2001      	movs	r0, #1
 800de2e:	f7fd fc69 	bl	800b704 <memp_malloc>
 800de32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d11b      	bne.n	800de72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800de3a:	2009      	movs	r0, #9
 800de3c:	f7ff ff46 	bl	800dccc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de40:	2001      	movs	r0, #1
 800de42:	f7fd fc5f 	bl	800b704 <memp_malloc>
 800de46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d111      	bne.n	800de72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800de4e:	2008      	movs	r0, #8
 800de50:	f7ff ff3c 	bl	800dccc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de54:	2001      	movs	r0, #1
 800de56:	f7fd fc55 	bl	800b704 <memp_malloc>
 800de5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d107      	bne.n	800de72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	4618      	mov	r0, r3
 800de66:	f7ff fee3 	bl	800dc30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de6a:	2001      	movs	r0, #1
 800de6c:	f7fd fc4a 	bl	800b704 <memp_malloc>
 800de70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d03f      	beq.n	800def8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800de78:	229c      	movs	r2, #156	@ 0x9c
 800de7a:	2100      	movs	r1, #0
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f00a fc5f 	bl	8018740 <memset>
    pcb->prio = prio;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	79fa      	ldrb	r2, [r7, #7]
 800de86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800de8e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800de98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	22ff      	movs	r2, #255	@ 0xff
 800dea6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800deae:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2206      	movs	r2, #6
 800deb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2206      	movs	r2, #6
 800debc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dec4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2201      	movs	r2, #1
 800deca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800dece:	4b0d      	ldr	r3, [pc, #52]	@ (800df04 <tcp_alloc+0xf8>)
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ded6:	4b0c      	ldr	r3, [pc, #48]	@ (800df08 <tcp_alloc+0xfc>)
 800ded8:	781a      	ldrb	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800dee4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4a08      	ldr	r2, [pc, #32]	@ (800df0c <tcp_alloc+0x100>)
 800deec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4a07      	ldr	r2, [pc, #28]	@ (800df10 <tcp_alloc+0x104>)
 800def4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800def8:	68fb      	ldr	r3, [r7, #12]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	200087b0 	.word	0x200087b0
 800df08:	200087c6 	.word	0x200087c6
 800df0c:	0800dbc5 	.word	0x0800dbc5
 800df10:	006ddd00 	.word	0x006ddd00

0800df14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d107      	bne.n	800df32 <tcp_pcb_purge+0x1e>
 800df22:	4b21      	ldr	r3, [pc, #132]	@ (800dfa8 <tcp_pcb_purge+0x94>)
 800df24:	f640 0251 	movw	r2, #2129	@ 0x851
 800df28:	4920      	ldr	r1, [pc, #128]	@ (800dfac <tcp_pcb_purge+0x98>)
 800df2a:	4821      	ldr	r0, [pc, #132]	@ (800dfb0 <tcp_pcb_purge+0x9c>)
 800df2c:	f00a f99e 	bl	801826c <iprintf>
 800df30:	e037      	b.n	800dfa2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7d1b      	ldrb	r3, [r3, #20]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d033      	beq.n	800dfa2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800df3e:	2b0a      	cmp	r3, #10
 800df40:	d02f      	beq.n	800dfa2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800df46:	2b01      	cmp	r3, #1
 800df48:	d02b      	beq.n	800dfa2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d007      	beq.n	800df62 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe fad8 	bl	800c50c <pbuf_free>
      pcb->refused_data = NULL;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f986 	bl	800e27c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df76:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff fdc7 	bl	800db10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff fdc2 	bl	800db10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	66da      	str	r2, [r3, #108]	@ 0x6c
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	0801bfe0 	.word	0x0801bfe0
 800dfac:	0801c62c 	.word	0x0801c62c
 800dfb0:	0801c024 	.word	0x0801c024

0800dfb4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d106      	bne.n	800dfd2 <tcp_pcb_remove+0x1e>
 800dfc4:	4b3e      	ldr	r3, [pc, #248]	@ (800e0c0 <tcp_pcb_remove+0x10c>)
 800dfc6:	f640 0283 	movw	r2, #2179	@ 0x883
 800dfca:	493e      	ldr	r1, [pc, #248]	@ (800e0c4 <tcp_pcb_remove+0x110>)
 800dfcc:	483e      	ldr	r0, [pc, #248]	@ (800e0c8 <tcp_pcb_remove+0x114>)
 800dfce:	f00a f94d 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d106      	bne.n	800dfe6 <tcp_pcb_remove+0x32>
 800dfd8:	4b39      	ldr	r3, [pc, #228]	@ (800e0c0 <tcp_pcb_remove+0x10c>)
 800dfda:	f640 0284 	movw	r2, #2180	@ 0x884
 800dfde:	493b      	ldr	r1, [pc, #236]	@ (800e0cc <tcp_pcb_remove+0x118>)
 800dfe0:	4839      	ldr	r0, [pc, #228]	@ (800e0c8 <tcp_pcb_remove+0x114>)
 800dfe2:	f00a f943 	bl	801826c <iprintf>

  TCP_RMV(pcblist, pcb);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	683a      	ldr	r2, [r7, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d105      	bne.n	800dffc <tcp_pcb_remove+0x48>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68da      	ldr	r2, [r3, #12]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	e013      	b.n	800e024 <tcp_pcb_remove+0x70>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	60fb      	str	r3, [r7, #12]
 800e002:	e00c      	b.n	800e01e <tcp_pcb_remove+0x6a>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d104      	bne.n	800e018 <tcp_pcb_remove+0x64>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	68da      	ldr	r2, [r3, #12]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	60da      	str	r2, [r3, #12]
 800e016:	e005      	b.n	800e024 <tcp_pcb_remove+0x70>
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	60fb      	str	r3, [r7, #12]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1ef      	bne.n	800e004 <tcp_pcb_remove+0x50>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2200      	movs	r2, #0
 800e028:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e02a:	6838      	ldr	r0, [r7, #0]
 800e02c:	f7ff ff72 	bl	800df14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	7d1b      	ldrb	r3, [r3, #20]
 800e034:	2b0a      	cmp	r3, #10
 800e036:	d013      	beq.n	800e060 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d00f      	beq.n	800e060 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	8b5b      	ldrh	r3, [r3, #26]
 800e044:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d009      	beq.n	800e060 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	8b5b      	ldrh	r3, [r3, #26]
 800e050:	f043 0302 	orr.w	r3, r3, #2
 800e054:	b29a      	uxth	r2, r3
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e05a:	6838      	ldr	r0, [r7, #0]
 800e05c:	f002 ff68 	bl	8010f30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	7d1b      	ldrb	r3, [r3, #20]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d020      	beq.n	800e0aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d006      	beq.n	800e07e <tcp_pcb_remove+0xca>
 800e070:	4b13      	ldr	r3, [pc, #76]	@ (800e0c0 <tcp_pcb_remove+0x10c>)
 800e072:	f640 0293 	movw	r2, #2195	@ 0x893
 800e076:	4916      	ldr	r1, [pc, #88]	@ (800e0d0 <tcp_pcb_remove+0x11c>)
 800e078:	4813      	ldr	r0, [pc, #76]	@ (800e0c8 <tcp_pcb_remove+0x114>)
 800e07a:	f00a f8f7 	bl	801826c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e082:	2b00      	cmp	r3, #0
 800e084:	d006      	beq.n	800e094 <tcp_pcb_remove+0xe0>
 800e086:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c0 <tcp_pcb_remove+0x10c>)
 800e088:	f640 0294 	movw	r2, #2196	@ 0x894
 800e08c:	4911      	ldr	r1, [pc, #68]	@ (800e0d4 <tcp_pcb_remove+0x120>)
 800e08e:	480e      	ldr	r0, [pc, #56]	@ (800e0c8 <tcp_pcb_remove+0x114>)
 800e090:	f00a f8ec 	bl	801826c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d006      	beq.n	800e0aa <tcp_pcb_remove+0xf6>
 800e09c:	4b08      	ldr	r3, [pc, #32]	@ (800e0c0 <tcp_pcb_remove+0x10c>)
 800e09e:	f640 0296 	movw	r2, #2198	@ 0x896
 800e0a2:	490d      	ldr	r1, [pc, #52]	@ (800e0d8 <tcp_pcb_remove+0x124>)
 800e0a4:	4808      	ldr	r0, [pc, #32]	@ (800e0c8 <tcp_pcb_remove+0x114>)
 800e0a6:	f00a f8e1 	bl	801826c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e0b6:	bf00      	nop
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	0801bfe0 	.word	0x0801bfe0
 800e0c4:	0801c648 	.word	0x0801c648
 800e0c8:	0801c024 	.word	0x0801c024
 800e0cc:	0801c664 	.word	0x0801c664
 800e0d0:	0801c684 	.word	0x0801c684
 800e0d4:	0801c69c 	.word	0x0801c69c
 800e0d8:	0801c6b8 	.word	0x0801c6b8

0800e0dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <tcp_next_iss+0x1c>
 800e0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e114 <tcp_next_iss+0x38>)
 800e0ec:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e0f0:	4909      	ldr	r1, [pc, #36]	@ (800e118 <tcp_next_iss+0x3c>)
 800e0f2:	480a      	ldr	r0, [pc, #40]	@ (800e11c <tcp_next_iss+0x40>)
 800e0f4:	f00a f8ba 	bl	801826c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e0f8:	4b09      	ldr	r3, [pc, #36]	@ (800e120 <tcp_next_iss+0x44>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	4b09      	ldr	r3, [pc, #36]	@ (800e124 <tcp_next_iss+0x48>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4413      	add	r3, r2
 800e102:	4a07      	ldr	r2, [pc, #28]	@ (800e120 <tcp_next_iss+0x44>)
 800e104:	6013      	str	r3, [r2, #0]
  return iss;
 800e106:	4b06      	ldr	r3, [pc, #24]	@ (800e120 <tcp_next_iss+0x44>)
 800e108:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	0801bfe0 	.word	0x0801bfe0
 800e118:	0801c6d0 	.word	0x0801c6d0
 800e11c:	0801c024 	.word	0x0801c024
 800e120:	20000028 	.word	0x20000028
 800e124:	200087b0 	.word	0x200087b0

0800e128 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	4603      	mov	r3, r0
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d106      	bne.n	800e14a <tcp_eff_send_mss_netif+0x22>
 800e13c:	4b14      	ldr	r3, [pc, #80]	@ (800e190 <tcp_eff_send_mss_netif+0x68>)
 800e13e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e142:	4914      	ldr	r1, [pc, #80]	@ (800e194 <tcp_eff_send_mss_netif+0x6c>)
 800e144:	4814      	ldr	r0, [pc, #80]	@ (800e198 <tcp_eff_send_mss_netif+0x70>)
 800e146:	f00a f891 	bl	801826c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e150:	89fb      	ldrh	r3, [r7, #14]
 800e152:	e019      	b.n	800e188 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e158:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e15a:	8afb      	ldrh	r3, [r7, #22]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d012      	beq.n	800e186 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e160:	2328      	movs	r3, #40	@ 0x28
 800e162:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e164:	8afa      	ldrh	r2, [r7, #22]
 800e166:	8abb      	ldrh	r3, [r7, #20]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d904      	bls.n	800e176 <tcp_eff_send_mss_netif+0x4e>
 800e16c:	8afa      	ldrh	r2, [r7, #22]
 800e16e:	8abb      	ldrh	r3, [r7, #20]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	b29b      	uxth	r3, r3
 800e174:	e000      	b.n	800e178 <tcp_eff_send_mss_netif+0x50>
 800e176:	2300      	movs	r3, #0
 800e178:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e17a:	8a7a      	ldrh	r2, [r7, #18]
 800e17c:	89fb      	ldrh	r3, [r7, #14]
 800e17e:	4293      	cmp	r3, r2
 800e180:	bf28      	it	cs
 800e182:	4613      	movcs	r3, r2
 800e184:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e186:	89fb      	ldrh	r3, [r7, #14]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3718      	adds	r7, #24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	0801bfe0 	.word	0x0801bfe0
 800e194:	0801c6ec 	.word	0x0801c6ec
 800e198:	0801c024 	.word	0x0801c024

0800e19c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d119      	bne.n	800e1e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e1b0:	4b10      	ldr	r3, [pc, #64]	@ (800e1f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e1b2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e1b6:	4910      	ldr	r1, [pc, #64]	@ (800e1f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e1b8:	4810      	ldr	r0, [pc, #64]	@ (800e1fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e1ba:	f00a f857 	bl	801826c <iprintf>

  while (pcb != NULL) {
 800e1be:	e011      	b.n	800e1e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d108      	bne.n	800e1de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f7fe ffc4 	bl	800d160 <tcp_abort>
      pcb = next;
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	60fb      	str	r3, [r7, #12]
 800e1dc:	e002      	b.n	800e1e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1ea      	bne.n	800e1c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e1ea:	bf00      	nop
 800e1ec:	bf00      	nop
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	0801bfe0 	.word	0x0801bfe0
 800e1f8:	0801c714 	.word	0x0801c714
 800e1fc:	0801c024 	.word	0x0801c024

0800e200 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d02a      	beq.n	800e266 <tcp_netif_ip_addr_changed+0x66>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d026      	beq.n	800e266 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e218:	4b15      	ldr	r3, [pc, #84]	@ (800e270 <tcp_netif_ip_addr_changed+0x70>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7ff ffbc 	bl	800e19c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e224:	4b13      	ldr	r3, [pc, #76]	@ (800e274 <tcp_netif_ip_addr_changed+0x74>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff ffb6 	bl	800e19c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d017      	beq.n	800e266 <tcp_netif_ip_addr_changed+0x66>
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d013      	beq.n	800e266 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e23e:	4b0e      	ldr	r3, [pc, #56]	@ (800e278 <tcp_netif_ip_addr_changed+0x78>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e00c      	b.n	800e260 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d103      	bne.n	800e25a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1ef      	bne.n	800e246 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e266:	bf00      	nop
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	200087bc 	.word	0x200087bc
 800e274:	200087b4 	.word	0x200087b4
 800e278:	200087b8 	.word	0x200087b8

0800e27c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e290:	4618      	mov	r0, r3
 800e292:	f7ff fc3d 	bl	800db10 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e29c:	bf00      	nop
 800e29e:	3708      	adds	r7, #8
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e2a4:	b590      	push	{r4, r7, lr}
 800e2a6:	b08d      	sub	sp, #52	@ 0x34
 800e2a8:	af04      	add	r7, sp, #16
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d105      	bne.n	800e2c0 <tcp_input+0x1c>
 800e2b4:	4b9b      	ldr	r3, [pc, #620]	@ (800e524 <tcp_input+0x280>)
 800e2b6:	2283      	movs	r2, #131	@ 0x83
 800e2b8:	499b      	ldr	r1, [pc, #620]	@ (800e528 <tcp_input+0x284>)
 800e2ba:	489c      	ldr	r0, [pc, #624]	@ (800e52c <tcp_input+0x288>)
 800e2bc:	f009 ffd6 	bl	801826c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	4a9a      	ldr	r2, [pc, #616]	@ (800e530 <tcp_input+0x28c>)
 800e2c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	895b      	ldrh	r3, [r3, #10]
 800e2cc:	2b13      	cmp	r3, #19
 800e2ce:	f240 83d1 	bls.w	800ea74 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2d2:	4b98      	ldr	r3, [pc, #608]	@ (800e534 <tcp_input+0x290>)
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	4a97      	ldr	r2, [pc, #604]	@ (800e534 <tcp_input+0x290>)
 800e2d8:	6812      	ldr	r2, [r2, #0]
 800e2da:	4611      	mov	r1, r2
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f006 fc57 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f040 83c7 	bne.w	800ea78 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2ea:	4b92      	ldr	r3, [pc, #584]	@ (800e534 <tcp_input+0x290>)
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2f2:	2be0      	cmp	r3, #224	@ 0xe0
 800e2f4:	f000 83c0 	beq.w	800ea78 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e2f8:	4b8d      	ldr	r3, [pc, #564]	@ (800e530 <tcp_input+0x28c>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	899b      	ldrh	r3, [r3, #12]
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	4618      	mov	r0, r3
 800e302:	f7fc fd17 	bl	800ad34 <lwip_htons>
 800e306:	4603      	mov	r3, r0
 800e308:	0b1b      	lsrs	r3, r3, #12
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e312:	7cbb      	ldrb	r3, [r7, #18]
 800e314:	2b13      	cmp	r3, #19
 800e316:	f240 83b1 	bls.w	800ea7c <tcp_input+0x7d8>
 800e31a:	7cbb      	ldrb	r3, [r7, #18]
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	891b      	ldrh	r3, [r3, #8]
 800e322:	429a      	cmp	r2, r3
 800e324:	f200 83aa 	bhi.w	800ea7c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e328:	7cbb      	ldrb	r3, [r7, #18]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	3b14      	subs	r3, #20
 800e32e:	b29a      	uxth	r2, r3
 800e330:	4b81      	ldr	r3, [pc, #516]	@ (800e538 <tcp_input+0x294>)
 800e332:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e334:	4b81      	ldr	r3, [pc, #516]	@ (800e53c <tcp_input+0x298>)
 800e336:	2200      	movs	r2, #0
 800e338:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	895a      	ldrh	r2, [r3, #10]
 800e33e:	7cbb      	ldrb	r3, [r7, #18]
 800e340:	b29b      	uxth	r3, r3
 800e342:	429a      	cmp	r2, r3
 800e344:	d309      	bcc.n	800e35a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e346:	4b7c      	ldr	r3, [pc, #496]	@ (800e538 <tcp_input+0x294>)
 800e348:	881a      	ldrh	r2, [r3, #0]
 800e34a:	4b7d      	ldr	r3, [pc, #500]	@ (800e540 <tcp_input+0x29c>)
 800e34c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e34e:	7cbb      	ldrb	r3, [r7, #18]
 800e350:	4619      	mov	r1, r3
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f7fe f854 	bl	800c400 <pbuf_remove_header>
 800e358:	e04e      	b.n	800e3f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d105      	bne.n	800e36e <tcp_input+0xca>
 800e362:	4b70      	ldr	r3, [pc, #448]	@ (800e524 <tcp_input+0x280>)
 800e364:	22c2      	movs	r2, #194	@ 0xc2
 800e366:	4977      	ldr	r1, [pc, #476]	@ (800e544 <tcp_input+0x2a0>)
 800e368:	4870      	ldr	r0, [pc, #448]	@ (800e52c <tcp_input+0x288>)
 800e36a:	f009 ff7f 	bl	801826c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e36e:	2114      	movs	r1, #20
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7fe f845 	bl	800c400 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	895a      	ldrh	r2, [r3, #10]
 800e37a:	4b71      	ldr	r3, [pc, #452]	@ (800e540 <tcp_input+0x29c>)
 800e37c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e37e:	4b6e      	ldr	r3, [pc, #440]	@ (800e538 <tcp_input+0x294>)
 800e380:	881a      	ldrh	r2, [r3, #0]
 800e382:	4b6f      	ldr	r3, [pc, #444]	@ (800e540 <tcp_input+0x29c>)
 800e384:	881b      	ldrh	r3, [r3, #0]
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e38a:	4b6d      	ldr	r3, [pc, #436]	@ (800e540 <tcp_input+0x29c>)
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7fe f835 	bl	800c400 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	895b      	ldrh	r3, [r3, #10]
 800e39c:	8a3a      	ldrh	r2, [r7, #16]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	f200 836e 	bhi.w	800ea80 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	4a64      	ldr	r2, [pc, #400]	@ (800e53c <tcp_input+0x298>)
 800e3ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	8a3a      	ldrh	r2, [r7, #16]
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fe f822 	bl	800c400 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	891a      	ldrh	r2, [r3, #8]
 800e3c0:	8a3b      	ldrh	r3, [r7, #16]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	895b      	ldrh	r3, [r3, #10]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d005      	beq.n	800e3de <tcp_input+0x13a>
 800e3d2:	4b54      	ldr	r3, [pc, #336]	@ (800e524 <tcp_input+0x280>)
 800e3d4:	22df      	movs	r2, #223	@ 0xdf
 800e3d6:	495c      	ldr	r1, [pc, #368]	@ (800e548 <tcp_input+0x2a4>)
 800e3d8:	4854      	ldr	r0, [pc, #336]	@ (800e52c <tcp_input+0x288>)
 800e3da:	f009 ff47 	bl	801826c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	891a      	ldrh	r2, [r3, #8]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	891b      	ldrh	r3, [r3, #8]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d005      	beq.n	800e3f8 <tcp_input+0x154>
 800e3ec:	4b4d      	ldr	r3, [pc, #308]	@ (800e524 <tcp_input+0x280>)
 800e3ee:	22e0      	movs	r2, #224	@ 0xe0
 800e3f0:	4956      	ldr	r1, [pc, #344]	@ (800e54c <tcp_input+0x2a8>)
 800e3f2:	484e      	ldr	r0, [pc, #312]	@ (800e52c <tcp_input+0x288>)
 800e3f4:	f009 ff3a 	bl	801826c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e3f8:	4b4d      	ldr	r3, [pc, #308]	@ (800e530 <tcp_input+0x28c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	4a4b      	ldr	r2, [pc, #300]	@ (800e530 <tcp_input+0x28c>)
 800e402:	6814      	ldr	r4, [r2, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	f7fc fc95 	bl	800ad34 <lwip_htons>
 800e40a:	4603      	mov	r3, r0
 800e40c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e40e:	4b48      	ldr	r3, [pc, #288]	@ (800e530 <tcp_input+0x28c>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	885b      	ldrh	r3, [r3, #2]
 800e414:	b29b      	uxth	r3, r3
 800e416:	4a46      	ldr	r2, [pc, #280]	@ (800e530 <tcp_input+0x28c>)
 800e418:	6814      	ldr	r4, [r2, #0]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fc fc8a 	bl	800ad34 <lwip_htons>
 800e420:	4603      	mov	r3, r0
 800e422:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e424:	4b42      	ldr	r3, [pc, #264]	@ (800e530 <tcp_input+0x28c>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	4a41      	ldr	r2, [pc, #260]	@ (800e530 <tcp_input+0x28c>)
 800e42c:	6814      	ldr	r4, [r2, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fc fc95 	bl	800ad5e <lwip_htonl>
 800e434:	4603      	mov	r3, r0
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	6863      	ldr	r3, [r4, #4]
 800e43a:	4a45      	ldr	r2, [pc, #276]	@ (800e550 <tcp_input+0x2ac>)
 800e43c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e43e:	4b3c      	ldr	r3, [pc, #240]	@ (800e530 <tcp_input+0x28c>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	4a3a      	ldr	r2, [pc, #232]	@ (800e530 <tcp_input+0x28c>)
 800e446:	6814      	ldr	r4, [r2, #0]
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fc fc88 	bl	800ad5e <lwip_htonl>
 800e44e:	4603      	mov	r3, r0
 800e450:	60a3      	str	r3, [r4, #8]
 800e452:	68a3      	ldr	r3, [r4, #8]
 800e454:	4a3f      	ldr	r2, [pc, #252]	@ (800e554 <tcp_input+0x2b0>)
 800e456:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e458:	4b35      	ldr	r3, [pc, #212]	@ (800e530 <tcp_input+0x28c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	89db      	ldrh	r3, [r3, #14]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	4a33      	ldr	r2, [pc, #204]	@ (800e530 <tcp_input+0x28c>)
 800e462:	6814      	ldr	r4, [r2, #0]
 800e464:	4618      	mov	r0, r3
 800e466:	f7fc fc65 	bl	800ad34 <lwip_htons>
 800e46a:	4603      	mov	r3, r0
 800e46c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e46e:	4b30      	ldr	r3, [pc, #192]	@ (800e530 <tcp_input+0x28c>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	899b      	ldrh	r3, [r3, #12]
 800e474:	b29b      	uxth	r3, r3
 800e476:	4618      	mov	r0, r3
 800e478:	f7fc fc5c 	bl	800ad34 <lwip_htons>
 800e47c:	4603      	mov	r3, r0
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e484:	b2da      	uxtb	r2, r3
 800e486:	4b34      	ldr	r3, [pc, #208]	@ (800e558 <tcp_input+0x2b4>)
 800e488:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	891a      	ldrh	r2, [r3, #8]
 800e48e:	4b33      	ldr	r3, [pc, #204]	@ (800e55c <tcp_input+0x2b8>)
 800e490:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e492:	4b31      	ldr	r3, [pc, #196]	@ (800e558 <tcp_input+0x2b4>)
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	f003 0303 	and.w	r3, r3, #3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00c      	beq.n	800e4b8 <tcp_input+0x214>
    tcplen++;
 800e49e:	4b2f      	ldr	r3, [pc, #188]	@ (800e55c <tcp_input+0x2b8>)
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	4b2d      	ldr	r3, [pc, #180]	@ (800e55c <tcp_input+0x2b8>)
 800e4a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	891a      	ldrh	r2, [r3, #8]
 800e4ae:	4b2b      	ldr	r3, [pc, #172]	@ (800e55c <tcp_input+0x2b8>)
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	f200 82e6 	bhi.w	800ea84 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4bc:	4b28      	ldr	r3, [pc, #160]	@ (800e560 <tcp_input+0x2bc>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	61fb      	str	r3, [r7, #28]
 800e4c2:	e09d      	b.n	800e600 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d105      	bne.n	800e4d8 <tcp_input+0x234>
 800e4cc:	4b15      	ldr	r3, [pc, #84]	@ (800e524 <tcp_input+0x280>)
 800e4ce:	22fb      	movs	r2, #251	@ 0xfb
 800e4d0:	4924      	ldr	r1, [pc, #144]	@ (800e564 <tcp_input+0x2c0>)
 800e4d2:	4816      	ldr	r0, [pc, #88]	@ (800e52c <tcp_input+0x288>)
 800e4d4:	f009 feca 	bl	801826c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	7d1b      	ldrb	r3, [r3, #20]
 800e4dc:	2b0a      	cmp	r3, #10
 800e4de:	d105      	bne.n	800e4ec <tcp_input+0x248>
 800e4e0:	4b10      	ldr	r3, [pc, #64]	@ (800e524 <tcp_input+0x280>)
 800e4e2:	22fc      	movs	r2, #252	@ 0xfc
 800e4e4:	4920      	ldr	r1, [pc, #128]	@ (800e568 <tcp_input+0x2c4>)
 800e4e6:	4811      	ldr	r0, [pc, #68]	@ (800e52c <tcp_input+0x288>)
 800e4e8:	f009 fec0 	bl	801826c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d105      	bne.n	800e500 <tcp_input+0x25c>
 800e4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e524 <tcp_input+0x280>)
 800e4f6:	22fd      	movs	r2, #253	@ 0xfd
 800e4f8:	491c      	ldr	r1, [pc, #112]	@ (800e56c <tcp_input+0x2c8>)
 800e4fa:	480c      	ldr	r0, [pc, #48]	@ (800e52c <tcp_input+0x288>)
 800e4fc:	f009 feb6 	bl	801826c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	7a1b      	ldrb	r3, [r3, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d033      	beq.n	800e570 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	7a1a      	ldrb	r2, [r3, #8]
 800e50c:	4b09      	ldr	r3, [pc, #36]	@ (800e534 <tcp_input+0x290>)
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e514:	3301      	adds	r3, #1
 800e516:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e518:	429a      	cmp	r2, r3
 800e51a:	d029      	beq.n	800e570 <tcp_input+0x2cc>
      prev = pcb;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	61bb      	str	r3, [r7, #24]
      continue;
 800e520:	e06b      	b.n	800e5fa <tcp_input+0x356>
 800e522:	bf00      	nop
 800e524:	0801c748 	.word	0x0801c748
 800e528:	0801c77c 	.word	0x0801c77c
 800e52c:	0801c794 	.word	0x0801c794
 800e530:	200087d8 	.word	0x200087d8
 800e534:	20005188 	.word	0x20005188
 800e538:	200087dc 	.word	0x200087dc
 800e53c:	200087e0 	.word	0x200087e0
 800e540:	200087de 	.word	0x200087de
 800e544:	0801c7bc 	.word	0x0801c7bc
 800e548:	0801c7cc 	.word	0x0801c7cc
 800e54c:	0801c7d8 	.word	0x0801c7d8
 800e550:	200087e8 	.word	0x200087e8
 800e554:	200087ec 	.word	0x200087ec
 800e558:	200087f4 	.word	0x200087f4
 800e55c:	200087f2 	.word	0x200087f2
 800e560:	200087bc 	.word	0x200087bc
 800e564:	0801c7f8 	.word	0x0801c7f8
 800e568:	0801c820 	.word	0x0801c820
 800e56c:	0801c84c 	.word	0x0801c84c
    }

    if (pcb->remote_port == tcphdr->src &&
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	8b1a      	ldrh	r2, [r3, #24]
 800e574:	4b72      	ldr	r3, [pc, #456]	@ (800e740 <tcp_input+0x49c>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d13a      	bne.n	800e5f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	8ada      	ldrh	r2, [r3, #22]
 800e584:	4b6e      	ldr	r3, [pc, #440]	@ (800e740 <tcp_input+0x49c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	885b      	ldrh	r3, [r3, #2]
 800e58a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d132      	bne.n	800e5f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	4b6b      	ldr	r3, [pc, #428]	@ (800e744 <tcp_input+0x4a0>)
 800e596:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e598:	429a      	cmp	r2, r3
 800e59a:	d12c      	bne.n	800e5f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4b68      	ldr	r3, [pc, #416]	@ (800e744 <tcp_input+0x4a0>)
 800e5a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d126      	bne.n	800e5f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	69fa      	ldr	r2, [r7, #28]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d106      	bne.n	800e5c0 <tcp_input+0x31c>
 800e5b2:	4b65      	ldr	r3, [pc, #404]	@ (800e748 <tcp_input+0x4a4>)
 800e5b4:	f240 120d 	movw	r2, #269	@ 0x10d
 800e5b8:	4964      	ldr	r1, [pc, #400]	@ (800e74c <tcp_input+0x4a8>)
 800e5ba:	4865      	ldr	r0, [pc, #404]	@ (800e750 <tcp_input+0x4ac>)
 800e5bc:	f009 fe56 	bl	801826c <iprintf>
      if (prev != NULL) {
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00a      	beq.n	800e5dc <tcp_input+0x338>
        prev->next = pcb->next;
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	68da      	ldr	r2, [r3, #12]
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e5ce:	4b61      	ldr	r3, [pc, #388]	@ (800e754 <tcp_input+0x4b0>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e5d6:	4a5f      	ldr	r2, [pc, #380]	@ (800e754 <tcp_input+0x4b0>)
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	69fa      	ldr	r2, [r7, #28]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d111      	bne.n	800e60a <tcp_input+0x366>
 800e5e6:	4b58      	ldr	r3, [pc, #352]	@ (800e748 <tcp_input+0x4a4>)
 800e5e8:	f240 1215 	movw	r2, #277	@ 0x115
 800e5ec:	495a      	ldr	r1, [pc, #360]	@ (800e758 <tcp_input+0x4b4>)
 800e5ee:	4858      	ldr	r0, [pc, #352]	@ (800e750 <tcp_input+0x4ac>)
 800e5f0:	f009 fe3c 	bl	801826c <iprintf>
      break;
 800e5f4:	e009      	b.n	800e60a <tcp_input+0x366>
    }
    prev = pcb;
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	61fb      	str	r3, [r7, #28]
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	2b00      	cmp	r3, #0
 800e604:	f47f af5e 	bne.w	800e4c4 <tcp_input+0x220>
 800e608:	e000      	b.n	800e60c <tcp_input+0x368>
      break;
 800e60a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f040 80aa 	bne.w	800e768 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e614:	4b51      	ldr	r3, [pc, #324]	@ (800e75c <tcp_input+0x4b8>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	e03f      	b.n	800e69c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	7d1b      	ldrb	r3, [r3, #20]
 800e620:	2b0a      	cmp	r3, #10
 800e622:	d006      	beq.n	800e632 <tcp_input+0x38e>
 800e624:	4b48      	ldr	r3, [pc, #288]	@ (800e748 <tcp_input+0x4a4>)
 800e626:	f240 121f 	movw	r2, #287	@ 0x11f
 800e62a:	494d      	ldr	r1, [pc, #308]	@ (800e760 <tcp_input+0x4bc>)
 800e62c:	4848      	ldr	r0, [pc, #288]	@ (800e750 <tcp_input+0x4ac>)
 800e62e:	f009 fe1d 	bl	801826c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	7a1b      	ldrb	r3, [r3, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d009      	beq.n	800e64e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	7a1a      	ldrb	r2, [r3, #8]
 800e63e:	4b41      	ldr	r3, [pc, #260]	@ (800e744 <tcp_input+0x4a0>)
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e646:	3301      	adds	r3, #1
 800e648:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d122      	bne.n	800e694 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	8b1a      	ldrh	r2, [r3, #24]
 800e652:	4b3b      	ldr	r3, [pc, #236]	@ (800e740 <tcp_input+0x49c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	b29b      	uxth	r3, r3
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d11b      	bne.n	800e696 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	8ada      	ldrh	r2, [r3, #22]
 800e662:	4b37      	ldr	r3, [pc, #220]	@ (800e740 <tcp_input+0x49c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	885b      	ldrh	r3, [r3, #2]
 800e668:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d113      	bne.n	800e696 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	4b34      	ldr	r3, [pc, #208]	@ (800e744 <tcp_input+0x4a0>)
 800e674:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e676:	429a      	cmp	r2, r3
 800e678:	d10d      	bne.n	800e696 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	4b31      	ldr	r3, [pc, #196]	@ (800e744 <tcp_input+0x4a0>)
 800e680:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e682:	429a      	cmp	r2, r3
 800e684:	d107      	bne.n	800e696 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e686:	69f8      	ldr	r0, [r7, #28]
 800e688:	f000 fb56 	bl	800ed38 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7fd ff3d 	bl	800c50c <pbuf_free>
        return;
 800e692:	e1fd      	b.n	800ea90 <tcp_input+0x7ec>
        continue;
 800e694:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	61fb      	str	r3, [r7, #28]
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1bc      	bne.n	800e61c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6a6:	4b2f      	ldr	r3, [pc, #188]	@ (800e764 <tcp_input+0x4c0>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	617b      	str	r3, [r7, #20]
 800e6ac:	e02a      	b.n	800e704 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	7a1b      	ldrb	r3, [r3, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00c      	beq.n	800e6d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	7a1a      	ldrb	r2, [r3, #8]
 800e6ba:	4b22      	ldr	r3, [pc, #136]	@ (800e744 <tcp_input+0x4a0>)
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d002      	beq.n	800e6d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	61bb      	str	r3, [r7, #24]
        continue;
 800e6ce:	e016      	b.n	800e6fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	8ada      	ldrh	r2, [r3, #22]
 800e6d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e740 <tcp_input+0x49c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	885b      	ldrh	r3, [r3, #2]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d10c      	bne.n	800e6fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	4b17      	ldr	r3, [pc, #92]	@ (800e744 <tcp_input+0x4a0>)
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d00f      	beq.n	800e70c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00d      	beq.n	800e70e <tcp_input+0x46a>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d009      	beq.n	800e70e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	617b      	str	r3, [r7, #20]
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1d1      	bne.n	800e6ae <tcp_input+0x40a>
 800e70a:	e000      	b.n	800e70e <tcp_input+0x46a>
            break;
 800e70c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d029      	beq.n	800e768 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00a      	beq.n	800e730 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e722:	4b10      	ldr	r3, [pc, #64]	@ (800e764 <tcp_input+0x4c0>)
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e72a:	4a0e      	ldr	r2, [pc, #56]	@ (800e764 <tcp_input+0x4c0>)
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e730:	6978      	ldr	r0, [r7, #20]
 800e732:	f000 fa03 	bl	800eb3c <tcp_listen_input>
      }
      pbuf_free(p);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7fd fee8 	bl	800c50c <pbuf_free>
      return;
 800e73c:	e1a8      	b.n	800ea90 <tcp_input+0x7ec>
 800e73e:	bf00      	nop
 800e740:	200087d8 	.word	0x200087d8
 800e744:	20005188 	.word	0x20005188
 800e748:	0801c748 	.word	0x0801c748
 800e74c:	0801c874 	.word	0x0801c874
 800e750:	0801c794 	.word	0x0801c794
 800e754:	200087bc 	.word	0x200087bc
 800e758:	0801c8a0 	.word	0x0801c8a0
 800e75c:	200087c0 	.word	0x200087c0
 800e760:	0801c8cc 	.word	0x0801c8cc
 800e764:	200087b8 	.word	0x200087b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 8158 	beq.w	800ea20 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e770:	4b95      	ldr	r3, [pc, #596]	@ (800e9c8 <tcp_input+0x724>)
 800e772:	2200      	movs	r2, #0
 800e774:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	891a      	ldrh	r2, [r3, #8]
 800e77a:	4b93      	ldr	r3, [pc, #588]	@ (800e9c8 <tcp_input+0x724>)
 800e77c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e77e:	4a92      	ldr	r2, [pc, #584]	@ (800e9c8 <tcp_input+0x724>)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e784:	4b91      	ldr	r3, [pc, #580]	@ (800e9cc <tcp_input+0x728>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a8f      	ldr	r2, [pc, #572]	@ (800e9c8 <tcp_input+0x724>)
 800e78a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e78c:	4b90      	ldr	r3, [pc, #576]	@ (800e9d0 <tcp_input+0x72c>)
 800e78e:	2200      	movs	r2, #0
 800e790:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e792:	4b90      	ldr	r3, [pc, #576]	@ (800e9d4 <tcp_input+0x730>)
 800e794:	2200      	movs	r2, #0
 800e796:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e798:	4b8f      	ldr	r3, [pc, #572]	@ (800e9d8 <tcp_input+0x734>)
 800e79a:	2200      	movs	r2, #0
 800e79c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e79e:	4b8f      	ldr	r3, [pc, #572]	@ (800e9dc <tcp_input+0x738>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	f003 0308 	and.w	r3, r3, #8
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d006      	beq.n	800e7b8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	7b5b      	ldrb	r3, [r3, #13]
 800e7ae:	f043 0301 	orr.w	r3, r3, #1
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d017      	beq.n	800e7f0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7c0:	69f8      	ldr	r0, [r7, #28]
 800e7c2:	f7ff f929 	bl	800da18 <tcp_process_refused_data>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f113 0f0d 	cmn.w	r3, #13
 800e7cc:	d007      	beq.n	800e7de <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00c      	beq.n	800e7f0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7d6:	4b82      	ldr	r3, [pc, #520]	@ (800e9e0 <tcp_input+0x73c>)
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d008      	beq.n	800e7f0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f040 80e3 	bne.w	800e9ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e7e8:	69f8      	ldr	r0, [r7, #28]
 800e7ea:	f003 f9a7 	bl	8011b3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e7ee:	e0de      	b.n	800e9ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e7f0:	4a7c      	ldr	r2, [pc, #496]	@ (800e9e4 <tcp_input+0x740>)
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e7f6:	69f8      	ldr	r0, [r7, #28]
 800e7f8:	f000 fb18 	bl	800ee2c <tcp_process>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e800:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e804:	f113 0f0d 	cmn.w	r3, #13
 800e808:	f000 80d3 	beq.w	800e9b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e80c:	4b71      	ldr	r3, [pc, #452]	@ (800e9d4 <tcp_input+0x730>)
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 0308 	and.w	r3, r3, #8
 800e814:	2b00      	cmp	r3, #0
 800e816:	d015      	beq.n	800e844 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d008      	beq.n	800e834 <tcp_input+0x590>
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e828:	69fa      	ldr	r2, [r7, #28]
 800e82a:	6912      	ldr	r2, [r2, #16]
 800e82c:	f06f 010d 	mvn.w	r1, #13
 800e830:	4610      	mov	r0, r2
 800e832:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e834:	69f9      	ldr	r1, [r7, #28]
 800e836:	486c      	ldr	r0, [pc, #432]	@ (800e9e8 <tcp_input+0x744>)
 800e838:	f7ff fbbc 	bl	800dfb4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e83c:	69f8      	ldr	r0, [r7, #28]
 800e83e:	f7fe f9a7 	bl	800cb90 <tcp_free>
 800e842:	e0da      	b.n	800e9fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e848:	4b63      	ldr	r3, [pc, #396]	@ (800e9d8 <tcp_input+0x734>)
 800e84a:	881b      	ldrh	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d01d      	beq.n	800e88c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e850:	4b61      	ldr	r3, [pc, #388]	@ (800e9d8 <tcp_input+0x734>)
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00a      	beq.n	800e876 <tcp_input+0x5d2>
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e866:	69fa      	ldr	r2, [r7, #28]
 800e868:	6910      	ldr	r0, [r2, #16]
 800e86a:	89fa      	ldrh	r2, [r7, #14]
 800e86c:	69f9      	ldr	r1, [r7, #28]
 800e86e:	4798      	blx	r3
 800e870:	4603      	mov	r3, r0
 800e872:	74fb      	strb	r3, [r7, #19]
 800e874:	e001      	b.n	800e87a <tcp_input+0x5d6>
 800e876:	2300      	movs	r3, #0
 800e878:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e87a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e87e:	f113 0f0d 	cmn.w	r3, #13
 800e882:	f000 8098 	beq.w	800e9b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e886:	4b54      	ldr	r3, [pc, #336]	@ (800e9d8 <tcp_input+0x734>)
 800e888:	2200      	movs	r2, #0
 800e88a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e88c:	69f8      	ldr	r0, [r7, #28]
 800e88e:	f000 f915 	bl	800eabc <tcp_input_delayed_close>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	f040 8090 	bne.w	800e9ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e89a:	4b4d      	ldr	r3, [pc, #308]	@ (800e9d0 <tcp_input+0x72c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d041      	beq.n	800e926 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d006      	beq.n	800e8b8 <tcp_input+0x614>
 800e8aa:	4b50      	ldr	r3, [pc, #320]	@ (800e9ec <tcp_input+0x748>)
 800e8ac:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e8b0:	494f      	ldr	r1, [pc, #316]	@ (800e9f0 <tcp_input+0x74c>)
 800e8b2:	4850      	ldr	r0, [pc, #320]	@ (800e9f4 <tcp_input+0x750>)
 800e8b4:	f009 fcda 	bl	801826c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	8b5b      	ldrh	r3, [r3, #26]
 800e8bc:	f003 0310 	and.w	r3, r3, #16
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d008      	beq.n	800e8d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e8c4:	4b42      	ldr	r3, [pc, #264]	@ (800e9d0 <tcp_input+0x72c>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd fe1f 	bl	800c50c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e8ce:	69f8      	ldr	r0, [r7, #28]
 800e8d0:	f7fe fc46 	bl	800d160 <tcp_abort>
            goto aborted;
 800e8d4:	e091      	b.n	800e9fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00c      	beq.n	800e8fa <tcp_input+0x656>
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	6918      	ldr	r0, [r3, #16]
 800e8ea:	4b39      	ldr	r3, [pc, #228]	@ (800e9d0 <tcp_input+0x72c>)
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	69f9      	ldr	r1, [r7, #28]
 800e8f2:	47a0      	blx	r4
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	74fb      	strb	r3, [r7, #19]
 800e8f8:	e008      	b.n	800e90c <tcp_input+0x668>
 800e8fa:	4b35      	ldr	r3, [pc, #212]	@ (800e9d0 <tcp_input+0x72c>)
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	2300      	movs	r3, #0
 800e900:	69f9      	ldr	r1, [r7, #28]
 800e902:	2000      	movs	r0, #0
 800e904:	f7ff f95e 	bl	800dbc4 <tcp_recv_null>
 800e908:	4603      	mov	r3, r0
 800e90a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e90c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e910:	f113 0f0d 	cmn.w	r3, #13
 800e914:	d053      	beq.n	800e9be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e916:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d003      	beq.n	800e926 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e91e:	4b2c      	ldr	r3, [pc, #176]	@ (800e9d0 <tcp_input+0x72c>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e926:	4b2b      	ldr	r3, [pc, #172]	@ (800e9d4 <tcp_input+0x730>)
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	f003 0320 	and.w	r3, r3, #32
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d030      	beq.n	800e994 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e936:	2b00      	cmp	r3, #0
 800e938:	d009      	beq.n	800e94e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e93e:	7b5a      	ldrb	r2, [r3, #13]
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e944:	f042 0220 	orr.w	r2, r2, #32
 800e948:	b2d2      	uxtb	r2, r2
 800e94a:	735a      	strb	r2, [r3, #13]
 800e94c:	e022      	b.n	800e994 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e952:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e956:	d005      	beq.n	800e964 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e95c:	3301      	adds	r3, #1
 800e95e:	b29a      	uxth	r2, r3
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00b      	beq.n	800e986 <tcp_input+0x6e2>
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	6918      	ldr	r0, [r3, #16]
 800e978:	2300      	movs	r3, #0
 800e97a:	2200      	movs	r2, #0
 800e97c:	69f9      	ldr	r1, [r7, #28]
 800e97e:	47a0      	blx	r4
 800e980:	4603      	mov	r3, r0
 800e982:	74fb      	strb	r3, [r7, #19]
 800e984:	e001      	b.n	800e98a <tcp_input+0x6e6>
 800e986:	2300      	movs	r3, #0
 800e988:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e98a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e98e:	f113 0f0d 	cmn.w	r3, #13
 800e992:	d016      	beq.n	800e9c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e994:	4b13      	ldr	r3, [pc, #76]	@ (800e9e4 <tcp_input+0x740>)
 800e996:	2200      	movs	r2, #0
 800e998:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e99a:	69f8      	ldr	r0, [r7, #28]
 800e99c:	f000 f88e 	bl	800eabc <tcp_input_delayed_close>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d128      	bne.n	800e9f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e9a6:	69f8      	ldr	r0, [r7, #28]
 800e9a8:	f002 fac2 	bl	8010f30 <tcp_output>
 800e9ac:	e025      	b.n	800e9fa <tcp_input+0x756>
        goto aborted;
 800e9ae:	bf00      	nop
 800e9b0:	e023      	b.n	800e9fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e9b2:	bf00      	nop
 800e9b4:	e021      	b.n	800e9fa <tcp_input+0x756>
              goto aborted;
 800e9b6:	bf00      	nop
 800e9b8:	e01f      	b.n	800e9fa <tcp_input+0x756>
          goto aborted;
 800e9ba:	bf00      	nop
 800e9bc:	e01d      	b.n	800e9fa <tcp_input+0x756>
            goto aborted;
 800e9be:	bf00      	nop
 800e9c0:	e01b      	b.n	800e9fa <tcp_input+0x756>
              goto aborted;
 800e9c2:	bf00      	nop
 800e9c4:	e019      	b.n	800e9fa <tcp_input+0x756>
 800e9c6:	bf00      	nop
 800e9c8:	200087c8 	.word	0x200087c8
 800e9cc:	200087d8 	.word	0x200087d8
 800e9d0:	200087f8 	.word	0x200087f8
 800e9d4:	200087f5 	.word	0x200087f5
 800e9d8:	200087f0 	.word	0x200087f0
 800e9dc:	200087f4 	.word	0x200087f4
 800e9e0:	200087f2 	.word	0x200087f2
 800e9e4:	200087fc 	.word	0x200087fc
 800e9e8:	200087bc 	.word	0x200087bc
 800e9ec:	0801c748 	.word	0x0801c748
 800e9f0:	0801c8fc 	.word	0x0801c8fc
 800e9f4:	0801c794 	.word	0x0801c794
          goto aborted;
 800e9f8:	bf00      	nop
    tcp_input_pcb = NULL;
 800e9fa:	4b27      	ldr	r3, [pc, #156]	@ (800ea98 <tcp_input+0x7f4>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ea00:	4b26      	ldr	r3, [pc, #152]	@ (800ea9c <tcp_input+0x7f8>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ea06:	4b26      	ldr	r3, [pc, #152]	@ (800eaa0 <tcp_input+0x7fc>)
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d03f      	beq.n	800ea8e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ea0e:	4b24      	ldr	r3, [pc, #144]	@ (800eaa0 <tcp_input+0x7fc>)
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fd fd7a 	bl	800c50c <pbuf_free>
      inseg.p = NULL;
 800ea18:	4b21      	ldr	r3, [pc, #132]	@ (800eaa0 <tcp_input+0x7fc>)
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ea1e:	e036      	b.n	800ea8e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ea20:	4b20      	ldr	r3, [pc, #128]	@ (800eaa4 <tcp_input+0x800>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	899b      	ldrh	r3, [r3, #12]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fc f983 	bl	800ad34 <lwip_htons>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	f003 0304 	and.w	r3, r3, #4
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d118      	bne.n	800ea6c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea3a:	4b1b      	ldr	r3, [pc, #108]	@ (800eaa8 <tcp_input+0x804>)
 800ea3c:	6819      	ldr	r1, [r3, #0]
 800ea3e:	4b1b      	ldr	r3, [pc, #108]	@ (800eaac <tcp_input+0x808>)
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <tcp_input+0x80c>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea4a:	4b16      	ldr	r3, [pc, #88]	@ (800eaa4 <tcp_input+0x800>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea4e:	885b      	ldrh	r3, [r3, #2]
 800ea50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea52:	4a14      	ldr	r2, [pc, #80]	@ (800eaa4 <tcp_input+0x800>)
 800ea54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea56:	8812      	ldrh	r2, [r2, #0]
 800ea58:	b292      	uxth	r2, r2
 800ea5a:	9202      	str	r2, [sp, #8]
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	4b15      	ldr	r3, [pc, #84]	@ (800eab4 <tcp_input+0x810>)
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	4b15      	ldr	r3, [pc, #84]	@ (800eab8 <tcp_input+0x814>)
 800ea64:	4602      	mov	r2, r0
 800ea66:	2000      	movs	r0, #0
 800ea68:	f003 f816 	bl	8011a98 <tcp_rst>
    pbuf_free(p);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7fd fd4d 	bl	800c50c <pbuf_free>
  return;
 800ea72:	e00c      	b.n	800ea8e <tcp_input+0x7ea>
    goto dropped;
 800ea74:	bf00      	nop
 800ea76:	e006      	b.n	800ea86 <tcp_input+0x7e2>
    goto dropped;
 800ea78:	bf00      	nop
 800ea7a:	e004      	b.n	800ea86 <tcp_input+0x7e2>
    goto dropped;
 800ea7c:	bf00      	nop
 800ea7e:	e002      	b.n	800ea86 <tcp_input+0x7e2>
      goto dropped;
 800ea80:	bf00      	nop
 800ea82:	e000      	b.n	800ea86 <tcp_input+0x7e2>
      goto dropped;
 800ea84:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7fd fd40 	bl	800c50c <pbuf_free>
 800ea8c:	e000      	b.n	800ea90 <tcp_input+0x7ec>
  return;
 800ea8e:	bf00      	nop
}
 800ea90:	3724      	adds	r7, #36	@ 0x24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd90      	pop	{r4, r7, pc}
 800ea96:	bf00      	nop
 800ea98:	200087fc 	.word	0x200087fc
 800ea9c:	200087f8 	.word	0x200087f8
 800eaa0:	200087c8 	.word	0x200087c8
 800eaa4:	200087d8 	.word	0x200087d8
 800eaa8:	200087ec 	.word	0x200087ec
 800eaac:	200087f2 	.word	0x200087f2
 800eab0:	200087e8 	.word	0x200087e8
 800eab4:	20005198 	.word	0x20005198
 800eab8:	2000519c 	.word	0x2000519c

0800eabc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <tcp_input_delayed_close+0x1c>
 800eaca:	4b17      	ldr	r3, [pc, #92]	@ (800eb28 <tcp_input_delayed_close+0x6c>)
 800eacc:	f240 225a 	movw	r2, #602	@ 0x25a
 800ead0:	4916      	ldr	r1, [pc, #88]	@ (800eb2c <tcp_input_delayed_close+0x70>)
 800ead2:	4817      	ldr	r0, [pc, #92]	@ (800eb30 <tcp_input_delayed_close+0x74>)
 800ead4:	f009 fbca 	bl	801826c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ead8:	4b16      	ldr	r3, [pc, #88]	@ (800eb34 <tcp_input_delayed_close+0x78>)
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	f003 0310 	and.w	r3, r3, #16
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d01c      	beq.n	800eb1e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8b5b      	ldrh	r3, [r3, #26]
 800eae8:	f003 0310 	and.w	r3, r3, #16
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10d      	bne.n	800eb0c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d008      	beq.n	800eb0c <tcp_input_delayed_close+0x50>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	6912      	ldr	r2, [r2, #16]
 800eb04:	f06f 010e 	mvn.w	r1, #14
 800eb08:	4610      	mov	r0, r2
 800eb0a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb0c:	6879      	ldr	r1, [r7, #4]
 800eb0e:	480a      	ldr	r0, [pc, #40]	@ (800eb38 <tcp_input_delayed_close+0x7c>)
 800eb10:	f7ff fa50 	bl	800dfb4 <tcp_pcb_remove>
    tcp_free(pcb);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7fe f83b 	bl	800cb90 <tcp_free>
    return 1;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e000      	b.n	800eb20 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	0801c748 	.word	0x0801c748
 800eb2c:	0801c918 	.word	0x0801c918
 800eb30:	0801c794 	.word	0x0801c794
 800eb34:	200087f5 	.word	0x200087f5
 800eb38:	200087bc 	.word	0x200087bc

0800eb3c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eb3c:	b590      	push	{r4, r7, lr}
 800eb3e:	b08b      	sub	sp, #44	@ 0x2c
 800eb40:	af04      	add	r7, sp, #16
 800eb42:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eb44:	4b6f      	ldr	r3, [pc, #444]	@ (800ed04 <tcp_listen_input+0x1c8>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f040 80d2 	bne.w	800ecf6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <tcp_listen_input+0x2a>
 800eb58:	4b6b      	ldr	r3, [pc, #428]	@ (800ed08 <tcp_listen_input+0x1cc>)
 800eb5a:	f240 2281 	movw	r2, #641	@ 0x281
 800eb5e:	496b      	ldr	r1, [pc, #428]	@ (800ed0c <tcp_listen_input+0x1d0>)
 800eb60:	486b      	ldr	r0, [pc, #428]	@ (800ed10 <tcp_listen_input+0x1d4>)
 800eb62:	f009 fb83 	bl	801826c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eb66:	4b67      	ldr	r3, [pc, #412]	@ (800ed04 <tcp_listen_input+0x1c8>)
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	f003 0310 	and.w	r3, r3, #16
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d019      	beq.n	800eba6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb72:	4b68      	ldr	r3, [pc, #416]	@ (800ed14 <tcp_listen_input+0x1d8>)
 800eb74:	6819      	ldr	r1, [r3, #0]
 800eb76:	4b68      	ldr	r3, [pc, #416]	@ (800ed18 <tcp_listen_input+0x1dc>)
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	4b67      	ldr	r3, [pc, #412]	@ (800ed1c <tcp_listen_input+0x1e0>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb82:	4b67      	ldr	r3, [pc, #412]	@ (800ed20 <tcp_listen_input+0x1e4>)
 800eb84:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb86:	885b      	ldrh	r3, [r3, #2]
 800eb88:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb8a:	4a65      	ldr	r2, [pc, #404]	@ (800ed20 <tcp_listen_input+0x1e4>)
 800eb8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb8e:	8812      	ldrh	r2, [r2, #0]
 800eb90:	b292      	uxth	r2, r2
 800eb92:	9202      	str	r2, [sp, #8]
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	4b63      	ldr	r3, [pc, #396]	@ (800ed24 <tcp_listen_input+0x1e8>)
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	4b63      	ldr	r3, [pc, #396]	@ (800ed28 <tcp_listen_input+0x1ec>)
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f002 ff7a 	bl	8011a98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eba4:	e0a9      	b.n	800ecfa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800eba6:	4b57      	ldr	r3, [pc, #348]	@ (800ed04 <tcp_listen_input+0x1c8>)
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	f003 0302 	and.w	r3, r3, #2
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f000 80a3 	beq.w	800ecfa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7d5b      	ldrb	r3, [r3, #21]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7ff f927 	bl	800de0c <tcp_alloc>
 800ebbe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d111      	bne.n	800ebea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00a      	beq.n	800ebe4 <tcp_listen_input+0xa8>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	6910      	ldr	r0, [r2, #16]
 800ebd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebda:	2100      	movs	r1, #0
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73bb      	strb	r3, [r7, #14]
      return;
 800ebe2:	e08b      	b.n	800ecfc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebe4:	23f0      	movs	r3, #240	@ 0xf0
 800ebe6:	73bb      	strb	r3, [r7, #14]
      return;
 800ebe8:	e088      	b.n	800ecfc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ebea:	4b50      	ldr	r3, [pc, #320]	@ (800ed2c <tcp_listen_input+0x1f0>)
 800ebec:	695a      	ldr	r2, [r3, #20]
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ebf2:	4b4e      	ldr	r3, [pc, #312]	@ (800ed2c <tcp_listen_input+0x1f0>)
 800ebf4:	691a      	ldr	r2, [r3, #16]
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	8ada      	ldrh	r2, [r3, #22]
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ec02:	4b47      	ldr	r3, [pc, #284]	@ (800ed20 <tcp_listen_input+0x1e4>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	b29a      	uxth	r2, r3
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	2203      	movs	r2, #3
 800ec12:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ec14:	4b41      	ldr	r3, [pc, #260]	@ (800ed1c <tcp_listen_input+0x1e0>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ec26:	6978      	ldr	r0, [r7, #20]
 800ec28:	f7ff fa58 	bl	800e0dc <tcp_next_iss>
 800ec2c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	693a      	ldr	r2, [r7, #16]
 800ec32:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	693a      	ldr	r2, [r7, #16]
 800ec38:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	693a      	ldr	r2, [r7, #16]
 800ec3e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ec46:	4b35      	ldr	r3, [pc, #212]	@ (800ed1c <tcp_listen_input+0x1e0>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	1e5a      	subs	r2, r3, #1
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	691a      	ldr	r2, [r3, #16]
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7a5b      	ldrb	r3, [r3, #9]
 800ec62:	f003 030c 	and.w	r3, r3, #12
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7a1a      	ldrb	r2, [r3, #8]
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ec74:	4b2e      	ldr	r3, [pc, #184]	@ (800ed30 <tcp_listen_input+0x1f4>)
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	60da      	str	r2, [r3, #12]
 800ec7c:	4a2c      	ldr	r2, [pc, #176]	@ (800ed30 <tcp_listen_input+0x1f4>)
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	6013      	str	r3, [r2, #0]
 800ec82:	f003 f8cb 	bl	8011e1c <tcp_timer_needed>
 800ec86:	4b2b      	ldr	r3, [pc, #172]	@ (800ed34 <tcp_listen_input+0x1f8>)
 800ec88:	2201      	movs	r2, #1
 800ec8a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ec8c:	6978      	ldr	r0, [r7, #20]
 800ec8e:	f001 fd8b 	bl	80107a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ec92:	4b23      	ldr	r3, [pc, #140]	@ (800ed20 <tcp_listen_input+0x1e4>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	89db      	ldrh	r3, [r3, #14]
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f005 fc15 	bl	80144e4 <ip4_route>
 800ecba:	4601      	mov	r1, r0
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f7ff fa30 	bl	800e128 <tcp_eff_send_mss_netif>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ecd0:	2112      	movs	r1, #18
 800ecd2:	6978      	ldr	r0, [r7, #20]
 800ecd4:	f002 f83e 	bl	8010d54 <tcp_enqueue_flags>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ecdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d004      	beq.n	800ecee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ece4:	2100      	movs	r1, #0
 800ece6:	6978      	ldr	r0, [r7, #20]
 800ece8:	f7fe f97c 	bl	800cfe4 <tcp_abandon>
      return;
 800ecec:	e006      	b.n	800ecfc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ecee:	6978      	ldr	r0, [r7, #20]
 800ecf0:	f002 f91e 	bl	8010f30 <tcp_output>
  return;
 800ecf4:	e001      	b.n	800ecfa <tcp_listen_input+0x1be>
    return;
 800ecf6:	bf00      	nop
 800ecf8:	e000      	b.n	800ecfc <tcp_listen_input+0x1c0>
  return;
 800ecfa:	bf00      	nop
}
 800ecfc:	371c      	adds	r7, #28
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd90      	pop	{r4, r7, pc}
 800ed02:	bf00      	nop
 800ed04:	200087f4 	.word	0x200087f4
 800ed08:	0801c748 	.word	0x0801c748
 800ed0c:	0801c940 	.word	0x0801c940
 800ed10:	0801c794 	.word	0x0801c794
 800ed14:	200087ec 	.word	0x200087ec
 800ed18:	200087f2 	.word	0x200087f2
 800ed1c:	200087e8 	.word	0x200087e8
 800ed20:	200087d8 	.word	0x200087d8
 800ed24:	20005198 	.word	0x20005198
 800ed28:	2000519c 	.word	0x2000519c
 800ed2c:	20005188 	.word	0x20005188
 800ed30:	200087bc 	.word	0x200087bc
 800ed34:	200087c4 	.word	0x200087c4

0800ed38 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af04      	add	r7, sp, #16
 800ed3e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ed40:	4b2f      	ldr	r3, [pc, #188]	@ (800ee00 <tcp_timewait_input+0xc8>)
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d153      	bne.n	800edf4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d106      	bne.n	800ed60 <tcp_timewait_input+0x28>
 800ed52:	4b2c      	ldr	r3, [pc, #176]	@ (800ee04 <tcp_timewait_input+0xcc>)
 800ed54:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ed58:	492b      	ldr	r1, [pc, #172]	@ (800ee08 <tcp_timewait_input+0xd0>)
 800ed5a:	482c      	ldr	r0, [pc, #176]	@ (800ee0c <tcp_timewait_input+0xd4>)
 800ed5c:	f009 fa86 	bl	801826c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed60:	4b27      	ldr	r3, [pc, #156]	@ (800ee00 <tcp_timewait_input+0xc8>)
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	f003 0302 	and.w	r3, r3, #2
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d02a      	beq.n	800edc2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed6c:	4b28      	ldr	r3, [pc, #160]	@ (800ee10 <tcp_timewait_input+0xd8>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	db2d      	blt.n	800edd6 <tcp_timewait_input+0x9e>
 800ed7a:	4b25      	ldr	r3, [pc, #148]	@ (800ee10 <tcp_timewait_input+0xd8>)
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed82:	6879      	ldr	r1, [r7, #4]
 800ed84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ed86:	440b      	add	r3, r1
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	dc23      	bgt.n	800edd6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed8e:	4b21      	ldr	r3, [pc, #132]	@ (800ee14 <tcp_timewait_input+0xdc>)
 800ed90:	6819      	ldr	r1, [r3, #0]
 800ed92:	4b21      	ldr	r3, [pc, #132]	@ (800ee18 <tcp_timewait_input+0xe0>)
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	4b1d      	ldr	r3, [pc, #116]	@ (800ee10 <tcp_timewait_input+0xd8>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed9e:	4b1f      	ldr	r3, [pc, #124]	@ (800ee1c <tcp_timewait_input+0xe4>)
 800eda0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda2:	885b      	ldrh	r3, [r3, #2]
 800eda4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eda6:	4a1d      	ldr	r2, [pc, #116]	@ (800ee1c <tcp_timewait_input+0xe4>)
 800eda8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edaa:	8812      	ldrh	r2, [r2, #0]
 800edac:	b292      	uxth	r2, r2
 800edae:	9202      	str	r2, [sp, #8]
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ee20 <tcp_timewait_input+0xe8>)
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	4b1b      	ldr	r3, [pc, #108]	@ (800ee24 <tcp_timewait_input+0xec>)
 800edb8:	4602      	mov	r2, r0
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f002 fe6c 	bl	8011a98 <tcp_rst>
      return;
 800edc0:	e01b      	b.n	800edfa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800edc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ee00 <tcp_timewait_input+0xc8>)
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	f003 0301 	and.w	r3, r3, #1
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800edce:	4b16      	ldr	r3, [pc, #88]	@ (800ee28 <tcp_timewait_input+0xf0>)
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800edd6:	4b10      	ldr	r3, [pc, #64]	@ (800ee18 <tcp_timewait_input+0xe0>)
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00c      	beq.n	800edf8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	8b5b      	ldrh	r3, [r3, #26]
 800ede2:	f043 0302 	orr.w	r3, r3, #2
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f002 f89f 	bl	8010f30 <tcp_output>
  }
  return;
 800edf2:	e001      	b.n	800edf8 <tcp_timewait_input+0xc0>
    return;
 800edf4:	bf00      	nop
 800edf6:	e000      	b.n	800edfa <tcp_timewait_input+0xc2>
  return;
 800edf8:	bf00      	nop
}
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	200087f4 	.word	0x200087f4
 800ee04:	0801c748 	.word	0x0801c748
 800ee08:	0801c960 	.word	0x0801c960
 800ee0c:	0801c794 	.word	0x0801c794
 800ee10:	200087e8 	.word	0x200087e8
 800ee14:	200087ec 	.word	0x200087ec
 800ee18:	200087f2 	.word	0x200087f2
 800ee1c:	200087d8 	.word	0x200087d8
 800ee20:	20005198 	.word	0x20005198
 800ee24:	2000519c 	.word	0x2000519c
 800ee28:	200087b0 	.word	0x200087b0

0800ee2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ee2c:	b590      	push	{r4, r7, lr}
 800ee2e:	b08d      	sub	sp, #52	@ 0x34
 800ee30:	af04      	add	r7, sp, #16
 800ee32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d106      	bne.n	800ee50 <tcp_process+0x24>
 800ee42:	4b9d      	ldr	r3, [pc, #628]	@ (800f0b8 <tcp_process+0x28c>)
 800ee44:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ee48:	499c      	ldr	r1, [pc, #624]	@ (800f0bc <tcp_process+0x290>)
 800ee4a:	489d      	ldr	r0, [pc, #628]	@ (800f0c0 <tcp_process+0x294>)
 800ee4c:	f009 fa0e 	bl	801826c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ee50:	4b9c      	ldr	r3, [pc, #624]	@ (800f0c4 <tcp_process+0x298>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 0304 	and.w	r3, r3, #4
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d04e      	beq.n	800eefa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	7d1b      	ldrb	r3, [r3, #20]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d108      	bne.n	800ee76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee68:	4b97      	ldr	r3, [pc, #604]	@ (800f0c8 <tcp_process+0x29c>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d123      	bne.n	800eeb8 <tcp_process+0x8c>
        acceptable = 1;
 800ee70:	2301      	movs	r3, #1
 800ee72:	76fb      	strb	r3, [r7, #27]
 800ee74:	e020      	b.n	800eeb8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee7a:	4b94      	ldr	r3, [pc, #592]	@ (800f0cc <tcp_process+0x2a0>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d102      	bne.n	800ee88 <tcp_process+0x5c>
        acceptable = 1;
 800ee82:	2301      	movs	r3, #1
 800ee84:	76fb      	strb	r3, [r7, #27]
 800ee86:	e017      	b.n	800eeb8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee88:	4b90      	ldr	r3, [pc, #576]	@ (800f0cc <tcp_process+0x2a0>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	db10      	blt.n	800eeb8 <tcp_process+0x8c>
 800ee96:	4b8d      	ldr	r3, [pc, #564]	@ (800f0cc <tcp_process+0x2a0>)
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9e:	6879      	ldr	r1, [r7, #4]
 800eea0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eea2:	440b      	add	r3, r1
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dc06      	bgt.n	800eeb8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8b5b      	ldrh	r3, [r3, #26]
 800eeae:	f043 0302 	orr.w	r3, r3, #2
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eeb8:	7efb      	ldrb	r3, [r7, #27]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d01b      	beq.n	800eef6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	7d1b      	ldrb	r3, [r3, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <tcp_process+0xa8>
 800eec6:	4b7c      	ldr	r3, [pc, #496]	@ (800f0b8 <tcp_process+0x28c>)
 800eec8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800eecc:	4980      	ldr	r1, [pc, #512]	@ (800f0d0 <tcp_process+0x2a4>)
 800eece:	487c      	ldr	r0, [pc, #496]	@ (800f0c0 <tcp_process+0x294>)
 800eed0:	f009 f9cc 	bl	801826c <iprintf>
      recv_flags |= TF_RESET;
 800eed4:	4b7f      	ldr	r3, [pc, #508]	@ (800f0d4 <tcp_process+0x2a8>)
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	f043 0308 	orr.w	r3, r3, #8
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	4b7d      	ldr	r3, [pc, #500]	@ (800f0d4 <tcp_process+0x2a8>)
 800eee0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	8b5b      	ldrh	r3, [r3, #26]
 800eee6:	f023 0301 	bic.w	r3, r3, #1
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eef0:	f06f 030d 	mvn.w	r3, #13
 800eef4:	e37a      	b.n	800f5ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	e378      	b.n	800f5ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eefa:	4b72      	ldr	r3, [pc, #456]	@ (800f0c4 <tcp_process+0x298>)
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	f003 0302 	and.w	r3, r3, #2
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d010      	beq.n	800ef28 <tcp_process+0xfc>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	7d1b      	ldrb	r3, [r3, #20]
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d00c      	beq.n	800ef28 <tcp_process+0xfc>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7d1b      	ldrb	r3, [r3, #20]
 800ef12:	2b03      	cmp	r3, #3
 800ef14:	d008      	beq.n	800ef28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	8b5b      	ldrh	r3, [r3, #26]
 800ef1a:	f043 0302 	orr.w	r3, r3, #2
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	e361      	b.n	800f5ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	8b5b      	ldrh	r3, [r3, #26]
 800ef2c:	f003 0310 	and.w	r3, r3, #16
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d103      	bne.n	800ef3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ef34:	4b68      	ldr	r3, [pc, #416]	@ (800f0d8 <tcp_process+0x2ac>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f001 fc2b 	bl	80107a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	7d1b      	ldrb	r3, [r3, #20]
 800ef56:	3b02      	subs	r3, #2
 800ef58:	2b07      	cmp	r3, #7
 800ef5a:	f200 8337 	bhi.w	800f5cc <tcp_process+0x7a0>
 800ef5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef64 <tcp_process+0x138>)
 800ef60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef64:	0800ef85 	.word	0x0800ef85
 800ef68:	0800f1b5 	.word	0x0800f1b5
 800ef6c:	0800f32d 	.word	0x0800f32d
 800ef70:	0800f357 	.word	0x0800f357
 800ef74:	0800f47b 	.word	0x0800f47b
 800ef78:	0800f32d 	.word	0x0800f32d
 800ef7c:	0800f507 	.word	0x0800f507
 800ef80:	0800f597 	.word	0x0800f597
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef84:	4b4f      	ldr	r3, [pc, #316]	@ (800f0c4 <tcp_process+0x298>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	f003 0310 	and.w	r3, r3, #16
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 80e4 	beq.w	800f15a <tcp_process+0x32e>
 800ef92:	4b4c      	ldr	r3, [pc, #304]	@ (800f0c4 <tcp_process+0x298>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 0302 	and.w	r3, r3, #2
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 80dd 	beq.w	800f15a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efa4:	1c5a      	adds	r2, r3, #1
 800efa6:	4b48      	ldr	r3, [pc, #288]	@ (800f0c8 <tcp_process+0x29c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	f040 80d5 	bne.w	800f15a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800efb0:	4b46      	ldr	r3, [pc, #280]	@ (800f0cc <tcp_process+0x2a0>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	1c5a      	adds	r2, r3, #1
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800efc2:	4b41      	ldr	r3, [pc, #260]	@ (800f0c8 <tcp_process+0x29c>)
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800efca:	4b44      	ldr	r3, [pc, #272]	@ (800f0dc <tcp_process+0x2b0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	89db      	ldrh	r3, [r3, #14]
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800efe4:	4b39      	ldr	r3, [pc, #228]	@ (800f0cc <tcp_process+0x2a0>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	1e5a      	subs	r2, r3, #1
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2204      	movs	r2, #4
 800eff2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	3304      	adds	r3, #4
 800effc:	4618      	mov	r0, r3
 800effe:	f005 fa71 	bl	80144e4 <ip4_route>
 800f002:	4601      	mov	r1, r0
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	3304      	adds	r3, #4
 800f008:	461a      	mov	r2, r3
 800f00a:	4620      	mov	r0, r4
 800f00c:	f7ff f88c 	bl	800e128 <tcp_eff_send_mss_netif>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f01c:	009a      	lsls	r2, r3, #2
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f022:	005b      	lsls	r3, r3, #1
 800f024:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f028:	428b      	cmp	r3, r1
 800f02a:	bf38      	it	cc
 800f02c:	460b      	movcc	r3, r1
 800f02e:	429a      	cmp	r2, r3
 800f030:	d204      	bcs.n	800f03c <tcp_process+0x210>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	b29b      	uxth	r3, r3
 800f03a:	e00d      	b.n	800f058 <tcp_process+0x22c>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f040:	005b      	lsls	r3, r3, #1
 800f042:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f046:	4293      	cmp	r3, r2
 800f048:	d904      	bls.n	800f054 <tcp_process+0x228>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f04e:	005b      	lsls	r3, r3, #1
 800f050:	b29b      	uxth	r3, r3
 800f052:	e001      	b.n	800f058 <tcp_process+0x22c>
 800f054:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f064:	2b00      	cmp	r3, #0
 800f066:	d106      	bne.n	800f076 <tcp_process+0x24a>
 800f068:	4b13      	ldr	r3, [pc, #76]	@ (800f0b8 <tcp_process+0x28c>)
 800f06a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f06e:	491c      	ldr	r1, [pc, #112]	@ (800f0e0 <tcp_process+0x2b4>)
 800f070:	4813      	ldr	r0, [pc, #76]	@ (800f0c0 <tcp_process+0x294>)
 800f072:	f009 f8fb 	bl	801826c <iprintf>
        --pcb->snd_queuelen;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f07c:	3b01      	subs	r3, #1
 800f07e:	b29a      	uxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f08a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d12a      	bne.n	800f0e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f096:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d106      	bne.n	800f0ac <tcp_process+0x280>
 800f09e:	4b06      	ldr	r3, [pc, #24]	@ (800f0b8 <tcp_process+0x28c>)
 800f0a0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f0a4:	490f      	ldr	r1, [pc, #60]	@ (800f0e4 <tcp_process+0x2b8>)
 800f0a6:	4806      	ldr	r0, [pc, #24]	@ (800f0c0 <tcp_process+0x294>)
 800f0a8:	f009 f8e0 	bl	801826c <iprintf>
          pcb->unsent = rseg->next;
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f0b4:	e01c      	b.n	800f0f0 <tcp_process+0x2c4>
 800f0b6:	bf00      	nop
 800f0b8:	0801c748 	.word	0x0801c748
 800f0bc:	0801c980 	.word	0x0801c980
 800f0c0:	0801c794 	.word	0x0801c794
 800f0c4:	200087f4 	.word	0x200087f4
 800f0c8:	200087ec 	.word	0x200087ec
 800f0cc:	200087e8 	.word	0x200087e8
 800f0d0:	0801c99c 	.word	0x0801c99c
 800f0d4:	200087f5 	.word	0x200087f5
 800f0d8:	200087b0 	.word	0x200087b0
 800f0dc:	200087d8 	.word	0x200087d8
 800f0e0:	0801c9bc 	.word	0x0801c9bc
 800f0e4:	0801c9d4 	.word	0x0801c9d4
        } else {
          pcb->unacked = rseg->next;
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f0f0:	69f8      	ldr	r0, [r7, #28]
 800f0f2:	f7fe fd22 	bl	800db3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d104      	bne.n	800f108 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f104:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f106:	e006      	b.n	800f116 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00a      	beq.n	800f136 <tcp_process+0x30a>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	6910      	ldr	r0, [r2, #16]
 800f12a:	2200      	movs	r2, #0
 800f12c:	6879      	ldr	r1, [r7, #4]
 800f12e:	4798      	blx	r3
 800f130:	4603      	mov	r3, r0
 800f132:	76bb      	strb	r3, [r7, #26]
 800f134:	e001      	b.n	800f13a <tcp_process+0x30e>
 800f136:	2300      	movs	r3, #0
 800f138:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f13a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f13e:	f113 0f0d 	cmn.w	r3, #13
 800f142:	d102      	bne.n	800f14a <tcp_process+0x31e>
          return ERR_ABRT;
 800f144:	f06f 030c 	mvn.w	r3, #12
 800f148:	e250      	b.n	800f5ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	8b5b      	ldrh	r3, [r3, #26]
 800f14e:	f043 0302 	orr.w	r3, r3, #2
 800f152:	b29a      	uxth	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f158:	e23a      	b.n	800f5d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f15a:	4b98      	ldr	r3, [pc, #608]	@ (800f3bc <tcp_process+0x590>)
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	f003 0310 	and.w	r3, r3, #16
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 8234 	beq.w	800f5d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f168:	4b95      	ldr	r3, [pc, #596]	@ (800f3c0 <tcp_process+0x594>)
 800f16a:	6819      	ldr	r1, [r3, #0]
 800f16c:	4b95      	ldr	r3, [pc, #596]	@ (800f3c4 <tcp_process+0x598>)
 800f16e:	881b      	ldrh	r3, [r3, #0]
 800f170:	461a      	mov	r2, r3
 800f172:	4b95      	ldr	r3, [pc, #596]	@ (800f3c8 <tcp_process+0x59c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f178:	4b94      	ldr	r3, [pc, #592]	@ (800f3cc <tcp_process+0x5a0>)
 800f17a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f17c:	885b      	ldrh	r3, [r3, #2]
 800f17e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f180:	4a92      	ldr	r2, [pc, #584]	@ (800f3cc <tcp_process+0x5a0>)
 800f182:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f184:	8812      	ldrh	r2, [r2, #0]
 800f186:	b292      	uxth	r2, r2
 800f188:	9202      	str	r2, [sp, #8]
 800f18a:	9301      	str	r3, [sp, #4]
 800f18c:	4b90      	ldr	r3, [pc, #576]	@ (800f3d0 <tcp_process+0x5a4>)
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	4b90      	ldr	r3, [pc, #576]	@ (800f3d4 <tcp_process+0x5a8>)
 800f192:	4602      	mov	r2, r0
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f002 fc7f 	bl	8011a98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1a0:	2b05      	cmp	r3, #5
 800f1a2:	f200 8215 	bhi.w	800f5d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f002 fa4b 	bl	8011648 <tcp_rexmit_rto>
      break;
 800f1b2:	e20d      	b.n	800f5d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f1b4:	4b81      	ldr	r3, [pc, #516]	@ (800f3bc <tcp_process+0x590>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	f003 0310 	and.w	r3, r3, #16
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 80a1 	beq.w	800f304 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f1c2:	4b7f      	ldr	r3, [pc, #508]	@ (800f3c0 <tcp_process+0x594>)
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	db7e      	blt.n	800f2d0 <tcp_process+0x4a4>
 800f1d2:	4b7b      	ldr	r3, [pc, #492]	@ (800f3c0 <tcp_process+0x594>)
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	dc77      	bgt.n	800f2d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2204      	movs	r2, #4
 800f1e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d102      	bne.n	800f1f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f1ee:	23fa      	movs	r3, #250	@ 0xfa
 800f1f0:	76bb      	strb	r3, [r7, #26]
 800f1f2:	e01d      	b.n	800f230 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1f8:	699b      	ldr	r3, [r3, #24]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d106      	bne.n	800f20c <tcp_process+0x3e0>
 800f1fe:	4b76      	ldr	r3, [pc, #472]	@ (800f3d8 <tcp_process+0x5ac>)
 800f200:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f204:	4975      	ldr	r1, [pc, #468]	@ (800f3dc <tcp_process+0x5b0>)
 800f206:	4876      	ldr	r0, [pc, #472]	@ (800f3e0 <tcp_process+0x5b4>)
 800f208:	f009 f830 	bl	801826c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00a      	beq.n	800f22c <tcp_process+0x400>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	6910      	ldr	r0, [r2, #16]
 800f220:	2200      	movs	r2, #0
 800f222:	6879      	ldr	r1, [r7, #4]
 800f224:	4798      	blx	r3
 800f226:	4603      	mov	r3, r0
 800f228:	76bb      	strb	r3, [r7, #26]
 800f22a:	e001      	b.n	800f230 <tcp_process+0x404>
 800f22c:	23f0      	movs	r3, #240	@ 0xf0
 800f22e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f230:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00a      	beq.n	800f24e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f238:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f23c:	f113 0f0d 	cmn.w	r3, #13
 800f240:	d002      	beq.n	800f248 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7fd ff8c 	bl	800d160 <tcp_abort>
            }
            return ERR_ABRT;
 800f248:	f06f 030c 	mvn.w	r3, #12
 800f24c:	e1ce      	b.n	800f5ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 fae0 	bl	800f814 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f254:	4b63      	ldr	r3, [pc, #396]	@ (800f3e4 <tcp_process+0x5b8>)
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d005      	beq.n	800f268 <tcp_process+0x43c>
            recv_acked--;
 800f25c:	4b61      	ldr	r3, [pc, #388]	@ (800f3e4 <tcp_process+0x5b8>)
 800f25e:	881b      	ldrh	r3, [r3, #0]
 800f260:	3b01      	subs	r3, #1
 800f262:	b29a      	uxth	r2, r3
 800f264:	4b5f      	ldr	r3, [pc, #380]	@ (800f3e4 <tcp_process+0x5b8>)
 800f266:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f26c:	009a      	lsls	r2, r3, #2
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f278:	428b      	cmp	r3, r1
 800f27a:	bf38      	it	cc
 800f27c:	460b      	movcc	r3, r1
 800f27e:	429a      	cmp	r2, r3
 800f280:	d204      	bcs.n	800f28c <tcp_process+0x460>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	b29b      	uxth	r3, r3
 800f28a:	e00d      	b.n	800f2a8 <tcp_process+0x47c>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f296:	4293      	cmp	r3, r2
 800f298:	d904      	bls.n	800f2a4 <tcp_process+0x478>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f29e:	005b      	lsls	r3, r3, #1
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	e001      	b.n	800f2a8 <tcp_process+0x47c>
 800f2a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f2ae:	4b4e      	ldr	r3, [pc, #312]	@ (800f3e8 <tcp_process+0x5bc>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	f003 0320 	and.w	r3, r3, #32
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d037      	beq.n	800f32a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	8b5b      	ldrh	r3, [r3, #26]
 800f2be:	f043 0302 	orr.w	r3, r3, #2
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2207      	movs	r2, #7
 800f2cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f2ce:	e02c      	b.n	800f32a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2d0:	4b3b      	ldr	r3, [pc, #236]	@ (800f3c0 <tcp_process+0x594>)
 800f2d2:	6819      	ldr	r1, [r3, #0]
 800f2d4:	4b3b      	ldr	r3, [pc, #236]	@ (800f3c4 <tcp_process+0x598>)
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4b3b      	ldr	r3, [pc, #236]	@ (800f3c8 <tcp_process+0x59c>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2e0:	4b3a      	ldr	r3, [pc, #232]	@ (800f3cc <tcp_process+0x5a0>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2e4:	885b      	ldrh	r3, [r3, #2]
 800f2e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2e8:	4a38      	ldr	r2, [pc, #224]	@ (800f3cc <tcp_process+0x5a0>)
 800f2ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2ec:	8812      	ldrh	r2, [r2, #0]
 800f2ee:	b292      	uxth	r2, r2
 800f2f0:	9202      	str	r2, [sp, #8]
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	4b36      	ldr	r3, [pc, #216]	@ (800f3d0 <tcp_process+0x5a4>)
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	4b36      	ldr	r3, [pc, #216]	@ (800f3d4 <tcp_process+0x5a8>)
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f002 fbcb 	bl	8011a98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f302:	e167      	b.n	800f5d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f304:	4b2d      	ldr	r3, [pc, #180]	@ (800f3bc <tcp_process+0x590>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 8161 	beq.w	800f5d4 <tcp_process+0x7a8>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f316:	1e5a      	subs	r2, r3, #1
 800f318:	4b2b      	ldr	r3, [pc, #172]	@ (800f3c8 <tcp_process+0x59c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	f040 8159 	bne.w	800f5d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f002 f9b2 	bl	801168c <tcp_rexmit>
      break;
 800f328:	e154      	b.n	800f5d4 <tcp_process+0x7a8>
 800f32a:	e153      	b.n	800f5d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 fa71 	bl	800f814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f332:	4b2d      	ldr	r3, [pc, #180]	@ (800f3e8 <tcp_process+0x5bc>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	f003 0320 	and.w	r3, r3, #32
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f000 814c 	beq.w	800f5d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8b5b      	ldrh	r3, [r3, #26]
 800f344:	f043 0302 	orr.w	r3, r3, #2
 800f348:	b29a      	uxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2207      	movs	r2, #7
 800f352:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f354:	e140      	b.n	800f5d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fa5c 	bl	800f814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f35c:	4b22      	ldr	r3, [pc, #136]	@ (800f3e8 <tcp_process+0x5bc>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	f003 0320 	and.w	r3, r3, #32
 800f364:	2b00      	cmp	r3, #0
 800f366:	d071      	beq.n	800f44c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f368:	4b14      	ldr	r3, [pc, #80]	@ (800f3bc <tcp_process+0x590>)
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	f003 0310 	and.w	r3, r3, #16
 800f370:	2b00      	cmp	r3, #0
 800f372:	d060      	beq.n	800f436 <tcp_process+0x60a>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f378:	4b11      	ldr	r3, [pc, #68]	@ (800f3c0 <tcp_process+0x594>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d15a      	bne.n	800f436 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f384:	2b00      	cmp	r3, #0
 800f386:	d156      	bne.n	800f436 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	8b5b      	ldrh	r3, [r3, #26]
 800f38c:	f043 0302 	orr.w	r3, r3, #2
 800f390:	b29a      	uxth	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7fe fdbc 	bl	800df14 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f39c:	4b13      	ldr	r3, [pc, #76]	@ (800f3ec <tcp_process+0x5c0>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d105      	bne.n	800f3b2 <tcp_process+0x586>
 800f3a6:	4b11      	ldr	r3, [pc, #68]	@ (800f3ec <tcp_process+0x5c0>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	4a0f      	ldr	r2, [pc, #60]	@ (800f3ec <tcp_process+0x5c0>)
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	e02e      	b.n	800f410 <tcp_process+0x5e4>
 800f3b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f3ec <tcp_process+0x5c0>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	617b      	str	r3, [r7, #20]
 800f3b8:	e027      	b.n	800f40a <tcp_process+0x5de>
 800f3ba:	bf00      	nop
 800f3bc:	200087f4 	.word	0x200087f4
 800f3c0:	200087ec 	.word	0x200087ec
 800f3c4:	200087f2 	.word	0x200087f2
 800f3c8:	200087e8 	.word	0x200087e8
 800f3cc:	200087d8 	.word	0x200087d8
 800f3d0:	20005198 	.word	0x20005198
 800f3d4:	2000519c 	.word	0x2000519c
 800f3d8:	0801c748 	.word	0x0801c748
 800f3dc:	0801c9e8 	.word	0x0801c9e8
 800f3e0:	0801c794 	.word	0x0801c794
 800f3e4:	200087f0 	.word	0x200087f0
 800f3e8:	200087f5 	.word	0x200087f5
 800f3ec:	200087bc 	.word	0x200087bc
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d104      	bne.n	800f404 <tcp_process+0x5d8>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	68da      	ldr	r2, [r3, #12]
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	60da      	str	r2, [r3, #12]
 800f402:	e005      	b.n	800f410 <tcp_process+0x5e4>
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	617b      	str	r3, [r7, #20]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1ef      	bne.n	800f3f0 <tcp_process+0x5c4>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	60da      	str	r2, [r3, #12]
 800f416:	4b77      	ldr	r3, [pc, #476]	@ (800f5f4 <tcp_process+0x7c8>)
 800f418:	2201      	movs	r2, #1
 800f41a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	220a      	movs	r2, #10
 800f420:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f422:	4b75      	ldr	r3, [pc, #468]	@ (800f5f8 <tcp_process+0x7cc>)
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	60da      	str	r2, [r3, #12]
 800f42a:	4a73      	ldr	r2, [pc, #460]	@ (800f5f8 <tcp_process+0x7cc>)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6013      	str	r3, [r2, #0]
 800f430:	f002 fcf4 	bl	8011e1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f434:	e0d2      	b.n	800f5dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	8b5b      	ldrh	r3, [r3, #26]
 800f43a:	f043 0302 	orr.w	r3, r3, #2
 800f43e:	b29a      	uxth	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2208      	movs	r2, #8
 800f448:	751a      	strb	r2, [r3, #20]
      break;
 800f44a:	e0c7      	b.n	800f5dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f44c:	4b6b      	ldr	r3, [pc, #428]	@ (800f5fc <tcp_process+0x7d0>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 0310 	and.w	r3, r3, #16
 800f454:	2b00      	cmp	r3, #0
 800f456:	f000 80c1 	beq.w	800f5dc <tcp_process+0x7b0>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f45e:	4b68      	ldr	r3, [pc, #416]	@ (800f600 <tcp_process+0x7d4>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	429a      	cmp	r2, r3
 800f464:	f040 80ba 	bne.w	800f5dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f040 80b5 	bne.w	800f5dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2206      	movs	r2, #6
 800f476:	751a      	strb	r2, [r3, #20]
      break;
 800f478:	e0b0      	b.n	800f5dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f9ca 	bl	800f814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f480:	4b60      	ldr	r3, [pc, #384]	@ (800f604 <tcp_process+0x7d8>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	f003 0320 	and.w	r3, r3, #32
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 80a9 	beq.w	800f5e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	8b5b      	ldrh	r3, [r3, #26]
 800f492:	f043 0302 	orr.w	r3, r3, #2
 800f496:	b29a      	uxth	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7fe fd39 	bl	800df14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f4a2:	4b59      	ldr	r3, [pc, #356]	@ (800f608 <tcp_process+0x7dc>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d105      	bne.n	800f4b8 <tcp_process+0x68c>
 800f4ac:	4b56      	ldr	r3, [pc, #344]	@ (800f608 <tcp_process+0x7dc>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	4a55      	ldr	r2, [pc, #340]	@ (800f608 <tcp_process+0x7dc>)
 800f4b4:	6013      	str	r3, [r2, #0]
 800f4b6:	e013      	b.n	800f4e0 <tcp_process+0x6b4>
 800f4b8:	4b53      	ldr	r3, [pc, #332]	@ (800f608 <tcp_process+0x7dc>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	613b      	str	r3, [r7, #16]
 800f4be:	e00c      	b.n	800f4da <tcp_process+0x6ae>
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d104      	bne.n	800f4d4 <tcp_process+0x6a8>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68da      	ldr	r2, [r3, #12]
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	60da      	str	r2, [r3, #12]
 800f4d2:	e005      	b.n	800f4e0 <tcp_process+0x6b4>
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	613b      	str	r3, [r7, #16]
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1ef      	bne.n	800f4c0 <tcp_process+0x694>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	60da      	str	r2, [r3, #12]
 800f4e6:	4b43      	ldr	r3, [pc, #268]	@ (800f5f4 <tcp_process+0x7c8>)
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	220a      	movs	r2, #10
 800f4f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4f2:	4b41      	ldr	r3, [pc, #260]	@ (800f5f8 <tcp_process+0x7cc>)
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	60da      	str	r2, [r3, #12]
 800f4fa:	4a3f      	ldr	r2, [pc, #252]	@ (800f5f8 <tcp_process+0x7cc>)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	f002 fc8c 	bl	8011e1c <tcp_timer_needed>
      }
      break;
 800f504:	e06c      	b.n	800f5e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f984 	bl	800f814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f50c:	4b3b      	ldr	r3, [pc, #236]	@ (800f5fc <tcp_process+0x7d0>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f003 0310 	and.w	r3, r3, #16
 800f514:	2b00      	cmp	r3, #0
 800f516:	d065      	beq.n	800f5e4 <tcp_process+0x7b8>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f51c:	4b38      	ldr	r3, [pc, #224]	@ (800f600 <tcp_process+0x7d4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	429a      	cmp	r2, r3
 800f522:	d15f      	bne.n	800f5e4 <tcp_process+0x7b8>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d15b      	bne.n	800f5e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7fe fcf1 	bl	800df14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f532:	4b35      	ldr	r3, [pc, #212]	@ (800f608 <tcp_process+0x7dc>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d105      	bne.n	800f548 <tcp_process+0x71c>
 800f53c:	4b32      	ldr	r3, [pc, #200]	@ (800f608 <tcp_process+0x7dc>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	4a31      	ldr	r2, [pc, #196]	@ (800f608 <tcp_process+0x7dc>)
 800f544:	6013      	str	r3, [r2, #0]
 800f546:	e013      	b.n	800f570 <tcp_process+0x744>
 800f548:	4b2f      	ldr	r3, [pc, #188]	@ (800f608 <tcp_process+0x7dc>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60fb      	str	r3, [r7, #12]
 800f54e:	e00c      	b.n	800f56a <tcp_process+0x73e>
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d104      	bne.n	800f564 <tcp_process+0x738>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	68da      	ldr	r2, [r3, #12]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	60da      	str	r2, [r3, #12]
 800f562:	e005      	b.n	800f570 <tcp_process+0x744>
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	60fb      	str	r3, [r7, #12]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1ef      	bne.n	800f550 <tcp_process+0x724>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	60da      	str	r2, [r3, #12]
 800f576:	4b1f      	ldr	r3, [pc, #124]	@ (800f5f4 <tcp_process+0x7c8>)
 800f578:	2201      	movs	r2, #1
 800f57a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	220a      	movs	r2, #10
 800f580:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f582:	4b1d      	ldr	r3, [pc, #116]	@ (800f5f8 <tcp_process+0x7cc>)
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	60da      	str	r2, [r3, #12]
 800f58a:	4a1b      	ldr	r2, [pc, #108]	@ (800f5f8 <tcp_process+0x7cc>)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6013      	str	r3, [r2, #0]
 800f590:	f002 fc44 	bl	8011e1c <tcp_timer_needed>
      }
      break;
 800f594:	e026      	b.n	800f5e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f93c 	bl	800f814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f59c:	4b17      	ldr	r3, [pc, #92]	@ (800f5fc <tcp_process+0x7d0>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 0310 	and.w	r3, r3, #16
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d01f      	beq.n	800f5e8 <tcp_process+0x7bc>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f5ac:	4b14      	ldr	r3, [pc, #80]	@ (800f600 <tcp_process+0x7d4>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d119      	bne.n	800f5e8 <tcp_process+0x7bc>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d115      	bne.n	800f5e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f5bc:	4b11      	ldr	r3, [pc, #68]	@ (800f604 <tcp_process+0x7d8>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f043 0310 	orr.w	r3, r3, #16
 800f5c4:	b2da      	uxtb	r2, r3
 800f5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f604 <tcp_process+0x7d8>)
 800f5c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f5ca:	e00d      	b.n	800f5e8 <tcp_process+0x7bc>
    default:
      break;
 800f5cc:	bf00      	nop
 800f5ce:	e00c      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5d0:	bf00      	nop
 800f5d2:	e00a      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5d4:	bf00      	nop
 800f5d6:	e008      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5d8:	bf00      	nop
 800f5da:	e006      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5dc:	bf00      	nop
 800f5de:	e004      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5e0:	bf00      	nop
 800f5e2:	e002      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5e4:	bf00      	nop
 800f5e6:	e000      	b.n	800f5ea <tcp_process+0x7be>
      break;
 800f5e8:	bf00      	nop
  }
  return ERR_OK;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3724      	adds	r7, #36	@ 0x24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd90      	pop	{r4, r7, pc}
 800f5f4:	200087c4 	.word	0x200087c4
 800f5f8:	200087c0 	.word	0x200087c0
 800f5fc:	200087f4 	.word	0x200087f4
 800f600:	200087ec 	.word	0x200087ec
 800f604:	200087f5 	.word	0x200087f5
 800f608:	200087bc 	.word	0x200087bc

0800f60c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d106      	bne.n	800f62a <tcp_oos_insert_segment+0x1e>
 800f61c:	4b3b      	ldr	r3, [pc, #236]	@ (800f70c <tcp_oos_insert_segment+0x100>)
 800f61e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f622:	493b      	ldr	r1, [pc, #236]	@ (800f710 <tcp_oos_insert_segment+0x104>)
 800f624:	483b      	ldr	r0, [pc, #236]	@ (800f714 <tcp_oos_insert_segment+0x108>)
 800f626:	f008 fe21 	bl	801826c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	899b      	ldrh	r3, [r3, #12]
 800f630:	b29b      	uxth	r3, r3
 800f632:	4618      	mov	r0, r3
 800f634:	f7fb fb7e 	bl	800ad34 <lwip_htons>
 800f638:	4603      	mov	r3, r0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	f003 0301 	and.w	r3, r3, #1
 800f640:	2b00      	cmp	r3, #0
 800f642:	d028      	beq.n	800f696 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f644:	6838      	ldr	r0, [r7, #0]
 800f646:	f7fe fa63 	bl	800db10 <tcp_segs_free>
    next = NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	603b      	str	r3, [r7, #0]
 800f64e:	e056      	b.n	800f6fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fb fb6b 	bl	800ad34 <lwip_htons>
 800f65e:	4603      	mov	r3, r0
 800f660:	b2db      	uxtb	r3, r3
 800f662:	f003 0301 	and.w	r3, r3, #1
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00d      	beq.n	800f686 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	899b      	ldrh	r3, [r3, #12]
 800f670:	b29c      	uxth	r4, r3
 800f672:	2001      	movs	r0, #1
 800f674:	f7fb fb5e 	bl	800ad34 <lwip_htons>
 800f678:	4603      	mov	r3, r0
 800f67a:	461a      	mov	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	4322      	orrs	r2, r4
 800f682:	b292      	uxth	r2, r2
 800f684:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f7fe fa52 	bl	800db3a <tcp_seg_free>
    while (next &&
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00e      	beq.n	800f6ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	891b      	ldrh	r3, [r3, #8]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800f718 <tcp_oos_insert_segment+0x10c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	441a      	add	r2, r3
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	6839      	ldr	r1, [r7, #0]
 800f6b0:	8909      	ldrh	r1, [r1, #8]
 800f6b2:	440b      	add	r3, r1
 800f6b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	daca      	bge.n	800f650 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d01e      	beq.n	800f6fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	891b      	ldrh	r3, [r3, #8]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4b14      	ldr	r3, [pc, #80]	@ (800f718 <tcp_oos_insert_segment+0x10c>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	441a      	add	r2, r3
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dd12      	ble.n	800f6fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800f718 <tcp_oos_insert_segment+0x10c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	891b      	ldrh	r3, [r3, #8]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	f7fc fd81 	bl	800c200 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	601a      	str	r2, [r3, #0]
}
 800f704:	bf00      	nop
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd90      	pop	{r4, r7, pc}
 800f70c:	0801c748 	.word	0x0801c748
 800f710:	0801ca08 	.word	0x0801ca08
 800f714:	0801c794 	.word	0x0801c794
 800f718:	200087e8 	.word	0x200087e8

0800f71c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f71c:	b5b0      	push	{r4, r5, r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
 800f728:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f72a:	e03e      	b.n	800f7aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fc ff6e 	bl	800c61c <pbuf_clen>
 800f740:	4603      	mov	r3, r0
 800f742:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f74a:	8a7a      	ldrh	r2, [r7, #18]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d906      	bls.n	800f75e <tcp_free_acked_segments+0x42>
 800f750:	4b2a      	ldr	r3, [pc, #168]	@ (800f7fc <tcp_free_acked_segments+0xe0>)
 800f752:	f240 4257 	movw	r2, #1111	@ 0x457
 800f756:	492a      	ldr	r1, [pc, #168]	@ (800f800 <tcp_free_acked_segments+0xe4>)
 800f758:	482a      	ldr	r0, [pc, #168]	@ (800f804 <tcp_free_acked_segments+0xe8>)
 800f75a:	f008 fd87 	bl	801826c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f764:	8a7b      	ldrh	r3, [r7, #18]
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	b29a      	uxth	r2, r3
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	891a      	ldrh	r2, [r3, #8]
 800f774:	4b24      	ldr	r3, [pc, #144]	@ (800f808 <tcp_free_acked_segments+0xec>)
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	4413      	add	r3, r2
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	4b22      	ldr	r3, [pc, #136]	@ (800f808 <tcp_free_acked_segments+0xec>)
 800f77e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f780:	6978      	ldr	r0, [r7, #20]
 800f782:	f7fe f9da 	bl	800db3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00c      	beq.n	800f7aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d109      	bne.n	800f7aa <tcp_free_acked_segments+0x8e>
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d106      	bne.n	800f7aa <tcp_free_acked_segments+0x8e>
 800f79c:	4b17      	ldr	r3, [pc, #92]	@ (800f7fc <tcp_free_acked_segments+0xe0>)
 800f79e:	f240 4261 	movw	r2, #1121	@ 0x461
 800f7a2:	491a      	ldr	r1, [pc, #104]	@ (800f80c <tcp_free_acked_segments+0xf0>)
 800f7a4:	4817      	ldr	r0, [pc, #92]	@ (800f804 <tcp_free_acked_segments+0xe8>)
 800f7a6:	f008 fd61 	bl	801826c <iprintf>
  while (seg_list != NULL &&
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d020      	beq.n	800f7f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fb fad1 	bl	800ad5e <lwip_htonl>
 800f7bc:	4604      	mov	r4, r0
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	891b      	ldrh	r3, [r3, #8]
 800f7c2:	461d      	mov	r5, r3
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	899b      	ldrh	r3, [r3, #12]
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fb fab1 	bl	800ad34 <lwip_htons>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	f003 0303 	and.w	r3, r3, #3
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <tcp_free_acked_segments+0xc6>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e000      	b.n	800f7e4 <tcp_free_acked_segments+0xc8>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	442b      	add	r3, r5
 800f7e6:	18e2      	adds	r2, r4, r3
 800f7e8:	4b09      	ldr	r3, [pc, #36]	@ (800f810 <tcp_free_acked_segments+0xf4>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	dd9c      	ble.n	800f72c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f7f2:	68bb      	ldr	r3, [r7, #8]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bdb0      	pop	{r4, r5, r7, pc}
 800f7fc:	0801c748 	.word	0x0801c748
 800f800:	0801ca30 	.word	0x0801ca30
 800f804:	0801c794 	.word	0x0801c794
 800f808:	200087f0 	.word	0x200087f0
 800f80c:	0801ca58 	.word	0x0801ca58
 800f810:	200087ec 	.word	0x200087ec

0800f814 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f814:	b5b0      	push	{r4, r5, r7, lr}
 800f816:	b094      	sub	sp, #80	@ 0x50
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d106      	bne.n	800f834 <tcp_receive+0x20>
 800f826:	4b91      	ldr	r3, [pc, #580]	@ (800fa6c <tcp_receive+0x258>)
 800f828:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f82c:	4990      	ldr	r1, [pc, #576]	@ (800fa70 <tcp_receive+0x25c>)
 800f82e:	4891      	ldr	r0, [pc, #580]	@ (800fa74 <tcp_receive+0x260>)
 800f830:	f008 fd1c 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7d1b      	ldrb	r3, [r3, #20]
 800f838:	2b03      	cmp	r3, #3
 800f83a:	d806      	bhi.n	800f84a <tcp_receive+0x36>
 800f83c:	4b8b      	ldr	r3, [pc, #556]	@ (800fa6c <tcp_receive+0x258>)
 800f83e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f842:	498d      	ldr	r1, [pc, #564]	@ (800fa78 <tcp_receive+0x264>)
 800f844:	488b      	ldr	r0, [pc, #556]	@ (800fa74 <tcp_receive+0x260>)
 800f846:	f008 fd11 	bl	801826c <iprintf>

  if (flags & TCP_ACK) {
 800f84a:	4b8c      	ldr	r3, [pc, #560]	@ (800fa7c <tcp_receive+0x268>)
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	f003 0310 	and.w	r3, r3, #16
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 8264 	beq.w	800fd20 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f85e:	461a      	mov	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f864:	4413      	add	r3, r2
 800f866:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f86c:	4b84      	ldr	r3, [pc, #528]	@ (800fa80 <tcp_receive+0x26c>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	2b00      	cmp	r3, #0
 800f874:	db1b      	blt.n	800f8ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f87a:	4b81      	ldr	r3, [pc, #516]	@ (800fa80 <tcp_receive+0x26c>)
 800f87c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f87e:	429a      	cmp	r2, r3
 800f880:	d106      	bne.n	800f890 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f886:	4b7f      	ldr	r3, [pc, #508]	@ (800fa84 <tcp_receive+0x270>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	db0e      	blt.n	800f8ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f894:	4b7b      	ldr	r3, [pc, #492]	@ (800fa84 <tcp_receive+0x270>)
 800f896:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f898:	429a      	cmp	r2, r3
 800f89a:	d125      	bne.n	800f8e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f89c:	4b7a      	ldr	r3, [pc, #488]	@ (800fa88 <tcp_receive+0x274>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	89db      	ldrh	r3, [r3, #14]
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d91c      	bls.n	800f8e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f8ae:	4b76      	ldr	r3, [pc, #472]	@ (800fa88 <tcp_receive+0x274>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	89db      	ldrh	r3, [r3, #14]
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d205      	bcs.n	800f8d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f8d8:	4b69      	ldr	r3, [pc, #420]	@ (800fa80 <tcp_receive+0x26c>)
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f8e0:	4b68      	ldr	r3, [pc, #416]	@ (800fa84 <tcp_receive+0x270>)
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f8e8:	4b66      	ldr	r3, [pc, #408]	@ (800fa84 <tcp_receive+0x270>)
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	dc58      	bgt.n	800f9a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f8f6:	4b65      	ldr	r3, [pc, #404]	@ (800fa8c <tcp_receive+0x278>)
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d14b      	bne.n	800f996 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f908:	4413      	add	r3, r2
 800f90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d142      	bne.n	800f996 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f916:	2b00      	cmp	r3, #0
 800f918:	db3d      	blt.n	800f996 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f91e:	4b59      	ldr	r3, [pc, #356]	@ (800fa84 <tcp_receive+0x270>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d137      	bne.n	800f996 <tcp_receive+0x182>
              found_dupack = 1;
 800f926:	2301      	movs	r3, #1
 800f928:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f930:	2bff      	cmp	r3, #255	@ 0xff
 800f932:	d007      	beq.n	800f944 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f93a:	3301      	adds	r3, #1
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f94a:	2b03      	cmp	r3, #3
 800f94c:	d91b      	bls.n	800f986 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f958:	4413      	add	r3, r2
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f962:	429a      	cmp	r2, r3
 800f964:	d30a      	bcc.n	800f97c <tcp_receive+0x168>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f970:	4413      	add	r3, r2
 800f972:	b29a      	uxth	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f97a:	e004      	b.n	800f986 <tcp_receive+0x172>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f982:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d902      	bls.n	800f996 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f001 fee7 	bl	8011764 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f040 8161 	bne.w	800fc60 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f9a6:	e15b      	b.n	800fc60 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9a8:	4b36      	ldr	r3, [pc, #216]	@ (800fa84 <tcp_receive+0x270>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9b0:	1ad3      	subs	r3, r2, r3
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f2c0 814e 	blt.w	800fc56 <tcp_receive+0x442>
 800f9ba:	4b32      	ldr	r3, [pc, #200]	@ (800fa84 <tcp_receive+0x270>)
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	f300 8146 	bgt.w	800fc56 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	8b5b      	ldrh	r3, [r3, #26]
 800f9ce:	f003 0304 	and.w	r3, r3, #4
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d010      	beq.n	800f9f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8b5b      	ldrh	r3, [r3, #26]
 800f9da:	f023 0304 	bic.w	r3, r3, #4
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fa06:	10db      	asrs	r3, r3, #3
 800fa08:	b21b      	sxth	r3, r3
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4413      	add	r3, r2
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	b21a      	sxth	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fa20:	4b18      	ldr	r3, [pc, #96]	@ (800fa84 <tcp_receive+0x270>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800fa38:	4b12      	ldr	r3, [pc, #72]	@ (800fa84 <tcp_receive+0x270>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	7d1b      	ldrb	r3, [r3, #20]
 800fa44:	2b03      	cmp	r3, #3
 800fa46:	f240 8097 	bls.w	800fb78 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d245      	bcs.n	800fae6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	8b5b      	ldrh	r3, [r3, #26]
 800fa5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d014      	beq.n	800fa90 <tcp_receive+0x27c>
 800fa66:	2301      	movs	r3, #1
 800fa68:	e013      	b.n	800fa92 <tcp_receive+0x27e>
 800fa6a:	bf00      	nop
 800fa6c:	0801c748 	.word	0x0801c748
 800fa70:	0801ca78 	.word	0x0801ca78
 800fa74:	0801c794 	.word	0x0801c794
 800fa78:	0801ca94 	.word	0x0801ca94
 800fa7c:	200087f4 	.word	0x200087f4
 800fa80:	200087e8 	.word	0x200087e8
 800fa84:	200087ec 	.word	0x200087ec
 800fa88:	200087d8 	.word	0x200087d8
 800fa8c:	200087f2 	.word	0x200087f2
 800fa90:	2302      	movs	r3, #2
 800fa92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fa96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800faa0:	fb12 f303 	smulbb	r3, r2, r3
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800faa8:	4293      	cmp	r3, r2
 800faaa:	bf28      	it	cs
 800faac:	4613      	movcs	r3, r2
 800faae:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fab6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fab8:	4413      	add	r3, r2
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d309      	bcc.n	800fada <tcp_receive+0x2c6>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800facc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800face:	4413      	add	r3, r2
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fad8:	e04e      	b.n	800fb78 <tcp_receive+0x364>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fae0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fae4:	e048      	b.n	800fb78 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800faec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800faee:	4413      	add	r3, r2
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d309      	bcc.n	800fb10 <tcp_receive+0x2fc>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fb02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb04:	4413      	add	r3, r2
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fb0e:	e004      	b.n	800fb1a <tcp_receive+0x306>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d326      	bcc.n	800fb78 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb4a:	4413      	add	r3, r2
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d30a      	bcc.n	800fb6e <tcp_receive+0x35a>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb62:	4413      	add	r3, r2
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fb6c:	e004      	b.n	800fb78 <tcp_receive+0x364>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb80:	4a98      	ldr	r2, [pc, #608]	@ (800fde4 <tcp_receive+0x5d0>)
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7ff fdca 	bl	800f71c <tcp_free_acked_segments>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb96:	4a94      	ldr	r2, [pc, #592]	@ (800fde8 <tcp_receive+0x5d4>)
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7ff fdbf 	bl	800f71c <tcp_free_acked_segments>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d104      	bne.n	800fbb6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbb2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fbb4:	e002      	b.n	800fbbc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d103      	bne.n	800fbd2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800fbd8:	4b84      	ldr	r3, [pc, #528]	@ (800fdec <tcp_receive+0x5d8>)
 800fbda:	881b      	ldrh	r3, [r3, #0]
 800fbdc:	4413      	add	r3, r2
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	8b5b      	ldrh	r3, [r3, #26]
 800fbea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d035      	beq.n	800fc5e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d118      	bne.n	800fc2c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d00c      	beq.n	800fc1c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fb f8a5 	bl	800ad5e <lwip_htonl>
 800fc14:	4603      	mov	r3, r0
 800fc16:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	dc20      	bgt.n	800fc5e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	8b5b      	ldrh	r3, [r3, #26]
 800fc20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc2a:	e018      	b.n	800fc5e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc34:	68db      	ldr	r3, [r3, #12]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fb f890 	bl	800ad5e <lwip_htonl>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	1ae3      	subs	r3, r4, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	dc0b      	bgt.n	800fc5e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	8b5b      	ldrh	r3, [r3, #26]
 800fc4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc54:	e003      	b.n	800fc5e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f001 ff70 	bl	8011b3c <tcp_send_empty_ack>
 800fc5c:	e000      	b.n	800fc60 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc5e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d05b      	beq.n	800fd20 <tcp_receive+0x50c>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc6c:	4b60      	ldr	r3, [pc, #384]	@ (800fdf0 <tcp_receive+0x5dc>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	da54      	bge.n	800fd20 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fc76:	4b5f      	ldr	r3, [pc, #380]	@ (800fdf4 <tcp_receive+0x5e0>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fc8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fc94:	10db      	asrs	r3, r3, #3
 800fc96:	b21b      	sxth	r3, r3
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fcae:	4413      	add	r3, r2
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	b21a      	sxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800fcb8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	da05      	bge.n	800fccc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fcc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fcc4:	425b      	negs	r3, r3
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fccc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fcd6:	109b      	asrs	r3, r3, #2
 800fcd8:	b21b      	sxth	r3, r3
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fcf0:	4413      	add	r3, r2
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	b21a      	sxth	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fd00:	10db      	asrs	r3, r3, #3
 800fd02:	b21b      	sxth	r3, r3
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	4413      	add	r3, r2
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	b21a      	sxth	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fd20:	4b35      	ldr	r3, [pc, #212]	@ (800fdf8 <tcp_receive+0x5e4>)
 800fd22:	881b      	ldrh	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 84df 	beq.w	80106e8 <tcp_receive+0xed4>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	7d1b      	ldrb	r3, [r3, #20]
 800fd2e:	2b06      	cmp	r3, #6
 800fd30:	f200 84da 	bhi.w	80106e8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd38:	4b30      	ldr	r3, [pc, #192]	@ (800fdfc <tcp_receive+0x5e8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f2c0 808f 	blt.w	800fe64 <tcp_receive+0x650>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd4a:	4b2b      	ldr	r3, [pc, #172]	@ (800fdf8 <tcp_receive+0x5e4>)
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4b2a      	ldr	r3, [pc, #168]	@ (800fdfc <tcp_receive+0x5e8>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	440b      	add	r3, r1
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	3301      	adds	r3, #1
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f300 8082 	bgt.w	800fe64 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fd60:	4b27      	ldr	r3, [pc, #156]	@ (800fe00 <tcp_receive+0x5ec>)
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd6a:	4b24      	ldr	r3, [pc, #144]	@ (800fdfc <tcp_receive+0x5e8>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fd72:	4b23      	ldr	r3, [pc, #140]	@ (800fe00 <tcp_receive+0x5ec>)
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d106      	bne.n	800fd88 <tcp_receive+0x574>
 800fd7a:	4b22      	ldr	r3, [pc, #136]	@ (800fe04 <tcp_receive+0x5f0>)
 800fd7c:	f240 5294 	movw	r2, #1428	@ 0x594
 800fd80:	4921      	ldr	r1, [pc, #132]	@ (800fe08 <tcp_receive+0x5f4>)
 800fd82:	4822      	ldr	r0, [pc, #136]	@ (800fe0c <tcp_receive+0x5f8>)
 800fd84:	f008 fa72 	bl	801826c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d906      	bls.n	800fda0 <tcp_receive+0x58c>
 800fd92:	4b1c      	ldr	r3, [pc, #112]	@ (800fe04 <tcp_receive+0x5f0>)
 800fd94:	f240 5295 	movw	r2, #1429	@ 0x595
 800fd98:	491d      	ldr	r1, [pc, #116]	@ (800fe10 <tcp_receive+0x5fc>)
 800fd9a:	481c      	ldr	r0, [pc, #112]	@ (800fe0c <tcp_receive+0x5f8>)
 800fd9c:	f008 fa66 	bl	801826c <iprintf>
      off = (u16_t)off32;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fda6:	4b16      	ldr	r3, [pc, #88]	@ (800fe00 <tcp_receive+0x5ec>)
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	891b      	ldrh	r3, [r3, #8]
 800fdac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d906      	bls.n	800fdc2 <tcp_receive+0x5ae>
 800fdb4:	4b13      	ldr	r3, [pc, #76]	@ (800fe04 <tcp_receive+0x5f0>)
 800fdb6:	f240 5297 	movw	r2, #1431	@ 0x597
 800fdba:	4916      	ldr	r1, [pc, #88]	@ (800fe14 <tcp_receive+0x600>)
 800fdbc:	4813      	ldr	r0, [pc, #76]	@ (800fe0c <tcp_receive+0x5f8>)
 800fdbe:	f008 fa55 	bl	801826c <iprintf>
      inseg.len -= off;
 800fdc2:	4b0f      	ldr	r3, [pc, #60]	@ (800fe00 <tcp_receive+0x5ec>)
 800fdc4:	891a      	ldrh	r2, [r3, #8]
 800fdc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fdca:	1ad3      	subs	r3, r2, r3
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	4b0c      	ldr	r3, [pc, #48]	@ (800fe00 <tcp_receive+0x5ec>)
 800fdd0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	@ (800fe00 <tcp_receive+0x5ec>)
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	891a      	ldrh	r2, [r3, #8]
 800fdd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fddc:	1ad3      	subs	r3, r2, r3
 800fdde:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fde0:	e02a      	b.n	800fe38 <tcp_receive+0x624>
 800fde2:	bf00      	nop
 800fde4:	0801cab0 	.word	0x0801cab0
 800fde8:	0801cab8 	.word	0x0801cab8
 800fdec:	200087f0 	.word	0x200087f0
 800fdf0:	200087ec 	.word	0x200087ec
 800fdf4:	200087b0 	.word	0x200087b0
 800fdf8:	200087f2 	.word	0x200087f2
 800fdfc:	200087e8 	.word	0x200087e8
 800fe00:	200087c8 	.word	0x200087c8
 800fe04:	0801c748 	.word	0x0801c748
 800fe08:	0801cac0 	.word	0x0801cac0
 800fe0c:	0801c794 	.word	0x0801c794
 800fe10:	0801cad0 	.word	0x0801cad0
 800fe14:	0801cae0 	.word	0x0801cae0
        off -= p->len;
 800fe18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe1a:	895b      	ldrh	r3, [r3, #10]
 800fe1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fe26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe28:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fe2a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fe2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe2e:	2200      	movs	r2, #0
 800fe30:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fe32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fe38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe3a:	895b      	ldrh	r3, [r3, #10]
 800fe3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d8e9      	bhi.n	800fe18 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fe44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe4c:	f7fc fad8 	bl	800c400 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe54:	4a90      	ldr	r2, [pc, #576]	@ (8010098 <tcp_receive+0x884>)
 800fe56:	6013      	str	r3, [r2, #0]
 800fe58:	4b90      	ldr	r3, [pc, #576]	@ (801009c <tcp_receive+0x888>)
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	4a8e      	ldr	r2, [pc, #568]	@ (8010098 <tcp_receive+0x884>)
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe62:	e00d      	b.n	800fe80 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fe64:	4b8c      	ldr	r3, [pc, #560]	@ (8010098 <tcp_receive+0x884>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe6c:	1ad3      	subs	r3, r2, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	da06      	bge.n	800fe80 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	8b5b      	ldrh	r3, [r3, #26]
 800fe76:	f043 0302 	orr.w	r3, r3, #2
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe80:	4b85      	ldr	r3, [pc, #532]	@ (8010098 <tcp_receive+0x884>)
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f2c0 8427 	blt.w	80106de <tcp_receive+0xeca>
 800fe90:	4b81      	ldr	r3, [pc, #516]	@ (8010098 <tcp_receive+0x884>)
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe98:	6879      	ldr	r1, [r7, #4]
 800fe9a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe9c:	440b      	add	r3, r1
 800fe9e:	1ad3      	subs	r3, r2, r3
 800fea0:	3301      	adds	r3, #1
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f300 841b 	bgt.w	80106de <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800feac:	4b7a      	ldr	r3, [pc, #488]	@ (8010098 <tcp_receive+0x884>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	f040 8298 	bne.w	80103e6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800feb6:	4b79      	ldr	r3, [pc, #484]	@ (801009c <tcp_receive+0x888>)
 800feb8:	891c      	ldrh	r4, [r3, #8]
 800feba:	4b78      	ldr	r3, [pc, #480]	@ (801009c <tcp_receive+0x888>)
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	899b      	ldrh	r3, [r3, #12]
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fa ff36 	bl	800ad34 <lwip_htons>
 800fec8:	4603      	mov	r3, r0
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	f003 0303 	and.w	r3, r3, #3
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d001      	beq.n	800fed8 <tcp_receive+0x6c4>
 800fed4:	2301      	movs	r3, #1
 800fed6:	e000      	b.n	800feda <tcp_receive+0x6c6>
 800fed8:	2300      	movs	r3, #0
 800feda:	4423      	add	r3, r4
 800fedc:	b29a      	uxth	r2, r3
 800fede:	4b70      	ldr	r3, [pc, #448]	@ (80100a0 <tcp_receive+0x88c>)
 800fee0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fee6:	4b6e      	ldr	r3, [pc, #440]	@ (80100a0 <tcp_receive+0x88c>)
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	429a      	cmp	r2, r3
 800feec:	d274      	bcs.n	800ffd8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800feee:	4b6b      	ldr	r3, [pc, #428]	@ (801009c <tcp_receive+0x888>)
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	899b      	ldrh	r3, [r3, #12]
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fa ff1c 	bl	800ad34 <lwip_htons>
 800fefc:	4603      	mov	r3, r0
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01e      	beq.n	800ff46 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ff08:	4b64      	ldr	r3, [pc, #400]	@ (801009c <tcp_receive+0x888>)
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	899b      	ldrh	r3, [r3, #12]
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	b21b      	sxth	r3, r3
 800ff12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ff16:	b21c      	sxth	r4, r3
 800ff18:	4b60      	ldr	r3, [pc, #384]	@ (801009c <tcp_receive+0x888>)
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	899b      	ldrh	r3, [r3, #12]
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fa ff07 	bl	800ad34 <lwip_htons>
 800ff26:	4603      	mov	r3, r0
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fa feff 	bl	800ad34 <lwip_htons>
 800ff36:	4603      	mov	r3, r0
 800ff38:	b21b      	sxth	r3, r3
 800ff3a:	4323      	orrs	r3, r4
 800ff3c:	b21a      	sxth	r2, r3
 800ff3e:	4b57      	ldr	r3, [pc, #348]	@ (801009c <tcp_receive+0x888>)
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	b292      	uxth	r2, r2
 800ff44:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ff4a:	4b54      	ldr	r3, [pc, #336]	@ (801009c <tcp_receive+0x888>)
 800ff4c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff4e:	4b53      	ldr	r3, [pc, #332]	@ (801009c <tcp_receive+0x888>)
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	899b      	ldrh	r3, [r3, #12]
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fa feec 	bl	800ad34 <lwip_htons>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	f003 0302 	and.w	r3, r3, #2
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d005      	beq.n	800ff74 <tcp_receive+0x760>
            inseg.len -= 1;
 800ff68:	4b4c      	ldr	r3, [pc, #304]	@ (801009c <tcp_receive+0x888>)
 800ff6a:	891b      	ldrh	r3, [r3, #8]
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	4b4a      	ldr	r3, [pc, #296]	@ (801009c <tcp_receive+0x888>)
 800ff72:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ff74:	4b49      	ldr	r3, [pc, #292]	@ (801009c <tcp_receive+0x888>)
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	4a48      	ldr	r2, [pc, #288]	@ (801009c <tcp_receive+0x888>)
 800ff7a:	8912      	ldrh	r2, [r2, #8]
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fc f93e 	bl	800c200 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ff84:	4b45      	ldr	r3, [pc, #276]	@ (801009c <tcp_receive+0x888>)
 800ff86:	891c      	ldrh	r4, [r3, #8]
 800ff88:	4b44      	ldr	r3, [pc, #272]	@ (801009c <tcp_receive+0x888>)
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	899b      	ldrh	r3, [r3, #12]
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fa fecf 	bl	800ad34 <lwip_htons>
 800ff96:	4603      	mov	r3, r0
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	f003 0303 	and.w	r3, r3, #3
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d001      	beq.n	800ffa6 <tcp_receive+0x792>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e000      	b.n	800ffa8 <tcp_receive+0x794>
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	4423      	add	r3, r4
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	4b3c      	ldr	r3, [pc, #240]	@ (80100a0 <tcp_receive+0x88c>)
 800ffae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ffb0:	4b3b      	ldr	r3, [pc, #236]	@ (80100a0 <tcp_receive+0x88c>)
 800ffb2:	881b      	ldrh	r3, [r3, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	4b38      	ldr	r3, [pc, #224]	@ (8010098 <tcp_receive+0x884>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	441a      	add	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ffc4:	440b      	add	r3, r1
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d006      	beq.n	800ffd8 <tcp_receive+0x7c4>
 800ffca:	4b36      	ldr	r3, [pc, #216]	@ (80100a4 <tcp_receive+0x890>)
 800ffcc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ffd0:	4935      	ldr	r1, [pc, #212]	@ (80100a8 <tcp_receive+0x894>)
 800ffd2:	4836      	ldr	r0, [pc, #216]	@ (80100ac <tcp_receive+0x898>)
 800ffd4:	f008 f94a 	bl	801826c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f000 80e6 	beq.w	80101ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffe2:	4b2e      	ldr	r3, [pc, #184]	@ (801009c <tcp_receive+0x888>)
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	899b      	ldrh	r3, [r3, #12]
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fa fea2 	bl	800ad34 <lwip_htons>
 800fff0:	4603      	mov	r3, r0
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	f003 0301 	and.w	r3, r3, #1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d010      	beq.n	801001e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fffc:	e00a      	b.n	8010014 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010002:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f7fd fd93 	bl	800db3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1f0      	bne.n	800fffe <tcp_receive+0x7ea>
 801001c:	e0c7      	b.n	80101ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010022:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010024:	e051      	b.n	80100ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	899b      	ldrh	r3, [r3, #12]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4618      	mov	r0, r3
 8010030:	f7fa fe80 	bl	800ad34 <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	d03c      	beq.n	80100ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010040:	4b16      	ldr	r3, [pc, #88]	@ (801009c <tcp_receive+0x888>)
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	4618      	mov	r0, r3
 801004a:	f7fa fe73 	bl	800ad34 <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010056:	2b00      	cmp	r3, #0
 8010058:	d12f      	bne.n	80100ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801005a:	4b10      	ldr	r3, [pc, #64]	@ (801009c <tcp_receive+0x888>)
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	899b      	ldrh	r3, [r3, #12]
 8010060:	b29c      	uxth	r4, r3
 8010062:	2001      	movs	r0, #1
 8010064:	f7fa fe66 	bl	800ad34 <lwip_htons>
 8010068:	4603      	mov	r3, r0
 801006a:	461a      	mov	r2, r3
 801006c:	4b0b      	ldr	r3, [pc, #44]	@ (801009c <tcp_receive+0x888>)
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	4322      	orrs	r2, r4
 8010072:	b292      	uxth	r2, r2
 8010074:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010076:	4b09      	ldr	r3, [pc, #36]	@ (801009c <tcp_receive+0x888>)
 8010078:	891c      	ldrh	r4, [r3, #8]
 801007a:	4b08      	ldr	r3, [pc, #32]	@ (801009c <tcp_receive+0x888>)
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	899b      	ldrh	r3, [r3, #12]
 8010080:	b29b      	uxth	r3, r3
 8010082:	4618      	mov	r0, r3
 8010084:	f7fa fe56 	bl	800ad34 <lwip_htons>
 8010088:	4603      	mov	r3, r0
 801008a:	b2db      	uxtb	r3, r3
 801008c:	f003 0303 	and.w	r3, r3, #3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00d      	beq.n	80100b0 <tcp_receive+0x89c>
 8010094:	2301      	movs	r3, #1
 8010096:	e00c      	b.n	80100b2 <tcp_receive+0x89e>
 8010098:	200087e8 	.word	0x200087e8
 801009c:	200087c8 	.word	0x200087c8
 80100a0:	200087f2 	.word	0x200087f2
 80100a4:	0801c748 	.word	0x0801c748
 80100a8:	0801caf0 	.word	0x0801caf0
 80100ac:	0801c794 	.word	0x0801c794
 80100b0:	2300      	movs	r3, #0
 80100b2:	4423      	add	r3, r4
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	4b98      	ldr	r3, [pc, #608]	@ (8010318 <tcp_receive+0xb04>)
 80100b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80100ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80100be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80100c4:	6938      	ldr	r0, [r7, #16]
 80100c6:	f7fd fd38 	bl	800db3a <tcp_seg_free>
            while (next &&
 80100ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00e      	beq.n	80100ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80100d0:	4b91      	ldr	r3, [pc, #580]	@ (8010318 <tcp_receive+0xb04>)
 80100d2:	881b      	ldrh	r3, [r3, #0]
 80100d4:	461a      	mov	r2, r3
 80100d6:	4b91      	ldr	r3, [pc, #580]	@ (801031c <tcp_receive+0xb08>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	441a      	add	r2, r3
 80100dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80100e4:	8909      	ldrh	r1, [r1, #8]
 80100e6:	440b      	add	r3, r1
 80100e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	da9b      	bge.n	8010026 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80100ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d059      	beq.n	80101a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80100f4:	4b88      	ldr	r3, [pc, #544]	@ (8010318 <tcp_receive+0xb04>)
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	461a      	mov	r2, r3
 80100fa:	4b88      	ldr	r3, [pc, #544]	@ (801031c <tcp_receive+0xb08>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	441a      	add	r2, r3
 8010100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010108:	2b00      	cmp	r3, #0
 801010a:	dd4d      	ble.n	80101a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801010c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	b29a      	uxth	r2, r3
 8010114:	4b81      	ldr	r3, [pc, #516]	@ (801031c <tcp_receive+0xb08>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	b29b      	uxth	r3, r3
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	b29a      	uxth	r2, r3
 801011e:	4b80      	ldr	r3, [pc, #512]	@ (8010320 <tcp_receive+0xb0c>)
 8010120:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010122:	4b7f      	ldr	r3, [pc, #508]	@ (8010320 <tcp_receive+0xb0c>)
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	899b      	ldrh	r3, [r3, #12]
 8010128:	b29b      	uxth	r3, r3
 801012a:	4618      	mov	r0, r3
 801012c:	f7fa fe02 	bl	800ad34 <lwip_htons>
 8010130:	4603      	mov	r3, r0
 8010132:	b2db      	uxtb	r3, r3
 8010134:	f003 0302 	and.w	r3, r3, #2
 8010138:	2b00      	cmp	r3, #0
 801013a:	d005      	beq.n	8010148 <tcp_receive+0x934>
                inseg.len -= 1;
 801013c:	4b78      	ldr	r3, [pc, #480]	@ (8010320 <tcp_receive+0xb0c>)
 801013e:	891b      	ldrh	r3, [r3, #8]
 8010140:	3b01      	subs	r3, #1
 8010142:	b29a      	uxth	r2, r3
 8010144:	4b76      	ldr	r3, [pc, #472]	@ (8010320 <tcp_receive+0xb0c>)
 8010146:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010148:	4b75      	ldr	r3, [pc, #468]	@ (8010320 <tcp_receive+0xb0c>)
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	4a74      	ldr	r2, [pc, #464]	@ (8010320 <tcp_receive+0xb0c>)
 801014e:	8912      	ldrh	r2, [r2, #8]
 8010150:	4611      	mov	r1, r2
 8010152:	4618      	mov	r0, r3
 8010154:	f7fc f854 	bl	800c200 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010158:	4b71      	ldr	r3, [pc, #452]	@ (8010320 <tcp_receive+0xb0c>)
 801015a:	891c      	ldrh	r4, [r3, #8]
 801015c:	4b70      	ldr	r3, [pc, #448]	@ (8010320 <tcp_receive+0xb0c>)
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	899b      	ldrh	r3, [r3, #12]
 8010162:	b29b      	uxth	r3, r3
 8010164:	4618      	mov	r0, r3
 8010166:	f7fa fde5 	bl	800ad34 <lwip_htons>
 801016a:	4603      	mov	r3, r0
 801016c:	b2db      	uxtb	r3, r3
 801016e:	f003 0303 	and.w	r3, r3, #3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <tcp_receive+0x966>
 8010176:	2301      	movs	r3, #1
 8010178:	e000      	b.n	801017c <tcp_receive+0x968>
 801017a:	2300      	movs	r3, #0
 801017c:	4423      	add	r3, r4
 801017e:	b29a      	uxth	r2, r3
 8010180:	4b65      	ldr	r3, [pc, #404]	@ (8010318 <tcp_receive+0xb04>)
 8010182:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010184:	4b64      	ldr	r3, [pc, #400]	@ (8010318 <tcp_receive+0xb04>)
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	461a      	mov	r2, r3
 801018a:	4b64      	ldr	r3, [pc, #400]	@ (801031c <tcp_receive+0xb08>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	441a      	add	r2, r3
 8010190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	429a      	cmp	r2, r3
 8010198:	d006      	beq.n	80101a8 <tcp_receive+0x994>
 801019a:	4b62      	ldr	r3, [pc, #392]	@ (8010324 <tcp_receive+0xb10>)
 801019c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80101a0:	4961      	ldr	r1, [pc, #388]	@ (8010328 <tcp_receive+0xb14>)
 80101a2:	4862      	ldr	r0, [pc, #392]	@ (801032c <tcp_receive+0xb18>)
 80101a4:	f008 f862 	bl	801826c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80101ac:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80101ae:	4b5a      	ldr	r3, [pc, #360]	@ (8010318 <tcp_receive+0xb04>)
 80101b0:	881b      	ldrh	r3, [r3, #0]
 80101b2:	461a      	mov	r2, r3
 80101b4:	4b59      	ldr	r3, [pc, #356]	@ (801031c <tcp_receive+0xb08>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	441a      	add	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80101c2:	4b55      	ldr	r3, [pc, #340]	@ (8010318 <tcp_receive+0xb04>)
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d206      	bcs.n	80101d8 <tcp_receive+0x9c4>
 80101ca:	4b56      	ldr	r3, [pc, #344]	@ (8010324 <tcp_receive+0xb10>)
 80101cc:	f240 6207 	movw	r2, #1543	@ 0x607
 80101d0:	4957      	ldr	r1, [pc, #348]	@ (8010330 <tcp_receive+0xb1c>)
 80101d2:	4856      	ldr	r0, [pc, #344]	@ (801032c <tcp_receive+0xb18>)
 80101d4:	f008 f84a 	bl	801826c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80101dc:	4b4e      	ldr	r3, [pc, #312]	@ (8010318 <tcp_receive+0xb04>)
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7fc ffc5 	bl	800d178 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80101ee:	4b4c      	ldr	r3, [pc, #304]	@ (8010320 <tcp_receive+0xb0c>)
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	891b      	ldrh	r3, [r3, #8]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d006      	beq.n	8010206 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80101f8:	4b49      	ldr	r3, [pc, #292]	@ (8010320 <tcp_receive+0xb0c>)
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	4a4d      	ldr	r2, [pc, #308]	@ (8010334 <tcp_receive+0xb20>)
 80101fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010200:	4b47      	ldr	r3, [pc, #284]	@ (8010320 <tcp_receive+0xb0c>)
 8010202:	2200      	movs	r2, #0
 8010204:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010206:	4b46      	ldr	r3, [pc, #280]	@ (8010320 <tcp_receive+0xb0c>)
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	899b      	ldrh	r3, [r3, #12]
 801020c:	b29b      	uxth	r3, r3
 801020e:	4618      	mov	r0, r3
 8010210:	f7fa fd90 	bl	800ad34 <lwip_htons>
 8010214:	4603      	mov	r3, r0
 8010216:	b2db      	uxtb	r3, r3
 8010218:	f003 0301 	and.w	r3, r3, #1
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 80b8 	beq.w	8010392 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010222:	4b45      	ldr	r3, [pc, #276]	@ (8010338 <tcp_receive+0xb24>)
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	f043 0320 	orr.w	r3, r3, #32
 801022a:	b2da      	uxtb	r2, r3
 801022c:	4b42      	ldr	r3, [pc, #264]	@ (8010338 <tcp_receive+0xb24>)
 801022e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010230:	e0af      	b.n	8010392 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010236:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	4a36      	ldr	r2, [pc, #216]	@ (801031c <tcp_receive+0xb08>)
 8010242:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	891b      	ldrh	r3, [r3, #8]
 8010248:	461c      	mov	r4, r3
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	899b      	ldrh	r3, [r3, #12]
 8010250:	b29b      	uxth	r3, r3
 8010252:	4618      	mov	r0, r3
 8010254:	f7fa fd6e 	bl	800ad34 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 0303 	and.w	r3, r3, #3
 8010260:	2b00      	cmp	r3, #0
 8010262:	d001      	beq.n	8010268 <tcp_receive+0xa54>
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <tcp_receive+0xa56>
 8010268:	2300      	movs	r3, #0
 801026a:	191a      	adds	r2, r3, r4
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010270:	441a      	add	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801027a:	461c      	mov	r4, r3
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	891b      	ldrh	r3, [r3, #8]
 8010280:	461d      	mov	r5, r3
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	899b      	ldrh	r3, [r3, #12]
 8010288:	b29b      	uxth	r3, r3
 801028a:	4618      	mov	r0, r3
 801028c:	f7fa fd52 	bl	800ad34 <lwip_htons>
 8010290:	4603      	mov	r3, r0
 8010292:	b2db      	uxtb	r3, r3
 8010294:	f003 0303 	and.w	r3, r3, #3
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <tcp_receive+0xa8c>
 801029c:	2301      	movs	r3, #1
 801029e:	e000      	b.n	80102a2 <tcp_receive+0xa8e>
 80102a0:	2300      	movs	r3, #0
 80102a2:	442b      	add	r3, r5
 80102a4:	429c      	cmp	r4, r3
 80102a6:	d206      	bcs.n	80102b6 <tcp_receive+0xaa2>
 80102a8:	4b1e      	ldr	r3, [pc, #120]	@ (8010324 <tcp_receive+0xb10>)
 80102aa:	f240 622b 	movw	r2, #1579	@ 0x62b
 80102ae:	4923      	ldr	r1, [pc, #140]	@ (801033c <tcp_receive+0xb28>)
 80102b0:	481e      	ldr	r0, [pc, #120]	@ (801032c <tcp_receive+0xb18>)
 80102b2:	f007 ffdb 	bl	801826c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	891b      	ldrh	r3, [r3, #8]
 80102ba:	461c      	mov	r4, r3
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	899b      	ldrh	r3, [r3, #12]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fa fd35 	bl	800ad34 <lwip_htons>
 80102ca:	4603      	mov	r3, r0
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	f003 0303 	and.w	r3, r3, #3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <tcp_receive+0xac6>
 80102d6:	2301      	movs	r3, #1
 80102d8:	e000      	b.n	80102dc <tcp_receive+0xac8>
 80102da:	2300      	movs	r3, #0
 80102dc:	1919      	adds	r1, r3, r4
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80102e2:	b28b      	uxth	r3, r1
 80102e4:	1ad3      	subs	r3, r2, r3
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7fc ff43 	bl	800d178 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	891b      	ldrh	r3, [r3, #8]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d028      	beq.n	801034e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80102fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010334 <tcp_receive+0xb20>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d01d      	beq.n	8010340 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010304:	4b0b      	ldr	r3, [pc, #44]	@ (8010334 <tcp_receive+0xb20>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	4619      	mov	r1, r3
 801030e:	4610      	mov	r0, r2
 8010310:	f7fc f9be 	bl	800c690 <pbuf_cat>
 8010314:	e018      	b.n	8010348 <tcp_receive+0xb34>
 8010316:	bf00      	nop
 8010318:	200087f2 	.word	0x200087f2
 801031c:	200087e8 	.word	0x200087e8
 8010320:	200087c8 	.word	0x200087c8
 8010324:	0801c748 	.word	0x0801c748
 8010328:	0801cb28 	.word	0x0801cb28
 801032c:	0801c794 	.word	0x0801c794
 8010330:	0801cb64 	.word	0x0801cb64
 8010334:	200087f8 	.word	0x200087f8
 8010338:	200087f5 	.word	0x200087f5
 801033c:	0801cb84 	.word	0x0801cb84
            } else {
              recv_data = cseg->p;
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	4a70      	ldr	r2, [pc, #448]	@ (8010508 <tcp_receive+0xcf4>)
 8010346:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	2200      	movs	r2, #0
 801034c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	899b      	ldrh	r3, [r3, #12]
 8010354:	b29b      	uxth	r3, r3
 8010356:	4618      	mov	r0, r3
 8010358:	f7fa fcec 	bl	800ad34 <lwip_htons>
 801035c:	4603      	mov	r3, r0
 801035e:	b2db      	uxtb	r3, r3
 8010360:	f003 0301 	and.w	r3, r3, #1
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00d      	beq.n	8010384 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010368:	4b68      	ldr	r3, [pc, #416]	@ (801050c <tcp_receive+0xcf8>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	f043 0320 	orr.w	r3, r3, #32
 8010370:	b2da      	uxtb	r2, r3
 8010372:	4b66      	ldr	r3, [pc, #408]	@ (801050c <tcp_receive+0xcf8>)
 8010374:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	7d1b      	ldrb	r3, [r3, #20]
 801037a:	2b04      	cmp	r3, #4
 801037c:	d102      	bne.n	8010384 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2207      	movs	r2, #7
 8010382:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801038c:	68b8      	ldr	r0, [r7, #8]
 801038e:	f7fd fbd4 	bl	800db3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010396:	2b00      	cmp	r3, #0
 8010398:	d008      	beq.n	80103ac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80103a6:	429a      	cmp	r2, r3
 80103a8:	f43f af43 	beq.w	8010232 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	8b5b      	ldrh	r3, [r3, #26]
 80103b0:	f003 0301 	and.w	r3, r3, #1
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00e      	beq.n	80103d6 <tcp_receive+0xbc2>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	8b5b      	ldrh	r3, [r3, #26]
 80103bc:	f023 0301 	bic.w	r3, r3, #1
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	835a      	strh	r2, [r3, #26]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8b5b      	ldrh	r3, [r3, #26]
 80103ca:	f043 0302 	orr.w	r3, r3, #2
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103d4:	e187      	b.n	80106e6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	8b5b      	ldrh	r3, [r3, #26]
 80103da:	f043 0301 	orr.w	r3, r3, #1
 80103de:	b29a      	uxth	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103e4:	e17f      	b.n	80106e6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d106      	bne.n	80103fc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80103ee:	4848      	ldr	r0, [pc, #288]	@ (8010510 <tcp_receive+0xcfc>)
 80103f0:	f7fd fbbc 	bl	800db6c <tcp_seg_copy>
 80103f4:	4602      	mov	r2, r0
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80103fa:	e16c      	b.n	80106d6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80103fc:	2300      	movs	r3, #0
 80103fe:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010406:	e156      	b.n	80106b6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	685a      	ldr	r2, [r3, #4]
 801040e:	4b41      	ldr	r3, [pc, #260]	@ (8010514 <tcp_receive+0xd00>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	429a      	cmp	r2, r3
 8010414:	d11d      	bne.n	8010452 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010416:	4b3e      	ldr	r3, [pc, #248]	@ (8010510 <tcp_receive+0xcfc>)
 8010418:	891a      	ldrh	r2, [r3, #8]
 801041a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801041c:	891b      	ldrh	r3, [r3, #8]
 801041e:	429a      	cmp	r2, r3
 8010420:	f240 814e 	bls.w	80106c0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010424:	483a      	ldr	r0, [pc, #232]	@ (8010510 <tcp_receive+0xcfc>)
 8010426:	f7fd fba1 	bl	800db6c <tcp_seg_copy>
 801042a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 8148 	beq.w	80106c4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010436:	2b00      	cmp	r3, #0
 8010438:	d003      	beq.n	8010442 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801043a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043c:	697a      	ldr	r2, [r7, #20]
 801043e:	601a      	str	r2, [r3, #0]
 8010440:	e002      	b.n	8010448 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010448:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801044a:	6978      	ldr	r0, [r7, #20]
 801044c:	f7ff f8de 	bl	800f60c <tcp_oos_insert_segment>
                }
                break;
 8010450:	e138      	b.n	80106c4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010454:	2b00      	cmp	r3, #0
 8010456:	d117      	bne.n	8010488 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010458:	4b2e      	ldr	r3, [pc, #184]	@ (8010514 <tcp_receive+0xd00>)
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	2b00      	cmp	r3, #0
 8010466:	da57      	bge.n	8010518 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010468:	4829      	ldr	r0, [pc, #164]	@ (8010510 <tcp_receive+0xcfc>)
 801046a:	f7fd fb7f 	bl	800db6c <tcp_seg_copy>
 801046e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 8128 	beq.w	80106c8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	69ba      	ldr	r2, [r7, #24]
 801047c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801047e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010480:	69b8      	ldr	r0, [r7, #24]
 8010482:	f7ff f8c3 	bl	800f60c <tcp_oos_insert_segment>
                  }
                  break;
 8010486:	e11f      	b.n	80106c8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010488:	4b22      	ldr	r3, [pc, #136]	@ (8010514 <tcp_receive+0xd00>)
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	3b01      	subs	r3, #1
 8010496:	2b00      	cmp	r3, #0
 8010498:	db3e      	blt.n	8010518 <tcp_receive+0xd04>
 801049a:	4b1e      	ldr	r3, [pc, #120]	@ (8010514 <tcp_receive+0xd00>)
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	3301      	adds	r3, #1
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	dc35      	bgt.n	8010518 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80104ac:	4818      	ldr	r0, [pc, #96]	@ (8010510 <tcp_receive+0xcfc>)
 80104ae:	f7fd fb5d 	bl	800db6c <tcp_seg_copy>
 80104b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 8108 	beq.w	80106cc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80104bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104c4:	8912      	ldrh	r2, [r2, #8]
 80104c6:	441a      	add	r2, r3
 80104c8:	4b12      	ldr	r3, [pc, #72]	@ (8010514 <tcp_receive+0xd00>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	dd12      	ble.n	80104f8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80104d2:	4b10      	ldr	r3, [pc, #64]	@ (8010514 <tcp_receive+0xd00>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80104e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ea:	685a      	ldr	r2, [r3, #4]
 80104ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ee:	891b      	ldrh	r3, [r3, #8]
 80104f0:	4619      	mov	r1, r3
 80104f2:	4610      	mov	r0, r2
 80104f4:	f7fb fe84 	bl	800c200 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80104f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104fa:	69fa      	ldr	r2, [r7, #28]
 80104fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80104fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010500:	69f8      	ldr	r0, [r7, #28]
 8010502:	f7ff f883 	bl	800f60c <tcp_oos_insert_segment>
                  }
                  break;
 8010506:	e0e1      	b.n	80106cc <tcp_receive+0xeb8>
 8010508:	200087f8 	.word	0x200087f8
 801050c:	200087f5 	.word	0x200087f5
 8010510:	200087c8 	.word	0x200087c8
 8010514:	200087e8 	.word	0x200087e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801051c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	f040 80c5 	bne.w	80106b0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010526:	4b7f      	ldr	r3, [pc, #508]	@ (8010724 <tcp_receive+0xf10>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010532:	2b00      	cmp	r3, #0
 8010534:	f340 80bc 	ble.w	80106b0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	899b      	ldrh	r3, [r3, #12]
 801053e:	b29b      	uxth	r3, r3
 8010540:	4618      	mov	r0, r3
 8010542:	f7fa fbf7 	bl	800ad34 <lwip_htons>
 8010546:	4603      	mov	r3, r0
 8010548:	b2db      	uxtb	r3, r3
 801054a:	f003 0301 	and.w	r3, r3, #1
 801054e:	2b00      	cmp	r3, #0
 8010550:	f040 80be 	bne.w	80106d0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010554:	4874      	ldr	r0, [pc, #464]	@ (8010728 <tcp_receive+0xf14>)
 8010556:	f7fd fb09 	bl	800db6c <tcp_seg_copy>
 801055a:	4602      	mov	r2, r0
 801055c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	f000 80b5 	beq.w	80106d4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801056a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010572:	8912      	ldrh	r2, [r2, #8]
 8010574:	441a      	add	r2, r3
 8010576:	4b6b      	ldr	r3, [pc, #428]	@ (8010724 <tcp_receive+0xf10>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	dd12      	ble.n	80105a6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010580:	4b68      	ldr	r3, [pc, #416]	@ (8010724 <tcp_receive+0xf10>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	b29a      	uxth	r2, r3
 8010586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	b29b      	uxth	r3, r3
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	b29a      	uxth	r2, r3
 8010592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010594:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010598:	685a      	ldr	r2, [r3, #4]
 801059a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059c:	891b      	ldrh	r3, [r3, #8]
 801059e:	4619      	mov	r1, r3
 80105a0:	4610      	mov	r0, r2
 80105a2:	f7fb fe2d 	bl	800c200 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80105a6:	4b61      	ldr	r3, [pc, #388]	@ (801072c <tcp_receive+0xf18>)
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	461a      	mov	r2, r3
 80105ac:	4b5d      	ldr	r3, [pc, #372]	@ (8010724 <tcp_receive+0xf10>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	441a      	add	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b6:	6879      	ldr	r1, [r7, #4]
 80105b8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80105ba:	440b      	add	r3, r1
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f340 8088 	ble.w	80106d4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80105c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	899b      	ldrh	r3, [r3, #12]
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fa fbb0 	bl	800ad34 <lwip_htons>
 80105d4:	4603      	mov	r3, r0
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	f003 0301 	and.w	r3, r3, #1
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d021      	beq.n	8010624 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80105e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	899b      	ldrh	r3, [r3, #12]
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	b21b      	sxth	r3, r3
 80105ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80105f0:	b21c      	sxth	r4, r3
 80105f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	899b      	ldrh	r3, [r3, #12]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fa fb99 	bl	800ad34 <lwip_htons>
 8010602:	4603      	mov	r3, r0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801060a:	b29b      	uxth	r3, r3
 801060c:	4618      	mov	r0, r3
 801060e:	f7fa fb91 	bl	800ad34 <lwip_htons>
 8010612:	4603      	mov	r3, r0
 8010614:	b21b      	sxth	r3, r3
 8010616:	4323      	orrs	r3, r4
 8010618:	b21a      	sxth	r2, r3
 801061a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	b292      	uxth	r2, r2
 8010622:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010628:	b29a      	uxth	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801062e:	4413      	add	r3, r2
 8010630:	b299      	uxth	r1, r3
 8010632:	4b3c      	ldr	r3, [pc, #240]	@ (8010724 <tcp_receive+0xf10>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	b29a      	uxth	r2, r3
 8010638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	1a8a      	subs	r2, r1, r2
 801063e:	b292      	uxth	r2, r2
 8010640:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	685a      	ldr	r2, [r3, #4]
 8010648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	891b      	ldrh	r3, [r3, #8]
 801064e:	4619      	mov	r1, r3
 8010650:	4610      	mov	r0, r2
 8010652:	f7fb fdd5 	bl	800c200 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	891c      	ldrh	r4, [r3, #8]
 801065c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	899b      	ldrh	r3, [r3, #12]
 8010664:	b29b      	uxth	r3, r3
 8010666:	4618      	mov	r0, r3
 8010668:	f7fa fb64 	bl	800ad34 <lwip_htons>
 801066c:	4603      	mov	r3, r0
 801066e:	b2db      	uxtb	r3, r3
 8010670:	f003 0303 	and.w	r3, r3, #3
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <tcp_receive+0xe68>
 8010678:	2301      	movs	r3, #1
 801067a:	e000      	b.n	801067e <tcp_receive+0xe6a>
 801067c:	2300      	movs	r3, #0
 801067e:	4423      	add	r3, r4
 8010680:	b29a      	uxth	r2, r3
 8010682:	4b2a      	ldr	r3, [pc, #168]	@ (801072c <tcp_receive+0xf18>)
 8010684:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010686:	4b29      	ldr	r3, [pc, #164]	@ (801072c <tcp_receive+0xf18>)
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	461a      	mov	r2, r3
 801068c:	4b25      	ldr	r3, [pc, #148]	@ (8010724 <tcp_receive+0xf10>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	441a      	add	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010696:	6879      	ldr	r1, [r7, #4]
 8010698:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801069a:	440b      	add	r3, r1
 801069c:	429a      	cmp	r2, r3
 801069e:	d019      	beq.n	80106d4 <tcp_receive+0xec0>
 80106a0:	4b23      	ldr	r3, [pc, #140]	@ (8010730 <tcp_receive+0xf1c>)
 80106a2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80106a6:	4923      	ldr	r1, [pc, #140]	@ (8010734 <tcp_receive+0xf20>)
 80106a8:	4823      	ldr	r0, [pc, #140]	@ (8010738 <tcp_receive+0xf24>)
 80106aa:	f007 fddf 	bl	801826c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80106ae:	e011      	b.n	80106d4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80106b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f47f aea5 	bne.w	8010408 <tcp_receive+0xbf4>
 80106be:	e00a      	b.n	80106d6 <tcp_receive+0xec2>
                break;
 80106c0:	bf00      	nop
 80106c2:	e008      	b.n	80106d6 <tcp_receive+0xec2>
                break;
 80106c4:	bf00      	nop
 80106c6:	e006      	b.n	80106d6 <tcp_receive+0xec2>
                  break;
 80106c8:	bf00      	nop
 80106ca:	e004      	b.n	80106d6 <tcp_receive+0xec2>
                  break;
 80106cc:	bf00      	nop
 80106ce:	e002      	b.n	80106d6 <tcp_receive+0xec2>
                  break;
 80106d0:	bf00      	nop
 80106d2:	e000      	b.n	80106d6 <tcp_receive+0xec2>
                break;
 80106d4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f001 fa30 	bl	8011b3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80106dc:	e003      	b.n	80106e6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f001 fa2c 	bl	8011b3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80106e4:	e01a      	b.n	801071c <tcp_receive+0xf08>
 80106e6:	e019      	b.n	801071c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80106e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010724 <tcp_receive+0xf10>)
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	db0a      	blt.n	801070c <tcp_receive+0xef8>
 80106f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010724 <tcp_receive+0xf10>)
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106fe:	6879      	ldr	r1, [r7, #4]
 8010700:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010702:	440b      	add	r3, r1
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	3301      	adds	r3, #1
 8010708:	2b00      	cmp	r3, #0
 801070a:	dd07      	ble.n	801071c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	8b5b      	ldrh	r3, [r3, #26]
 8010710:	f043 0302 	orr.w	r3, r3, #2
 8010714:	b29a      	uxth	r2, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801071a:	e7ff      	b.n	801071c <tcp_receive+0xf08>
 801071c:	bf00      	nop
 801071e:	3750      	adds	r7, #80	@ 0x50
 8010720:	46bd      	mov	sp, r7
 8010722:	bdb0      	pop	{r4, r5, r7, pc}
 8010724:	200087e8 	.word	0x200087e8
 8010728:	200087c8 	.word	0x200087c8
 801072c:	200087f2 	.word	0x200087f2
 8010730:	0801c748 	.word	0x0801c748
 8010734:	0801caf0 	.word	0x0801caf0
 8010738:	0801c794 	.word	0x0801c794

0801073c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010742:	4b15      	ldr	r3, [pc, #84]	@ (8010798 <tcp_get_next_optbyte+0x5c>)
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	b291      	uxth	r1, r2
 801074a:	4a13      	ldr	r2, [pc, #76]	@ (8010798 <tcp_get_next_optbyte+0x5c>)
 801074c:	8011      	strh	r1, [r2, #0]
 801074e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010750:	4b12      	ldr	r3, [pc, #72]	@ (801079c <tcp_get_next_optbyte+0x60>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <tcp_get_next_optbyte+0x26>
 8010758:	4b11      	ldr	r3, [pc, #68]	@ (80107a0 <tcp_get_next_optbyte+0x64>)
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	88fa      	ldrh	r2, [r7, #6]
 801075e:	429a      	cmp	r2, r3
 8010760:	d208      	bcs.n	8010774 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010762:	4b10      	ldr	r3, [pc, #64]	@ (80107a4 <tcp_get_next_optbyte+0x68>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3314      	adds	r3, #20
 8010768:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801076a:	88fb      	ldrh	r3, [r7, #6]
 801076c:	683a      	ldr	r2, [r7, #0]
 801076e:	4413      	add	r3, r2
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	e00b      	b.n	801078c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010774:	88fb      	ldrh	r3, [r7, #6]
 8010776:	b2da      	uxtb	r2, r3
 8010778:	4b09      	ldr	r3, [pc, #36]	@ (80107a0 <tcp_get_next_optbyte+0x64>)
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	b2db      	uxtb	r3, r3
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010782:	4b06      	ldr	r3, [pc, #24]	@ (801079c <tcp_get_next_optbyte+0x60>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	797b      	ldrb	r3, [r7, #5]
 8010788:	4413      	add	r3, r2
 801078a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801078c:	4618      	mov	r0, r3
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr
 8010798:	200087e4 	.word	0x200087e4
 801079c:	200087e0 	.word	0x200087e0
 80107a0:	200087de 	.word	0x200087de
 80107a4:	200087d8 	.word	0x200087d8

080107a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d106      	bne.n	80107c4 <tcp_parseopt+0x1c>
 80107b6:	4b32      	ldr	r3, [pc, #200]	@ (8010880 <tcp_parseopt+0xd8>)
 80107b8:	f240 727d 	movw	r2, #1917	@ 0x77d
 80107bc:	4931      	ldr	r1, [pc, #196]	@ (8010884 <tcp_parseopt+0xdc>)
 80107be:	4832      	ldr	r0, [pc, #200]	@ (8010888 <tcp_parseopt+0xe0>)
 80107c0:	f007 fd54 	bl	801826c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80107c4:	4b31      	ldr	r3, [pc, #196]	@ (801088c <tcp_parseopt+0xe4>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d056      	beq.n	801087a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80107cc:	4b30      	ldr	r3, [pc, #192]	@ (8010890 <tcp_parseopt+0xe8>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	801a      	strh	r2, [r3, #0]
 80107d2:	e046      	b.n	8010862 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80107d4:	f7ff ffb2 	bl	801073c <tcp_get_next_optbyte>
 80107d8:	4603      	mov	r3, r0
 80107da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80107dc:	7bfb      	ldrb	r3, [r7, #15]
 80107de:	2b02      	cmp	r3, #2
 80107e0:	d006      	beq.n	80107f0 <tcp_parseopt+0x48>
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	dc2a      	bgt.n	801083c <tcp_parseopt+0x94>
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d042      	beq.n	8010870 <tcp_parseopt+0xc8>
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d038      	beq.n	8010860 <tcp_parseopt+0xb8>
 80107ee:	e025      	b.n	801083c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80107f0:	f7ff ffa4 	bl	801073c <tcp_get_next_optbyte>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b04      	cmp	r3, #4
 80107f8:	d13c      	bne.n	8010874 <tcp_parseopt+0xcc>
 80107fa:	4b25      	ldr	r3, [pc, #148]	@ (8010890 <tcp_parseopt+0xe8>)
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	3301      	adds	r3, #1
 8010800:	4a22      	ldr	r2, [pc, #136]	@ (801088c <tcp_parseopt+0xe4>)
 8010802:	8812      	ldrh	r2, [r2, #0]
 8010804:	4293      	cmp	r3, r2
 8010806:	da35      	bge.n	8010874 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010808:	f7ff ff98 	bl	801073c <tcp_get_next_optbyte>
 801080c:	4603      	mov	r3, r0
 801080e:	021b      	lsls	r3, r3, #8
 8010810:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010812:	f7ff ff93 	bl	801073c <tcp_get_next_optbyte>
 8010816:	4603      	mov	r3, r0
 8010818:	461a      	mov	r2, r3
 801081a:	89bb      	ldrh	r3, [r7, #12]
 801081c:	4313      	orrs	r3, r2
 801081e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010820:	89bb      	ldrh	r3, [r7, #12]
 8010822:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010826:	d804      	bhi.n	8010832 <tcp_parseopt+0x8a>
 8010828:	89bb      	ldrh	r3, [r7, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d001      	beq.n	8010832 <tcp_parseopt+0x8a>
 801082e:	89ba      	ldrh	r2, [r7, #12]
 8010830:	e001      	b.n	8010836 <tcp_parseopt+0x8e>
 8010832:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801083a:	e012      	b.n	8010862 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801083c:	f7ff ff7e 	bl	801073c <tcp_get_next_optbyte>
 8010840:	4603      	mov	r3, r0
 8010842:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010844:	7afb      	ldrb	r3, [r7, #11]
 8010846:	2b01      	cmp	r3, #1
 8010848:	d916      	bls.n	8010878 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801084a:	7afb      	ldrb	r3, [r7, #11]
 801084c:	b29a      	uxth	r2, r3
 801084e:	4b10      	ldr	r3, [pc, #64]	@ (8010890 <tcp_parseopt+0xe8>)
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	4413      	add	r3, r2
 8010854:	b29b      	uxth	r3, r3
 8010856:	3b02      	subs	r3, #2
 8010858:	b29a      	uxth	r2, r3
 801085a:	4b0d      	ldr	r3, [pc, #52]	@ (8010890 <tcp_parseopt+0xe8>)
 801085c:	801a      	strh	r2, [r3, #0]
 801085e:	e000      	b.n	8010862 <tcp_parseopt+0xba>
          break;
 8010860:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010862:	4b0b      	ldr	r3, [pc, #44]	@ (8010890 <tcp_parseopt+0xe8>)
 8010864:	881a      	ldrh	r2, [r3, #0]
 8010866:	4b09      	ldr	r3, [pc, #36]	@ (801088c <tcp_parseopt+0xe4>)
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	d3b2      	bcc.n	80107d4 <tcp_parseopt+0x2c>
 801086e:	e004      	b.n	801087a <tcp_parseopt+0xd2>
          return;
 8010870:	bf00      	nop
 8010872:	e002      	b.n	801087a <tcp_parseopt+0xd2>
            return;
 8010874:	bf00      	nop
 8010876:	e000      	b.n	801087a <tcp_parseopt+0xd2>
            return;
 8010878:	bf00      	nop
      }
    }
  }
}
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	0801c748 	.word	0x0801c748
 8010884:	0801cbac 	.word	0x0801cbac
 8010888:	0801c794 	.word	0x0801c794
 801088c:	200087dc 	.word	0x200087dc
 8010890:	200087e4 	.word	0x200087e4

08010894 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010894:	b480      	push	{r7}
 8010896:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010898:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <tcp_trigger_input_pcb_close+0x1c>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	f043 0310 	orr.w	r3, r3, #16
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	4b03      	ldr	r3, [pc, #12]	@ (80108b0 <tcp_trigger_input_pcb_close+0x1c>)
 80108a4:	701a      	strb	r2, [r3, #0]
}
 80108a6:	bf00      	nop
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr
 80108b0:	200087f5 	.word	0x200087f5

080108b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <tcp_route+0x28>
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	7a1b      	ldrb	r3, [r3, #8]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d006      	beq.n	80108dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	7a1b      	ldrb	r3, [r3, #8]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fb faba 	bl	800be4c <netif_get_by_index>
 80108d8:	4603      	mov	r3, r0
 80108da:	e003      	b.n	80108e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f003 fe01 	bl	80144e4 <ip4_route>
 80108e2:	4603      	mov	r3, r0
  }
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	603b      	str	r3, [r7, #0]
 80108f8:	4613      	mov	r3, r2
 80108fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d105      	bne.n	801090e <tcp_create_segment+0x22>
 8010902:	4b43      	ldr	r3, [pc, #268]	@ (8010a10 <tcp_create_segment+0x124>)
 8010904:	22a3      	movs	r2, #163	@ 0xa3
 8010906:	4943      	ldr	r1, [pc, #268]	@ (8010a14 <tcp_create_segment+0x128>)
 8010908:	4843      	ldr	r0, [pc, #268]	@ (8010a18 <tcp_create_segment+0x12c>)
 801090a:	f007 fcaf 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d105      	bne.n	8010920 <tcp_create_segment+0x34>
 8010914:	4b3e      	ldr	r3, [pc, #248]	@ (8010a10 <tcp_create_segment+0x124>)
 8010916:	22a4      	movs	r2, #164	@ 0xa4
 8010918:	4940      	ldr	r1, [pc, #256]	@ (8010a1c <tcp_create_segment+0x130>)
 801091a:	483f      	ldr	r0, [pc, #252]	@ (8010a18 <tcp_create_segment+0x12c>)
 801091c:	f007 fca6 	bl	801826c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010920:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	b2db      	uxtb	r3, r3
 8010928:	f003 0304 	and.w	r3, r3, #4
 801092c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801092e:	2003      	movs	r0, #3
 8010930:	f7fa fee8 	bl	800b704 <memp_malloc>
 8010934:	6138      	str	r0, [r7, #16]
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d104      	bne.n	8010946 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801093c:	68b8      	ldr	r0, [r7, #8]
 801093e:	f7fb fde5 	bl	800c50c <pbuf_free>
    return NULL;
 8010942:	2300      	movs	r3, #0
 8010944:	e060      	b.n	8010a08 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801094c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	2200      	movs	r2, #0
 8010952:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	891a      	ldrh	r2, [r3, #8]
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	b29b      	uxth	r3, r3
 8010962:	429a      	cmp	r2, r3
 8010964:	d205      	bcs.n	8010972 <tcp_create_segment+0x86>
 8010966:	4b2a      	ldr	r3, [pc, #168]	@ (8010a10 <tcp_create_segment+0x124>)
 8010968:	22b0      	movs	r2, #176	@ 0xb0
 801096a:	492d      	ldr	r1, [pc, #180]	@ (8010a20 <tcp_create_segment+0x134>)
 801096c:	482a      	ldr	r0, [pc, #168]	@ (8010a18 <tcp_create_segment+0x12c>)
 801096e:	f007 fc7d 	bl	801826c <iprintf>
  seg->len = p->tot_len - optlen;
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	891a      	ldrh	r2, [r3, #8]
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	b29b      	uxth	r3, r3
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	b29a      	uxth	r2, r3
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010982:	2114      	movs	r1, #20
 8010984:	68b8      	ldr	r0, [r7, #8]
 8010986:	f7fb fd2b 	bl	800c3e0 <pbuf_add_header>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d004      	beq.n	801099a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010990:	6938      	ldr	r0, [r7, #16]
 8010992:	f7fd f8d2 	bl	800db3a <tcp_seg_free>
    return NULL;
 8010996:	2300      	movs	r3, #0
 8010998:	e036      	b.n	8010a08 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	8ada      	ldrh	r2, [r3, #22]
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	68dc      	ldr	r4, [r3, #12]
 80109ac:	4610      	mov	r0, r2
 80109ae:	f7fa f9c1 	bl	800ad34 <lwip_htons>
 80109b2:	4603      	mov	r3, r0
 80109b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	8b1a      	ldrh	r2, [r3, #24]
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	68dc      	ldr	r4, [r3, #12]
 80109be:	4610      	mov	r0, r2
 80109c0:	f7fa f9b8 	bl	800ad34 <lwip_htons>
 80109c4:	4603      	mov	r3, r0
 80109c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	68dc      	ldr	r4, [r3, #12]
 80109cc:	6838      	ldr	r0, [r7, #0]
 80109ce:	f7fa f9c6 	bl	800ad5e <lwip_htonl>
 80109d2:	4603      	mov	r3, r0
 80109d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
 80109d8:	089b      	lsrs	r3, r3, #2
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	3305      	adds	r3, #5
 80109de:	b29b      	uxth	r3, r3
 80109e0:	031b      	lsls	r3, r3, #12
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	79fb      	ldrb	r3, [r7, #7]
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	4313      	orrs	r3, r2
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	68dc      	ldr	r4, [r3, #12]
 80109f0:	4610      	mov	r0, r2
 80109f2:	f7fa f99f 	bl	800ad34 <lwip_htons>
 80109f6:	4603      	mov	r3, r0
 80109f8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	749a      	strb	r2, [r3, #18]
 8010a02:	2200      	movs	r2, #0
 8010a04:	74da      	strb	r2, [r3, #19]
  return seg;
 8010a06:	693b      	ldr	r3, [r7, #16]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	371c      	adds	r7, #28
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd90      	pop	{r4, r7, pc}
 8010a10:	0801cbc8 	.word	0x0801cbc8
 8010a14:	0801cbfc 	.word	0x0801cbfc
 8010a18:	0801cc1c 	.word	0x0801cc1c
 8010a1c:	0801cc44 	.word	0x0801cc44
 8010a20:	0801cc68 	.word	0x0801cc68

08010a24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010a24:	b590      	push	{r4, r7, lr}
 8010a26:	b08b      	sub	sp, #44	@ 0x2c
 8010a28:	af02      	add	r7, sp, #8
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
 8010a34:	2300      	movs	r3, #0
 8010a36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d106      	bne.n	8010a50 <tcp_split_unsent_seg+0x2c>
 8010a42:	4b95      	ldr	r3, [pc, #596]	@ (8010c98 <tcp_split_unsent_seg+0x274>)
 8010a44:	f240 324b 	movw	r2, #843	@ 0x34b
 8010a48:	4994      	ldr	r1, [pc, #592]	@ (8010c9c <tcp_split_unsent_seg+0x278>)
 8010a4a:	4895      	ldr	r0, [pc, #596]	@ (8010ca0 <tcp_split_unsent_seg+0x27c>)
 8010a4c:	f007 fc0e 	bl	801826c <iprintf>

  useg = pcb->unsent;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d102      	bne.n	8010a62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a60:	e116      	b.n	8010c90 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010a62:	887b      	ldrh	r3, [r7, #2]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d109      	bne.n	8010a7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010a68:	4b8b      	ldr	r3, [pc, #556]	@ (8010c98 <tcp_split_unsent_seg+0x274>)
 8010a6a:	f240 3253 	movw	r2, #851	@ 0x353
 8010a6e:	498d      	ldr	r1, [pc, #564]	@ (8010ca4 <tcp_split_unsent_seg+0x280>)
 8010a70:	488b      	ldr	r0, [pc, #556]	@ (8010ca0 <tcp_split_unsent_seg+0x27c>)
 8010a72:	f007 fbfb 	bl	801826c <iprintf>
    return ERR_VAL;
 8010a76:	f06f 0305 	mvn.w	r3, #5
 8010a7a:	e109      	b.n	8010c90 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	891b      	ldrh	r3, [r3, #8]
 8010a80:	887a      	ldrh	r2, [r7, #2]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d301      	bcc.n	8010a8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	e102      	b.n	8010c90 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a8e:	887a      	ldrh	r2, [r7, #2]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d906      	bls.n	8010aa2 <tcp_split_unsent_seg+0x7e>
 8010a94:	4b80      	ldr	r3, [pc, #512]	@ (8010c98 <tcp_split_unsent_seg+0x274>)
 8010a96:	f240 325b 	movw	r2, #859	@ 0x35b
 8010a9a:	4983      	ldr	r1, [pc, #524]	@ (8010ca8 <tcp_split_unsent_seg+0x284>)
 8010a9c:	4880      	ldr	r0, [pc, #512]	@ (8010ca0 <tcp_split_unsent_seg+0x27c>)
 8010a9e:	f007 fbe5 	bl	801826c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	891b      	ldrh	r3, [r3, #8]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d106      	bne.n	8010ab8 <tcp_split_unsent_seg+0x94>
 8010aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8010c98 <tcp_split_unsent_seg+0x274>)
 8010aac:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010ab0:	497e      	ldr	r1, [pc, #504]	@ (8010cac <tcp_split_unsent_seg+0x288>)
 8010ab2:	487b      	ldr	r0, [pc, #492]	@ (8010ca0 <tcp_split_unsent_seg+0x27c>)
 8010ab4:	f007 fbda 	bl	801826c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	7a9b      	ldrb	r3, [r3, #10]
 8010abc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010abe:	7bfb      	ldrb	r3, [r7, #15]
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	f003 0304 	and.w	r3, r3, #4
 8010ac8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	891a      	ldrh	r2, [r3, #8]
 8010ace:	887b      	ldrh	r3, [r7, #2]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010ad4:	7bbb      	ldrb	r3, [r7, #14]
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	89bb      	ldrh	r3, [r7, #12]
 8010ada:	4413      	add	r3, r2
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	2036      	movs	r0, #54	@ 0x36
 8010ae6:	f7fb fa2d 	bl	800bf44 <pbuf_alloc>
 8010aea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 80b7 	beq.w	8010c62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	891a      	ldrh	r2, [r3, #8]
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	891b      	ldrh	r3, [r3, #8]
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	887b      	ldrh	r3, [r7, #2]
 8010b04:	4413      	add	r3, r2
 8010b06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	6858      	ldr	r0, [r3, #4]
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	685a      	ldr	r2, [r3, #4]
 8010b10:	7bbb      	ldrb	r3, [r7, #14]
 8010b12:	18d1      	adds	r1, r2, r3
 8010b14:	897b      	ldrh	r3, [r7, #10]
 8010b16:	89ba      	ldrh	r2, [r7, #12]
 8010b18:	f7fb fef2 	bl	800c900 <pbuf_copy_partial>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	461a      	mov	r2, r3
 8010b20:	89bb      	ldrh	r3, [r7, #12]
 8010b22:	4293      	cmp	r3, r2
 8010b24:	f040 809f 	bne.w	8010c66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fa f8ff 	bl	800ad34 <lwip_htons>
 8010b36:	4603      	mov	r3, r0
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010b40:	2300      	movs	r3, #0
 8010b42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010b44:	7efb      	ldrb	r3, [r7, #27]
 8010b46:	f003 0308 	and.w	r3, r3, #8
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010b4e:	7efb      	ldrb	r3, [r7, #27]
 8010b50:	f023 0308 	bic.w	r3, r3, #8
 8010b54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010b56:	7ebb      	ldrb	r3, [r7, #26]
 8010b58:	f043 0308 	orr.w	r3, r3, #8
 8010b5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010b5e:	7efb      	ldrb	r3, [r7, #27]
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d007      	beq.n	8010b78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010b68:	7efb      	ldrb	r3, [r7, #27]
 8010b6a:	f023 0301 	bic.w	r3, r3, #1
 8010b6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010b70:	7ebb      	ldrb	r3, [r7, #26]
 8010b72:	f043 0301 	orr.w	r3, r3, #1
 8010b76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fa f8ed 	bl	800ad5e <lwip_htonl>
 8010b84:	4602      	mov	r2, r0
 8010b86:	887b      	ldrh	r3, [r7, #2]
 8010b88:	18d1      	adds	r1, r2, r3
 8010b8a:	7eba      	ldrb	r2, [r7, #26]
 8010b8c:	7bfb      	ldrb	r3, [r7, #15]
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	460b      	mov	r3, r1
 8010b92:	6939      	ldr	r1, [r7, #16]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff fea9 	bl	80108ec <tcp_create_segment>
 8010b9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d063      	beq.n	8010c6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fb fd38 	bl	800c61c <pbuf_clen>
 8010bac:	4603      	mov	r3, r0
 8010bae:	461a      	mov	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010bb6:	1a9b      	subs	r3, r3, r2
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	6858      	ldr	r0, [r3, #4]
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	891a      	ldrh	r2, [r3, #8]
 8010bca:	89bb      	ldrh	r3, [r7, #12]
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	f7fb fb15 	bl	800c200 <pbuf_realloc>
  useg->len -= remainder;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	891a      	ldrh	r2, [r3, #8]
 8010bda:	89bb      	ldrh	r3, [r7, #12]
 8010bdc:	1ad3      	subs	r3, r2, r3
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	899b      	ldrh	r3, [r3, #12]
 8010bea:	b29c      	uxth	r4, r3
 8010bec:	7efb      	ldrb	r3, [r7, #27]
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fa f89f 	bl	800ad34 <lwip_htons>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	4322      	orrs	r2, r4
 8010c00:	b292      	uxth	r2, r2
 8010c02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fb fd07 	bl	800c61c <pbuf_clen>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	461a      	mov	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c18:	4413      	add	r3, r2
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fb fcf8 	bl	800c61c <pbuf_clen>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	461a      	mov	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c36:	4413      	add	r3, r2
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	69fa      	ldr	r2, [r7, #28]
 8010c4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d103      	bne.n	8010c5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e016      	b.n	8010c90 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010c62:	bf00      	nop
 8010c64:	e002      	b.n	8010c6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c66:	bf00      	nop
 8010c68:	e000      	b.n	8010c6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d006      	beq.n	8010c80 <tcp_split_unsent_seg+0x25c>
 8010c72:	4b09      	ldr	r3, [pc, #36]	@ (8010c98 <tcp_split_unsent_seg+0x274>)
 8010c74:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010c78:	490d      	ldr	r1, [pc, #52]	@ (8010cb0 <tcp_split_unsent_seg+0x28c>)
 8010c7a:	4809      	ldr	r0, [pc, #36]	@ (8010ca0 <tcp_split_unsent_seg+0x27c>)
 8010c7c:	f007 faf6 	bl	801826c <iprintf>
  if (p != NULL) {
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d002      	beq.n	8010c8c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010c86:	6938      	ldr	r0, [r7, #16]
 8010c88:	f7fb fc40 	bl	800c50c <pbuf_free>
  }

  return ERR_MEM;
 8010c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3724      	adds	r7, #36	@ 0x24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd90      	pop	{r4, r7, pc}
 8010c98:	0801cbc8 	.word	0x0801cbc8
 8010c9c:	0801cf5c 	.word	0x0801cf5c
 8010ca0:	0801cc1c 	.word	0x0801cc1c
 8010ca4:	0801cf80 	.word	0x0801cf80
 8010ca8:	0801cfa4 	.word	0x0801cfa4
 8010cac:	0801cfb4 	.word	0x0801cfb4
 8010cb0:	0801cfc4 	.word	0x0801cfc4

08010cb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010cb4:	b590      	push	{r4, r7, lr}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d106      	bne.n	8010cd0 <tcp_send_fin+0x1c>
 8010cc2:	4b21      	ldr	r3, [pc, #132]	@ (8010d48 <tcp_send_fin+0x94>)
 8010cc4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010cc8:	4920      	ldr	r1, [pc, #128]	@ (8010d4c <tcp_send_fin+0x98>)
 8010cca:	4821      	ldr	r0, [pc, #132]	@ (8010d50 <tcp_send_fin+0x9c>)
 8010ccc:	f007 face 	bl	801826c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d02e      	beq.n	8010d36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cdc:	60fb      	str	r3, [r7, #12]
 8010cde:	e002      	b.n	8010ce6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d1f8      	bne.n	8010ce0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	899b      	ldrh	r3, [r3, #12]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fa f81c 	bl	800ad34 <lwip_htons>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	f003 0307 	and.w	r3, r3, #7
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d116      	bne.n	8010d36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	899b      	ldrh	r3, [r3, #12]
 8010d0e:	b29c      	uxth	r4, r3
 8010d10:	2001      	movs	r0, #1
 8010d12:	f7fa f80f 	bl	800ad34 <lwip_htons>
 8010d16:	4603      	mov	r3, r0
 8010d18:	461a      	mov	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	4322      	orrs	r2, r4
 8010d20:	b292      	uxth	r2, r2
 8010d22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	8b5b      	ldrh	r3, [r3, #26]
 8010d28:	f043 0320 	orr.w	r3, r3, #32
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e004      	b.n	8010d40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010d36:	2101      	movs	r1, #1
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 f80b 	bl	8010d54 <tcp_enqueue_flags>
 8010d3e:	4603      	mov	r3, r0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3714      	adds	r7, #20
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd90      	pop	{r4, r7, pc}
 8010d48:	0801cbc8 	.word	0x0801cbc8
 8010d4c:	0801cfd0 	.word	0x0801cfd0
 8010d50:	0801cc1c 	.word	0x0801cc1c

08010d54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08a      	sub	sp, #40	@ 0x28
 8010d58:	af02      	add	r7, sp, #8
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d60:	2300      	movs	r3, #0
 8010d62:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010d68:	78fb      	ldrb	r3, [r7, #3]
 8010d6a:	f003 0303 	and.w	r3, r3, #3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <tcp_enqueue_flags+0x2c>
 8010d72:	4b67      	ldr	r3, [pc, #412]	@ (8010f10 <tcp_enqueue_flags+0x1bc>)
 8010d74:	f240 4211 	movw	r2, #1041	@ 0x411
 8010d78:	4966      	ldr	r1, [pc, #408]	@ (8010f14 <tcp_enqueue_flags+0x1c0>)
 8010d7a:	4867      	ldr	r0, [pc, #412]	@ (8010f18 <tcp_enqueue_flags+0x1c4>)
 8010d7c:	f007 fa76 	bl	801826c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d106      	bne.n	8010d94 <tcp_enqueue_flags+0x40>
 8010d86:	4b62      	ldr	r3, [pc, #392]	@ (8010f10 <tcp_enqueue_flags+0x1bc>)
 8010d88:	f240 4213 	movw	r2, #1043	@ 0x413
 8010d8c:	4963      	ldr	r1, [pc, #396]	@ (8010f1c <tcp_enqueue_flags+0x1c8>)
 8010d8e:	4862      	ldr	r0, [pc, #392]	@ (8010f18 <tcp_enqueue_flags+0x1c4>)
 8010d90:	f007 fa6c 	bl	801826c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010d94:	78fb      	ldrb	r3, [r7, #3]
 8010d96:	f003 0302 	and.w	r3, r3, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010da2:	7ffb      	ldrb	r3, [r7, #31]
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	f003 0304 	and.w	r3, r3, #4
 8010dac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010db6:	4619      	mov	r1, r3
 8010db8:	2036      	movs	r0, #54	@ 0x36
 8010dba:	f7fb f8c3 	bl	800bf44 <pbuf_alloc>
 8010dbe:	6138      	str	r0, [r7, #16]
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d109      	bne.n	8010dda <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	8b5b      	ldrh	r3, [r3, #26]
 8010dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd8:	e095      	b.n	8010f06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	895a      	ldrh	r2, [r3, #10]
 8010dde:	7dfb      	ldrb	r3, [r7, #23]
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d206      	bcs.n	8010df4 <tcp_enqueue_flags+0xa0>
 8010de6:	4b4a      	ldr	r3, [pc, #296]	@ (8010f10 <tcp_enqueue_flags+0x1bc>)
 8010de8:	f240 4239 	movw	r2, #1081	@ 0x439
 8010dec:	494c      	ldr	r1, [pc, #304]	@ (8010f20 <tcp_enqueue_flags+0x1cc>)
 8010dee:	484a      	ldr	r0, [pc, #296]	@ (8010f18 <tcp_enqueue_flags+0x1c4>)
 8010df0:	f007 fa3c 	bl	801826c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010df8:	78fa      	ldrb	r2, [r7, #3]
 8010dfa:	7ffb      	ldrb	r3, [r7, #31]
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	6939      	ldr	r1, [r7, #16]
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff fd72 	bl	80108ec <tcp_create_segment>
 8010e08:	60f8      	str	r0, [r7, #12]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d109      	bne.n	8010e24 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	8b5b      	ldrh	r3, [r3, #26]
 8010e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e22:	e070      	b.n	8010f06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	f003 0303 	and.w	r3, r3, #3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d006      	beq.n	8010e3e <tcp_enqueue_flags+0xea>
 8010e30:	4b37      	ldr	r3, [pc, #220]	@ (8010f10 <tcp_enqueue_flags+0x1bc>)
 8010e32:	f240 4242 	movw	r2, #1090	@ 0x442
 8010e36:	493b      	ldr	r1, [pc, #236]	@ (8010f24 <tcp_enqueue_flags+0x1d0>)
 8010e38:	4837      	ldr	r0, [pc, #220]	@ (8010f18 <tcp_enqueue_flags+0x1c4>)
 8010e3a:	f007 fa17 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	891b      	ldrh	r3, [r3, #8]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d006      	beq.n	8010e54 <tcp_enqueue_flags+0x100>
 8010e46:	4b32      	ldr	r3, [pc, #200]	@ (8010f10 <tcp_enqueue_flags+0x1bc>)
 8010e48:	f240 4243 	movw	r2, #1091	@ 0x443
 8010e4c:	4936      	ldr	r1, [pc, #216]	@ (8010f28 <tcp_enqueue_flags+0x1d4>)
 8010e4e:	4832      	ldr	r0, [pc, #200]	@ (8010f18 <tcp_enqueue_flags+0x1c4>)
 8010e50:	f007 fa0c 	bl	801826c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d103      	bne.n	8010e64 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	68fa      	ldr	r2, [r7, #12]
 8010e60:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010e62:	e00d      	b.n	8010e80 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e68:	61bb      	str	r3, [r7, #24]
 8010e6a:	e002      	b.n	8010e72 <tcp_enqueue_flags+0x11e>
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	61bb      	str	r3, [r7, #24]
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1f8      	bne.n	8010e6c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010e88:	78fb      	ldrb	r3, [r7, #3]
 8010e8a:	f003 0302 	and.w	r3, r3, #2
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d104      	bne.n	8010e9c <tcp_enqueue_flags+0x148>
 8010e92:	78fb      	ldrb	r3, [r7, #3]
 8010e94:	f003 0301 	and.w	r3, r3, #1
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d004      	beq.n	8010ea6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ea0:	1c5a      	adds	r2, r3, #1
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010ea6:	78fb      	ldrb	r3, [r7, #3]
 8010ea8:	f003 0301 	and.w	r3, r3, #1
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d006      	beq.n	8010ebe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8b5b      	ldrh	r3, [r3, #26]
 8010eb4:	f043 0320 	orr.w	r3, r3, #32
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fb fbaa 	bl	800c61c <pbuf_clen>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	461a      	mov	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ed2:	4413      	add	r3, r2
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00e      	beq.n	8010f04 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d10a      	bne.n	8010f04 <tcp_enqueue_flags+0x1b0>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d106      	bne.n	8010f04 <tcp_enqueue_flags+0x1b0>
 8010ef6:	4b06      	ldr	r3, [pc, #24]	@ (8010f10 <tcp_enqueue_flags+0x1bc>)
 8010ef8:	f240 4265 	movw	r2, #1125	@ 0x465
 8010efc:	490b      	ldr	r1, [pc, #44]	@ (8010f2c <tcp_enqueue_flags+0x1d8>)
 8010efe:	4806      	ldr	r0, [pc, #24]	@ (8010f18 <tcp_enqueue_flags+0x1c4>)
 8010f00:	f007 f9b4 	bl	801826c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3720      	adds	r7, #32
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	0801cbc8 	.word	0x0801cbc8
 8010f14:	0801cfec 	.word	0x0801cfec
 8010f18:	0801cc1c 	.word	0x0801cc1c
 8010f1c:	0801d044 	.word	0x0801d044
 8010f20:	0801d064 	.word	0x0801d064
 8010f24:	0801d0a0 	.word	0x0801d0a0
 8010f28:	0801d0b8 	.word	0x0801d0b8
 8010f2c:	0801d0e4 	.word	0x0801d0e4

08010f30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f30:	b5b0      	push	{r4, r5, r7, lr}
 8010f32:	b08a      	sub	sp, #40	@ 0x28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d106      	bne.n	8010f4c <tcp_output+0x1c>
 8010f3e:	4b8a      	ldr	r3, [pc, #552]	@ (8011168 <tcp_output+0x238>)
 8010f40:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010f44:	4989      	ldr	r1, [pc, #548]	@ (801116c <tcp_output+0x23c>)
 8010f46:	488a      	ldr	r0, [pc, #552]	@ (8011170 <tcp_output+0x240>)
 8010f48:	f007 f990 	bl	801826c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	7d1b      	ldrb	r3, [r3, #20]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d106      	bne.n	8010f62 <tcp_output+0x32>
 8010f54:	4b84      	ldr	r3, [pc, #528]	@ (8011168 <tcp_output+0x238>)
 8010f56:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010f5a:	4986      	ldr	r1, [pc, #536]	@ (8011174 <tcp_output+0x244>)
 8010f5c:	4884      	ldr	r0, [pc, #528]	@ (8011170 <tcp_output+0x240>)
 8010f5e:	f007 f985 	bl	801826c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f62:	4b85      	ldr	r3, [pc, #532]	@ (8011178 <tcp_output+0x248>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	687a      	ldr	r2, [r7, #4]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d101      	bne.n	8010f70 <tcp_output+0x40>
    return ERR_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	e1ce      	b.n	801130e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	bf28      	it	cs
 8010f80:	4613      	movcs	r3, r2
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d10b      	bne.n	8010faa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	8b5b      	ldrh	r3, [r3, #26]
 8010f96:	f003 0302 	and.w	r3, r3, #2
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 81aa 	beq.w	80112f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fdcb 	bl	8011b3c <tcp_send_empty_ack>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	e1b1      	b.n	801130e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010faa:	6879      	ldr	r1, [r7, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	3304      	adds	r3, #4
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7ff fc7e 	bl	80108b4 <tcp_route>
 8010fb8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <tcp_output+0x96>
    return ERR_RTE;
 8010fc0:	f06f 0303 	mvn.w	r3, #3
 8010fc4:	e1a3      	b.n	801130e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d003      	beq.n	8010fd4 <tcp_output+0xa4>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d111      	bne.n	8010ff8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <tcp_output+0xb0>
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	3304      	adds	r3, #4
 8010fde:	e000      	b.n	8010fe2 <tcp_output+0xb2>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d102      	bne.n	8010ff0 <tcp_output+0xc0>
      return ERR_RTE;
 8010fea:	f06f 0303 	mvn.w	r3, #3
 8010fee:	e18e      	b.n	801130e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7f9 fead 	bl	800ad5e <lwip_htonl>
 8011004:	4602      	mov	r2, r0
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801100e:	8912      	ldrh	r2, [r2, #8]
 8011010:	4413      	add	r3, r2
 8011012:	69ba      	ldr	r2, [r7, #24]
 8011014:	429a      	cmp	r2, r3
 8011016:	d227      	bcs.n	8011068 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801101e:	461a      	mov	r2, r3
 8011020:	69bb      	ldr	r3, [r7, #24]
 8011022:	4293      	cmp	r3, r2
 8011024:	d114      	bne.n	8011050 <tcp_output+0x120>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801102a:	2b00      	cmp	r3, #0
 801102c:	d110      	bne.n	8011050 <tcp_output+0x120>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011034:	2b00      	cmp	r3, #0
 8011036:	d10b      	bne.n	8011050 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2200      	movs	r2, #0
 801103c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2201      	movs	r2, #1
 8011044:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	8b5b      	ldrh	r3, [r3, #26]
 8011054:	f003 0302 	and.w	r3, r3, #2
 8011058:	2b00      	cmp	r3, #0
 801105a:	f000 814d 	beq.w	80112f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fd6c 	bl	8011b3c <tcp_send_empty_ack>
 8011064:	4603      	mov	r3, r0
 8011066:	e152      	b.n	801130e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011074:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011076:	6a3b      	ldr	r3, [r7, #32]
 8011078:	2b00      	cmp	r3, #0
 801107a:	f000 811c 	beq.w	80112b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801107e:	e002      	b.n	8011086 <tcp_output+0x156>
 8011080:	6a3b      	ldr	r3, [r7, #32]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	623b      	str	r3, [r7, #32]
 8011086:	6a3b      	ldr	r3, [r7, #32]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1f8      	bne.n	8011080 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801108e:	e112      	b.n	80112b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	899b      	ldrh	r3, [r3, #12]
 8011096:	b29b      	uxth	r3, r3
 8011098:	4618      	mov	r0, r3
 801109a:	f7f9 fe4b 	bl	800ad34 <lwip_htons>
 801109e:	4603      	mov	r3, r0
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	f003 0304 	and.w	r3, r3, #4
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d006      	beq.n	80110b8 <tcp_output+0x188>
 80110aa:	4b2f      	ldr	r3, [pc, #188]	@ (8011168 <tcp_output+0x238>)
 80110ac:	f240 5236 	movw	r2, #1334	@ 0x536
 80110b0:	4932      	ldr	r1, [pc, #200]	@ (801117c <tcp_output+0x24c>)
 80110b2:	482f      	ldr	r0, [pc, #188]	@ (8011170 <tcp_output+0x240>)
 80110b4:	f007 f8da 	bl	801826c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d01f      	beq.n	8011100 <tcp_output+0x1d0>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	8b5b      	ldrh	r3, [r3, #26]
 80110c4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d119      	bne.n	8011100 <tcp_output+0x1d0>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00b      	beq.n	80110ec <tcp_output+0x1bc>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d110      	bne.n	8011100 <tcp_output+0x1d0>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110e2:	891a      	ldrh	r2, [r3, #8]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d209      	bcs.n	8011100 <tcp_output+0x1d0>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d004      	beq.n	8011100 <tcp_output+0x1d0>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80110fc:	2b08      	cmp	r3, #8
 80110fe:	d901      	bls.n	8011104 <tcp_output+0x1d4>
 8011100:	2301      	movs	r3, #1
 8011102:	e000      	b.n	8011106 <tcp_output+0x1d6>
 8011104:	2300      	movs	r3, #0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d106      	bne.n	8011118 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8b5b      	ldrh	r3, [r3, #26]
 801110e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011112:	2b00      	cmp	r3, #0
 8011114:	f000 80e4 	beq.w	80112e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
 801111c:	2b02      	cmp	r3, #2
 801111e:	d00d      	beq.n	801113c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	899b      	ldrh	r3, [r3, #12]
 8011126:	b29c      	uxth	r4, r3
 8011128:	2010      	movs	r0, #16
 801112a:	f7f9 fe03 	bl	800ad34 <lwip_htons>
 801112e:	4603      	mov	r3, r0
 8011130:	461a      	mov	r2, r3
 8011132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	4322      	orrs	r2, r4
 8011138:	b292      	uxth	r2, r2
 801113a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801113c:	697a      	ldr	r2, [r7, #20]
 801113e:	6879      	ldr	r1, [r7, #4]
 8011140:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011142:	f000 f909 	bl	8011358 <tcp_output_segment>
 8011146:	4603      	mov	r3, r0
 8011148:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d016      	beq.n	8011180 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	8b5b      	ldrh	r3, [r3, #26]
 8011156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801115a:	b29a      	uxth	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	835a      	strh	r2, [r3, #26]
      return err;
 8011160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011164:	e0d3      	b.n	801130e <tcp_output+0x3de>
 8011166:	bf00      	nop
 8011168:	0801cbc8 	.word	0x0801cbc8
 801116c:	0801d10c 	.word	0x0801d10c
 8011170:	0801cc1c 	.word	0x0801cc1c
 8011174:	0801d124 	.word	0x0801d124
 8011178:	200087fc 	.word	0x200087fc
 801117c:	0801d14c 	.word	0x0801d14c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	7d1b      	ldrb	r3, [r3, #20]
 801118c:	2b02      	cmp	r3, #2
 801118e:	d006      	beq.n	801119e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	8b5b      	ldrh	r3, [r3, #26]
 8011194:	f023 0303 	bic.w	r3, r3, #3
 8011198:	b29a      	uxth	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7f9 fdda 	bl	800ad5e <lwip_htonl>
 80111aa:	4604      	mov	r4, r0
 80111ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ae:	891b      	ldrh	r3, [r3, #8]
 80111b0:	461d      	mov	r5, r3
 80111b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	899b      	ldrh	r3, [r3, #12]
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7f9 fdba 	bl	800ad34 <lwip_htons>
 80111c0:	4603      	mov	r3, r0
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	f003 0303 	and.w	r3, r3, #3
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <tcp_output+0x2a0>
 80111cc:	2301      	movs	r3, #1
 80111ce:	e000      	b.n	80111d2 <tcp_output+0x2a2>
 80111d0:	2300      	movs	r3, #0
 80111d2:	442b      	add	r3, r5
 80111d4:	4423      	add	r3, r4
 80111d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	da02      	bge.n	80111ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80111ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ec:	891b      	ldrh	r3, [r3, #8]
 80111ee:	461c      	mov	r4, r3
 80111f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	899b      	ldrh	r3, [r3, #12]
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f9 fd9b 	bl	800ad34 <lwip_htons>
 80111fe:	4603      	mov	r3, r0
 8011200:	b2db      	uxtb	r3, r3
 8011202:	f003 0303 	and.w	r3, r3, #3
 8011206:	2b00      	cmp	r3, #0
 8011208:	d001      	beq.n	801120e <tcp_output+0x2de>
 801120a:	2301      	movs	r3, #1
 801120c:	e000      	b.n	8011210 <tcp_output+0x2e0>
 801120e:	2300      	movs	r3, #0
 8011210:	4423      	add	r3, r4
 8011212:	2b00      	cmp	r3, #0
 8011214:	d049      	beq.n	80112aa <tcp_output+0x37a>
      seg->next = NULL;
 8011216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011220:	2b00      	cmp	r3, #0
 8011222:	d105      	bne.n	8011230 <tcp_output+0x300>
        pcb->unacked = seg;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011228:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122c:	623b      	str	r3, [r7, #32]
 801122e:	e03f      	b.n	80112b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	4618      	mov	r0, r3
 8011238:	f7f9 fd91 	bl	800ad5e <lwip_htonl>
 801123c:	4604      	mov	r4, r0
 801123e:	6a3b      	ldr	r3, [r7, #32]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	f7f9 fd8a 	bl	800ad5e <lwip_htonl>
 801124a:	4603      	mov	r3, r0
 801124c:	1ae3      	subs	r3, r4, r3
 801124e:	2b00      	cmp	r3, #0
 8011250:	da24      	bge.n	801129c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	3370      	adds	r3, #112	@ 0x70
 8011256:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011258:	e002      	b.n	8011260 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d011      	beq.n	801128c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	f7f9 fd74 	bl	800ad5e <lwip_htonl>
 8011276:	4604      	mov	r4, r0
 8011278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	4618      	mov	r0, r3
 8011280:	f7f9 fd6d 	bl	800ad5e <lwip_htonl>
 8011284:	4603      	mov	r3, r0
 8011286:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011288:	2b00      	cmp	r3, #0
 801128a:	dbe6      	blt.n	801125a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011292:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	e009      	b.n	80112b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80112a2:	6a3b      	ldr	r3, [r7, #32]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	623b      	str	r3, [r7, #32]
 80112a8:	e002      	b.n	80112b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80112aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112ac:	f7fc fc45 	bl	800db3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80112b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d012      	beq.n	80112e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80112bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7f9 fd4b 	bl	800ad5e <lwip_htonl>
 80112c8:	4602      	mov	r2, r0
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112d2:	8912      	ldrh	r2, [r2, #8]
 80112d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80112d6:	69ba      	ldr	r2, [r7, #24]
 80112d8:	429a      	cmp	r2, r3
 80112da:	f4bf aed9 	bcs.w	8011090 <tcp_output+0x160>
 80112de:	e000      	b.n	80112e2 <tcp_output+0x3b2>
      break;
 80112e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d108      	bne.n	80112fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80112f2:	e004      	b.n	80112fe <tcp_output+0x3ce>
    goto output_done;
 80112f4:	bf00      	nop
 80112f6:	e002      	b.n	80112fe <tcp_output+0x3ce>
    goto output_done;
 80112f8:	bf00      	nop
 80112fa:	e000      	b.n	80112fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80112fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	8b5b      	ldrh	r3, [r3, #26]
 8011302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011306:	b29a      	uxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3728      	adds	r7, #40	@ 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bdb0      	pop	{r4, r5, r7, pc}
 8011316:	bf00      	nop

08011318 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d106      	bne.n	8011334 <tcp_output_segment_busy+0x1c>
 8011326:	4b09      	ldr	r3, [pc, #36]	@ (801134c <tcp_output_segment_busy+0x34>)
 8011328:	f240 529a 	movw	r2, #1434	@ 0x59a
 801132c:	4908      	ldr	r1, [pc, #32]	@ (8011350 <tcp_output_segment_busy+0x38>)
 801132e:	4809      	ldr	r0, [pc, #36]	@ (8011354 <tcp_output_segment_busy+0x3c>)
 8011330:	f006 ff9c 	bl	801826c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	7b9b      	ldrb	r3, [r3, #14]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d001      	beq.n	8011342 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801133e:	2301      	movs	r3, #1
 8011340:	e000      	b.n	8011344 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	0801cbc8 	.word	0x0801cbc8
 8011350:	0801d164 	.word	0x0801d164
 8011354:	0801cc1c 	.word	0x0801cc1c

08011358 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011358:	b5b0      	push	{r4, r5, r7, lr}
 801135a:	b08c      	sub	sp, #48	@ 0x30
 801135c:	af04      	add	r7, sp, #16
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d106      	bne.n	8011378 <tcp_output_segment+0x20>
 801136a:	4b64      	ldr	r3, [pc, #400]	@ (80114fc <tcp_output_segment+0x1a4>)
 801136c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011370:	4963      	ldr	r1, [pc, #396]	@ (8011500 <tcp_output_segment+0x1a8>)
 8011372:	4864      	ldr	r0, [pc, #400]	@ (8011504 <tcp_output_segment+0x1ac>)
 8011374:	f006 ff7a 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d106      	bne.n	801138c <tcp_output_segment+0x34>
 801137e:	4b5f      	ldr	r3, [pc, #380]	@ (80114fc <tcp_output_segment+0x1a4>)
 8011380:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011384:	4960      	ldr	r1, [pc, #384]	@ (8011508 <tcp_output_segment+0x1b0>)
 8011386:	485f      	ldr	r0, [pc, #380]	@ (8011504 <tcp_output_segment+0x1ac>)
 8011388:	f006 ff70 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d106      	bne.n	80113a0 <tcp_output_segment+0x48>
 8011392:	4b5a      	ldr	r3, [pc, #360]	@ (80114fc <tcp_output_segment+0x1a4>)
 8011394:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011398:	495c      	ldr	r1, [pc, #368]	@ (801150c <tcp_output_segment+0x1b4>)
 801139a:	485a      	ldr	r0, [pc, #360]	@ (8011504 <tcp_output_segment+0x1ac>)
 801139c:	f006 ff66 	bl	801826c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f7ff ffb9 	bl	8011318 <tcp_output_segment_busy>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80113ac:	2300      	movs	r3, #0
 80113ae:	e0a1      	b.n	80114f4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	68dc      	ldr	r4, [r3, #12]
 80113b8:	4610      	mov	r0, r2
 80113ba:	f7f9 fcd0 	bl	800ad5e <lwip_htonl>
 80113be:	4603      	mov	r3, r0
 80113c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	68dc      	ldr	r4, [r3, #12]
 80113ca:	4610      	mov	r0, r2
 80113cc:	f7f9 fcb2 	bl	800ad34 <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80113dc:	441a      	add	r2, r3
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	3314      	adds	r3, #20
 80113e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	7a9b      	ldrb	r3, [r3, #10]
 80113ee:	f003 0301 	and.w	r3, r3, #1
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d015      	beq.n	8011422 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	3304      	adds	r3, #4
 80113fa:	461a      	mov	r2, r3
 80113fc:	6879      	ldr	r1, [r7, #4]
 80113fe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011402:	f7fc fe91 	bl	800e128 <tcp_eff_send_mss_netif>
 8011406:	4603      	mov	r3, r0
 8011408:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801140a:	8b7b      	ldrh	r3, [r7, #26]
 801140c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011410:	4618      	mov	r0, r3
 8011412:	f7f9 fca4 	bl	800ad5e <lwip_htonl>
 8011416:	4602      	mov	r2, r0
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	3304      	adds	r3, #4
 8011420:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011428:	2b00      	cmp	r3, #0
 801142a:	da02      	bge.n	8011432 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	2200      	movs	r2, #0
 8011430:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011436:	2b00      	cmp	r3, #0
 8011438:	d10c      	bne.n	8011454 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801143a:	4b35      	ldr	r3, [pc, #212]	@ (8011510 <tcp_output_segment+0x1b8>)
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	68db      	ldr	r3, [r3, #12]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	4618      	mov	r0, r3
 801144a:	f7f9 fc88 	bl	800ad5e <lwip_htonl>
 801144e:	4602      	mov	r2, r0
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	68da      	ldr	r2, [r3, #12]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	1ad3      	subs	r3, r2, r3
 8011460:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	8959      	ldrh	r1, [r3, #10]
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	8b3a      	ldrh	r2, [r7, #24]
 801146e:	1a8a      	subs	r2, r1, r2
 8011470:	b292      	uxth	r2, r2
 8011472:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	8919      	ldrh	r1, [r3, #8]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	8b3a      	ldrh	r2, [r7, #24]
 8011480:	1a8a      	subs	r2, r1, r2
 8011482:	b292      	uxth	r2, r2
 8011484:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	68d2      	ldr	r2, [r2, #12]
 801148e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	2200      	movs	r2, #0
 8011496:	741a      	strb	r2, [r3, #16]
 8011498:	2200      	movs	r2, #0
 801149a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	68da      	ldr	r2, [r3, #12]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	7a9b      	ldrb	r3, [r3, #10]
 80114a4:	f003 0301 	and.w	r3, r3, #1
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d001      	beq.n	80114b0 <tcp_output_segment+0x158>
 80114ac:	2318      	movs	r3, #24
 80114ae:	e000      	b.n	80114b2 <tcp_output_segment+0x15a>
 80114b0:	2314      	movs	r3, #20
 80114b2:	4413      	add	r3, r2
 80114b4:	69fa      	ldr	r2, [r7, #28]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d006      	beq.n	80114c8 <tcp_output_segment+0x170>
 80114ba:	4b10      	ldr	r3, [pc, #64]	@ (80114fc <tcp_output_segment+0x1a4>)
 80114bc:	f240 621c 	movw	r2, #1564	@ 0x61c
 80114c0:	4914      	ldr	r1, [pc, #80]	@ (8011514 <tcp_output_segment+0x1bc>)
 80114c2:	4810      	ldr	r0, [pc, #64]	@ (8011504 <tcp_output_segment+0x1ac>)
 80114c4:	f006 fed2 	bl	801826c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6858      	ldr	r0, [r3, #4]
 80114cc:	68b9      	ldr	r1, [r7, #8]
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	1d1c      	adds	r4, r3, #4
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	7add      	ldrb	r5, [r3, #11]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	7a9b      	ldrb	r3, [r3, #10]
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	9202      	str	r2, [sp, #8]
 80114de:	2206      	movs	r2, #6
 80114e0:	9201      	str	r2, [sp, #4]
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	462b      	mov	r3, r5
 80114e6:	4622      	mov	r2, r4
 80114e8:	f003 fa04 	bl	80148f4 <ip4_output_if>
 80114ec:	4603      	mov	r3, r0
 80114ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80114f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3720      	adds	r7, #32
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bdb0      	pop	{r4, r5, r7, pc}
 80114fc:	0801cbc8 	.word	0x0801cbc8
 8011500:	0801d18c 	.word	0x0801d18c
 8011504:	0801cc1c 	.word	0x0801cc1c
 8011508:	0801d1ac 	.word	0x0801d1ac
 801150c:	0801d1cc 	.word	0x0801d1cc
 8011510:	200087b0 	.word	0x200087b0
 8011514:	0801d1f0 	.word	0x0801d1f0

08011518 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011518:	b5b0      	push	{r4, r5, r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d106      	bne.n	8011534 <tcp_rexmit_rto_prepare+0x1c>
 8011526:	4b31      	ldr	r3, [pc, #196]	@ (80115ec <tcp_rexmit_rto_prepare+0xd4>)
 8011528:	f240 6263 	movw	r2, #1635	@ 0x663
 801152c:	4930      	ldr	r1, [pc, #192]	@ (80115f0 <tcp_rexmit_rto_prepare+0xd8>)
 801152e:	4831      	ldr	r0, [pc, #196]	@ (80115f4 <tcp_rexmit_rto_prepare+0xdc>)
 8011530:	f006 fe9c 	bl	801826c <iprintf>

  if (pcb->unacked == NULL) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011538:	2b00      	cmp	r3, #0
 801153a:	d102      	bne.n	8011542 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801153c:	f06f 0305 	mvn.w	r3, #5
 8011540:	e050      	b.n	80115e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	e00b      	b.n	8011562 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801154a:	68f8      	ldr	r0, [r7, #12]
 801154c:	f7ff fee4 	bl	8011318 <tcp_output_segment_busy>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d002      	beq.n	801155c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011556:	f06f 0305 	mvn.w	r3, #5
 801155a:	e043      	b.n	80115e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	60fb      	str	r3, [r7, #12]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1ef      	bne.n	801154a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7ff fed4 	bl	8011318 <tcp_output_segment_busy>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d002      	beq.n	801157c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011576:	f06f 0305 	mvn.w	r3, #5
 801157a:	e033      	b.n	80115e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	8b5b      	ldrh	r3, [r3, #26]
 8011596:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801159a:	b29a      	uxth	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f9 fbd9 	bl	800ad5e <lwip_htonl>
 80115ac:	4604      	mov	r4, r0
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	891b      	ldrh	r3, [r3, #8]
 80115b2:	461d      	mov	r5, r3
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	899b      	ldrh	r3, [r3, #12]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f9 fbb9 	bl	800ad34 <lwip_htons>
 80115c2:	4603      	mov	r3, r0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	f003 0303 	and.w	r3, r3, #3
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <tcp_rexmit_rto_prepare+0xba>
 80115ce:	2301      	movs	r3, #1
 80115d0:	e000      	b.n	80115d4 <tcp_rexmit_rto_prepare+0xbc>
 80115d2:	2300      	movs	r3, #0
 80115d4:	442b      	add	r3, r5
 80115d6:	18e2      	adds	r2, r4, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3710      	adds	r7, #16
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bdb0      	pop	{r4, r5, r7, pc}
 80115ec:	0801cbc8 	.word	0x0801cbc8
 80115f0:	0801d204 	.word	0x0801d204
 80115f4:	0801cc1c 	.word	0x0801cc1c

080115f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d106      	bne.n	8011614 <tcp_rexmit_rto_commit+0x1c>
 8011606:	4b0d      	ldr	r3, [pc, #52]	@ (801163c <tcp_rexmit_rto_commit+0x44>)
 8011608:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801160c:	490c      	ldr	r1, [pc, #48]	@ (8011640 <tcp_rexmit_rto_commit+0x48>)
 801160e:	480d      	ldr	r0, [pc, #52]	@ (8011644 <tcp_rexmit_rto_commit+0x4c>)
 8011610:	f006 fe2c 	bl	801826c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801161a:	2bff      	cmp	r3, #255	@ 0xff
 801161c:	d007      	beq.n	801162e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011624:	3301      	adds	r3, #1
 8011626:	b2da      	uxtb	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7ff fc7e 	bl	8010f30 <tcp_output>
}
 8011634:	bf00      	nop
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	0801cbc8 	.word	0x0801cbc8
 8011640:	0801d228 	.word	0x0801d228
 8011644:	0801cc1c 	.word	0x0801cc1c

08011648 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <tcp_rexmit_rto+0x1c>
 8011656:	4b0a      	ldr	r3, [pc, #40]	@ (8011680 <tcp_rexmit_rto+0x38>)
 8011658:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801165c:	4909      	ldr	r1, [pc, #36]	@ (8011684 <tcp_rexmit_rto+0x3c>)
 801165e:	480a      	ldr	r0, [pc, #40]	@ (8011688 <tcp_rexmit_rto+0x40>)
 8011660:	f006 fe04 	bl	801826c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff ff57 	bl	8011518 <tcp_rexmit_rto_prepare>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d102      	bne.n	8011676 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff ffc1 	bl	80115f8 <tcp_rexmit_rto_commit>
  }
}
 8011676:	bf00      	nop
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	0801cbc8 	.word	0x0801cbc8
 8011684:	0801d24c 	.word	0x0801d24c
 8011688:	0801cc1c 	.word	0x0801cc1c

0801168c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801168c:	b590      	push	{r4, r7, lr}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <tcp_rexmit+0x1c>
 801169a:	4b2f      	ldr	r3, [pc, #188]	@ (8011758 <tcp_rexmit+0xcc>)
 801169c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80116a0:	492e      	ldr	r1, [pc, #184]	@ (801175c <tcp_rexmit+0xd0>)
 80116a2:	482f      	ldr	r0, [pc, #188]	@ (8011760 <tcp_rexmit+0xd4>)
 80116a4:	f006 fde2 	bl	801826c <iprintf>

  if (pcb->unacked == NULL) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d102      	bne.n	80116b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80116b0:	f06f 0305 	mvn.w	r3, #5
 80116b4:	e04c      	b.n	8011750 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80116bc:	68b8      	ldr	r0, [r7, #8]
 80116be:	f7ff fe2b 	bl	8011318 <tcp_output_segment_busy>
 80116c2:	4603      	mov	r3, r0
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d002      	beq.n	80116ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80116c8:	f06f 0305 	mvn.w	r3, #5
 80116cc:	e040      	b.n	8011750 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	336c      	adds	r3, #108	@ 0x6c
 80116da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116dc:	e002      	b.n	80116e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d011      	beq.n	8011710 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7f9 fb32 	bl	800ad5e <lwip_htonl>
 80116fa:	4604      	mov	r4, r0
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	4618      	mov	r0, r3
 8011704:	f7f9 fb2b 	bl	800ad5e <lwip_htonl>
 8011708:	4603      	mov	r3, r0
 801170a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801170c:	2b00      	cmp	r3, #0
 801170e:	dbe6      	blt.n	80116de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	68ba      	ldr	r2, [r7, #8]
 801171c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d103      	bne.n	801172e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011734:	2bff      	cmp	r3, #255	@ 0xff
 8011736:	d007      	beq.n	8011748 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801173e:	3301      	adds	r3, #1
 8011740:	b2da      	uxtb	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	3714      	adds	r7, #20
 8011754:	46bd      	mov	sp, r7
 8011756:	bd90      	pop	{r4, r7, pc}
 8011758:	0801cbc8 	.word	0x0801cbc8
 801175c:	0801d268 	.word	0x0801d268
 8011760:	0801cc1c 	.word	0x0801cc1c

08011764 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d106      	bne.n	8011780 <tcp_rexmit_fast+0x1c>
 8011772:	4b2a      	ldr	r3, [pc, #168]	@ (801181c <tcp_rexmit_fast+0xb8>)
 8011774:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011778:	4929      	ldr	r1, [pc, #164]	@ (8011820 <tcp_rexmit_fast+0xbc>)
 801177a:	482a      	ldr	r0, [pc, #168]	@ (8011824 <tcp_rexmit_fast+0xc0>)
 801177c:	f006 fd76 	bl	801826c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011784:	2b00      	cmp	r3, #0
 8011786:	d044      	beq.n	8011812 <tcp_rexmit_fast+0xae>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	8b5b      	ldrh	r3, [r3, #26]
 801178c:	f003 0304 	and.w	r3, r3, #4
 8011790:	2b00      	cmp	r3, #0
 8011792:	d13e      	bne.n	8011812 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff ff79 	bl	801168c <tcp_rexmit>
 801179a:	4603      	mov	r3, r0
 801179c:	2b00      	cmp	r3, #0
 801179e:	d138      	bne.n	8011812 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80117ac:	4293      	cmp	r3, r2
 80117ae:	bf28      	it	cs
 80117b0:	4613      	movcs	r3, r2
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	0fda      	lsrs	r2, r3, #31
 80117b6:	4413      	add	r3, r2
 80117b8:	105b      	asrs	r3, r3, #1
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80117c8:	461a      	mov	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117ce:	005b      	lsls	r3, r3, #1
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d206      	bcs.n	80117e2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117d8:	005b      	lsls	r3, r3, #1
 80117da:	b29a      	uxth	r2, r3
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117ec:	4619      	mov	r1, r3
 80117ee:	0049      	lsls	r1, r1, #1
 80117f0:	440b      	add	r3, r1
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	4413      	add	r3, r2
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	8b5b      	ldrh	r3, [r3, #26]
 8011802:	f043 0304 	orr.w	r3, r3, #4
 8011806:	b29a      	uxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011812:	bf00      	nop
 8011814:	3708      	adds	r7, #8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	0801cbc8 	.word	0x0801cbc8
 8011820:	0801d280 	.word	0x0801d280
 8011824:	0801cc1c 	.word	0x0801cc1c

08011828 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b086      	sub	sp, #24
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	607b      	str	r3, [r7, #4]
 8011832:	460b      	mov	r3, r1
 8011834:	817b      	strh	r3, [r7, #10]
 8011836:	4613      	mov	r3, r2
 8011838:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801183a:	897a      	ldrh	r2, [r7, #10]
 801183c:	893b      	ldrh	r3, [r7, #8]
 801183e:	4413      	add	r3, r2
 8011840:	b29b      	uxth	r3, r3
 8011842:	3314      	adds	r3, #20
 8011844:	b29b      	uxth	r3, r3
 8011846:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801184a:	4619      	mov	r1, r3
 801184c:	2022      	movs	r0, #34	@ 0x22
 801184e:	f7fa fb79 	bl	800bf44 <pbuf_alloc>
 8011852:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d04d      	beq.n	80118f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801185a:	897b      	ldrh	r3, [r7, #10]
 801185c:	3313      	adds	r3, #19
 801185e:	697a      	ldr	r2, [r7, #20]
 8011860:	8952      	ldrh	r2, [r2, #10]
 8011862:	4293      	cmp	r3, r2
 8011864:	db06      	blt.n	8011874 <tcp_output_alloc_header_common+0x4c>
 8011866:	4b26      	ldr	r3, [pc, #152]	@ (8011900 <tcp_output_alloc_header_common+0xd8>)
 8011868:	f240 7223 	movw	r2, #1827	@ 0x723
 801186c:	4925      	ldr	r1, [pc, #148]	@ (8011904 <tcp_output_alloc_header_common+0xdc>)
 801186e:	4826      	ldr	r0, [pc, #152]	@ (8011908 <tcp_output_alloc_header_common+0xe0>)
 8011870:	f006 fcfc 	bl	801826c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801187a:	8c3b      	ldrh	r3, [r7, #32]
 801187c:	4618      	mov	r0, r3
 801187e:	f7f9 fa59 	bl	800ad34 <lwip_htons>
 8011882:	4603      	mov	r3, r0
 8011884:	461a      	mov	r2, r3
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801188a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801188c:	4618      	mov	r0, r3
 801188e:	f7f9 fa51 	bl	800ad34 <lwip_htons>
 8011892:	4603      	mov	r3, r0
 8011894:	461a      	mov	r2, r3
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f7f9 fa5c 	bl	800ad5e <lwip_htonl>
 80118a6:	4602      	mov	r2, r0
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80118ac:	897b      	ldrh	r3, [r7, #10]
 80118ae:	089b      	lsrs	r3, r3, #2
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	3305      	adds	r3, #5
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	031b      	lsls	r3, r3, #12
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80118be:	b29b      	uxth	r3, r3
 80118c0:	4313      	orrs	r3, r2
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7f9 fa35 	bl	800ad34 <lwip_htons>
 80118ca:	4603      	mov	r3, r0
 80118cc:	461a      	mov	r2, r3
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80118d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7f9 fa2d 	bl	800ad34 <lwip_htons>
 80118da:	4603      	mov	r3, r0
 80118dc:	461a      	mov	r2, r3
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	2200      	movs	r2, #0
 80118e6:	741a      	strb	r2, [r3, #16]
 80118e8:	2200      	movs	r2, #0
 80118ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	2200      	movs	r2, #0
 80118f0:	749a      	strb	r2, [r3, #18]
 80118f2:	2200      	movs	r2, #0
 80118f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80118f6:	697b      	ldr	r3, [r7, #20]
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3718      	adds	r7, #24
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	0801cbc8 	.word	0x0801cbc8
 8011904:	0801d2a0 	.word	0x0801d2a0
 8011908:	0801cc1c 	.word	0x0801cc1c

0801190c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801190c:	b5b0      	push	{r4, r5, r7, lr}
 801190e:	b08a      	sub	sp, #40	@ 0x28
 8011910:	af04      	add	r7, sp, #16
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	607b      	str	r3, [r7, #4]
 8011916:	460b      	mov	r3, r1
 8011918:	817b      	strh	r3, [r7, #10]
 801191a:	4613      	mov	r3, r2
 801191c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d106      	bne.n	8011932 <tcp_output_alloc_header+0x26>
 8011924:	4b15      	ldr	r3, [pc, #84]	@ (801197c <tcp_output_alloc_header+0x70>)
 8011926:	f240 7242 	movw	r2, #1858	@ 0x742
 801192a:	4915      	ldr	r1, [pc, #84]	@ (8011980 <tcp_output_alloc_header+0x74>)
 801192c:	4815      	ldr	r0, [pc, #84]	@ (8011984 <tcp_output_alloc_header+0x78>)
 801192e:	f006 fc9d 	bl	801826c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	8adb      	ldrh	r3, [r3, #22]
 801193a:	68fa      	ldr	r2, [r7, #12]
 801193c:	8b12      	ldrh	r2, [r2, #24]
 801193e:	68f9      	ldr	r1, [r7, #12]
 8011940:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011942:	893d      	ldrh	r5, [r7, #8]
 8011944:	897c      	ldrh	r4, [r7, #10]
 8011946:	9103      	str	r1, [sp, #12]
 8011948:	2110      	movs	r1, #16
 801194a:	9102      	str	r1, [sp, #8]
 801194c:	9201      	str	r2, [sp, #4]
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	462a      	mov	r2, r5
 8011954:	4621      	mov	r1, r4
 8011956:	f7ff ff67 	bl	8011828 <tcp_output_alloc_header_common>
 801195a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d006      	beq.n	8011970 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801196a:	441a      	add	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011970:	697b      	ldr	r3, [r7, #20]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3718      	adds	r7, #24
 8011976:	46bd      	mov	sp, r7
 8011978:	bdb0      	pop	{r4, r5, r7, pc}
 801197a:	bf00      	nop
 801197c:	0801cbc8 	.word	0x0801cbc8
 8011980:	0801d2d0 	.word	0x0801d2d0
 8011984:	0801cc1c 	.word	0x0801cc1c

08011988 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b088      	sub	sp, #32
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	4611      	mov	r1, r2
 8011994:	461a      	mov	r2, r3
 8011996:	460b      	mov	r3, r1
 8011998:	71fb      	strb	r3, [r7, #7]
 801199a:	4613      	mov	r3, r2
 801199c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801199e:	2300      	movs	r3, #0
 80119a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <tcp_output_fill_options+0x2e>
 80119a8:	4b12      	ldr	r3, [pc, #72]	@ (80119f4 <tcp_output_fill_options+0x6c>)
 80119aa:	f240 7256 	movw	r2, #1878	@ 0x756
 80119ae:	4912      	ldr	r1, [pc, #72]	@ (80119f8 <tcp_output_fill_options+0x70>)
 80119b0:	4812      	ldr	r0, [pc, #72]	@ (80119fc <tcp_output_fill_options+0x74>)
 80119b2:	f006 fc5b 	bl	801826c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	3314      	adds	r3, #20
 80119c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80119c2:	8bfb      	ldrh	r3, [r7, #30]
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	461a      	mov	r2, r3
 80119c8:	79fb      	ldrb	r3, [r7, #7]
 80119ca:	009b      	lsls	r3, r3, #2
 80119cc:	f003 0304 	and.w	r3, r3, #4
 80119d0:	4413      	add	r3, r2
 80119d2:	3314      	adds	r3, #20
 80119d4:	69ba      	ldr	r2, [r7, #24]
 80119d6:	4413      	add	r3, r2
 80119d8:	697a      	ldr	r2, [r7, #20]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d006      	beq.n	80119ec <tcp_output_fill_options+0x64>
 80119de:	4b05      	ldr	r3, [pc, #20]	@ (80119f4 <tcp_output_fill_options+0x6c>)
 80119e0:	f240 7275 	movw	r2, #1909	@ 0x775
 80119e4:	4906      	ldr	r1, [pc, #24]	@ (8011a00 <tcp_output_fill_options+0x78>)
 80119e6:	4805      	ldr	r0, [pc, #20]	@ (80119fc <tcp_output_fill_options+0x74>)
 80119e8:	f006 fc40 	bl	801826c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80119ec:	bf00      	nop
 80119ee:	3720      	adds	r7, #32
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	0801cbc8 	.word	0x0801cbc8
 80119f8:	0801d2f8 	.word	0x0801d2f8
 80119fc:	0801cc1c 	.word	0x0801cc1c
 8011a00:	0801d1f0 	.word	0x0801d1f0

08011a04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b08a      	sub	sp, #40	@ 0x28
 8011a08:	af04      	add	r7, sp, #16
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	607a      	str	r2, [r7, #4]
 8011a10:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d106      	bne.n	8011a26 <tcp_output_control_segment+0x22>
 8011a18:	4b1c      	ldr	r3, [pc, #112]	@ (8011a8c <tcp_output_control_segment+0x88>)
 8011a1a:	f240 7287 	movw	r2, #1927	@ 0x787
 8011a1e:	491c      	ldr	r1, [pc, #112]	@ (8011a90 <tcp_output_control_segment+0x8c>)
 8011a20:	481c      	ldr	r0, [pc, #112]	@ (8011a94 <tcp_output_control_segment+0x90>)
 8011a22:	f006 fc23 	bl	801826c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	6879      	ldr	r1, [r7, #4]
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	f7fe ff42 	bl	80108b4 <tcp_route>
 8011a30:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d102      	bne.n	8011a3e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011a38:	23fc      	movs	r3, #252	@ 0xfc
 8011a3a:	75fb      	strb	r3, [r7, #23]
 8011a3c:	e01c      	b.n	8011a78 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d006      	beq.n	8011a52 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	7adb      	ldrb	r3, [r3, #11]
 8011a48:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	7a9b      	ldrb	r3, [r3, #10]
 8011a4e:	757b      	strb	r3, [r7, #21]
 8011a50:	e003      	b.n	8011a5a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011a52:	23ff      	movs	r3, #255	@ 0xff
 8011a54:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011a56:	2300      	movs	r3, #0
 8011a58:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011a5a:	7dba      	ldrb	r2, [r7, #22]
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	9302      	str	r3, [sp, #8]
 8011a60:	2306      	movs	r3, #6
 8011a62:	9301      	str	r3, [sp, #4]
 8011a64:	7d7b      	ldrb	r3, [r7, #21]
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	4613      	mov	r3, r2
 8011a6a:	683a      	ldr	r2, [r7, #0]
 8011a6c:	6879      	ldr	r1, [r7, #4]
 8011a6e:	68b8      	ldr	r0, [r7, #8]
 8011a70:	f002 ff40 	bl	80148f4 <ip4_output_if>
 8011a74:	4603      	mov	r3, r0
 8011a76:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011a78:	68b8      	ldr	r0, [r7, #8]
 8011a7a:	f7fa fd47 	bl	800c50c <pbuf_free>
  return err;
 8011a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3718      	adds	r7, #24
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	0801cbc8 	.word	0x0801cbc8
 8011a90:	0801d320 	.word	0x0801d320
 8011a94:	0801cc1c 	.word	0x0801cc1c

08011a98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011a98:	b590      	push	{r4, r7, lr}
 8011a9a:	b08b      	sub	sp, #44	@ 0x2c
 8011a9c:	af04      	add	r7, sp, #16
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
 8011aa4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d106      	bne.n	8011aba <tcp_rst+0x22>
 8011aac:	4b1f      	ldr	r3, [pc, #124]	@ (8011b2c <tcp_rst+0x94>)
 8011aae:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011ab2:	491f      	ldr	r1, [pc, #124]	@ (8011b30 <tcp_rst+0x98>)
 8011ab4:	481f      	ldr	r0, [pc, #124]	@ (8011b34 <tcp_rst+0x9c>)
 8011ab6:	f006 fbd9 	bl	801826c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d106      	bne.n	8011ace <tcp_rst+0x36>
 8011ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8011b2c <tcp_rst+0x94>)
 8011ac2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011ac6:	491c      	ldr	r1, [pc, #112]	@ (8011b38 <tcp_rst+0xa0>)
 8011ac8:	481a      	ldr	r0, [pc, #104]	@ (8011b34 <tcp_rst+0x9c>)
 8011aca:	f006 fbcf 	bl	801826c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ace:	2300      	movs	r3, #0
 8011ad0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011ad2:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011ad6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
 8011ada:	b29c      	uxth	r4, r3
 8011adc:	68b8      	ldr	r0, [r7, #8]
 8011ade:	f7f9 f93e 	bl	800ad5e <lwip_htonl>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	8abb      	ldrh	r3, [r7, #20]
 8011ae6:	9303      	str	r3, [sp, #12]
 8011ae8:	2314      	movs	r3, #20
 8011aea:	9302      	str	r3, [sp, #8]
 8011aec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011aee:	9301      	str	r3, [sp, #4]
 8011af0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	4613      	mov	r3, r2
 8011af6:	2200      	movs	r2, #0
 8011af8:	4621      	mov	r1, r4
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f7ff fe94 	bl	8011828 <tcp_output_alloc_header_common>
 8011b00:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00c      	beq.n	8011b22 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b08:	7dfb      	ldrb	r3, [r7, #23]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	6939      	ldr	r1, [r7, #16]
 8011b0e:	68f8      	ldr	r0, [r7, #12]
 8011b10:	f7ff ff3a 	bl	8011988 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b16:	683a      	ldr	r2, [r7, #0]
 8011b18:	6939      	ldr	r1, [r7, #16]
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f7ff ff72 	bl	8011a04 <tcp_output_control_segment>
 8011b20:	e000      	b.n	8011b24 <tcp_rst+0x8c>
    return;
 8011b22:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b24:	371c      	adds	r7, #28
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd90      	pop	{r4, r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	0801cbc8 	.word	0x0801cbc8
 8011b30:	0801d34c 	.word	0x0801d34c
 8011b34:	0801cc1c 	.word	0x0801cc1c
 8011b38:	0801d368 	.word	0x0801d368

08011b3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011b3c:	b590      	push	{r4, r7, lr}
 8011b3e:	b087      	sub	sp, #28
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011b44:	2300      	movs	r3, #0
 8011b46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d106      	bne.n	8011b60 <tcp_send_empty_ack+0x24>
 8011b52:	4b28      	ldr	r3, [pc, #160]	@ (8011bf4 <tcp_send_empty_ack+0xb8>)
 8011b54:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011b58:	4927      	ldr	r1, [pc, #156]	@ (8011bf8 <tcp_send_empty_ack+0xbc>)
 8011b5a:	4828      	ldr	r0, [pc, #160]	@ (8011bfc <tcp_send_empty_ack+0xc0>)
 8011b5c:	f006 fb86 	bl	801826c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b60:	7dfb      	ldrb	r3, [r7, #23]
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	f003 0304 	and.w	r3, r3, #4
 8011b6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011b6c:	7d7b      	ldrb	r3, [r7, #21]
 8011b6e:	b29c      	uxth	r4, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7f9 f8f2 	bl	800ad5e <lwip_htonl>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	4621      	mov	r1, r4
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff fec3 	bl	801190c <tcp_output_alloc_header>
 8011b86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d109      	bne.n	8011ba2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	8b5b      	ldrh	r3, [r3, #26]
 8011b92:	f043 0303 	orr.w	r3, r3, #3
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011b9c:	f06f 0301 	mvn.w	r3, #1
 8011ba0:	e023      	b.n	8011bea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ba2:	7dbb      	ldrb	r3, [r7, #22]
 8011ba4:	7dfa      	ldrb	r2, [r7, #23]
 8011ba6:	6939      	ldr	r1, [r7, #16]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff feed 	bl	8011988 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	3304      	adds	r3, #4
 8011bb4:	6939      	ldr	r1, [r7, #16]
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f7ff ff24 	bl	8011a04 <tcp_output_control_segment>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d007      	beq.n	8011bd8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	8b5b      	ldrh	r3, [r3, #26]
 8011bcc:	f043 0303 	orr.w	r3, r3, #3
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	835a      	strh	r2, [r3, #26]
 8011bd6:	e006      	b.n	8011be6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	8b5b      	ldrh	r3, [r3, #26]
 8011bdc:	f023 0303 	bic.w	r3, r3, #3
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	371c      	adds	r7, #28
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd90      	pop	{r4, r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	0801cbc8 	.word	0x0801cbc8
 8011bf8:	0801d384 	.word	0x0801d384
 8011bfc:	0801cc1c 	.word	0x0801cc1c

08011c00 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011c00:	b590      	push	{r4, r7, lr}
 8011c02:	b087      	sub	sp, #28
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c08:	2300      	movs	r3, #0
 8011c0a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d106      	bne.n	8011c20 <tcp_keepalive+0x20>
 8011c12:	4b18      	ldr	r3, [pc, #96]	@ (8011c74 <tcp_keepalive+0x74>)
 8011c14:	f640 0224 	movw	r2, #2084	@ 0x824
 8011c18:	4917      	ldr	r1, [pc, #92]	@ (8011c78 <tcp_keepalive+0x78>)
 8011c1a:	4818      	ldr	r0, [pc, #96]	@ (8011c7c <tcp_keepalive+0x7c>)
 8011c1c:	f006 fb26 	bl	801826c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c20:	7dfb      	ldrb	r3, [r7, #23]
 8011c22:	b29c      	uxth	r4, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c28:	3b01      	subs	r3, #1
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7f9 f897 	bl	800ad5e <lwip_htonl>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2200      	movs	r2, #0
 8011c34:	4621      	mov	r1, r4
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ff fe68 	bl	801190c <tcp_output_alloc_header>
 8011c3c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d102      	bne.n	8011c4a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011c44:	f04f 33ff 	mov.w	r3, #4294967295
 8011c48:	e010      	b.n	8011c6c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c4a:	7dfb      	ldrb	r3, [r7, #23]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	6939      	ldr	r1, [r7, #16]
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f7ff fe99 	bl	8011988 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	3304      	adds	r3, #4
 8011c5c:	6939      	ldr	r1, [r7, #16]
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7ff fed0 	bl	8011a04 <tcp_output_control_segment>
 8011c64:	4603      	mov	r3, r0
 8011c66:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	371c      	adds	r7, #28
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd90      	pop	{r4, r7, pc}
 8011c74:	0801cbc8 	.word	0x0801cbc8
 8011c78:	0801d3a4 	.word	0x0801d3a4
 8011c7c:	0801cc1c 	.word	0x0801cc1c

08011c80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011c80:	b590      	push	{r4, r7, lr}
 8011c82:	b08b      	sub	sp, #44	@ 0x2c
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c88:	2300      	movs	r3, #0
 8011c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d106      	bne.n	8011ca2 <tcp_zero_window_probe+0x22>
 8011c94:	4b4c      	ldr	r3, [pc, #304]	@ (8011dc8 <tcp_zero_window_probe+0x148>)
 8011c96:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011c9a:	494c      	ldr	r1, [pc, #304]	@ (8011dcc <tcp_zero_window_probe+0x14c>)
 8011c9c:	484c      	ldr	r0, [pc, #304]	@ (8011dd0 <tcp_zero_window_probe+0x150>)
 8011c9e:	f006 fae5 	bl	801826c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ca6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d101      	bne.n	8011cb2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	e086      	b.n	8011dc0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011cb8:	2bff      	cmp	r3, #255	@ 0xff
 8011cba:	d007      	beq.n	8011ccc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	899b      	ldrh	r3, [r3, #12]
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7f9 f82d 	bl	800ad34 <lwip_htons>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d005      	beq.n	8011cf2 <tcp_zero_window_probe+0x72>
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	891b      	ldrh	r3, [r3, #8]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d101      	bne.n	8011cf2 <tcp_zero_window_probe+0x72>
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e000      	b.n	8011cf4 <tcp_zero_window_probe+0x74>
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011cf6:	7ffb      	ldrb	r3, [r7, #31]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	bf0c      	ite	eq
 8011cfc:	2301      	moveq	r3, #1
 8011cfe:	2300      	movne	r3, #0
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d08:	b299      	uxth	r1, r3
 8011d0a:	6a3b      	ldr	r3, [r7, #32]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	8bba      	ldrh	r2, [r7, #28]
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff fdfa 	bl	801190c <tcp_output_alloc_header>
 8011d18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d102      	bne.n	8011d26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d20:	f04f 33ff 	mov.w	r3, #4294967295
 8011d24:	e04c      	b.n	8011dc0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011d2c:	7ffb      	ldrb	r3, [r7, #31]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d011      	beq.n	8011d56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	899b      	ldrh	r3, [r3, #12]
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	b21b      	sxth	r3, r3
 8011d3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011d3e:	b21c      	sxth	r4, r3
 8011d40:	2011      	movs	r0, #17
 8011d42:	f7f8 fff7 	bl	800ad34 <lwip_htons>
 8011d46:	4603      	mov	r3, r0
 8011d48:	b21b      	sxth	r3, r3
 8011d4a:	4323      	orrs	r3, r4
 8011d4c:	b21b      	sxth	r3, r3
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	819a      	strh	r2, [r3, #12]
 8011d54:	e010      	b.n	8011d78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	3314      	adds	r3, #20
 8011d5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011d5e:	6a3b      	ldr	r3, [r7, #32]
 8011d60:	6858      	ldr	r0, [r3, #4]
 8011d62:	6a3b      	ldr	r3, [r7, #32]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	891a      	ldrh	r2, [r3, #8]
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	891b      	ldrh	r3, [r3, #8]
 8011d6c:	1ad3      	subs	r3, r2, r3
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	2201      	movs	r2, #1
 8011d72:	6939      	ldr	r1, [r7, #16]
 8011d74:	f7fa fdc4 	bl	800c900 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011d78:	6a3b      	ldr	r3, [r7, #32]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7f8 ffed 	bl	800ad5e <lwip_htonl>
 8011d84:	4603      	mov	r3, r0
 8011d86:	3301      	adds	r3, #1
 8011d88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	da02      	bge.n	8011d9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	68fa      	ldr	r2, [r7, #12]
 8011d9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011da0:	2200      	movs	r2, #0
 8011da2:	69b9      	ldr	r1, [r7, #24]
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7ff fdef 	bl	8011988 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	3304      	adds	r3, #4
 8011db0:	69b9      	ldr	r1, [r7, #24]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff fe26 	bl	8011a04 <tcp_output_control_segment>
 8011db8:	4603      	mov	r3, r0
 8011dba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011dbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	372c      	adds	r7, #44	@ 0x2c
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd90      	pop	{r4, r7, pc}
 8011dc8:	0801cbc8 	.word	0x0801cbc8
 8011dcc:	0801d3c0 	.word	0x0801d3c0
 8011dd0:	0801cc1c 	.word	0x0801cc1c

08011dd4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011ddc:	f7fa ff10 	bl	800cc00 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011de0:	4b0a      	ldr	r3, [pc, #40]	@ (8011e0c <tcpip_tcp_timer+0x38>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d103      	bne.n	8011df0 <tcpip_tcp_timer+0x1c>
 8011de8:	4b09      	ldr	r3, [pc, #36]	@ (8011e10 <tcpip_tcp_timer+0x3c>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d005      	beq.n	8011dfc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011df0:	2200      	movs	r2, #0
 8011df2:	4908      	ldr	r1, [pc, #32]	@ (8011e14 <tcpip_tcp_timer+0x40>)
 8011df4:	20fa      	movs	r0, #250	@ 0xfa
 8011df6:	f000 f8f3 	bl	8011fe0 <sys_timeout>
 8011dfa:	e003      	b.n	8011e04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011dfc:	4b06      	ldr	r3, [pc, #24]	@ (8011e18 <tcpip_tcp_timer+0x44>)
 8011dfe:	2200      	movs	r2, #0
 8011e00:	601a      	str	r2, [r3, #0]
  }
}
 8011e02:	bf00      	nop
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	200087bc 	.word	0x200087bc
 8011e10:	200087c0 	.word	0x200087c0
 8011e14:	08011dd5 	.word	0x08011dd5
 8011e18:	20008808 	.word	0x20008808

08011e1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e20:	4b0a      	ldr	r3, [pc, #40]	@ (8011e4c <tcp_timer_needed+0x30>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d10f      	bne.n	8011e48 <tcp_timer_needed+0x2c>
 8011e28:	4b09      	ldr	r3, [pc, #36]	@ (8011e50 <tcp_timer_needed+0x34>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d103      	bne.n	8011e38 <tcp_timer_needed+0x1c>
 8011e30:	4b08      	ldr	r3, [pc, #32]	@ (8011e54 <tcp_timer_needed+0x38>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d007      	beq.n	8011e48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011e38:	4b04      	ldr	r3, [pc, #16]	@ (8011e4c <tcp_timer_needed+0x30>)
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e3e:	2200      	movs	r2, #0
 8011e40:	4905      	ldr	r1, [pc, #20]	@ (8011e58 <tcp_timer_needed+0x3c>)
 8011e42:	20fa      	movs	r0, #250	@ 0xfa
 8011e44:	f000 f8cc 	bl	8011fe0 <sys_timeout>
  }
}
 8011e48:	bf00      	nop
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20008808 	.word	0x20008808
 8011e50:	200087bc 	.word	0x200087bc
 8011e54:	200087c0 	.word	0x200087c0
 8011e58:	08011dd5 	.word	0x08011dd5

08011e5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b086      	sub	sp, #24
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011e68:	2007      	movs	r0, #7
 8011e6a:	f7f9 fc4b 	bl	800b704 <memp_malloc>
 8011e6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d109      	bne.n	8011e8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d151      	bne.n	8011f20 <sys_timeout_abs+0xc4>
 8011e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8011f28 <sys_timeout_abs+0xcc>)
 8011e7e:	22be      	movs	r2, #190	@ 0xbe
 8011e80:	492a      	ldr	r1, [pc, #168]	@ (8011f2c <sys_timeout_abs+0xd0>)
 8011e82:	482b      	ldr	r0, [pc, #172]	@ (8011f30 <sys_timeout_abs+0xd4>)
 8011e84:	f006 f9f2 	bl	801826c <iprintf>
    return;
 8011e88:	e04a      	b.n	8011f20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	68fa      	ldr	r2, [r7, #12]
 8011ea0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011ea2:	4b24      	ldr	r3, [pc, #144]	@ (8011f34 <sys_timeout_abs+0xd8>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d103      	bne.n	8011eb2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011eaa:	4a22      	ldr	r2, [pc, #136]	@ (8011f34 <sys_timeout_abs+0xd8>)
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	6013      	str	r3, [r2, #0]
    return;
 8011eb0:	e037      	b.n	8011f22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	685a      	ldr	r2, [r3, #4]
 8011eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8011f34 <sys_timeout_abs+0xd8>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	1ad3      	subs	r3, r2, r3
 8011ebe:	0fdb      	lsrs	r3, r3, #31
 8011ec0:	f003 0301 	and.w	r3, r3, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d007      	beq.n	8011eda <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011eca:	4b1a      	ldr	r3, [pc, #104]	@ (8011f34 <sys_timeout_abs+0xd8>)
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011ed2:	4a18      	ldr	r2, [pc, #96]	@ (8011f34 <sys_timeout_abs+0xd8>)
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	6013      	str	r3, [r2, #0]
 8011ed8:	e023      	b.n	8011f22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011eda:	4b16      	ldr	r3, [pc, #88]	@ (8011f34 <sys_timeout_abs+0xd8>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	617b      	str	r3, [r7, #20]
 8011ee0:	e01a      	b.n	8011f18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00b      	beq.n	8011f02 <sys_timeout_abs+0xa6>
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	685a      	ldr	r2, [r3, #4]
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	1ad3      	subs	r3, r2, r3
 8011ef6:	0fdb      	lsrs	r3, r3, #31
 8011ef8:	f003 0301 	and.w	r3, r3, #1
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d007      	beq.n	8011f12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	693a      	ldr	r2, [r7, #16]
 8011f0e:	601a      	str	r2, [r3, #0]
        break;
 8011f10:	e007      	b.n	8011f22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	617b      	str	r3, [r7, #20]
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d1e1      	bne.n	8011ee2 <sys_timeout_abs+0x86>
 8011f1e:	e000      	b.n	8011f22 <sys_timeout_abs+0xc6>
    return;
 8011f20:	bf00      	nop
      }
    }
  }
}
 8011f22:	3718      	adds	r7, #24
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	0801d3e4 	.word	0x0801d3e4
 8011f2c:	0801d418 	.word	0x0801d418
 8011f30:	0801d458 	.word	0x0801d458
 8011f34:	20008800 	.word	0x20008800

08011f38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b086      	sub	sp, #24
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	4798      	blx	r3

  now = sys_now();
 8011f4a:	f7f7 fce5 	bl	8009918 <sys_now>
 8011f4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	4b0f      	ldr	r3, [pc, #60]	@ (8011f94 <lwip_cyclic_timer+0x5c>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4413      	add	r3, r2
 8011f5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	0fdb      	lsrs	r3, r3, #31
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d009      	beq.n	8011f82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	4413      	add	r3, r2
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	4907      	ldr	r1, [pc, #28]	@ (8011f98 <lwip_cyclic_timer+0x60>)
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7ff ff6e 	bl	8011e5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011f80:	e004      	b.n	8011f8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	4904      	ldr	r1, [pc, #16]	@ (8011f98 <lwip_cyclic_timer+0x60>)
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f7ff ff68 	bl	8011e5c <sys_timeout_abs>
}
 8011f8c:	bf00      	nop
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	20008804 	.word	0x20008804
 8011f98:	08011f39 	.word	0x08011f39

08011f9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	607b      	str	r3, [r7, #4]
 8011fa6:	e00e      	b.n	8011fc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8011fd8 <sys_timeouts_init+0x3c>)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	4a08      	ldr	r2, [pc, #32]	@ (8011fd8 <sys_timeouts_init+0x3c>)
 8011fb6:	4413      	add	r3, r2
 8011fb8:	461a      	mov	r2, r3
 8011fba:	4908      	ldr	r1, [pc, #32]	@ (8011fdc <sys_timeouts_init+0x40>)
 8011fbc:	f000 f810 	bl	8011fe0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	607b      	str	r3, [r7, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	d9ed      	bls.n	8011fa8 <sys_timeouts_init+0xc>
  }
}
 8011fcc:	bf00      	nop
 8011fce:	bf00      	nop
 8011fd0:	3708      	adds	r7, #8
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	0801e4a0 	.word	0x0801e4a0
 8011fdc:	08011f39 	.word	0x08011f39

08011fe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011ff2:	d306      	bcc.n	8012002 <sys_timeout+0x22>
 8011ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8012020 <sys_timeout+0x40>)
 8011ff6:	f240 1229 	movw	r2, #297	@ 0x129
 8011ffa:	490a      	ldr	r1, [pc, #40]	@ (8012024 <sys_timeout+0x44>)
 8011ffc:	480a      	ldr	r0, [pc, #40]	@ (8012028 <sys_timeout+0x48>)
 8011ffe:	f006 f935 	bl	801826c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012002:	f7f7 fc89 	bl	8009918 <sys_now>
 8012006:	4602      	mov	r2, r0
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	4413      	add	r3, r2
 801200c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	68b9      	ldr	r1, [r7, #8]
 8012012:	6978      	ldr	r0, [r7, #20]
 8012014:	f7ff ff22 	bl	8011e5c <sys_timeout_abs>
#endif
}
 8012018:	bf00      	nop
 801201a:	3718      	adds	r7, #24
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	0801d3e4 	.word	0x0801d3e4
 8012024:	0801d480 	.word	0x0801d480
 8012028:	0801d458 	.word	0x0801d458

0801202c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012032:	f7f7 fc71 	bl	8009918 <sys_now>
 8012036:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012038:	4b1a      	ldr	r3, [pc, #104]	@ (80120a4 <sys_check_timeouts+0x78>)
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	b2db      	uxtb	r3, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	d001      	beq.n	8012046 <sys_check_timeouts+0x1a>
 8012042:	f7f9 ff29 	bl	800be98 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012046:	4b18      	ldr	r3, [pc, #96]	@ (80120a8 <sys_check_timeouts+0x7c>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d022      	beq.n	8012098 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	68fa      	ldr	r2, [r7, #12]
 8012058:	1ad3      	subs	r3, r2, r3
 801205a:	0fdb      	lsrs	r3, r3, #31
 801205c:	f003 0301 	and.w	r3, r3, #1
 8012060:	b2db      	uxtb	r3, r3
 8012062:	2b00      	cmp	r3, #0
 8012064:	d11a      	bne.n	801209c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	4a0f      	ldr	r2, [pc, #60]	@ (80120a8 <sys_check_timeouts+0x7c>)
 801206c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	689b      	ldr	r3, [r3, #8]
 8012072:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	4a0b      	ldr	r2, [pc, #44]	@ (80120ac <sys_check_timeouts+0x80>)
 8012080:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012082:	68b9      	ldr	r1, [r7, #8]
 8012084:	2007      	movs	r0, #7
 8012086:	f7f9 fbad 	bl	800b7e4 <memp_free>
    if (handler != NULL) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d0d3      	beq.n	8012038 <sys_check_timeouts+0xc>
      handler(arg);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6838      	ldr	r0, [r7, #0]
 8012094:	4798      	blx	r3
  do {
 8012096:	e7cf      	b.n	8012038 <sys_check_timeouts+0xc>
      return;
 8012098:	bf00      	nop
 801209a:	e000      	b.n	801209e <sys_check_timeouts+0x72>
      return;
 801209c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	200087ad 	.word	0x200087ad
 80120a8:	20008800 	.word	0x20008800
 80120ac:	20008804 	.word	0x20008804

080120b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80120b4:	f004 fd1c 	bl	8016af0 <rand>
 80120b8:	4603      	mov	r3, r0
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80120c6:	b29a      	uxth	r2, r3
 80120c8:	4b01      	ldr	r3, [pc, #4]	@ (80120d0 <udp_init+0x20>)
 80120ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80120cc:	bf00      	nop
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	2000002c 	.word	0x2000002c

080120d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b083      	sub	sp, #12
 80120d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80120da:	2300      	movs	r3, #0
 80120dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80120de:	4b17      	ldr	r3, [pc, #92]	@ (801213c <udp_new_port+0x68>)
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	b291      	uxth	r1, r2
 80120e6:	4a15      	ldr	r2, [pc, #84]	@ (801213c <udp_new_port+0x68>)
 80120e8:	8011      	strh	r1, [r2, #0]
 80120ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d103      	bne.n	80120fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80120f2:	4b12      	ldr	r3, [pc, #72]	@ (801213c <udp_new_port+0x68>)
 80120f4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80120f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120fa:	4b11      	ldr	r3, [pc, #68]	@ (8012140 <udp_new_port+0x6c>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	603b      	str	r3, [r7, #0]
 8012100:	e011      	b.n	8012126 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	8a5a      	ldrh	r2, [r3, #18]
 8012106:	4b0d      	ldr	r3, [pc, #52]	@ (801213c <udp_new_port+0x68>)
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	429a      	cmp	r2, r3
 801210c:	d108      	bne.n	8012120 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801210e:	88fb      	ldrh	r3, [r7, #6]
 8012110:	3301      	adds	r3, #1
 8012112:	80fb      	strh	r3, [r7, #6]
 8012114:	88fb      	ldrh	r3, [r7, #6]
 8012116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801211a:	d3e0      	bcc.n	80120de <udp_new_port+0xa>
        return 0;
 801211c:	2300      	movs	r3, #0
 801211e:	e007      	b.n	8012130 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	603b      	str	r3, [r7, #0]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1ea      	bne.n	8012102 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801212c:	4b03      	ldr	r3, [pc, #12]	@ (801213c <udp_new_port+0x68>)
 801212e:	881b      	ldrh	r3, [r3, #0]
}
 8012130:	4618      	mov	r0, r3
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr
 801213c:	2000002c 	.word	0x2000002c
 8012140:	2000880c 	.word	0x2000880c

08012144 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b084      	sub	sp, #16
 8012148:	af00      	add	r7, sp, #0
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	4613      	mov	r3, r2
 8012150:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d105      	bne.n	8012164 <udp_input_local_match+0x20>
 8012158:	4b27      	ldr	r3, [pc, #156]	@ (80121f8 <udp_input_local_match+0xb4>)
 801215a:	2287      	movs	r2, #135	@ 0x87
 801215c:	4927      	ldr	r1, [pc, #156]	@ (80121fc <udp_input_local_match+0xb8>)
 801215e:	4828      	ldr	r0, [pc, #160]	@ (8012200 <udp_input_local_match+0xbc>)
 8012160:	f006 f884 	bl	801826c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d105      	bne.n	8012176 <udp_input_local_match+0x32>
 801216a:	4b23      	ldr	r3, [pc, #140]	@ (80121f8 <udp_input_local_match+0xb4>)
 801216c:	2288      	movs	r2, #136	@ 0x88
 801216e:	4925      	ldr	r1, [pc, #148]	@ (8012204 <udp_input_local_match+0xc0>)
 8012170:	4823      	ldr	r0, [pc, #140]	@ (8012200 <udp_input_local_match+0xbc>)
 8012172:	f006 f87b 	bl	801826c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	7a1b      	ldrb	r3, [r3, #8]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00b      	beq.n	8012196 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	7a1a      	ldrb	r2, [r3, #8]
 8012182:	4b21      	ldr	r3, [pc, #132]	@ (8012208 <udp_input_local_match+0xc4>)
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801218a:	3301      	adds	r3, #1
 801218c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801218e:	429a      	cmp	r2, r3
 8012190:	d001      	beq.n	8012196 <udp_input_local_match+0x52>
    return 0;
 8012192:	2300      	movs	r3, #0
 8012194:	e02b      	b.n	80121ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012196:	79fb      	ldrb	r3, [r7, #7]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d018      	beq.n	80121ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d013      	beq.n	80121ca <udp_input_local_match+0x86>
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00f      	beq.n	80121ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80121aa:	4b17      	ldr	r3, [pc, #92]	@ (8012208 <udp_input_local_match+0xc4>)
 80121ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80121ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b2:	d00a      	beq.n	80121ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	4b13      	ldr	r3, [pc, #76]	@ (8012208 <udp_input_local_match+0xc4>)
 80121ba:	695b      	ldr	r3, [r3, #20]
 80121bc:	405a      	eors	r2, r3
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	3308      	adds	r3, #8
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d110      	bne.n	80121ec <udp_input_local_match+0xa8>
          return 1;
 80121ca:	2301      	movs	r3, #1
 80121cc:	e00f      	b.n	80121ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d009      	beq.n	80121e8 <udp_input_local_match+0xa4>
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d005      	beq.n	80121e8 <udp_input_local_match+0xa4>
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	4b09      	ldr	r3, [pc, #36]	@ (8012208 <udp_input_local_match+0xc4>)
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d101      	bne.n	80121ec <udp_input_local_match+0xa8>
        return 1;
 80121e8:	2301      	movs	r3, #1
 80121ea:	e000      	b.n	80121ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	0801d4cc 	.word	0x0801d4cc
 80121fc:	0801d4fc 	.word	0x0801d4fc
 8012200:	0801d520 	.word	0x0801d520
 8012204:	0801d548 	.word	0x0801d548
 8012208:	20005188 	.word	0x20005188

0801220c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801220c:	b590      	push	{r4, r7, lr}
 801220e:	b08d      	sub	sp, #52	@ 0x34
 8012210:	af02      	add	r7, sp, #8
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d105      	bne.n	801222c <udp_input+0x20>
 8012220:	4b7c      	ldr	r3, [pc, #496]	@ (8012414 <udp_input+0x208>)
 8012222:	22cf      	movs	r2, #207	@ 0xcf
 8012224:	497c      	ldr	r1, [pc, #496]	@ (8012418 <udp_input+0x20c>)
 8012226:	487d      	ldr	r0, [pc, #500]	@ (801241c <udp_input+0x210>)
 8012228:	f006 f820 	bl	801826c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d105      	bne.n	801223e <udp_input+0x32>
 8012232:	4b78      	ldr	r3, [pc, #480]	@ (8012414 <udp_input+0x208>)
 8012234:	22d0      	movs	r2, #208	@ 0xd0
 8012236:	497a      	ldr	r1, [pc, #488]	@ (8012420 <udp_input+0x214>)
 8012238:	4878      	ldr	r0, [pc, #480]	@ (801241c <udp_input+0x210>)
 801223a:	f006 f817 	bl	801826c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	895b      	ldrh	r3, [r3, #10]
 8012242:	2b07      	cmp	r3, #7
 8012244:	d803      	bhi.n	801224e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f7fa f960 	bl	800c50c <pbuf_free>
    goto end;
 801224c:	e0de      	b.n	801240c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012254:	4b73      	ldr	r3, [pc, #460]	@ (8012424 <udp_input+0x218>)
 8012256:	695b      	ldr	r3, [r3, #20]
 8012258:	4a72      	ldr	r2, [pc, #456]	@ (8012424 <udp_input+0x218>)
 801225a:	6812      	ldr	r2, [r2, #0]
 801225c:	4611      	mov	r1, r2
 801225e:	4618      	mov	r0, r3
 8012260:	f002 fc96 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 8012264:	4603      	mov	r3, r0
 8012266:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	881b      	ldrh	r3, [r3, #0]
 801226c:	b29b      	uxth	r3, r3
 801226e:	4618      	mov	r0, r3
 8012270:	f7f8 fd60 	bl	800ad34 <lwip_htons>
 8012274:	4603      	mov	r3, r0
 8012276:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	885b      	ldrh	r3, [r3, #2]
 801227c:	b29b      	uxth	r3, r3
 801227e:	4618      	mov	r0, r3
 8012280:	f7f8 fd58 	bl	800ad34 <lwip_htons>
 8012284:	4603      	mov	r3, r0
 8012286:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012288:	2300      	movs	r3, #0
 801228a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801228c:	2300      	movs	r3, #0
 801228e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012290:	2300      	movs	r3, #0
 8012292:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012294:	4b64      	ldr	r3, [pc, #400]	@ (8012428 <udp_input+0x21c>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	627b      	str	r3, [r7, #36]	@ 0x24
 801229a:	e054      	b.n	8012346 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229e:	8a5b      	ldrh	r3, [r3, #18]
 80122a0:	89fa      	ldrh	r2, [r7, #14]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d14a      	bne.n	801233c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80122a6:	7cfb      	ldrb	r3, [r7, #19]
 80122a8:	461a      	mov	r2, r3
 80122aa:	6839      	ldr	r1, [r7, #0]
 80122ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80122ae:	f7ff ff49 	bl	8012144 <udp_input_local_match>
 80122b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d041      	beq.n	801233c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80122b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ba:	7c1b      	ldrb	r3, [r3, #16]
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d11d      	bne.n	8012300 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d102      	bne.n	80122d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80122ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122cc:	61fb      	str	r3, [r7, #28]
 80122ce:	e017      	b.n	8012300 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80122d0:	7cfb      	ldrb	r3, [r7, #19]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d014      	beq.n	8012300 <udp_input+0xf4>
 80122d6:	4b53      	ldr	r3, [pc, #332]	@ (8012424 <udp_input+0x218>)
 80122d8:	695b      	ldr	r3, [r3, #20]
 80122da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122de:	d10f      	bne.n	8012300 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	3304      	adds	r3, #4
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d008      	beq.n	8012300 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80122ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	3304      	adds	r3, #4
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d101      	bne.n	8012300 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80122fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012302:	8a9b      	ldrh	r3, [r3, #20]
 8012304:	8a3a      	ldrh	r2, [r7, #16]
 8012306:	429a      	cmp	r2, r3
 8012308:	d118      	bne.n	801233c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801230e:	2b00      	cmp	r3, #0
 8012310:	d005      	beq.n	801231e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	4b43      	ldr	r3, [pc, #268]	@ (8012424 <udp_input+0x218>)
 8012318:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801231a:	429a      	cmp	r2, r3
 801231c:	d10e      	bne.n	801233c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801231e:	6a3b      	ldr	r3, [r7, #32]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d014      	beq.n	801234e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012326:	68da      	ldr	r2, [r3, #12]
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801232c:	4b3e      	ldr	r3, [pc, #248]	@ (8012428 <udp_input+0x21c>)
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012332:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012334:	4a3c      	ldr	r2, [pc, #240]	@ (8012428 <udp_input+0x21c>)
 8012336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012338:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801233a:	e008      	b.n	801234e <udp_input+0x142>
      }
    }

    prev = pcb;
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	627b      	str	r3, [r7, #36]	@ 0x24
 8012346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012348:	2b00      	cmp	r3, #0
 801234a:	d1a7      	bne.n	801229c <udp_input+0x90>
 801234c:	e000      	b.n	8012350 <udp_input+0x144>
        break;
 801234e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012352:	2b00      	cmp	r3, #0
 8012354:	d101      	bne.n	801235a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <udp_input+0x15a>
    for_us = 1;
 8012360:	2301      	movs	r3, #1
 8012362:	76fb      	strb	r3, [r7, #27]
 8012364:	e00a      	b.n	801237c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	3304      	adds	r3, #4
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	4b2d      	ldr	r3, [pc, #180]	@ (8012424 <udp_input+0x218>)
 801236e:	695b      	ldr	r3, [r3, #20]
 8012370:	429a      	cmp	r2, r3
 8012372:	bf0c      	ite	eq
 8012374:	2301      	moveq	r3, #1
 8012376:	2300      	movne	r3, #0
 8012378:	b2db      	uxtb	r3, r3
 801237a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801237c:	7efb      	ldrb	r3, [r7, #27]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d041      	beq.n	8012406 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012382:	2108      	movs	r1, #8
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7fa f83b 	bl	800c400 <pbuf_remove_header>
 801238a:	4603      	mov	r3, r0
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00a      	beq.n	80123a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012390:	4b20      	ldr	r3, [pc, #128]	@ (8012414 <udp_input+0x208>)
 8012392:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8012396:	4925      	ldr	r1, [pc, #148]	@ (801242c <udp_input+0x220>)
 8012398:	4820      	ldr	r0, [pc, #128]	@ (801241c <udp_input+0x210>)
 801239a:	f005 ff67 	bl	801826c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7fa f8b4 	bl	800c50c <pbuf_free>
      goto end;
 80123a4:	e032      	b.n	801240c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80123a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d012      	beq.n	80123d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80123ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ae:	6a1b      	ldr	r3, [r3, #32]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d00a      	beq.n	80123ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80123b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b6:	6a1c      	ldr	r4, [r3, #32]
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80123bc:	8a3b      	ldrh	r3, [r7, #16]
 80123be:	9300      	str	r3, [sp, #0]
 80123c0:	4b1b      	ldr	r3, [pc, #108]	@ (8012430 <udp_input+0x224>)
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80123c8:	e021      	b.n	801240e <udp_input+0x202>
        pbuf_free(p);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f7fa f89e 	bl	800c50c <pbuf_free>
        goto end;
 80123d0:	e01c      	b.n	801240c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80123d2:	7cfb      	ldrb	r3, [r7, #19]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d112      	bne.n	80123fe <udp_input+0x1f2>
 80123d8:	4b12      	ldr	r3, [pc, #72]	@ (8012424 <udp_input+0x218>)
 80123da:	695b      	ldr	r3, [r3, #20]
 80123dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123e0:	2be0      	cmp	r3, #224	@ 0xe0
 80123e2:	d00c      	beq.n	80123fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80123e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012424 <udp_input+0x218>)
 80123e6:	899b      	ldrh	r3, [r3, #12]
 80123e8:	3308      	adds	r3, #8
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	b21b      	sxth	r3, r3
 80123ee:	4619      	mov	r1, r3
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7fa f878 	bl	800c4e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80123f6:	2103      	movs	r1, #3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f001 fc63 	bl	8013cc4 <icmp_dest_unreach>
      pbuf_free(p);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7fa f884 	bl	800c50c <pbuf_free>
  return;
 8012404:	e003      	b.n	801240e <udp_input+0x202>
    pbuf_free(p);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7fa f880 	bl	800c50c <pbuf_free>
  return;
 801240c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801240e:	372c      	adds	r7, #44	@ 0x2c
 8012410:	46bd      	mov	sp, r7
 8012412:	bd90      	pop	{r4, r7, pc}
 8012414:	0801d4cc 	.word	0x0801d4cc
 8012418:	0801d570 	.word	0x0801d570
 801241c:	0801d520 	.word	0x0801d520
 8012420:	0801d588 	.word	0x0801d588
 8012424:	20005188 	.word	0x20005188
 8012428:	2000880c 	.word	0x2000880c
 801242c:	0801d5a4 	.word	0x0801d5a4
 8012430:	20005198 	.word	0x20005198

08012434 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d109      	bne.n	8012458 <udp_send+0x24>
 8012444:	4b11      	ldr	r3, [pc, #68]	@ (801248c <udp_send+0x58>)
 8012446:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801244a:	4911      	ldr	r1, [pc, #68]	@ (8012490 <udp_send+0x5c>)
 801244c:	4811      	ldr	r0, [pc, #68]	@ (8012494 <udp_send+0x60>)
 801244e:	f005 ff0d 	bl	801826c <iprintf>
 8012452:	f06f 030f 	mvn.w	r3, #15
 8012456:	e015      	b.n	8012484 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d109      	bne.n	8012472 <udp_send+0x3e>
 801245e:	4b0b      	ldr	r3, [pc, #44]	@ (801248c <udp_send+0x58>)
 8012460:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8012464:	490c      	ldr	r1, [pc, #48]	@ (8012498 <udp_send+0x64>)
 8012466:	480b      	ldr	r0, [pc, #44]	@ (8012494 <udp_send+0x60>)
 8012468:	f005 ff00 	bl	801826c <iprintf>
 801246c:	f06f 030f 	mvn.w	r3, #15
 8012470:	e008      	b.n	8012484 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	1d1a      	adds	r2, r3, #4
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8a9b      	ldrh	r3, [r3, #20]
 801247a:	6839      	ldr	r1, [r7, #0]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f80d 	bl	801249c <udp_sendto>
 8012482:	4603      	mov	r3, r0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	0801d4cc 	.word	0x0801d4cc
 8012490:	0801d5c0 	.word	0x0801d5c0
 8012494:	0801d520 	.word	0x0801d520
 8012498:	0801d5d8 	.word	0x0801d5d8

0801249c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b088      	sub	sp, #32
 80124a0:	af02      	add	r7, sp, #8
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	607a      	str	r2, [r7, #4]
 80124a8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d109      	bne.n	80124c4 <udp_sendto+0x28>
 80124b0:	4b36      	ldr	r3, [pc, #216]	@ (801258c <udp_sendto+0xf0>)
 80124b2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80124b6:	4936      	ldr	r1, [pc, #216]	@ (8012590 <udp_sendto+0xf4>)
 80124b8:	4836      	ldr	r0, [pc, #216]	@ (8012594 <udp_sendto+0xf8>)
 80124ba:	f005 fed7 	bl	801826c <iprintf>
 80124be:	f06f 030f 	mvn.w	r3, #15
 80124c2:	e05e      	b.n	8012582 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d109      	bne.n	80124de <udp_sendto+0x42>
 80124ca:	4b30      	ldr	r3, [pc, #192]	@ (801258c <udp_sendto+0xf0>)
 80124cc:	f240 2219 	movw	r2, #537	@ 0x219
 80124d0:	4931      	ldr	r1, [pc, #196]	@ (8012598 <udp_sendto+0xfc>)
 80124d2:	4830      	ldr	r0, [pc, #192]	@ (8012594 <udp_sendto+0xf8>)
 80124d4:	f005 feca 	bl	801826c <iprintf>
 80124d8:	f06f 030f 	mvn.w	r3, #15
 80124dc:	e051      	b.n	8012582 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d109      	bne.n	80124f8 <udp_sendto+0x5c>
 80124e4:	4b29      	ldr	r3, [pc, #164]	@ (801258c <udp_sendto+0xf0>)
 80124e6:	f240 221a 	movw	r2, #538	@ 0x21a
 80124ea:	492c      	ldr	r1, [pc, #176]	@ (801259c <udp_sendto+0x100>)
 80124ec:	4829      	ldr	r0, [pc, #164]	@ (8012594 <udp_sendto+0xf8>)
 80124ee:	f005 febd 	bl	801826c <iprintf>
 80124f2:	f06f 030f 	mvn.w	r3, #15
 80124f6:	e044      	b.n	8012582 <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	7a1b      	ldrb	r3, [r3, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d006      	beq.n	801250e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	7a1b      	ldrb	r3, [r3, #8]
 8012504:	4618      	mov	r0, r3
 8012506:	f7f9 fca1 	bl	800be4c <netif_get_by_index>
 801250a:	6178      	str	r0, [r7, #20]
 801250c:	e029      	b.n	8012562 <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 801250e:	2300      	movs	r3, #0
 8012510:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801251a:	2be0      	cmp	r3, #224	@ 0xe0
 801251c:	d11a      	bne.n	8012554 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	7f1b      	ldrb	r3, [r3, #28]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d006      	beq.n	8012534 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	7f1b      	ldrb	r3, [r3, #28]
 801252a:	4618      	mov	r0, r3
 801252c:	f7f9 fc8e 	bl	800be4c <netif_get_by_index>
 8012530:	6178      	str	r0, [r7, #20]
 8012532:	e00f      	b.n	8012554 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	699b      	ldr	r3, [r3, #24]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00b      	beq.n	8012554 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	699a      	ldr	r2, [r3, #24]
 8012540:	4b17      	ldr	r3, [pc, #92]	@ (80125a0 <udp_sendto+0x104>)
 8012542:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8012544:	429a      	cmp	r2, r3
 8012546:	d005      	beq.n	8012554 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	3318      	adds	r3, #24
 801254c:	4618      	mov	r0, r3
 801254e:	f001 ffc9 	bl	80144e4 <ip4_route>
 8012552:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d103      	bne.n	8012562 <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f001 ffc2 	bl	80144e4 <ip4_route>
 8012560:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d102      	bne.n	801256e <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012568:	f06f 0303 	mvn.w	r3, #3
 801256c:	e009      	b.n	8012582 <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801256e:	887a      	ldrh	r2, [r7, #2]
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	4613      	mov	r3, r2
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	68b9      	ldr	r1, [r7, #8]
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f000 f812 	bl	80125a4 <udp_sendto_if>
 8012580:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012582:	4618      	mov	r0, r3
 8012584:	3718      	adds	r7, #24
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	0801d4cc 	.word	0x0801d4cc
 8012590:	0801d5f0 	.word	0x0801d5f0
 8012594:	0801d520 	.word	0x0801d520
 8012598:	0801d608 	.word	0x0801d608
 801259c:	0801d624 	.word	0x0801d624
 80125a0:	0801e4c4 	.word	0x0801e4c4

080125a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b088      	sub	sp, #32
 80125a8:	af02      	add	r7, sp, #8
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
 80125b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d109      	bne.n	80125cc <udp_sendto_if+0x28>
 80125b8:	4b2e      	ldr	r3, [pc, #184]	@ (8012674 <udp_sendto_if+0xd0>)
 80125ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80125be:	492e      	ldr	r1, [pc, #184]	@ (8012678 <udp_sendto_if+0xd4>)
 80125c0:	482e      	ldr	r0, [pc, #184]	@ (801267c <udp_sendto_if+0xd8>)
 80125c2:	f005 fe53 	bl	801826c <iprintf>
 80125c6:	f06f 030f 	mvn.w	r3, #15
 80125ca:	e04f      	b.n	801266c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d109      	bne.n	80125e6 <udp_sendto_if+0x42>
 80125d2:	4b28      	ldr	r3, [pc, #160]	@ (8012674 <udp_sendto_if+0xd0>)
 80125d4:	f240 2281 	movw	r2, #641	@ 0x281
 80125d8:	4929      	ldr	r1, [pc, #164]	@ (8012680 <udp_sendto_if+0xdc>)
 80125da:	4828      	ldr	r0, [pc, #160]	@ (801267c <udp_sendto_if+0xd8>)
 80125dc:	f005 fe46 	bl	801826c <iprintf>
 80125e0:	f06f 030f 	mvn.w	r3, #15
 80125e4:	e042      	b.n	801266c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d109      	bne.n	8012600 <udp_sendto_if+0x5c>
 80125ec:	4b21      	ldr	r3, [pc, #132]	@ (8012674 <udp_sendto_if+0xd0>)
 80125ee:	f240 2282 	movw	r2, #642	@ 0x282
 80125f2:	4924      	ldr	r1, [pc, #144]	@ (8012684 <udp_sendto_if+0xe0>)
 80125f4:	4821      	ldr	r0, [pc, #132]	@ (801267c <udp_sendto_if+0xd8>)
 80125f6:	f005 fe39 	bl	801826c <iprintf>
 80125fa:	f06f 030f 	mvn.w	r3, #15
 80125fe:	e035      	b.n	801266c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012600:	6a3b      	ldr	r3, [r7, #32]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d109      	bne.n	801261a <udp_sendto_if+0x76>
 8012606:	4b1b      	ldr	r3, [pc, #108]	@ (8012674 <udp_sendto_if+0xd0>)
 8012608:	f240 2283 	movw	r2, #643	@ 0x283
 801260c:	491e      	ldr	r1, [pc, #120]	@ (8012688 <udp_sendto_if+0xe4>)
 801260e:	481b      	ldr	r0, [pc, #108]	@ (801267c <udp_sendto_if+0xd8>)
 8012610:	f005 fe2c 	bl	801826c <iprintf>
 8012614:	f06f 030f 	mvn.w	r3, #15
 8012618:	e028      	b.n	801266c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d009      	beq.n	8012634 <udp_sendto_if+0x90>
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d005      	beq.n	8012634 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012630:	2be0      	cmp	r3, #224	@ 0xe0
 8012632:	d103      	bne.n	801263c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012634:	6a3b      	ldr	r3, [r7, #32]
 8012636:	3304      	adds	r3, #4
 8012638:	617b      	str	r3, [r7, #20]
 801263a:	e00b      	b.n	8012654 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681a      	ldr	r2, [r3, #0]
 8012640:	6a3b      	ldr	r3, [r7, #32]
 8012642:	3304      	adds	r3, #4
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	429a      	cmp	r2, r3
 8012648:	d002      	beq.n	8012650 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801264a:	f06f 0303 	mvn.w	r3, #3
 801264e:	e00d      	b.n	801266c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012654:	887a      	ldrh	r2, [r7, #2]
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	4613      	mov	r3, r2
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	68b9      	ldr	r1, [r7, #8]
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f000 f811 	bl	801268c <udp_sendto_if_src>
 801266a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801266c:	4618      	mov	r0, r3
 801266e:	3718      	adds	r7, #24
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	0801d4cc 	.word	0x0801d4cc
 8012678:	0801d640 	.word	0x0801d640
 801267c:	0801d520 	.word	0x0801d520
 8012680:	0801d65c 	.word	0x0801d65c
 8012684:	0801d678 	.word	0x0801d678
 8012688:	0801d698 	.word	0x0801d698

0801268c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08c      	sub	sp, #48	@ 0x30
 8012690:	af04      	add	r7, sp, #16
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
 8012698:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d109      	bne.n	80126b4 <udp_sendto_if_src+0x28>
 80126a0:	4b73      	ldr	r3, [pc, #460]	@ (8012870 <udp_sendto_if_src+0x1e4>)
 80126a2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80126a6:	4973      	ldr	r1, [pc, #460]	@ (8012874 <udp_sendto_if_src+0x1e8>)
 80126a8:	4873      	ldr	r0, [pc, #460]	@ (8012878 <udp_sendto_if_src+0x1ec>)
 80126aa:	f005 fddf 	bl	801826c <iprintf>
 80126ae:	f06f 030f 	mvn.w	r3, #15
 80126b2:	e0d8      	b.n	8012866 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d109      	bne.n	80126ce <udp_sendto_if_src+0x42>
 80126ba:	4b6d      	ldr	r3, [pc, #436]	@ (8012870 <udp_sendto_if_src+0x1e4>)
 80126bc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80126c0:	496e      	ldr	r1, [pc, #440]	@ (801287c <udp_sendto_if_src+0x1f0>)
 80126c2:	486d      	ldr	r0, [pc, #436]	@ (8012878 <udp_sendto_if_src+0x1ec>)
 80126c4:	f005 fdd2 	bl	801826c <iprintf>
 80126c8:	f06f 030f 	mvn.w	r3, #15
 80126cc:	e0cb      	b.n	8012866 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d109      	bne.n	80126e8 <udp_sendto_if_src+0x5c>
 80126d4:	4b66      	ldr	r3, [pc, #408]	@ (8012870 <udp_sendto_if_src+0x1e4>)
 80126d6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80126da:	4969      	ldr	r1, [pc, #420]	@ (8012880 <udp_sendto_if_src+0x1f4>)
 80126dc:	4866      	ldr	r0, [pc, #408]	@ (8012878 <udp_sendto_if_src+0x1ec>)
 80126de:	f005 fdc5 	bl	801826c <iprintf>
 80126e2:	f06f 030f 	mvn.w	r3, #15
 80126e6:	e0be      	b.n	8012866 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80126e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d109      	bne.n	8012702 <udp_sendto_if_src+0x76>
 80126ee:	4b60      	ldr	r3, [pc, #384]	@ (8012870 <udp_sendto_if_src+0x1e4>)
 80126f0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80126f4:	4963      	ldr	r1, [pc, #396]	@ (8012884 <udp_sendto_if_src+0x1f8>)
 80126f6:	4860      	ldr	r0, [pc, #384]	@ (8012878 <udp_sendto_if_src+0x1ec>)
 80126f8:	f005 fdb8 	bl	801826c <iprintf>
 80126fc:	f06f 030f 	mvn.w	r3, #15
 8012700:	e0b1      	b.n	8012866 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012704:	2b00      	cmp	r3, #0
 8012706:	d109      	bne.n	801271c <udp_sendto_if_src+0x90>
 8012708:	4b59      	ldr	r3, [pc, #356]	@ (8012870 <udp_sendto_if_src+0x1e4>)
 801270a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801270e:	495e      	ldr	r1, [pc, #376]	@ (8012888 <udp_sendto_if_src+0x1fc>)
 8012710:	4859      	ldr	r0, [pc, #356]	@ (8012878 <udp_sendto_if_src+0x1ec>)
 8012712:	f005 fdab 	bl	801826c <iprintf>
 8012716:	f06f 030f 	mvn.w	r3, #15
 801271a:	e0a4      	b.n	8012866 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	8a5b      	ldrh	r3, [r3, #18]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d10f      	bne.n	8012744 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012724:	68f9      	ldr	r1, [r7, #12]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	8a5b      	ldrh	r3, [r3, #18]
 801272a:	461a      	mov	r2, r3
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f000 f8af 	bl	8012890 <udp_bind>
 8012732:	4603      	mov	r3, r0
 8012734:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012736:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d002      	beq.n	8012744 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801273e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012742:	e090      	b.n	8012866 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	891b      	ldrh	r3, [r3, #8]
 8012748:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801274c:	4293      	cmp	r3, r2
 801274e:	d902      	bls.n	8012756 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012750:	f04f 33ff 	mov.w	r3, #4294967295
 8012754:	e087      	b.n	8012866 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012756:	2108      	movs	r1, #8
 8012758:	68b8      	ldr	r0, [r7, #8]
 801275a:	f7f9 fe41 	bl	800c3e0 <pbuf_add_header>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d015      	beq.n	8012790 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012764:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012768:	2108      	movs	r1, #8
 801276a:	2022      	movs	r0, #34	@ 0x22
 801276c:	f7f9 fbea 	bl	800bf44 <pbuf_alloc>
 8012770:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d102      	bne.n	801277e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012778:	f04f 33ff 	mov.w	r3, #4294967295
 801277c:	e073      	b.n	8012866 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	891b      	ldrh	r3, [r3, #8]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d006      	beq.n	8012794 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012786:	68b9      	ldr	r1, [r7, #8]
 8012788:	69f8      	ldr	r0, [r7, #28]
 801278a:	f7f9 ffd7 	bl	800c73c <pbuf_chain>
 801278e:	e001      	b.n	8012794 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	895b      	ldrh	r3, [r3, #10]
 8012798:	2b07      	cmp	r3, #7
 801279a:	d806      	bhi.n	80127aa <udp_sendto_if_src+0x11e>
 801279c:	4b34      	ldr	r3, [pc, #208]	@ (8012870 <udp_sendto_if_src+0x1e4>)
 801279e:	f240 320d 	movw	r2, #781	@ 0x30d
 80127a2:	493a      	ldr	r1, [pc, #232]	@ (801288c <udp_sendto_if_src+0x200>)
 80127a4:	4834      	ldr	r0, [pc, #208]	@ (8012878 <udp_sendto_if_src+0x1ec>)
 80127a6:	f005 fd61 	bl	801826c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	8a5b      	ldrh	r3, [r3, #18]
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7f8 fabd 	bl	800ad34 <lwip_htons>
 80127ba:	4603      	mov	r3, r0
 80127bc:	461a      	mov	r2, r3
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80127c2:	887b      	ldrh	r3, [r7, #2]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f8 fab5 	bl	800ad34 <lwip_htons>
 80127ca:	4603      	mov	r3, r0
 80127cc:	461a      	mov	r2, r3
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	2200      	movs	r2, #0
 80127d6:	719a      	strb	r2, [r3, #6]
 80127d8:	2200      	movs	r2, #0
 80127da:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	7c1b      	ldrb	r3, [r3, #16]
 80127e0:	f003 0308 	and.w	r3, r3, #8
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d00c      	beq.n	8012802 <udp_sendto_if_src+0x176>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127f0:	2be0      	cmp	r3, #224	@ 0xe0
 80127f2:	d106      	bne.n	8012802 <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	7b5b      	ldrb	r3, [r3, #13]
 80127f8:	f043 0304 	orr.w	r3, r3, #4
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	891b      	ldrh	r3, [r3, #8]
 8012806:	4618      	mov	r0, r3
 8012808:	f7f8 fa94 	bl	800ad34 <lwip_htons>
 801280c:	4603      	mov	r3, r0
 801280e:	461a      	mov	r2, r3
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012814:	2311      	movs	r3, #17
 8012816:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012820:	2be0      	cmp	r3, #224	@ 0xe0
 8012822:	d102      	bne.n	801282a <udp_sendto_if_src+0x19e>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	7f5b      	ldrb	r3, [r3, #29]
 8012828:	e001      	b.n	801282e <udp_sendto_if_src+0x1a2>
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	7adb      	ldrb	r3, [r3, #11]
 801282e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	7a9b      	ldrb	r3, [r3, #10]
 8012834:	7cb9      	ldrb	r1, [r7, #18]
 8012836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012838:	9202      	str	r2, [sp, #8]
 801283a:	7cfa      	ldrb	r2, [r7, #19]
 801283c:	9201      	str	r2, [sp, #4]
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	460b      	mov	r3, r1
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012846:	69f8      	ldr	r0, [r7, #28]
 8012848:	f002 f89f 	bl	801498a <ip4_output_if_src>
 801284c:	4603      	mov	r3, r0
 801284e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012850:	69fa      	ldr	r2, [r7, #28]
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	429a      	cmp	r2, r3
 8012856:	d004      	beq.n	8012862 <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8012858:	69f8      	ldr	r0, [r7, #28]
 801285a:	f7f9 fe57 	bl	800c50c <pbuf_free>
    q = NULL;
 801285e:	2300      	movs	r3, #0
 8012860:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012862:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012866:	4618      	mov	r0, r3
 8012868:	3720      	adds	r7, #32
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	0801d4cc 	.word	0x0801d4cc
 8012874:	0801d6b8 	.word	0x0801d6b8
 8012878:	0801d520 	.word	0x0801d520
 801287c:	0801d6d8 	.word	0x0801d6d8
 8012880:	0801d6f8 	.word	0x0801d6f8
 8012884:	0801d71c 	.word	0x0801d71c
 8012888:	0801d740 	.word	0x0801d740
 801288c:	0801d764 	.word	0x0801d764

08012890 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b086      	sub	sp, #24
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	4613      	mov	r3, r2
 801289c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d101      	bne.n	80128a8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80128a4:	4b39      	ldr	r3, [pc, #228]	@ (801298c <udp_bind+0xfc>)
 80128a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d109      	bne.n	80128c2 <udp_bind+0x32>
 80128ae:	4b38      	ldr	r3, [pc, #224]	@ (8012990 <udp_bind+0x100>)
 80128b0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80128b4:	4937      	ldr	r1, [pc, #220]	@ (8012994 <udp_bind+0x104>)
 80128b6:	4838      	ldr	r0, [pc, #224]	@ (8012998 <udp_bind+0x108>)
 80128b8:	f005 fcd8 	bl	801826c <iprintf>
 80128bc:	f06f 030f 	mvn.w	r3, #15
 80128c0:	e060      	b.n	8012984 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80128c2:	2300      	movs	r3, #0
 80128c4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128c6:	4b35      	ldr	r3, [pc, #212]	@ (801299c <udp_bind+0x10c>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	617b      	str	r3, [r7, #20]
 80128cc:	e009      	b.n	80128e2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d102      	bne.n	80128dc <udp_bind+0x4c>
      rebind = 1;
 80128d6:	2301      	movs	r3, #1
 80128d8:	74fb      	strb	r3, [r7, #19]
      break;
 80128da:	e005      	b.n	80128e8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	617b      	str	r3, [r7, #20]
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d1f2      	bne.n	80128ce <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80128e8:	88fb      	ldrh	r3, [r7, #6]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d109      	bne.n	8012902 <udp_bind+0x72>
    port = udp_new_port();
 80128ee:	f7ff fbf1 	bl	80120d4 <udp_new_port>
 80128f2:	4603      	mov	r3, r0
 80128f4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80128f6:	88fb      	ldrh	r3, [r7, #6]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d12c      	bne.n	8012956 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80128fc:	f06f 0307 	mvn.w	r3, #7
 8012900:	e040      	b.n	8012984 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012902:	4b26      	ldr	r3, [pc, #152]	@ (801299c <udp_bind+0x10c>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	617b      	str	r3, [r7, #20]
 8012908:	e022      	b.n	8012950 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801290a:	68fa      	ldr	r2, [r7, #12]
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	429a      	cmp	r2, r3
 8012910:	d01b      	beq.n	801294a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	8a5b      	ldrh	r3, [r3, #18]
 8012916:	88fa      	ldrh	r2, [r7, #6]
 8012918:	429a      	cmp	r2, r3
 801291a:	d116      	bne.n	801294a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012924:	429a      	cmp	r2, r3
 8012926:	d00d      	beq.n	8012944 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d00a      	beq.n	8012944 <udp_bind+0xb4>
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d006      	beq.n	8012944 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012936:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012938:	2b00      	cmp	r3, #0
 801293a:	d003      	beq.n	8012944 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d102      	bne.n	801294a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012944:	f06f 0307 	mvn.w	r3, #7
 8012948:	e01c      	b.n	8012984 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	617b      	str	r3, [r7, #20]
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1d9      	bne.n	801290a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d002      	beq.n	8012962 <udp_bind+0xd2>
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	e000      	b.n	8012964 <udp_bind+0xd4>
 8012962:	2300      	movs	r3, #0
 8012964:	68fa      	ldr	r2, [r7, #12]
 8012966:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	88fa      	ldrh	r2, [r7, #6]
 801296c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801296e:	7cfb      	ldrb	r3, [r7, #19]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d106      	bne.n	8012982 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012974:	4b09      	ldr	r3, [pc, #36]	@ (801299c <udp_bind+0x10c>)
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801297c:	4a07      	ldr	r2, [pc, #28]	@ (801299c <udp_bind+0x10c>)
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012982:	2300      	movs	r3, #0
}
 8012984:	4618      	mov	r0, r3
 8012986:	3718      	adds	r7, #24
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	0801e4c0 	.word	0x0801e4c0
 8012990:	0801d4cc 	.word	0x0801d4cc
 8012994:	0801d794 	.word	0x0801d794
 8012998:	0801d520 	.word	0x0801d520
 801299c:	2000880c 	.word	0x2000880c

080129a0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b086      	sub	sp, #24
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	4613      	mov	r3, r2
 80129ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d109      	bne.n	80129c8 <udp_connect+0x28>
 80129b4:	4b2c      	ldr	r3, [pc, #176]	@ (8012a68 <udp_connect+0xc8>)
 80129b6:	f240 4235 	movw	r2, #1077	@ 0x435
 80129ba:	492c      	ldr	r1, [pc, #176]	@ (8012a6c <udp_connect+0xcc>)
 80129bc:	482c      	ldr	r0, [pc, #176]	@ (8012a70 <udp_connect+0xd0>)
 80129be:	f005 fc55 	bl	801826c <iprintf>
 80129c2:	f06f 030f 	mvn.w	r3, #15
 80129c6:	e04b      	b.n	8012a60 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d109      	bne.n	80129e2 <udp_connect+0x42>
 80129ce:	4b26      	ldr	r3, [pc, #152]	@ (8012a68 <udp_connect+0xc8>)
 80129d0:	f240 4236 	movw	r2, #1078	@ 0x436
 80129d4:	4927      	ldr	r1, [pc, #156]	@ (8012a74 <udp_connect+0xd4>)
 80129d6:	4826      	ldr	r0, [pc, #152]	@ (8012a70 <udp_connect+0xd0>)
 80129d8:	f005 fc48 	bl	801826c <iprintf>
 80129dc:	f06f 030f 	mvn.w	r3, #15
 80129e0:	e03e      	b.n	8012a60 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	8a5b      	ldrh	r3, [r3, #18]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d10f      	bne.n	8012a0a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80129ea:	68f9      	ldr	r1, [r7, #12]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	8a5b      	ldrh	r3, [r3, #18]
 80129f0:	461a      	mov	r2, r3
 80129f2:	68f8      	ldr	r0, [r7, #12]
 80129f4:	f7ff ff4c 	bl	8012890 <udp_bind>
 80129f8:	4603      	mov	r3, r0
 80129fa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80129fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <udp_connect+0x6a>
      return err;
 8012a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a08:	e02a      	b.n	8012a60 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <udp_connect+0x76>
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	e000      	b.n	8012a18 <udp_connect+0x78>
 8012a16:	2300      	movs	r3, #0
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	88fa      	ldrh	r2, [r7, #6]
 8012a20:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	7c1b      	ldrb	r3, [r3, #16]
 8012a26:	f043 0304 	orr.w	r3, r3, #4
 8012a2a:	b2da      	uxtb	r2, r3
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a30:	4b11      	ldr	r3, [pc, #68]	@ (8012a78 <udp_connect+0xd8>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	617b      	str	r3, [r7, #20]
 8012a36:	e008      	b.n	8012a4a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d101      	bne.n	8012a44 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012a40:	2300      	movs	r3, #0
 8012a42:	e00d      	b.n	8012a60 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	617b      	str	r3, [r7, #20]
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1f3      	bne.n	8012a38 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012a50:	4b09      	ldr	r3, [pc, #36]	@ (8012a78 <udp_connect+0xd8>)
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012a58:	4a07      	ldr	r2, [pc, #28]	@ (8012a78 <udp_connect+0xd8>)
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3718      	adds	r7, #24
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	0801d4cc 	.word	0x0801d4cc
 8012a6c:	0801d7ac 	.word	0x0801d7ac
 8012a70:	0801d520 	.word	0x0801d520
 8012a74:	0801d7c8 	.word	0x0801d7c8
 8012a78:	2000880c 	.word	0x2000880c

08012a7c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b082      	sub	sp, #8
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d107      	bne.n	8012a9a <udp_disconnect+0x1e>
 8012a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ac0 <udp_disconnect+0x44>)
 8012a8c:	f240 426a 	movw	r2, #1130	@ 0x46a
 8012a90:	490c      	ldr	r1, [pc, #48]	@ (8012ac4 <udp_disconnect+0x48>)
 8012a92:	480d      	ldr	r0, [pc, #52]	@ (8012ac8 <udp_disconnect+0x4c>)
 8012a94:	f005 fbea 	bl	801826c <iprintf>
 8012a98:	e00f      	b.n	8012aba <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	7c1b      	ldrb	r3, [r3, #16]
 8012ab0:	f023 0304 	bic.w	r3, r3, #4
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	741a      	strb	r2, [r3, #16]
}
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	0801d4cc 	.word	0x0801d4cc
 8012ac4:	0801d7e4 	.word	0x0801d7e4
 8012ac8:	0801d520 	.word	0x0801d520

08012acc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	60b9      	str	r1, [r7, #8]
 8012ad6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d107      	bne.n	8012aee <udp_recv+0x22>
 8012ade:	4b08      	ldr	r3, [pc, #32]	@ (8012b00 <udp_recv+0x34>)
 8012ae0:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012ae4:	4907      	ldr	r1, [pc, #28]	@ (8012b04 <udp_recv+0x38>)
 8012ae6:	4808      	ldr	r0, [pc, #32]	@ (8012b08 <udp_recv+0x3c>)
 8012ae8:	f005 fbc0 	bl	801826c <iprintf>
 8012aec:	e005      	b.n	8012afa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	0801d4cc 	.word	0x0801d4cc
 8012b04:	0801d800 	.word	0x0801d800
 8012b08:	0801d520 	.word	0x0801d520

08012b0c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d107      	bne.n	8012b2a <udp_remove+0x1e>
 8012b1a:	4b19      	ldr	r3, [pc, #100]	@ (8012b80 <udp_remove+0x74>)
 8012b1c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012b20:	4918      	ldr	r1, [pc, #96]	@ (8012b84 <udp_remove+0x78>)
 8012b22:	4819      	ldr	r0, [pc, #100]	@ (8012b88 <udp_remove+0x7c>)
 8012b24:	f005 fba2 	bl	801826c <iprintf>
 8012b28:	e026      	b.n	8012b78 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012b2a:	4b18      	ldr	r3, [pc, #96]	@ (8012b8c <udp_remove+0x80>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	687a      	ldr	r2, [r7, #4]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d105      	bne.n	8012b40 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012b34:	4b15      	ldr	r3, [pc, #84]	@ (8012b8c <udp_remove+0x80>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	4a14      	ldr	r2, [pc, #80]	@ (8012b8c <udp_remove+0x80>)
 8012b3c:	6013      	str	r3, [r2, #0]
 8012b3e:	e017      	b.n	8012b70 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012b40:	4b12      	ldr	r3, [pc, #72]	@ (8012b8c <udp_remove+0x80>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	60fb      	str	r3, [r7, #12]
 8012b46:	e010      	b.n	8012b6a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d009      	beq.n	8012b64 <udp_remove+0x58>
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d104      	bne.n	8012b64 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	68da      	ldr	r2, [r3, #12]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	60da      	str	r2, [r3, #12]
        break;
 8012b62:	e005      	b.n	8012b70 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	60fb      	str	r3, [r7, #12]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d1eb      	bne.n	8012b48 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012b70:	6879      	ldr	r1, [r7, #4]
 8012b72:	2000      	movs	r0, #0
 8012b74:	f7f8 fe36 	bl	800b7e4 <memp_free>
}
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	0801d4cc 	.word	0x0801d4cc
 8012b84:	0801d818 	.word	0x0801d818
 8012b88:	0801d520 	.word	0x0801d520
 8012b8c:	2000880c 	.word	0x2000880c

08012b90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012b96:	2000      	movs	r0, #0
 8012b98:	f7f8 fdb4 	bl	800b704 <memp_malloc>
 8012b9c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00a      	beq.n	8012bba <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012ba4:	2228      	movs	r2, #40	@ 0x28
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f005 fdc9 	bl	8018740 <memset>
    pcb->ttl = UDP_TTL;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	22ff      	movs	r2, #255	@ 0xff
 8012bb2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	22ff      	movs	r2, #255	@ 0xff
 8012bb8:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012bba:	687b      	ldr	r3, [r7, #4]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3708      	adds	r7, #8
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d01e      	beq.n	8012c12 <udp_netif_ip_addr_changed+0x4e>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d01a      	beq.n	8012c12 <udp_netif_ip_addr_changed+0x4e>
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d017      	beq.n	8012c12 <udp_netif_ip_addr_changed+0x4e>
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d013      	beq.n	8012c12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012bea:	4b0d      	ldr	r3, [pc, #52]	@ (8012c20 <udp_netif_ip_addr_changed+0x5c>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	60fb      	str	r3, [r7, #12]
 8012bf0:	e00c      	b.n	8012c0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d103      	bne.n	8012c06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	68db      	ldr	r3, [r3, #12]
 8012c0a:	60fb      	str	r3, [r7, #12]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d1ef      	bne.n	8012bf2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012c12:	bf00      	nop
 8012c14:	3714      	adds	r7, #20
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	2000880c 	.word	0x2000880c

08012c24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012c2c:	4915      	ldr	r1, [pc, #84]	@ (8012c84 <etharp_free_entry+0x60>)
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	4613      	mov	r3, r2
 8012c32:	005b      	lsls	r3, r3, #1
 8012c34:	4413      	add	r3, r2
 8012c36:	00db      	lsls	r3, r3, #3
 8012c38:	440b      	add	r3, r1
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d013      	beq.n	8012c68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012c40:	4910      	ldr	r1, [pc, #64]	@ (8012c84 <etharp_free_entry+0x60>)
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	4613      	mov	r3, r2
 8012c46:	005b      	lsls	r3, r3, #1
 8012c48:	4413      	add	r3, r2
 8012c4a:	00db      	lsls	r3, r3, #3
 8012c4c:	440b      	add	r3, r1
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f9 fc5b 	bl	800c50c <pbuf_free>
    arp_table[i].q = NULL;
 8012c56:	490b      	ldr	r1, [pc, #44]	@ (8012c84 <etharp_free_entry+0x60>)
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	4413      	add	r3, r2
 8012c60:	00db      	lsls	r3, r3, #3
 8012c62:	440b      	add	r3, r1
 8012c64:	2200      	movs	r2, #0
 8012c66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012c68:	4906      	ldr	r1, [pc, #24]	@ (8012c84 <etharp_free_entry+0x60>)
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	005b      	lsls	r3, r3, #1
 8012c70:	4413      	add	r3, r2
 8012c72:	00db      	lsls	r3, r3, #3
 8012c74:	440b      	add	r3, r1
 8012c76:	3314      	adds	r3, #20
 8012c78:	2200      	movs	r2, #0
 8012c7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012c7c:	bf00      	nop
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	20008810 	.word	0x20008810

08012c88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c8e:	2300      	movs	r3, #0
 8012c90:	607b      	str	r3, [r7, #4]
 8012c92:	e096      	b.n	8012dc2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012c94:	494f      	ldr	r1, [pc, #316]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	4413      	add	r3, r2
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	440b      	add	r3, r1
 8012ca2:	3314      	adds	r3, #20
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012ca8:	78fb      	ldrb	r3, [r7, #3]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f000 8086 	beq.w	8012dbc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012cb0:	4948      	ldr	r1, [pc, #288]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	4613      	mov	r3, r2
 8012cb6:	005b      	lsls	r3, r3, #1
 8012cb8:	4413      	add	r3, r2
 8012cba:	00db      	lsls	r3, r3, #3
 8012cbc:	440b      	add	r3, r1
 8012cbe:	3312      	adds	r3, #18
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	b298      	uxth	r0, r3
 8012cc6:	4943      	ldr	r1, [pc, #268]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	4613      	mov	r3, r2
 8012ccc:	005b      	lsls	r3, r3, #1
 8012cce:	4413      	add	r3, r2
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	440b      	add	r3, r1
 8012cd4:	3312      	adds	r3, #18
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012cda:	493e      	ldr	r1, [pc, #248]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	4613      	mov	r3, r2
 8012ce0:	005b      	lsls	r3, r3, #1
 8012ce2:	4413      	add	r3, r2
 8012ce4:	00db      	lsls	r3, r3, #3
 8012ce6:	440b      	add	r3, r1
 8012ce8:	3312      	adds	r3, #18
 8012cea:	881b      	ldrh	r3, [r3, #0]
 8012cec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012cf0:	d215      	bcs.n	8012d1e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012cf2:	4938      	ldr	r1, [pc, #224]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	005b      	lsls	r3, r3, #1
 8012cfa:	4413      	add	r3, r2
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	440b      	add	r3, r1
 8012d00:	3314      	adds	r3, #20
 8012d02:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d10e      	bne.n	8012d26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012d08:	4932      	ldr	r1, [pc, #200]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	4613      	mov	r3, r2
 8012d0e:	005b      	lsls	r3, r3, #1
 8012d10:	4413      	add	r3, r2
 8012d12:	00db      	lsls	r3, r3, #3
 8012d14:	440b      	add	r3, r1
 8012d16:	3312      	adds	r3, #18
 8012d18:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012d1a:	2b04      	cmp	r3, #4
 8012d1c:	d903      	bls.n	8012d26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f7ff ff80 	bl	8012c24 <etharp_free_entry>
 8012d24:	e04a      	b.n	8012dbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012d26:	492b      	ldr	r1, [pc, #172]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	005b      	lsls	r3, r3, #1
 8012d2e:	4413      	add	r3, r2
 8012d30:	00db      	lsls	r3, r3, #3
 8012d32:	440b      	add	r3, r1
 8012d34:	3314      	adds	r3, #20
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	2b03      	cmp	r3, #3
 8012d3a:	d10a      	bne.n	8012d52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012d3c:	4925      	ldr	r1, [pc, #148]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	4613      	mov	r3, r2
 8012d42:	005b      	lsls	r3, r3, #1
 8012d44:	4413      	add	r3, r2
 8012d46:	00db      	lsls	r3, r3, #3
 8012d48:	440b      	add	r3, r1
 8012d4a:	3314      	adds	r3, #20
 8012d4c:	2204      	movs	r2, #4
 8012d4e:	701a      	strb	r2, [r3, #0]
 8012d50:	e034      	b.n	8012dbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012d52:	4920      	ldr	r1, [pc, #128]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	4613      	mov	r3, r2
 8012d58:	005b      	lsls	r3, r3, #1
 8012d5a:	4413      	add	r3, r2
 8012d5c:	00db      	lsls	r3, r3, #3
 8012d5e:	440b      	add	r3, r1
 8012d60:	3314      	adds	r3, #20
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	2b04      	cmp	r3, #4
 8012d66:	d10a      	bne.n	8012d7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012d68:	491a      	ldr	r1, [pc, #104]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	4613      	mov	r3, r2
 8012d6e:	005b      	lsls	r3, r3, #1
 8012d70:	4413      	add	r3, r2
 8012d72:	00db      	lsls	r3, r3, #3
 8012d74:	440b      	add	r3, r1
 8012d76:	3314      	adds	r3, #20
 8012d78:	2202      	movs	r2, #2
 8012d7a:	701a      	strb	r2, [r3, #0]
 8012d7c:	e01e      	b.n	8012dbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012d7e:	4915      	ldr	r1, [pc, #84]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d80:	687a      	ldr	r2, [r7, #4]
 8012d82:	4613      	mov	r3, r2
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	4413      	add	r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	440b      	add	r3, r1
 8012d8c:	3314      	adds	r3, #20
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	2b01      	cmp	r3, #1
 8012d92:	d113      	bne.n	8012dbc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012d94:	490f      	ldr	r1, [pc, #60]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	4413      	add	r3, r2
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	440b      	add	r3, r1
 8012da2:	3308      	adds	r3, #8
 8012da4:	6818      	ldr	r0, [r3, #0]
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	4613      	mov	r3, r2
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	4413      	add	r3, r2
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	4a08      	ldr	r2, [pc, #32]	@ (8012dd4 <etharp_tmr+0x14c>)
 8012db2:	4413      	add	r3, r2
 8012db4:	3304      	adds	r3, #4
 8012db6:	4619      	mov	r1, r3
 8012db8:	f000 fe6e 	bl	8013a98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	607b      	str	r3, [r7, #4]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b09      	cmp	r3, #9
 8012dc6:	f77f af65 	ble.w	8012c94 <etharp_tmr+0xc>
      }
    }
  }
}
 8012dca:	bf00      	nop
 8012dcc:	bf00      	nop
 8012dce:	3708      	adds	r7, #8
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	20008810 	.word	0x20008810

08012dd8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b08a      	sub	sp, #40	@ 0x28
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	460b      	mov	r3, r1
 8012de2:	607a      	str	r2, [r7, #4]
 8012de4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012de6:	230a      	movs	r3, #10
 8012de8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012dea:	230a      	movs	r3, #10
 8012dec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012dee:	230a      	movs	r3, #10
 8012df0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012df6:	230a      	movs	r3, #10
 8012df8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	83bb      	strh	r3, [r7, #28]
 8012dfe:	2300      	movs	r3, #0
 8012e00:	837b      	strh	r3, [r7, #26]
 8012e02:	2300      	movs	r3, #0
 8012e04:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e06:	2300      	movs	r3, #0
 8012e08:	843b      	strh	r3, [r7, #32]
 8012e0a:	e0ae      	b.n	8012f6a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012e0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e10:	49a6      	ldr	r1, [pc, #664]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012e12:	4613      	mov	r3, r2
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	4413      	add	r3, r2
 8012e18:	00db      	lsls	r3, r3, #3
 8012e1a:	440b      	add	r3, r1
 8012e1c:	3314      	adds	r3, #20
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012e22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012e26:	2b0a      	cmp	r3, #10
 8012e28:	d105      	bne.n	8012e36 <etharp_find_entry+0x5e>
 8012e2a:	7dfb      	ldrb	r3, [r7, #23]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d102      	bne.n	8012e36 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012e30:	8c3b      	ldrh	r3, [r7, #32]
 8012e32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012e34:	e095      	b.n	8012f62 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012e36:	7dfb      	ldrb	r3, [r7, #23]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f000 8092 	beq.w	8012f62 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d009      	beq.n	8012e58 <etharp_find_entry+0x80>
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	d806      	bhi.n	8012e58 <etharp_find_entry+0x80>
 8012e4a:	4b99      	ldr	r3, [pc, #612]	@ (80130b0 <etharp_find_entry+0x2d8>)
 8012e4c:	f240 1223 	movw	r2, #291	@ 0x123
 8012e50:	4998      	ldr	r1, [pc, #608]	@ (80130b4 <etharp_find_entry+0x2dc>)
 8012e52:	4899      	ldr	r0, [pc, #612]	@ (80130b8 <etharp_find_entry+0x2e0>)
 8012e54:	f005 fa0a 	bl	801826c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d020      	beq.n	8012ea0 <etharp_find_entry+0xc8>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	6819      	ldr	r1, [r3, #0]
 8012e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e66:	4891      	ldr	r0, [pc, #580]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012e68:	4613      	mov	r3, r2
 8012e6a:	005b      	lsls	r3, r3, #1
 8012e6c:	4413      	add	r3, r2
 8012e6e:	00db      	lsls	r3, r3, #3
 8012e70:	4403      	add	r3, r0
 8012e72:	3304      	adds	r3, #4
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	4299      	cmp	r1, r3
 8012e78:	d112      	bne.n	8012ea0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00c      	beq.n	8012e9a <etharp_find_entry+0xc2>
 8012e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e84:	4989      	ldr	r1, [pc, #548]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012e86:	4613      	mov	r3, r2
 8012e88:	005b      	lsls	r3, r3, #1
 8012e8a:	4413      	add	r3, r2
 8012e8c:	00db      	lsls	r3, r3, #3
 8012e8e:	440b      	add	r3, r1
 8012e90:	3308      	adds	r3, #8
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d102      	bne.n	8012ea0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012e9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e9e:	e100      	b.n	80130a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012ea0:	7dfb      	ldrb	r3, [r7, #23]
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d140      	bne.n	8012f28 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012ea6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012eaa:	4980      	ldr	r1, [pc, #512]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012eac:	4613      	mov	r3, r2
 8012eae:	005b      	lsls	r3, r3, #1
 8012eb0:	4413      	add	r3, r2
 8012eb2:	00db      	lsls	r3, r3, #3
 8012eb4:	440b      	add	r3, r1
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d01a      	beq.n	8012ef2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012ebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ec0:	497a      	ldr	r1, [pc, #488]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	005b      	lsls	r3, r3, #1
 8012ec6:	4413      	add	r3, r2
 8012ec8:	00db      	lsls	r3, r3, #3
 8012eca:	440b      	add	r3, r1
 8012ecc:	3312      	adds	r3, #18
 8012ece:	881b      	ldrh	r3, [r3, #0]
 8012ed0:	8bba      	ldrh	r2, [r7, #28]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d845      	bhi.n	8012f62 <etharp_find_entry+0x18a>
            old_queue = i;
 8012ed6:	8c3b      	ldrh	r3, [r7, #32]
 8012ed8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012eda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ede:	4973      	ldr	r1, [pc, #460]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012ee0:	4613      	mov	r3, r2
 8012ee2:	005b      	lsls	r3, r3, #1
 8012ee4:	4413      	add	r3, r2
 8012ee6:	00db      	lsls	r3, r3, #3
 8012ee8:	440b      	add	r3, r1
 8012eea:	3312      	adds	r3, #18
 8012eec:	881b      	ldrh	r3, [r3, #0]
 8012eee:	83bb      	strh	r3, [r7, #28]
 8012ef0:	e037      	b.n	8012f62 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012ef2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ef6:	496d      	ldr	r1, [pc, #436]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012ef8:	4613      	mov	r3, r2
 8012efa:	005b      	lsls	r3, r3, #1
 8012efc:	4413      	add	r3, r2
 8012efe:	00db      	lsls	r3, r3, #3
 8012f00:	440b      	add	r3, r1
 8012f02:	3312      	adds	r3, #18
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	8b7a      	ldrh	r2, [r7, #26]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d82a      	bhi.n	8012f62 <etharp_find_entry+0x18a>
            old_pending = i;
 8012f0c:	8c3b      	ldrh	r3, [r7, #32]
 8012f0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012f10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f14:	4965      	ldr	r1, [pc, #404]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012f16:	4613      	mov	r3, r2
 8012f18:	005b      	lsls	r3, r3, #1
 8012f1a:	4413      	add	r3, r2
 8012f1c:	00db      	lsls	r3, r3, #3
 8012f1e:	440b      	add	r3, r1
 8012f20:	3312      	adds	r3, #18
 8012f22:	881b      	ldrh	r3, [r3, #0]
 8012f24:	837b      	strh	r3, [r7, #26]
 8012f26:	e01c      	b.n	8012f62 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012f28:	7dfb      	ldrb	r3, [r7, #23]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d919      	bls.n	8012f62 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012f2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f32:	495e      	ldr	r1, [pc, #376]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012f34:	4613      	mov	r3, r2
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	4413      	add	r3, r2
 8012f3a:	00db      	lsls	r3, r3, #3
 8012f3c:	440b      	add	r3, r1
 8012f3e:	3312      	adds	r3, #18
 8012f40:	881b      	ldrh	r3, [r3, #0]
 8012f42:	8b3a      	ldrh	r2, [r7, #24]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d80c      	bhi.n	8012f62 <etharp_find_entry+0x18a>
            old_stable = i;
 8012f48:	8c3b      	ldrh	r3, [r7, #32]
 8012f4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012f4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f50:	4956      	ldr	r1, [pc, #344]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012f52:	4613      	mov	r3, r2
 8012f54:	005b      	lsls	r3, r3, #1
 8012f56:	4413      	add	r3, r2
 8012f58:	00db      	lsls	r3, r3, #3
 8012f5a:	440b      	add	r3, r1
 8012f5c:	3312      	adds	r3, #18
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f62:	8c3b      	ldrh	r3, [r7, #32]
 8012f64:	3301      	adds	r3, #1
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	843b      	strh	r3, [r7, #32]
 8012f6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012f6e:	2b09      	cmp	r3, #9
 8012f70:	f77f af4c 	ble.w	8012e0c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012f74:	7afb      	ldrb	r3, [r7, #11]
 8012f76:	f003 0302 	and.w	r3, r3, #2
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d108      	bne.n	8012f90 <etharp_find_entry+0x1b8>
 8012f7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012f82:	2b0a      	cmp	r3, #10
 8012f84:	d107      	bne.n	8012f96 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012f86:	7afb      	ldrb	r3, [r7, #11]
 8012f88:	f003 0301 	and.w	r3, r3, #1
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d102      	bne.n	8012f96 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012f90:	f04f 33ff 	mov.w	r3, #4294967295
 8012f94:	e085      	b.n	80130a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012f96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012f9a:	2b09      	cmp	r3, #9
 8012f9c:	dc02      	bgt.n	8012fa4 <etharp_find_entry+0x1cc>
    i = empty;
 8012f9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012fa0:	843b      	strh	r3, [r7, #32]
 8012fa2:	e039      	b.n	8013018 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012fa4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012fa8:	2b09      	cmp	r3, #9
 8012faa:	dc14      	bgt.n	8012fd6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012fac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012fb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fb4:	493d      	ldr	r1, [pc, #244]	@ (80130ac <etharp_find_entry+0x2d4>)
 8012fb6:	4613      	mov	r3, r2
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	4413      	add	r3, r2
 8012fbc:	00db      	lsls	r3, r3, #3
 8012fbe:	440b      	add	r3, r1
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d018      	beq.n	8012ff8 <etharp_find_entry+0x220>
 8012fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80130b0 <etharp_find_entry+0x2d8>)
 8012fc8:	f240 126d 	movw	r2, #365	@ 0x16d
 8012fcc:	493b      	ldr	r1, [pc, #236]	@ (80130bc <etharp_find_entry+0x2e4>)
 8012fce:	483a      	ldr	r0, [pc, #232]	@ (80130b8 <etharp_find_entry+0x2e0>)
 8012fd0:	f005 f94c 	bl	801826c <iprintf>
 8012fd4:	e010      	b.n	8012ff8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012fd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fda:	2b09      	cmp	r3, #9
 8012fdc:	dc02      	bgt.n	8012fe4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012fde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012fe0:	843b      	strh	r3, [r7, #32]
 8012fe2:	e009      	b.n	8012ff8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012fe4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012fe8:	2b09      	cmp	r3, #9
 8012fea:	dc02      	bgt.n	8012ff2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012fec:	8bfb      	ldrh	r3, [r7, #30]
 8012fee:	843b      	strh	r3, [r7, #32]
 8012ff0:	e002      	b.n	8012ff8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ff6:	e054      	b.n	80130a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ff8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ffc:	2b09      	cmp	r3, #9
 8012ffe:	dd06      	ble.n	801300e <etharp_find_entry+0x236>
 8013000:	4b2b      	ldr	r3, [pc, #172]	@ (80130b0 <etharp_find_entry+0x2d8>)
 8013002:	f240 127f 	movw	r2, #383	@ 0x17f
 8013006:	492e      	ldr	r1, [pc, #184]	@ (80130c0 <etharp_find_entry+0x2e8>)
 8013008:	482b      	ldr	r0, [pc, #172]	@ (80130b8 <etharp_find_entry+0x2e0>)
 801300a:	f005 f92f 	bl	801826c <iprintf>
    etharp_free_entry(i);
 801300e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013012:	4618      	mov	r0, r3
 8013014:	f7ff fe06 	bl	8012c24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013018:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801301c:	2b09      	cmp	r3, #9
 801301e:	dd06      	ble.n	801302e <etharp_find_entry+0x256>
 8013020:	4b23      	ldr	r3, [pc, #140]	@ (80130b0 <etharp_find_entry+0x2d8>)
 8013022:	f240 1283 	movw	r2, #387	@ 0x183
 8013026:	4926      	ldr	r1, [pc, #152]	@ (80130c0 <etharp_find_entry+0x2e8>)
 8013028:	4823      	ldr	r0, [pc, #140]	@ (80130b8 <etharp_find_entry+0x2e0>)
 801302a:	f005 f91f 	bl	801826c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801302e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013032:	491e      	ldr	r1, [pc, #120]	@ (80130ac <etharp_find_entry+0x2d4>)
 8013034:	4613      	mov	r3, r2
 8013036:	005b      	lsls	r3, r3, #1
 8013038:	4413      	add	r3, r2
 801303a:	00db      	lsls	r3, r3, #3
 801303c:	440b      	add	r3, r1
 801303e:	3314      	adds	r3, #20
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d006      	beq.n	8013054 <etharp_find_entry+0x27c>
 8013046:	4b1a      	ldr	r3, [pc, #104]	@ (80130b0 <etharp_find_entry+0x2d8>)
 8013048:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801304c:	491d      	ldr	r1, [pc, #116]	@ (80130c4 <etharp_find_entry+0x2ec>)
 801304e:	481a      	ldr	r0, [pc, #104]	@ (80130b8 <etharp_find_entry+0x2e0>)
 8013050:	f005 f90c 	bl	801826c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d00b      	beq.n	8013072 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801305a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	6819      	ldr	r1, [r3, #0]
 8013062:	4812      	ldr	r0, [pc, #72]	@ (80130ac <etharp_find_entry+0x2d4>)
 8013064:	4613      	mov	r3, r2
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	4413      	add	r3, r2
 801306a:	00db      	lsls	r3, r3, #3
 801306c:	4403      	add	r3, r0
 801306e:	3304      	adds	r3, #4
 8013070:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013072:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013076:	490d      	ldr	r1, [pc, #52]	@ (80130ac <etharp_find_entry+0x2d4>)
 8013078:	4613      	mov	r3, r2
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	4413      	add	r3, r2
 801307e:	00db      	lsls	r3, r3, #3
 8013080:	440b      	add	r3, r1
 8013082:	3312      	adds	r3, #18
 8013084:	2200      	movs	r2, #0
 8013086:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013088:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801308c:	4907      	ldr	r1, [pc, #28]	@ (80130ac <etharp_find_entry+0x2d4>)
 801308e:	4613      	mov	r3, r2
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	4413      	add	r3, r2
 8013094:	00db      	lsls	r3, r3, #3
 8013096:	440b      	add	r3, r1
 8013098:	3308      	adds	r3, #8
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801309e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3728      	adds	r7, #40	@ 0x28
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	20008810 	.word	0x20008810
 80130b0:	0801d830 	.word	0x0801d830
 80130b4:	0801d868 	.word	0x0801d868
 80130b8:	0801d8a8 	.word	0x0801d8a8
 80130bc:	0801d8d0 	.word	0x0801d8d0
 80130c0:	0801d8e8 	.word	0x0801d8e8
 80130c4:	0801d8fc 	.word	0x0801d8fc

080130c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b088      	sub	sp, #32
 80130cc:	af02      	add	r7, sp, #8
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	607a      	str	r2, [r7, #4]
 80130d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130dc:	2b06      	cmp	r3, #6
 80130de:	d006      	beq.n	80130ee <etharp_update_arp_entry+0x26>
 80130e0:	4b48      	ldr	r3, [pc, #288]	@ (8013204 <etharp_update_arp_entry+0x13c>)
 80130e2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80130e6:	4948      	ldr	r1, [pc, #288]	@ (8013208 <etharp_update_arp_entry+0x140>)
 80130e8:	4848      	ldr	r0, [pc, #288]	@ (801320c <etharp_update_arp_entry+0x144>)
 80130ea:	f005 f8bf 	bl	801826c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d012      	beq.n	801311a <etharp_update_arp_entry+0x52>
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d00e      	beq.n	801311a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	68f9      	ldr	r1, [r7, #12]
 8013102:	4618      	mov	r0, r3
 8013104:	f001 fd44 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 8013108:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801310a:	2b00      	cmp	r3, #0
 801310c:	d105      	bne.n	801311a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013116:	2be0      	cmp	r3, #224	@ 0xe0
 8013118:	d102      	bne.n	8013120 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801311a:	f06f 030f 	mvn.w	r3, #15
 801311e:	e06c      	b.n	80131fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013120:	78fb      	ldrb	r3, [r7, #3]
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	4619      	mov	r1, r3
 8013126:	68b8      	ldr	r0, [r7, #8]
 8013128:	f7ff fe56 	bl	8012dd8 <etharp_find_entry>
 801312c:	4603      	mov	r3, r0
 801312e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013134:	2b00      	cmp	r3, #0
 8013136:	da02      	bge.n	801313e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013138:	8afb      	ldrh	r3, [r7, #22]
 801313a:	b25b      	sxtb	r3, r3
 801313c:	e05d      	b.n	80131fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801313e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013142:	4933      	ldr	r1, [pc, #204]	@ (8013210 <etharp_update_arp_entry+0x148>)
 8013144:	4613      	mov	r3, r2
 8013146:	005b      	lsls	r3, r3, #1
 8013148:	4413      	add	r3, r2
 801314a:	00db      	lsls	r3, r3, #3
 801314c:	440b      	add	r3, r1
 801314e:	3314      	adds	r3, #20
 8013150:	2202      	movs	r2, #2
 8013152:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013154:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013158:	492d      	ldr	r1, [pc, #180]	@ (8013210 <etharp_update_arp_entry+0x148>)
 801315a:	4613      	mov	r3, r2
 801315c:	005b      	lsls	r3, r3, #1
 801315e:	4413      	add	r3, r2
 8013160:	00db      	lsls	r3, r3, #3
 8013162:	440b      	add	r3, r1
 8013164:	3308      	adds	r3, #8
 8013166:	68fa      	ldr	r2, [r7, #12]
 8013168:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801316a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	3308      	adds	r3, #8
 8013178:	4a25      	ldr	r2, [pc, #148]	@ (8013210 <etharp_update_arp_entry+0x148>)
 801317a:	4413      	add	r3, r2
 801317c:	3304      	adds	r3, #4
 801317e:	2206      	movs	r2, #6
 8013180:	6879      	ldr	r1, [r7, #4]
 8013182:	4618      	mov	r0, r3
 8013184:	f005 fbdd 	bl	8018942 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801318c:	4920      	ldr	r1, [pc, #128]	@ (8013210 <etharp_update_arp_entry+0x148>)
 801318e:	4613      	mov	r3, r2
 8013190:	005b      	lsls	r3, r3, #1
 8013192:	4413      	add	r3, r2
 8013194:	00db      	lsls	r3, r3, #3
 8013196:	440b      	add	r3, r1
 8013198:	3312      	adds	r3, #18
 801319a:	2200      	movs	r2, #0
 801319c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801319e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80131a2:	491b      	ldr	r1, [pc, #108]	@ (8013210 <etharp_update_arp_entry+0x148>)
 80131a4:	4613      	mov	r3, r2
 80131a6:	005b      	lsls	r3, r3, #1
 80131a8:	4413      	add	r3, r2
 80131aa:	00db      	lsls	r3, r3, #3
 80131ac:	440b      	add	r3, r1
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d021      	beq.n	80131f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80131b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80131b8:	4915      	ldr	r1, [pc, #84]	@ (8013210 <etharp_update_arp_entry+0x148>)
 80131ba:	4613      	mov	r3, r2
 80131bc:	005b      	lsls	r3, r3, #1
 80131be:	4413      	add	r3, r2
 80131c0:	00db      	lsls	r3, r3, #3
 80131c2:	440b      	add	r3, r1
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80131c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80131cc:	4910      	ldr	r1, [pc, #64]	@ (8013210 <etharp_update_arp_entry+0x148>)
 80131ce:	4613      	mov	r3, r2
 80131d0:	005b      	lsls	r3, r3, #1
 80131d2:	4413      	add	r3, r2
 80131d4:	00db      	lsls	r3, r3, #3
 80131d6:	440b      	add	r3, r1
 80131d8:	2200      	movs	r2, #0
 80131da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80131e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6939      	ldr	r1, [r7, #16]
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f002 fc6d 	bl	8015acc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80131f2:	6938      	ldr	r0, [r7, #16]
 80131f4:	f7f9 f98a 	bl	800c50c <pbuf_free>
  }
  return ERR_OK;
 80131f8:	2300      	movs	r3, #0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3718      	adds	r7, #24
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
 8013202:	bf00      	nop
 8013204:	0801d830 	.word	0x0801d830
 8013208:	0801d928 	.word	0x0801d928
 801320c:	0801d8a8 	.word	0x0801d8a8
 8013210:	20008810 	.word	0x20008810

08013214 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801321c:	2300      	movs	r3, #0
 801321e:	60fb      	str	r3, [r7, #12]
 8013220:	e01e      	b.n	8013260 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013222:	4913      	ldr	r1, [pc, #76]	@ (8013270 <etharp_cleanup_netif+0x5c>)
 8013224:	68fa      	ldr	r2, [r7, #12]
 8013226:	4613      	mov	r3, r2
 8013228:	005b      	lsls	r3, r3, #1
 801322a:	4413      	add	r3, r2
 801322c:	00db      	lsls	r3, r3, #3
 801322e:	440b      	add	r3, r1
 8013230:	3314      	adds	r3, #20
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013236:	7afb      	ldrb	r3, [r7, #11]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00e      	beq.n	801325a <etharp_cleanup_netif+0x46>
 801323c:	490c      	ldr	r1, [pc, #48]	@ (8013270 <etharp_cleanup_netif+0x5c>)
 801323e:	68fa      	ldr	r2, [r7, #12]
 8013240:	4613      	mov	r3, r2
 8013242:	005b      	lsls	r3, r3, #1
 8013244:	4413      	add	r3, r2
 8013246:	00db      	lsls	r3, r3, #3
 8013248:	440b      	add	r3, r1
 801324a:	3308      	adds	r3, #8
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	429a      	cmp	r2, r3
 8013252:	d102      	bne.n	801325a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f7ff fce5 	bl	8012c24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	3301      	adds	r3, #1
 801325e:	60fb      	str	r3, [r7, #12]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2b09      	cmp	r3, #9
 8013264:	dddd      	ble.n	8013222 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013266:	bf00      	nop
 8013268:	bf00      	nop
 801326a:	3710      	adds	r7, #16
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	20008810 	.word	0x20008810

08013274 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013274:	b5b0      	push	{r4, r5, r7, lr}
 8013276:	b08a      	sub	sp, #40	@ 0x28
 8013278:	af04      	add	r7, sp, #16
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d107      	bne.n	8013294 <etharp_input+0x20>
 8013284:	4b3d      	ldr	r3, [pc, #244]	@ (801337c <etharp_input+0x108>)
 8013286:	f240 228a 	movw	r2, #650	@ 0x28a
 801328a:	493d      	ldr	r1, [pc, #244]	@ (8013380 <etharp_input+0x10c>)
 801328c:	483d      	ldr	r0, [pc, #244]	@ (8013384 <etharp_input+0x110>)
 801328e:	f004 ffed 	bl	801826c <iprintf>
 8013292:	e06f      	b.n	8013374 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132a4:	d10c      	bne.n	80132c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80132aa:	2b06      	cmp	r3, #6
 80132ac:	d108      	bne.n	80132c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80132b2:	2b04      	cmp	r3, #4
 80132b4:	d104      	bne.n	80132c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	885b      	ldrh	r3, [r3, #2]
 80132ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80132bc:	2b08      	cmp	r3, #8
 80132be:	d003      	beq.n	80132c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7f9 f923 	bl	800c50c <pbuf_free>
    return;
 80132c6:	e055      	b.n	8013374 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	330e      	adds	r3, #14
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	3318      	adds	r3, #24
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	3304      	adds	r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d102      	bne.n	80132e8 <etharp_input+0x74>
    for_us = 0;
 80132e2:	2300      	movs	r3, #0
 80132e4:	75fb      	strb	r3, [r7, #23]
 80132e6:	e009      	b.n	80132fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80132e8:	68ba      	ldr	r2, [r7, #8]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	3304      	adds	r3, #4
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	bf0c      	ite	eq
 80132f4:	2301      	moveq	r3, #1
 80132f6:	2300      	movne	r3, #0
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	f103 0208 	add.w	r2, r3, #8
 8013302:	7dfb      	ldrb	r3, [r7, #23]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d001      	beq.n	801330c <etharp_input+0x98>
 8013308:	2301      	movs	r3, #1
 801330a:	e000      	b.n	801330e <etharp_input+0x9a>
 801330c:	2302      	movs	r3, #2
 801330e:	f107 010c 	add.w	r1, r7, #12
 8013312:	6838      	ldr	r0, [r7, #0]
 8013314:	f7ff fed8 	bl	80130c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	88db      	ldrh	r3, [r3, #6]
 801331c:	b29b      	uxth	r3, r3
 801331e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013322:	d003      	beq.n	801332c <etharp_input+0xb8>
 8013324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013328:	d01e      	beq.n	8013368 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801332a:	e020      	b.n	801336e <etharp_input+0xfa>
      if (for_us) {
 801332c:	7dfb      	ldrb	r3, [r7, #23]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d01c      	beq.n	801336c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013348:	693a      	ldr	r2, [r7, #16]
 801334a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801334c:	2102      	movs	r1, #2
 801334e:	9103      	str	r1, [sp, #12]
 8013350:	f107 010c 	add.w	r1, r7, #12
 8013354:	9102      	str	r1, [sp, #8]
 8013356:	9201      	str	r2, [sp, #4]
 8013358:	9300      	str	r3, [sp, #0]
 801335a:	462b      	mov	r3, r5
 801335c:	4622      	mov	r2, r4
 801335e:	4601      	mov	r1, r0
 8013360:	6838      	ldr	r0, [r7, #0]
 8013362:	f000 faeb 	bl	801393c <etharp_raw>
      break;
 8013366:	e001      	b.n	801336c <etharp_input+0xf8>
      break;
 8013368:	bf00      	nop
 801336a:	e000      	b.n	801336e <etharp_input+0xfa>
      break;
 801336c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7f9 f8cc 	bl	800c50c <pbuf_free>
}
 8013374:	3718      	adds	r7, #24
 8013376:	46bd      	mov	sp, r7
 8013378:	bdb0      	pop	{r4, r5, r7, pc}
 801337a:	bf00      	nop
 801337c:	0801d830 	.word	0x0801d830
 8013380:	0801d980 	.word	0x0801d980
 8013384:	0801d8a8 	.word	0x0801d8a8

08013388 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af02      	add	r7, sp, #8
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
 8013392:	4613      	mov	r3, r2
 8013394:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013396:	79fa      	ldrb	r2, [r7, #7]
 8013398:	4944      	ldr	r1, [pc, #272]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 801339a:	4613      	mov	r3, r2
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	4413      	add	r3, r2
 80133a0:	00db      	lsls	r3, r3, #3
 80133a2:	440b      	add	r3, r1
 80133a4:	3314      	adds	r3, #20
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d806      	bhi.n	80133ba <etharp_output_to_arp_index+0x32>
 80133ac:	4b40      	ldr	r3, [pc, #256]	@ (80134b0 <etharp_output_to_arp_index+0x128>)
 80133ae:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80133b2:	4940      	ldr	r1, [pc, #256]	@ (80134b4 <etharp_output_to_arp_index+0x12c>)
 80133b4:	4840      	ldr	r0, [pc, #256]	@ (80134b8 <etharp_output_to_arp_index+0x130>)
 80133b6:	f004 ff59 	bl	801826c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80133ba:	79fa      	ldrb	r2, [r7, #7]
 80133bc:	493b      	ldr	r1, [pc, #236]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 80133be:	4613      	mov	r3, r2
 80133c0:	005b      	lsls	r3, r3, #1
 80133c2:	4413      	add	r3, r2
 80133c4:	00db      	lsls	r3, r3, #3
 80133c6:	440b      	add	r3, r1
 80133c8:	3314      	adds	r3, #20
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d153      	bne.n	8013478 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80133d0:	79fa      	ldrb	r2, [r7, #7]
 80133d2:	4936      	ldr	r1, [pc, #216]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 80133d4:	4613      	mov	r3, r2
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	4413      	add	r3, r2
 80133da:	00db      	lsls	r3, r3, #3
 80133dc:	440b      	add	r3, r1
 80133de:	3312      	adds	r3, #18
 80133e0:	881b      	ldrh	r3, [r3, #0]
 80133e2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80133e6:	d919      	bls.n	801341c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80133e8:	79fa      	ldrb	r2, [r7, #7]
 80133ea:	4613      	mov	r3, r2
 80133ec:	005b      	lsls	r3, r3, #1
 80133ee:	4413      	add	r3, r2
 80133f0:	00db      	lsls	r3, r3, #3
 80133f2:	4a2e      	ldr	r2, [pc, #184]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 80133f4:	4413      	add	r3, r2
 80133f6:	3304      	adds	r3, #4
 80133f8:	4619      	mov	r1, r3
 80133fa:	68f8      	ldr	r0, [r7, #12]
 80133fc:	f000 fb4c 	bl	8013a98 <etharp_request>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d138      	bne.n	8013478 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013406:	79fa      	ldrb	r2, [r7, #7]
 8013408:	4928      	ldr	r1, [pc, #160]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 801340a:	4613      	mov	r3, r2
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	4413      	add	r3, r2
 8013410:	00db      	lsls	r3, r3, #3
 8013412:	440b      	add	r3, r1
 8013414:	3314      	adds	r3, #20
 8013416:	2203      	movs	r2, #3
 8013418:	701a      	strb	r2, [r3, #0]
 801341a:	e02d      	b.n	8013478 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801341c:	79fa      	ldrb	r2, [r7, #7]
 801341e:	4923      	ldr	r1, [pc, #140]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 8013420:	4613      	mov	r3, r2
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	4413      	add	r3, r2
 8013426:	00db      	lsls	r3, r3, #3
 8013428:	440b      	add	r3, r1
 801342a:	3312      	adds	r3, #18
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013432:	d321      	bcc.n	8013478 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013434:	79fa      	ldrb	r2, [r7, #7]
 8013436:	4613      	mov	r3, r2
 8013438:	005b      	lsls	r3, r3, #1
 801343a:	4413      	add	r3, r2
 801343c:	00db      	lsls	r3, r3, #3
 801343e:	4a1b      	ldr	r2, [pc, #108]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 8013440:	4413      	add	r3, r2
 8013442:	1d19      	adds	r1, r3, #4
 8013444:	79fa      	ldrb	r2, [r7, #7]
 8013446:	4613      	mov	r3, r2
 8013448:	005b      	lsls	r3, r3, #1
 801344a:	4413      	add	r3, r2
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	3308      	adds	r3, #8
 8013450:	4a16      	ldr	r2, [pc, #88]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 8013452:	4413      	add	r3, r2
 8013454:	3304      	adds	r3, #4
 8013456:	461a      	mov	r2, r3
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f000 fafb 	bl	8013a54 <etharp_request_dst>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d109      	bne.n	8013478 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013464:	79fa      	ldrb	r2, [r7, #7]
 8013466:	4911      	ldr	r1, [pc, #68]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 8013468:	4613      	mov	r3, r2
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	4413      	add	r3, r2
 801346e:	00db      	lsls	r3, r3, #3
 8013470:	440b      	add	r3, r1
 8013472:	3314      	adds	r3, #20
 8013474:	2203      	movs	r2, #3
 8013476:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801347e:	79fa      	ldrb	r2, [r7, #7]
 8013480:	4613      	mov	r3, r2
 8013482:	005b      	lsls	r3, r3, #1
 8013484:	4413      	add	r3, r2
 8013486:	00db      	lsls	r3, r3, #3
 8013488:	3308      	adds	r3, #8
 801348a:	4a08      	ldr	r2, [pc, #32]	@ (80134ac <etharp_output_to_arp_index+0x124>)
 801348c:	4413      	add	r3, r2
 801348e:	3304      	adds	r3, #4
 8013490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013494:	9200      	str	r2, [sp, #0]
 8013496:	460a      	mov	r2, r1
 8013498:	68b9      	ldr	r1, [r7, #8]
 801349a:	68f8      	ldr	r0, [r7, #12]
 801349c:	f002 fb16 	bl	8015acc <ethernet_output>
 80134a0:	4603      	mov	r3, r0
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	20008810 	.word	0x20008810
 80134b0:	0801d830 	.word	0x0801d830
 80134b4:	0801d9a0 	.word	0x0801d9a0
 80134b8:	0801d8a8 	.word	0x0801d8a8

080134bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b08a      	sub	sp, #40	@ 0x28
 80134c0:	af02      	add	r7, sp, #8
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d106      	bne.n	80134e0 <etharp_output+0x24>
 80134d2:	4b73      	ldr	r3, [pc, #460]	@ (80136a0 <etharp_output+0x1e4>)
 80134d4:	f240 321e 	movw	r2, #798	@ 0x31e
 80134d8:	4972      	ldr	r1, [pc, #456]	@ (80136a4 <etharp_output+0x1e8>)
 80134da:	4873      	ldr	r0, [pc, #460]	@ (80136a8 <etharp_output+0x1ec>)
 80134dc:	f004 fec6 	bl	801826c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d106      	bne.n	80134f4 <etharp_output+0x38>
 80134e6:	4b6e      	ldr	r3, [pc, #440]	@ (80136a0 <etharp_output+0x1e4>)
 80134e8:	f240 321f 	movw	r2, #799	@ 0x31f
 80134ec:	496f      	ldr	r1, [pc, #444]	@ (80136ac <etharp_output+0x1f0>)
 80134ee:	486e      	ldr	r0, [pc, #440]	@ (80136a8 <etharp_output+0x1ec>)
 80134f0:	f004 febc 	bl	801826c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d106      	bne.n	8013508 <etharp_output+0x4c>
 80134fa:	4b69      	ldr	r3, [pc, #420]	@ (80136a0 <etharp_output+0x1e4>)
 80134fc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013500:	496b      	ldr	r1, [pc, #428]	@ (80136b0 <etharp_output+0x1f4>)
 8013502:	4869      	ldr	r0, [pc, #420]	@ (80136a8 <etharp_output+0x1ec>)
 8013504:	f004 feb2 	bl	801826c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	68f9      	ldr	r1, [r7, #12]
 801350e:	4618      	mov	r0, r3
 8013510:	f001 fb3e 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d002      	beq.n	8013520 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801351a:	4b66      	ldr	r3, [pc, #408]	@ (80136b4 <etharp_output+0x1f8>)
 801351c:	61fb      	str	r3, [r7, #28]
 801351e:	e0af      	b.n	8013680 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013528:	2be0      	cmp	r3, #224	@ 0xe0
 801352a:	d118      	bne.n	801355e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801352c:	2301      	movs	r3, #1
 801352e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013530:	2300      	movs	r3, #0
 8013532:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013534:	235e      	movs	r3, #94	@ 0x5e
 8013536:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	3301      	adds	r3, #1
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013542:	b2db      	uxtb	r3, r3
 8013544:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	3302      	adds	r3, #2
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	3303      	adds	r3, #3
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013556:	f107 0310 	add.w	r3, r7, #16
 801355a:	61fb      	str	r3, [r7, #28]
 801355c:	e090      	b.n	8013680 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	3304      	adds	r3, #4
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	405a      	eors	r2, r3
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3308      	adds	r3, #8
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	4013      	ands	r3, r2
 8013572:	2b00      	cmp	r3, #0
 8013574:	d012      	beq.n	801359c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801357c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8013580:	4293      	cmp	r3, r2
 8013582:	d00b      	beq.n	801359c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	330c      	adds	r3, #12
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d003      	beq.n	8013596 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	330c      	adds	r3, #12
 8013592:	61bb      	str	r3, [r7, #24]
 8013594:	e002      	b.n	801359c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013596:	f06f 0303 	mvn.w	r3, #3
 801359a:	e07d      	b.n	8013698 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801359c:	4b46      	ldr	r3, [pc, #280]	@ (80136b8 <etharp_output+0x1fc>)
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	4619      	mov	r1, r3
 80135a2:	4a46      	ldr	r2, [pc, #280]	@ (80136bc <etharp_output+0x200>)
 80135a4:	460b      	mov	r3, r1
 80135a6:	005b      	lsls	r3, r3, #1
 80135a8:	440b      	add	r3, r1
 80135aa:	00db      	lsls	r3, r3, #3
 80135ac:	4413      	add	r3, r2
 80135ae:	3314      	adds	r3, #20
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	2b01      	cmp	r3, #1
 80135b4:	d925      	bls.n	8013602 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80135b6:	4b40      	ldr	r3, [pc, #256]	@ (80136b8 <etharp_output+0x1fc>)
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	4619      	mov	r1, r3
 80135bc:	4a3f      	ldr	r2, [pc, #252]	@ (80136bc <etharp_output+0x200>)
 80135be:	460b      	mov	r3, r1
 80135c0:	005b      	lsls	r3, r3, #1
 80135c2:	440b      	add	r3, r1
 80135c4:	00db      	lsls	r3, r3, #3
 80135c6:	4413      	add	r3, r2
 80135c8:	3308      	adds	r3, #8
 80135ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d117      	bne.n	8013602 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	4b38      	ldr	r3, [pc, #224]	@ (80136b8 <etharp_output+0x1fc>)
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	4618      	mov	r0, r3
 80135dc:	4937      	ldr	r1, [pc, #220]	@ (80136bc <etharp_output+0x200>)
 80135de:	4603      	mov	r3, r0
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	4403      	add	r3, r0
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	440b      	add	r3, r1
 80135e8:	3304      	adds	r3, #4
 80135ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d108      	bne.n	8013602 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80135f0:	4b31      	ldr	r3, [pc, #196]	@ (80136b8 <etharp_output+0x1fc>)
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	461a      	mov	r2, r3
 80135f6:	68b9      	ldr	r1, [r7, #8]
 80135f8:	68f8      	ldr	r0, [r7, #12]
 80135fa:	f7ff fec5 	bl	8013388 <etharp_output_to_arp_index>
 80135fe:	4603      	mov	r3, r0
 8013600:	e04a      	b.n	8013698 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013602:	2300      	movs	r3, #0
 8013604:	75fb      	strb	r3, [r7, #23]
 8013606:	e031      	b.n	801366c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013608:	7dfa      	ldrb	r2, [r7, #23]
 801360a:	492c      	ldr	r1, [pc, #176]	@ (80136bc <etharp_output+0x200>)
 801360c:	4613      	mov	r3, r2
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	4413      	add	r3, r2
 8013612:	00db      	lsls	r3, r3, #3
 8013614:	440b      	add	r3, r1
 8013616:	3314      	adds	r3, #20
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	2b01      	cmp	r3, #1
 801361c:	d923      	bls.n	8013666 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801361e:	7dfa      	ldrb	r2, [r7, #23]
 8013620:	4926      	ldr	r1, [pc, #152]	@ (80136bc <etharp_output+0x200>)
 8013622:	4613      	mov	r3, r2
 8013624:	005b      	lsls	r3, r3, #1
 8013626:	4413      	add	r3, r2
 8013628:	00db      	lsls	r3, r3, #3
 801362a:	440b      	add	r3, r1
 801362c:	3308      	adds	r3, #8
 801362e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013630:	68fa      	ldr	r2, [r7, #12]
 8013632:	429a      	cmp	r2, r3
 8013634:	d117      	bne.n	8013666 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	6819      	ldr	r1, [r3, #0]
 801363a:	7dfa      	ldrb	r2, [r7, #23]
 801363c:	481f      	ldr	r0, [pc, #124]	@ (80136bc <etharp_output+0x200>)
 801363e:	4613      	mov	r3, r2
 8013640:	005b      	lsls	r3, r3, #1
 8013642:	4413      	add	r3, r2
 8013644:	00db      	lsls	r3, r3, #3
 8013646:	4403      	add	r3, r0
 8013648:	3304      	adds	r3, #4
 801364a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801364c:	4299      	cmp	r1, r3
 801364e:	d10a      	bne.n	8013666 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013650:	4a19      	ldr	r2, [pc, #100]	@ (80136b8 <etharp_output+0x1fc>)
 8013652:	7dfb      	ldrb	r3, [r7, #23]
 8013654:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	461a      	mov	r2, r3
 801365a:	68b9      	ldr	r1, [r7, #8]
 801365c:	68f8      	ldr	r0, [r7, #12]
 801365e:	f7ff fe93 	bl	8013388 <etharp_output_to_arp_index>
 8013662:	4603      	mov	r3, r0
 8013664:	e018      	b.n	8013698 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013666:	7dfb      	ldrb	r3, [r7, #23]
 8013668:	3301      	adds	r3, #1
 801366a:	75fb      	strb	r3, [r7, #23]
 801366c:	7dfb      	ldrb	r3, [r7, #23]
 801366e:	2b09      	cmp	r3, #9
 8013670:	d9ca      	bls.n	8013608 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	69b9      	ldr	r1, [r7, #24]
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f000 f822 	bl	80136c0 <etharp_query>
 801367c:	4603      	mov	r3, r0
 801367e:	e00b      	b.n	8013698 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8013686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	68b9      	ldr	r1, [r7, #8]
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f002 fa1b 	bl	8015acc <ethernet_output>
 8013696:	4603      	mov	r3, r0
}
 8013698:	4618      	mov	r0, r3
 801369a:	3720      	adds	r7, #32
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	0801d830 	.word	0x0801d830
 80136a4:	0801d980 	.word	0x0801d980
 80136a8:	0801d8a8 	.word	0x0801d8a8
 80136ac:	0801d9d0 	.word	0x0801d9d0
 80136b0:	0801d970 	.word	0x0801d970
 80136b4:	0801e4c8 	.word	0x0801e4c8
 80136b8:	20008900 	.word	0x20008900
 80136bc:	20008810 	.word	0x20008810

080136c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b08c      	sub	sp, #48	@ 0x30
 80136c4:	af02      	add	r7, sp, #8
 80136c6:	60f8      	str	r0, [r7, #12]
 80136c8:	60b9      	str	r1, [r7, #8]
 80136ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	332a      	adds	r3, #42	@ 0x2a
 80136d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80136d2:	23ff      	movs	r3, #255	@ 0xff
 80136d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	68f9      	ldr	r1, [r7, #12]
 80136e2:	4618      	mov	r0, r3
 80136e4:	f001 fa54 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d10c      	bne.n	8013708 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80136f6:	2be0      	cmp	r3, #224	@ 0xe0
 80136f8:	d006      	beq.n	8013708 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d003      	beq.n	8013708 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d102      	bne.n	801370e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013708:	f06f 030f 	mvn.w	r3, #15
 801370c:	e101      	b.n	8013912 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	2101      	movs	r1, #1
 8013712:	68b8      	ldr	r0, [r7, #8]
 8013714:	f7ff fb60 	bl	8012dd8 <etharp_find_entry>
 8013718:	4603      	mov	r3, r0
 801371a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801371c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013720:	2b00      	cmp	r3, #0
 8013722:	da02      	bge.n	801372a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013724:	8a7b      	ldrh	r3, [r7, #18]
 8013726:	b25b      	sxtb	r3, r3
 8013728:	e0f3      	b.n	8013912 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801372a:	8a7b      	ldrh	r3, [r7, #18]
 801372c:	2b7e      	cmp	r3, #126	@ 0x7e
 801372e:	d906      	bls.n	801373e <etharp_query+0x7e>
 8013730:	4b7a      	ldr	r3, [pc, #488]	@ (801391c <etharp_query+0x25c>)
 8013732:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013736:	497a      	ldr	r1, [pc, #488]	@ (8013920 <etharp_query+0x260>)
 8013738:	487a      	ldr	r0, [pc, #488]	@ (8013924 <etharp_query+0x264>)
 801373a:	f004 fd97 	bl	801826c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801373e:	8a7b      	ldrh	r3, [r7, #18]
 8013740:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013742:	7c7a      	ldrb	r2, [r7, #17]
 8013744:	4978      	ldr	r1, [pc, #480]	@ (8013928 <etharp_query+0x268>)
 8013746:	4613      	mov	r3, r2
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	4413      	add	r3, r2
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	440b      	add	r3, r1
 8013750:	3314      	adds	r3, #20
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d115      	bne.n	8013784 <etharp_query+0xc4>
    is_new_entry = 1;
 8013758:	2301      	movs	r3, #1
 801375a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801375c:	7c7a      	ldrb	r2, [r7, #17]
 801375e:	4972      	ldr	r1, [pc, #456]	@ (8013928 <etharp_query+0x268>)
 8013760:	4613      	mov	r3, r2
 8013762:	005b      	lsls	r3, r3, #1
 8013764:	4413      	add	r3, r2
 8013766:	00db      	lsls	r3, r3, #3
 8013768:	440b      	add	r3, r1
 801376a:	3314      	adds	r3, #20
 801376c:	2201      	movs	r2, #1
 801376e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013770:	7c7a      	ldrb	r2, [r7, #17]
 8013772:	496d      	ldr	r1, [pc, #436]	@ (8013928 <etharp_query+0x268>)
 8013774:	4613      	mov	r3, r2
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	4413      	add	r3, r2
 801377a:	00db      	lsls	r3, r3, #3
 801377c:	440b      	add	r3, r1
 801377e:	3308      	adds	r3, #8
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013784:	7c7a      	ldrb	r2, [r7, #17]
 8013786:	4968      	ldr	r1, [pc, #416]	@ (8013928 <etharp_query+0x268>)
 8013788:	4613      	mov	r3, r2
 801378a:	005b      	lsls	r3, r3, #1
 801378c:	4413      	add	r3, r2
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	440b      	add	r3, r1
 8013792:	3314      	adds	r3, #20
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	2b01      	cmp	r3, #1
 8013798:	d011      	beq.n	80137be <etharp_query+0xfe>
 801379a:	7c7a      	ldrb	r2, [r7, #17]
 801379c:	4962      	ldr	r1, [pc, #392]	@ (8013928 <etharp_query+0x268>)
 801379e:	4613      	mov	r3, r2
 80137a0:	005b      	lsls	r3, r3, #1
 80137a2:	4413      	add	r3, r2
 80137a4:	00db      	lsls	r3, r3, #3
 80137a6:	440b      	add	r3, r1
 80137a8:	3314      	adds	r3, #20
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d806      	bhi.n	80137be <etharp_query+0xfe>
 80137b0:	4b5a      	ldr	r3, [pc, #360]	@ (801391c <etharp_query+0x25c>)
 80137b2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80137b6:	495d      	ldr	r1, [pc, #372]	@ (801392c <etharp_query+0x26c>)
 80137b8:	485a      	ldr	r0, [pc, #360]	@ (8013924 <etharp_query+0x264>)
 80137ba:	f004 fd57 	bl	801826c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80137be:	6a3b      	ldr	r3, [r7, #32]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d102      	bne.n	80137ca <etharp_query+0x10a>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d10c      	bne.n	80137e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80137ca:	68b9      	ldr	r1, [r7, #8]
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 f963 	bl	8013a98 <etharp_request>
 80137d2:	4603      	mov	r3, r0
 80137d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d102      	bne.n	80137e4 <etharp_query+0x124>
      return result;
 80137de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80137e2:	e096      	b.n	8013912 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d106      	bne.n	80137f8 <etharp_query+0x138>
 80137ea:	4b4c      	ldr	r3, [pc, #304]	@ (801391c <etharp_query+0x25c>)
 80137ec:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80137f0:	494f      	ldr	r1, [pc, #316]	@ (8013930 <etharp_query+0x270>)
 80137f2:	484c      	ldr	r0, [pc, #304]	@ (8013924 <etharp_query+0x264>)
 80137f4:	f004 fd3a 	bl	801826c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80137f8:	7c7a      	ldrb	r2, [r7, #17]
 80137fa:	494b      	ldr	r1, [pc, #300]	@ (8013928 <etharp_query+0x268>)
 80137fc:	4613      	mov	r3, r2
 80137fe:	005b      	lsls	r3, r3, #1
 8013800:	4413      	add	r3, r2
 8013802:	00db      	lsls	r3, r3, #3
 8013804:	440b      	add	r3, r1
 8013806:	3314      	adds	r3, #20
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	2b01      	cmp	r3, #1
 801380c:	d917      	bls.n	801383e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801380e:	4a49      	ldr	r2, [pc, #292]	@ (8013934 <etharp_query+0x274>)
 8013810:	7c7b      	ldrb	r3, [r7, #17]
 8013812:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013814:	7c7a      	ldrb	r2, [r7, #17]
 8013816:	4613      	mov	r3, r2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	4413      	add	r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	3308      	adds	r3, #8
 8013820:	4a41      	ldr	r2, [pc, #260]	@ (8013928 <etharp_query+0x268>)
 8013822:	4413      	add	r3, r2
 8013824:	3304      	adds	r3, #4
 8013826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801382a:	9200      	str	r2, [sp, #0]
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	6879      	ldr	r1, [r7, #4]
 8013830:	68f8      	ldr	r0, [r7, #12]
 8013832:	f002 f94b 	bl	8015acc <ethernet_output>
 8013836:	4603      	mov	r3, r0
 8013838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801383c:	e067      	b.n	801390e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801383e:	7c7a      	ldrb	r2, [r7, #17]
 8013840:	4939      	ldr	r1, [pc, #228]	@ (8013928 <etharp_query+0x268>)
 8013842:	4613      	mov	r3, r2
 8013844:	005b      	lsls	r3, r3, #1
 8013846:	4413      	add	r3, r2
 8013848:	00db      	lsls	r3, r3, #3
 801384a:	440b      	add	r3, r1
 801384c:	3314      	adds	r3, #20
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b01      	cmp	r3, #1
 8013852:	d15c      	bne.n	801390e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013854:	2300      	movs	r3, #0
 8013856:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801385c:	e01c      	b.n	8013898 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	895a      	ldrh	r2, [r3, #10]
 8013862:	69fb      	ldr	r3, [r7, #28]
 8013864:	891b      	ldrh	r3, [r3, #8]
 8013866:	429a      	cmp	r2, r3
 8013868:	d10a      	bne.n	8013880 <etharp_query+0x1c0>
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d006      	beq.n	8013880 <etharp_query+0x1c0>
 8013872:	4b2a      	ldr	r3, [pc, #168]	@ (801391c <etharp_query+0x25c>)
 8013874:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013878:	492f      	ldr	r1, [pc, #188]	@ (8013938 <etharp_query+0x278>)
 801387a:	482a      	ldr	r0, [pc, #168]	@ (8013924 <etharp_query+0x264>)
 801387c:	f004 fcf6 	bl	801826c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	7b1b      	ldrb	r3, [r3, #12]
 8013884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013888:	2b00      	cmp	r3, #0
 801388a:	d002      	beq.n	8013892 <etharp_query+0x1d2>
        copy_needed = 1;
 801388c:	2301      	movs	r3, #1
 801388e:	61bb      	str	r3, [r7, #24]
        break;
 8013890:	e005      	b.n	801389e <etharp_query+0x1de>
      }
      p = p->next;
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d1df      	bne.n	801385e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d007      	beq.n	80138b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80138aa:	200e      	movs	r0, #14
 80138ac:	f7f9 f92c 	bl	800cb08 <pbuf_clone>
 80138b0:	61f8      	str	r0, [r7, #28]
 80138b2:	e004      	b.n	80138be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80138b8:	69f8      	ldr	r0, [r7, #28]
 80138ba:	f7f8 fec7 	bl	800c64c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d021      	beq.n	8013908 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80138c4:	7c7a      	ldrb	r2, [r7, #17]
 80138c6:	4918      	ldr	r1, [pc, #96]	@ (8013928 <etharp_query+0x268>)
 80138c8:	4613      	mov	r3, r2
 80138ca:	005b      	lsls	r3, r3, #1
 80138cc:	4413      	add	r3, r2
 80138ce:	00db      	lsls	r3, r3, #3
 80138d0:	440b      	add	r3, r1
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d00a      	beq.n	80138ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80138d8:	7c7a      	ldrb	r2, [r7, #17]
 80138da:	4913      	ldr	r1, [pc, #76]	@ (8013928 <etharp_query+0x268>)
 80138dc:	4613      	mov	r3, r2
 80138de:	005b      	lsls	r3, r3, #1
 80138e0:	4413      	add	r3, r2
 80138e2:	00db      	lsls	r3, r3, #3
 80138e4:	440b      	add	r3, r1
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7f8 fe0f 	bl	800c50c <pbuf_free>
      }
      arp_table[i].q = p;
 80138ee:	7c7a      	ldrb	r2, [r7, #17]
 80138f0:	490d      	ldr	r1, [pc, #52]	@ (8013928 <etharp_query+0x268>)
 80138f2:	4613      	mov	r3, r2
 80138f4:	005b      	lsls	r3, r3, #1
 80138f6:	4413      	add	r3, r2
 80138f8:	00db      	lsls	r3, r3, #3
 80138fa:	440b      	add	r3, r1
 80138fc:	69fa      	ldr	r2, [r7, #28]
 80138fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013906:	e002      	b.n	801390e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013908:	23ff      	movs	r3, #255	@ 0xff
 801390a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801390e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013912:	4618      	mov	r0, r3
 8013914:	3728      	adds	r7, #40	@ 0x28
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	0801d830 	.word	0x0801d830
 8013920:	0801d9dc 	.word	0x0801d9dc
 8013924:	0801d8a8 	.word	0x0801d8a8
 8013928:	20008810 	.word	0x20008810
 801392c:	0801d9ec 	.word	0x0801d9ec
 8013930:	0801d9d0 	.word	0x0801d9d0
 8013934:	20008900 	.word	0x20008900
 8013938:	0801da14 	.word	0x0801da14

0801393c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b08a      	sub	sp, #40	@ 0x28
 8013940:	af02      	add	r7, sp, #8
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
 8013948:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801394a:	2300      	movs	r3, #0
 801394c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d106      	bne.n	8013962 <etharp_raw+0x26>
 8013954:	4b3a      	ldr	r3, [pc, #232]	@ (8013a40 <etharp_raw+0x104>)
 8013956:	f240 4257 	movw	r2, #1111	@ 0x457
 801395a:	493a      	ldr	r1, [pc, #232]	@ (8013a44 <etharp_raw+0x108>)
 801395c:	483a      	ldr	r0, [pc, #232]	@ (8013a48 <etharp_raw+0x10c>)
 801395e:	f004 fc85 	bl	801826c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013962:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013966:	211c      	movs	r1, #28
 8013968:	200e      	movs	r0, #14
 801396a:	f7f8 faeb 	bl	800bf44 <pbuf_alloc>
 801396e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d102      	bne.n	801397c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013976:	f04f 33ff 	mov.w	r3, #4294967295
 801397a:	e05d      	b.n	8013a38 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	895b      	ldrh	r3, [r3, #10]
 8013980:	2b1b      	cmp	r3, #27
 8013982:	d806      	bhi.n	8013992 <etharp_raw+0x56>
 8013984:	4b2e      	ldr	r3, [pc, #184]	@ (8013a40 <etharp_raw+0x104>)
 8013986:	f240 4262 	movw	r2, #1122	@ 0x462
 801398a:	4930      	ldr	r1, [pc, #192]	@ (8013a4c <etharp_raw+0x110>)
 801398c:	482e      	ldr	r0, [pc, #184]	@ (8013a48 <etharp_raw+0x10c>)
 801398e:	f004 fc6d 	bl	801826c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013998:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801399a:	4618      	mov	r0, r3
 801399c:	f7f7 f9ca 	bl	800ad34 <lwip_htons>
 80139a0:	4603      	mov	r3, r0
 80139a2:	461a      	mov	r2, r3
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80139ae:	2b06      	cmp	r3, #6
 80139b0:	d006      	beq.n	80139c0 <etharp_raw+0x84>
 80139b2:	4b23      	ldr	r3, [pc, #140]	@ (8013a40 <etharp_raw+0x104>)
 80139b4:	f240 4269 	movw	r2, #1129	@ 0x469
 80139b8:	4925      	ldr	r1, [pc, #148]	@ (8013a50 <etharp_raw+0x114>)
 80139ba:	4823      	ldr	r0, [pc, #140]	@ (8013a48 <etharp_raw+0x10c>)
 80139bc:	f004 fc56 	bl	801826c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	3308      	adds	r3, #8
 80139c4:	2206      	movs	r2, #6
 80139c6:	6839      	ldr	r1, [r7, #0]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f004 ffba 	bl	8018942 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	3312      	adds	r3, #18
 80139d2:	2206      	movs	r2, #6
 80139d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80139d6:	4618      	mov	r0, r3
 80139d8:	f004 ffb3 	bl	8018942 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	330e      	adds	r3, #14
 80139e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139e2:	6812      	ldr	r2, [r2, #0]
 80139e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	3318      	adds	r3, #24
 80139ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139ec:	6812      	ldr	r2, [r2, #0]
 80139ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
 80139f6:	2200      	movs	r2, #0
 80139f8:	f042 0201 	orr.w	r2, r2, #1
 80139fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	2200      	movs	r2, #0
 8013a02:	f042 0208 	orr.w	r2, r2, #8
 8013a06:	709a      	strb	r2, [r3, #2]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	2206      	movs	r2, #6
 8013a10:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	2204      	movs	r2, #4
 8013a16:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013a18:	f640 0306 	movw	r3, #2054	@ 0x806
 8013a1c:	9300      	str	r3, [sp, #0]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	68ba      	ldr	r2, [r7, #8]
 8013a22:	69b9      	ldr	r1, [r7, #24]
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f002 f851 	bl	8015acc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013a2a:	69b8      	ldr	r0, [r7, #24]
 8013a2c:	f7f8 fd6e 	bl	800c50c <pbuf_free>
  p = NULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013a34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3720      	adds	r7, #32
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	0801d830 	.word	0x0801d830
 8013a44:	0801d980 	.word	0x0801d980
 8013a48:	0801d8a8 	.word	0x0801d8a8
 8013a4c:	0801da30 	.word	0x0801da30
 8013a50:	0801da64 	.word	0x0801da64

08013a54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b088      	sub	sp, #32
 8013a58:	af04      	add	r7, sp, #16
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	60b9      	str	r1, [r7, #8]
 8013a5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013a70:	2201      	movs	r2, #1
 8013a72:	9203      	str	r2, [sp, #12]
 8013a74:	68ba      	ldr	r2, [r7, #8]
 8013a76:	9202      	str	r2, [sp, #8]
 8013a78:	4a06      	ldr	r2, [pc, #24]	@ (8013a94 <etharp_request_dst+0x40>)
 8013a7a:	9201      	str	r2, [sp, #4]
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	4603      	mov	r3, r0
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f7ff ff5a 	bl	801393c <etharp_raw>
 8013a88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3710      	adds	r7, #16
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	0801e4d0 	.word	0x0801e4d0

08013a98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013aa2:	4a05      	ldr	r2, [pc, #20]	@ (8013ab8 <etharp_request+0x20>)
 8013aa4:	6839      	ldr	r1, [r7, #0]
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff ffd4 	bl	8013a54 <etharp_request_dst>
 8013aac:	4603      	mov	r3, r0
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	0801e4c8 	.word	0x0801e4c8

08013abc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b08e      	sub	sp, #56	@ 0x38
 8013ac0:	af04      	add	r7, sp, #16
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013ac6:	4b79      	ldr	r3, [pc, #484]	@ (8013cac <icmp_input+0x1f0>)
 8013ac8:	689b      	ldr	r3, [r3, #8]
 8013aca:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	f003 030f 	and.w	r3, r3, #15
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	009b      	lsls	r3, r3, #2
 8013ad8:	b2db      	uxtb	r3, r3
 8013ada:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013adc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ade:	2b13      	cmp	r3, #19
 8013ae0:	f240 80cd 	bls.w	8013c7e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	895b      	ldrh	r3, [r3, #10]
 8013ae8:	2b03      	cmp	r3, #3
 8013aea:	f240 80ca 	bls.w	8013c82 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013af8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f000 80b7 	beq.w	8013c70 <icmp_input+0x1b4>
 8013b02:	2b08      	cmp	r3, #8
 8013b04:	f040 80b7 	bne.w	8013c76 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013b08:	4b69      	ldr	r3, [pc, #420]	@ (8013cb0 <icmp_input+0x1f4>)
 8013b0a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b0c:	4b67      	ldr	r3, [pc, #412]	@ (8013cac <icmp_input+0x1f0>)
 8013b0e:	695b      	ldr	r3, [r3, #20]
 8013b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013b14:	2be0      	cmp	r3, #224	@ 0xe0
 8013b16:	f000 80bb 	beq.w	8013c90 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013b1a:	4b64      	ldr	r3, [pc, #400]	@ (8013cac <icmp_input+0x1f0>)
 8013b1c:	695b      	ldr	r3, [r3, #20]
 8013b1e:	4a63      	ldr	r2, [pc, #396]	@ (8013cac <icmp_input+0x1f0>)
 8013b20:	6812      	ldr	r2, [r2, #0]
 8013b22:	4611      	mov	r1, r2
 8013b24:	4618      	mov	r0, r3
 8013b26:	f001 f833 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f040 80b1 	bne.w	8013c94 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	891b      	ldrh	r3, [r3, #8]
 8013b36:	2b07      	cmp	r3, #7
 8013b38:	f240 80a5 	bls.w	8013c86 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013b3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b3e:	330e      	adds	r3, #14
 8013b40:	4619      	mov	r1, r3
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7f8 fc4c 	bl	800c3e0 <pbuf_add_header>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d04b      	beq.n	8013be6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	891a      	ldrh	r2, [r3, #8]
 8013b52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b54:	4413      	add	r3, r2
 8013b56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	891b      	ldrh	r3, [r3, #8]
 8013b5c:	8b7a      	ldrh	r2, [r7, #26]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	f0c0 809a 	bcc.w	8013c98 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013b64:	8b7b      	ldrh	r3, [r7, #26]
 8013b66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	200e      	movs	r0, #14
 8013b6e:	f7f8 f9e9 	bl	800bf44 <pbuf_alloc>
 8013b72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f000 8090 	beq.w	8013c9c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	895b      	ldrh	r3, [r3, #10]
 8013b80:	461a      	mov	r2, r3
 8013b82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b84:	3308      	adds	r3, #8
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d203      	bcs.n	8013b92 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013b8a:	6978      	ldr	r0, [r7, #20]
 8013b8c:	f7f8 fcbe 	bl	800c50c <pbuf_free>
          goto icmperr;
 8013b90:	e085      	b.n	8013c9e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f004 fed1 	bl	8018942 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013ba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6978      	ldr	r0, [r7, #20]
 8013ba6:	f7f8 fc2b 	bl	800c400 <pbuf_remove_header>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d009      	beq.n	8013bc4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013bb0:	4b40      	ldr	r3, [pc, #256]	@ (8013cb4 <icmp_input+0x1f8>)
 8013bb2:	22b6      	movs	r2, #182	@ 0xb6
 8013bb4:	4940      	ldr	r1, [pc, #256]	@ (8013cb8 <icmp_input+0x1fc>)
 8013bb6:	4841      	ldr	r0, [pc, #260]	@ (8013cbc <icmp_input+0x200>)
 8013bb8:	f004 fb58 	bl	801826c <iprintf>
          pbuf_free(r);
 8013bbc:	6978      	ldr	r0, [r7, #20]
 8013bbe:	f7f8 fca5 	bl	800c50c <pbuf_free>
          goto icmperr;
 8013bc2:	e06c      	b.n	8013c9e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013bc4:	6879      	ldr	r1, [r7, #4]
 8013bc6:	6978      	ldr	r0, [r7, #20]
 8013bc8:	f7f8 fdc8 	bl	800c75c <pbuf_copy>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d003      	beq.n	8013bda <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013bd2:	6978      	ldr	r0, [r7, #20]
 8013bd4:	f7f8 fc9a 	bl	800c50c <pbuf_free>
          goto icmperr;
 8013bd8:	e061      	b.n	8013c9e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f7f8 fc96 	bl	800c50c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	607b      	str	r3, [r7, #4]
 8013be4:	e00f      	b.n	8013c06 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013be6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013be8:	330e      	adds	r3, #14
 8013bea:	4619      	mov	r1, r3
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7f8 fc07 	bl	800c400 <pbuf_remove_header>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d006      	beq.n	8013c06 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8013cb4 <icmp_input+0x1f8>)
 8013bfa:	22c7      	movs	r2, #199	@ 0xc7
 8013bfc:	4930      	ldr	r1, [pc, #192]	@ (8013cc0 <icmp_input+0x204>)
 8013bfe:	482f      	ldr	r0, [pc, #188]	@ (8013cbc <icmp_input+0x200>)
 8013c00:	f004 fb34 	bl	801826c <iprintf>
          goto icmperr;
 8013c04:	e04b      	b.n	8013c9e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013c0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c0e:	4619      	mov	r1, r3
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f7f8 fbe5 	bl	800c3e0 <pbuf_add_header>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d12b      	bne.n	8013c74 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013c2a:	4b20      	ldr	r3, [pc, #128]	@ (8013cac <icmp_input+0x1f0>)
 8013c2c:	691a      	ldr	r2, [r3, #16]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	2200      	movs	r2, #0
 8013c36:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	709a      	strb	r2, [r3, #2]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	22ff      	movs	r2, #255	@ 0xff
 8013c46:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	729a      	strb	r2, [r3, #10]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	9302      	str	r3, [sp, #8]
 8013c56:	2301      	movs	r3, #1
 8013c58:	9301      	str	r3, [sp, #4]
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	23ff      	movs	r3, #255	@ 0xff
 8013c60:	2200      	movs	r2, #0
 8013c62:	69f9      	ldr	r1, [r7, #28]
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fe45 	bl	80148f4 <ip4_output_if>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013c6e:	e001      	b.n	8013c74 <icmp_input+0x1b8>
      break;
 8013c70:	bf00      	nop
 8013c72:	e000      	b.n	8013c76 <icmp_input+0x1ba>
      break;
 8013c74:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7f8 fc48 	bl	800c50c <pbuf_free>
  return;
 8013c7c:	e013      	b.n	8013ca6 <icmp_input+0x1ea>
    goto lenerr;
 8013c7e:	bf00      	nop
 8013c80:	e002      	b.n	8013c88 <icmp_input+0x1cc>
    goto lenerr;
 8013c82:	bf00      	nop
 8013c84:	e000      	b.n	8013c88 <icmp_input+0x1cc>
        goto lenerr;
 8013c86:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7f8 fc3f 	bl	800c50c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013c8e:	e00a      	b.n	8013ca6 <icmp_input+0x1ea>
        goto icmperr;
 8013c90:	bf00      	nop
 8013c92:	e004      	b.n	8013c9e <icmp_input+0x1e2>
        goto icmperr;
 8013c94:	bf00      	nop
 8013c96:	e002      	b.n	8013c9e <icmp_input+0x1e2>
          goto icmperr;
 8013c98:	bf00      	nop
 8013c9a:	e000      	b.n	8013c9e <icmp_input+0x1e2>
          goto icmperr;
 8013c9c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f7f8 fc34 	bl	800c50c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013ca4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013ca6:	3728      	adds	r7, #40	@ 0x28
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	20005188 	.word	0x20005188
 8013cb0:	2000519c 	.word	0x2000519c
 8013cb4:	0801daa8 	.word	0x0801daa8
 8013cb8:	0801dae0 	.word	0x0801dae0
 8013cbc:	0801db18 	.word	0x0801db18
 8013cc0:	0801db40 	.word	0x0801db40

08013cc4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013cd0:	78fb      	ldrb	r3, [r7, #3]
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	2103      	movs	r1, #3
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 f814 	bl	8013d04 <icmp_send_response>
}
 8013cdc:	bf00      	nop
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	460b      	mov	r3, r1
 8013cee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013cf0:	78fb      	ldrb	r3, [r7, #3]
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	210b      	movs	r1, #11
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f000 f804 	bl	8013d04 <icmp_send_response>
}
 8013cfc:	bf00      	nop
 8013cfe:	3708      	adds	r7, #8
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b08c      	sub	sp, #48	@ 0x30
 8013d08:	af04      	add	r7, sp, #16
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	70fb      	strb	r3, [r7, #3]
 8013d10:	4613      	mov	r3, r2
 8013d12:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013d14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013d18:	2124      	movs	r1, #36	@ 0x24
 8013d1a:	2022      	movs	r0, #34	@ 0x22
 8013d1c:	f7f8 f912 	bl	800bf44 <pbuf_alloc>
 8013d20:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d04c      	beq.n	8013dc2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	895b      	ldrh	r3, [r3, #10]
 8013d2c:	2b23      	cmp	r3, #35	@ 0x23
 8013d2e:	d806      	bhi.n	8013d3e <icmp_send_response+0x3a>
 8013d30:	4b26      	ldr	r3, [pc, #152]	@ (8013dcc <icmp_send_response+0xc8>)
 8013d32:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013d36:	4926      	ldr	r1, [pc, #152]	@ (8013dd0 <icmp_send_response+0xcc>)
 8013d38:	4826      	ldr	r0, [pc, #152]	@ (8013dd4 <icmp_send_response+0xd0>)
 8013d3a:	f004 fa97 	bl	801826c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013d44:	69fb      	ldr	r3, [r7, #28]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	78fa      	ldrb	r2, [r7, #3]
 8013d4e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	78ba      	ldrb	r2, [r7, #2]
 8013d54:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	711a      	strb	r2, [r3, #4]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	2200      	movs	r2, #0
 8013d64:	719a      	strb	r2, [r3, #6]
 8013d66:	2200      	movs	r2, #0
 8013d68:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013d6a:	69fb      	ldr	r3, [r7, #28]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	f103 0008 	add.w	r0, r3, #8
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	221c      	movs	r2, #28
 8013d78:	4619      	mov	r1, r3
 8013d7a:	f004 fde2 	bl	8018942 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013d7e:	69bb      	ldr	r3, [r7, #24]
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013d84:	f107 030c 	add.w	r3, r7, #12
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f000 fbab 	bl	80144e4 <ip4_route>
 8013d8e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d011      	beq.n	8013dba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	709a      	strb	r2, [r3, #2]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013da0:	f107 020c 	add.w	r2, r7, #12
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	9302      	str	r3, [sp, #8]
 8013da8:	2301      	movs	r3, #1
 8013daa:	9301      	str	r3, [sp, #4]
 8013dac:	2300      	movs	r3, #0
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	23ff      	movs	r3, #255	@ 0xff
 8013db2:	2100      	movs	r1, #0
 8013db4:	69f8      	ldr	r0, [r7, #28]
 8013db6:	f000 fd9d 	bl	80148f4 <ip4_output_if>
  }
  pbuf_free(q);
 8013dba:	69f8      	ldr	r0, [r7, #28]
 8013dbc:	f7f8 fba6 	bl	800c50c <pbuf_free>
 8013dc0:	e000      	b.n	8013dc4 <icmp_send_response+0xc0>
    return;
 8013dc2:	bf00      	nop
}
 8013dc4:	3720      	adds	r7, #32
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	0801daa8 	.word	0x0801daa8
 8013dd0:	0801db74 	.word	0x0801db74
 8013dd4:	0801db18 	.word	0x0801db18

08013dd8 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8013ddc:	4b05      	ldr	r3, [pc, #20]	@ (8013df4 <igmp_init+0x1c>)
 8013dde:	4a06      	ldr	r2, [pc, #24]	@ (8013df8 <igmp_init+0x20>)
 8013de0:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8013de2:	4b06      	ldr	r3, [pc, #24]	@ (8013dfc <igmp_init+0x24>)
 8013de4:	4a06      	ldr	r2, [pc, #24]	@ (8013e00 <igmp_init+0x28>)
 8013de6:	601a      	str	r2, [r3, #0]
}
 8013de8:	bf00      	nop
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop
 8013df4:	20008904 	.word	0x20008904
 8013df8:	010000e0 	.word	0x010000e0
 8013dfc:	20008908 	.word	0x20008908
 8013e00:	020000e0 	.word	0x020000e0

08013e04 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8013e0c:	4911      	ldr	r1, [pc, #68]	@ (8013e54 <igmp_start+0x50>)
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f000 f85e 	bl	8013ed0 <igmp_lookup_group>
 8013e14:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d014      	beq.n	8013e46 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2202      	movs	r2, #2
 8013e20:	725a      	strb	r2, [r3, #9]
    group->use++;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	7b1b      	ldrb	r3, [r3, #12]
 8013e26:	3301      	adds	r3, #1
 8013e28:	b2da      	uxtb	r2, r3
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d005      	beq.n	8013e42 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	4905      	ldr	r1, [pc, #20]	@ (8013e54 <igmp_start+0x50>)
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	4798      	blx	r3
    }

    return ERR_OK;
 8013e42:	2300      	movs	r3, #0
 8013e44:	e001      	b.n	8013e4a <igmp_start+0x46>
  }

  return ERR_MEM;
 8013e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	20008904 	.word	0x20008904

08013e58 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b084      	sub	sp, #16
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e64:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d00a      	beq.n	8013e82 <igmp_report_groups+0x2a>
    group = group->next;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8013e72:	e006      	b.n	8013e82 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8013e74:	2105      	movs	r1, #5
 8013e76:	68f8      	ldr	r0, [r7, #12]
 8013e78:	f000 fa79 	bl	801436e <igmp_delaying_member>
    group = group->next;
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1f5      	bne.n	8013e74 <igmp_report_groups+0x1c>
  }
}
 8013e88:	bf00      	nop
 8013e8a:	bf00      	nop
 8013e8c:	3710      	adds	r7, #16
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8013e92:	b480      	push	{r7}
 8013e94:	b085      	sub	sp, #20
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ea0:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8013ea2:	e00a      	b.n	8013eba <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	685a      	ldr	r2, [r3, #4]
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d101      	bne.n	8013eb4 <igmp_lookfor_group+0x22>
      return group;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	e006      	b.n	8013ec2 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d1f1      	bne.n	8013ea4 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8013ec0:	2300      	movs	r3, #0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3714      	adds	r7, #20
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
	...

08013ed0 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ede:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7ff ffd5 	bl	8013e92 <igmp_lookfor_group>
 8013ee8:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d001      	beq.n	8013ef4 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	e047      	b.n	8013f84 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8013ef4:	2006      	movs	r0, #6
 8013ef6:	f7f7 fc05 	bl	800b704 <memp_malloc>
 8013efa:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d03f      	beq.n	8013f82 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <igmp_lookup_group+0x3e>
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	e000      	b.n	8013f10 <igmp_lookup_group+0x40>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	68ba      	ldr	r2, [r7, #8]
 8013f12:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	2200      	movs	r2, #0
 8013f18:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2200      	movs	r2, #0
 8013f24:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d113      	bne.n	8013f5a <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	4b15      	ldr	r3, [pc, #84]	@ (8013f8c <igmp_lookup_group+0xbc>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d006      	beq.n	8013f4c <igmp_lookup_group+0x7c>
 8013f3e:	4b14      	ldr	r3, [pc, #80]	@ (8013f90 <igmp_lookup_group+0xc0>)
 8013f40:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8013f44:	4913      	ldr	r1, [pc, #76]	@ (8013f94 <igmp_lookup_group+0xc4>)
 8013f46:	4814      	ldr	r0, [pc, #80]	@ (8013f98 <igmp_lookup_group+0xc8>)
 8013f48:	f004 f990 	bl	801826c <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	68ba      	ldr	r2, [r7, #8]
 8013f56:	625a      	str	r2, [r3, #36]	@ 0x24
 8013f58:	e013      	b.n	8013f82 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8013f8c <igmp_lookup_group+0xbc>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d106      	bne.n	8013f74 <igmp_lookup_group+0xa4>
 8013f66:	4b0a      	ldr	r3, [pc, #40]	@ (8013f90 <igmp_lookup_group+0xc0>)
 8013f68:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8013f6c:	490b      	ldr	r1, [pc, #44]	@ (8013f9c <igmp_lookup_group+0xcc>)
 8013f6e:	480a      	ldr	r0, [pc, #40]	@ (8013f98 <igmp_lookup_group+0xc8>)
 8013f70:	f004 f97c 	bl	801826c <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	68ba      	ldr	r2, [r7, #8]
 8013f80:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8013f82:	68bb      	ldr	r3, [r7, #8]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	20008904 	.word	0x20008904
 8013f90:	0801dba0 	.word	0x0801dba0
 8013f94:	0801dbd8 	.word	0x0801dbd8
 8013f98:	0801dc0c 	.word	0x0801dc0c
 8013f9c:	0801dc34 	.word	0x0801dc34

08013fa0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b088      	sub	sp, #32
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	895b      	ldrh	r3, [r3, #10]
 8013fb0:	2b07      	cmp	r3, #7
 8013fb2:	d803      	bhi.n	8013fbc <igmp_input+0x1c>
    pbuf_free(p);
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f7f8 faa9 	bl	800c50c <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8013fba:	e086      	b.n	80140ca <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	895b      	ldrh	r3, [r3, #10]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6978      	ldr	r0, [r7, #20]
 8013fca:	f7f6 ff3e 	bl	800ae4a <inet_chksum>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d003      	beq.n	8013fdc <igmp_input+0x3c>
    pbuf_free(p);
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	f7f8 fa99 	bl	800c50c <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8013fda:	e076      	b.n	80140ca <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	68b8      	ldr	r0, [r7, #8]
 8013fe0:	f7ff ff57 	bl	8013e92 <igmp_lookfor_group>
 8013fe4:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d103      	bne.n	8013ff4 <igmp_input+0x54>
    pbuf_free(p);
 8013fec:	68f8      	ldr	r0, [r7, #12]
 8013fee:	f7f8 fa8d 	bl	800c50c <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8013ff2:	e06a      	b.n	80140ca <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	2b11      	cmp	r3, #17
 8013ffa:	d002      	beq.n	8014002 <igmp_input+0x62>
 8013ffc:	2b16      	cmp	r3, #22
 8013ffe:	d04f      	beq.n	80140a0 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8014000:	e05f      	b.n	80140c2 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	4b32      	ldr	r3, [pc, #200]	@ (80140d0 <igmp_input+0x130>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	429a      	cmp	r2, r3
 801400c:	d125      	bne.n	801405a <igmp_input+0xba>
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	3304      	adds	r3, #4
 8014012:	2b00      	cmp	r3, #0
 8014014:	d003      	beq.n	801401e <igmp_input+0x7e>
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d11d      	bne.n	801405a <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	785b      	ldrb	r3, [r3, #1]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d102      	bne.n	801402c <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	220a      	movs	r2, #10
 801402a:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014030:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8014032:	69bb      	ldr	r3, [r7, #24]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00c      	beq.n	8014052 <igmp_input+0xb2>
          groupref = groupref->next;
 8014038:	69bb      	ldr	r3, [r7, #24]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801403e:	e008      	b.n	8014052 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	785b      	ldrb	r3, [r3, #1]
 8014044:	4619      	mov	r1, r3
 8014046:	69b8      	ldr	r0, [r7, #24]
 8014048:	f000 f991 	bl	801436e <igmp_delaying_member>
          groupref = groupref->next;
 801404c:	69bb      	ldr	r3, [r7, #24]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8014052:	69bb      	ldr	r3, [r7, #24]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d1f3      	bne.n	8014040 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8014058:	e021      	b.n	801409e <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	3304      	adds	r3, #4
 801405e:	2b00      	cmp	r3, #0
 8014060:	d02c      	beq.n	80140bc <igmp_input+0x11c>
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d028      	beq.n	80140bc <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	4b18      	ldr	r3, [pc, #96]	@ (80140d0 <igmp_input+0x130>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	429a      	cmp	r2, r3
 8014074:	d109      	bne.n	801408a <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 801407c:	f107 0310 	add.w	r3, r7, #16
 8014080:	4619      	mov	r1, r3
 8014082:	68b8      	ldr	r0, [r7, #8]
 8014084:	f7ff ff05 	bl	8013e92 <igmp_lookfor_group>
 8014088:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d015      	beq.n	80140bc <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	785b      	ldrb	r3, [r3, #1]
 8014094:	4619      	mov	r1, r3
 8014096:	69f8      	ldr	r0, [r7, #28]
 8014098:	f000 f969 	bl	801436e <igmp_delaying_member>
      break;
 801409c:	e00e      	b.n	80140bc <igmp_input+0x11c>
 801409e:	e00d      	b.n	80140bc <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	7a5b      	ldrb	r3, [r3, #9]
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d10b      	bne.n	80140c0 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	2200      	movs	r2, #0
 80140ac:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	2202      	movs	r2, #2
 80140b2:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	2200      	movs	r2, #0
 80140b8:	721a      	strb	r2, [r3, #8]
      break;
 80140ba:	e001      	b.n	80140c0 <igmp_input+0x120>
      break;
 80140bc:	bf00      	nop
 80140be:	e000      	b.n	80140c2 <igmp_input+0x122>
      break;
 80140c0:	bf00      	nop
  }

  pbuf_free(p);
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f7f8 fa22 	bl	800c50c <pbuf_free>
  return;
 80140c8:	bf00      	nop
}
 80140ca:	3720      	adds	r7, #32
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	20008904 	.word	0x20008904

080140d4 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 80140de:	23fa      	movs	r3, #250	@ 0xfa
 80140e0:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80140ea:	2be0      	cmp	r3, #224	@ 0xe0
 80140ec:	d009      	beq.n	8014102 <igmp_joingroup+0x2e>
 80140ee:	4b26      	ldr	r3, [pc, #152]	@ (8014188 <igmp_joingroup+0xb4>)
 80140f0:	f240 12c9 	movw	r2, #457	@ 0x1c9
 80140f4:	4925      	ldr	r1, [pc, #148]	@ (801418c <igmp_joingroup+0xb8>)
 80140f6:	4826      	ldr	r0, [pc, #152]	@ (8014190 <igmp_joingroup+0xbc>)
 80140f8:	f004 f8b8 	bl	801826c <iprintf>
 80140fc:	f06f 0305 	mvn.w	r3, #5
 8014100:	e03d      	b.n	801417e <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	4b23      	ldr	r3, [pc, #140]	@ (8014194 <igmp_joingroup+0xc0>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	429a      	cmp	r2, r3
 801410c:	d109      	bne.n	8014122 <igmp_joingroup+0x4e>
 801410e:	4b1e      	ldr	r3, [pc, #120]	@ (8014188 <igmp_joingroup+0xb4>)
 8014110:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 8014114:	4920      	ldr	r1, [pc, #128]	@ (8014198 <igmp_joingroup+0xc4>)
 8014116:	481e      	ldr	r0, [pc, #120]	@ (8014190 <igmp_joingroup+0xbc>)
 8014118:	f004 f8a8 	bl	801826c <iprintf>
 801411c:	f06f 0305 	mvn.w	r3, #5
 8014120:	e02d      	b.n	801417e <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014122:	4b1e      	ldr	r3, [pc, #120]	@ (801419c <igmp_joingroup+0xc8>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	60bb      	str	r3, [r7, #8]
 8014128:	e024      	b.n	8014174 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014130:	f003 0320 	and.w	r3, r3, #32
 8014134:	2b00      	cmp	r3, #0
 8014136:	d01a      	beq.n	801416e <igmp_joingroup+0x9a>
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d00a      	beq.n	8014154 <igmp_joingroup+0x80>
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d006      	beq.n	8014154 <igmp_joingroup+0x80>
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	3304      	adds	r3, #4
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	429a      	cmp	r2, r3
 8014152:	d10c      	bne.n	801416e <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 8014154:	6839      	ldr	r1, [r7, #0]
 8014156:	68b8      	ldr	r0, [r7, #8]
 8014158:	f000 f822 	bl	80141a0 <igmp_joingroup_netif>
 801415c:	4603      	mov	r3, r0
 801415e:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8014160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d002      	beq.n	801416e <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 8014168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801416c:	e007      	b.n	801417e <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	60bb      	str	r3, [r7, #8]
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d1d7      	bne.n	801412a <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 801417a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801417e:	4618      	mov	r0, r3
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	0801dba0 	.word	0x0801dba0
 801418c:	0801dc78 	.word	0x0801dc78
 8014190:	0801dc0c 	.word	0x0801dc0c
 8014194:	20008904 	.word	0x20008904
 8014198:	0801dcb0 	.word	0x0801dcb0
 801419c:	200087a4 	.word	0x200087a4

080141a0 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80141b2:	2be0      	cmp	r3, #224	@ 0xe0
 80141b4:	d009      	beq.n	80141ca <igmp_joingroup_netif+0x2a>
 80141b6:	4b2f      	ldr	r3, [pc, #188]	@ (8014274 <igmp_joingroup_netif+0xd4>)
 80141b8:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 80141bc:	492e      	ldr	r1, [pc, #184]	@ (8014278 <igmp_joingroup_netif+0xd8>)
 80141be:	482f      	ldr	r0, [pc, #188]	@ (801427c <igmp_joingroup_netif+0xdc>)
 80141c0:	f004 f854 	bl	801826c <iprintf>
 80141c4:	f06f 0305 	mvn.w	r3, #5
 80141c8:	e050      	b.n	801426c <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	681a      	ldr	r2, [r3, #0]
 80141ce:	4b2c      	ldr	r3, [pc, #176]	@ (8014280 <igmp_joingroup_netif+0xe0>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d109      	bne.n	80141ea <igmp_joingroup_netif+0x4a>
 80141d6:	4b27      	ldr	r3, [pc, #156]	@ (8014274 <igmp_joingroup_netif+0xd4>)
 80141d8:	f240 12ed 	movw	r2, #493	@ 0x1ed
 80141dc:	4929      	ldr	r1, [pc, #164]	@ (8014284 <igmp_joingroup_netif+0xe4>)
 80141de:	4827      	ldr	r0, [pc, #156]	@ (801427c <igmp_joingroup_netif+0xdc>)
 80141e0:	f004 f844 	bl	801826c <iprintf>
 80141e4:	f06f 0305 	mvn.w	r3, #5
 80141e8:	e040      	b.n	801426c <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80141f0:	f003 0320 	and.w	r3, r3, #32
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d109      	bne.n	801420c <igmp_joingroup_netif+0x6c>
 80141f8:	4b1e      	ldr	r3, [pc, #120]	@ (8014274 <igmp_joingroup_netif+0xd4>)
 80141fa:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 80141fe:	4922      	ldr	r1, [pc, #136]	@ (8014288 <igmp_joingroup_netif+0xe8>)
 8014200:	481e      	ldr	r0, [pc, #120]	@ (801427c <igmp_joingroup_netif+0xdc>)
 8014202:	f004 f833 	bl	801826c <iprintf>
 8014206:	f06f 0305 	mvn.w	r3, #5
 801420a:	e02f      	b.n	801426c <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 801420c:	6839      	ldr	r1, [r7, #0]
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f7ff fe5e 	bl	8013ed0 <igmp_lookup_group>
 8014214:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d025      	beq.n	8014268 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	7a5b      	ldrb	r3, [r3, #9]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d119      	bne.n	8014258 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	7b1b      	ldrb	r3, [r3, #12]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d109      	bne.n	8014240 <igmp_joingroup_netif+0xa0>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014230:	2b00      	cmp	r3, #0
 8014232:	d005      	beq.n	8014240 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014238:	2201      	movs	r2, #1
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8014240:	2216      	movs	r2, #22
 8014242:	68f9      	ldr	r1, [r7, #12]
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f000 f8d9 	bl	80143fc <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801424a:	2105      	movs	r1, #5
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f000 f86b 	bl	8014328 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	2201      	movs	r2, #1
 8014256:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	7b1b      	ldrb	r3, [r3, #12]
 801425c:	3301      	adds	r3, #1
 801425e:	b2da      	uxtb	r2, r3
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 8014264:	2300      	movs	r3, #0
 8014266:	e001      	b.n	801426c <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 8014268:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801426c:	4618      	mov	r0, r3
 801426e:	3710      	adds	r7, #16
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	0801dba0 	.word	0x0801dba0
 8014278:	0801dce4 	.word	0x0801dce4
 801427c:	0801dc0c 	.word	0x0801dc0c
 8014280:	20008904 	.word	0x20008904
 8014284:	0801dd20 	.word	0x0801dd20
 8014288:	0801dd5c 	.word	0x0801dd5c

0801428c <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 8014292:	4b15      	ldr	r3, [pc, #84]	@ (80142e8 <igmp_tmr+0x5c>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	607b      	str	r3, [r7, #4]
 8014298:	e01e      	b.n	80142d8 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801429e:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 80142a0:	e014      	b.n	80142cc <igmp_tmr+0x40>
      if (group->timer > 0) {
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	895b      	ldrh	r3, [r3, #10]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d00d      	beq.n	80142c6 <igmp_tmr+0x3a>
        group->timer--;
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	895b      	ldrh	r3, [r3, #10]
 80142ae:	3b01      	subs	r3, #1
 80142b0:	b29a      	uxth	r2, r3
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	895b      	ldrh	r3, [r3, #10]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d103      	bne.n	80142c6 <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 80142be:	6839      	ldr	r1, [r7, #0]
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f000 f813 	bl	80142ec <igmp_timeout>
        }
      }
      group = group->next;
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d1e7      	bne.n	80142a2 <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	607b      	str	r3, [r7, #4]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d1dd      	bne.n	801429a <igmp_tmr+0xe>
    }
  }
}
 80142de:	bf00      	nop
 80142e0:	bf00      	nop
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	200087a4 	.word	0x200087a4

080142ec <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	7a5b      	ldrb	r3, [r3, #9]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d10d      	bne.n	801431a <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	685a      	ldr	r2, [r3, #4]
 8014302:	4b08      	ldr	r3, [pc, #32]	@ (8014324 <igmp_timeout+0x38>)
 8014304:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8014306:	429a      	cmp	r2, r3
 8014308:	d007      	beq.n	801431a <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	2202      	movs	r2, #2
 801430e:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8014310:	2216      	movs	r2, #22
 8014312:	6839      	ldr	r1, [r7, #0]
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f000 f871 	bl	80143fc <igmp_send>
  }
}
 801431a:	bf00      	nop
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	20008904 	.word	0x20008904

08014328 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
 8014330:	460b      	mov	r3, r1
 8014332:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8014334:	78fb      	ldrb	r3, [r7, #3]
 8014336:	2b02      	cmp	r3, #2
 8014338:	d90b      	bls.n	8014352 <igmp_start_timer+0x2a>
 801433a:	f002 fbd9 	bl	8016af0 <rand>
 801433e:	4603      	mov	r3, r0
 8014340:	461a      	mov	r2, r3
 8014342:	78fb      	ldrb	r3, [r7, #3]
 8014344:	fbb2 f1f3 	udiv	r1, r2, r3
 8014348:	fb01 f303 	mul.w	r3, r1, r3
 801434c:	1ad3      	subs	r3, r2, r3
 801434e:	b29a      	uxth	r2, r3
 8014350:	e000      	b.n	8014354 <igmp_start_timer+0x2c>
 8014352:	2201      	movs	r2, #1
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	895b      	ldrh	r3, [r3, #10]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d102      	bne.n	8014366 <igmp_start_timer+0x3e>
    group->timer = 1;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2201      	movs	r2, #1
 8014364:	815a      	strh	r2, [r3, #10]
  }
}
 8014366:	bf00      	nop
 8014368:	3708      	adds	r7, #8
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}

0801436e <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 801436e:	b580      	push	{r7, lr}
 8014370:	b082      	sub	sp, #8
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
 8014376:	460b      	mov	r3, r1
 8014378:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	7a5b      	ldrb	r3, [r3, #9]
 801437e:	2b02      	cmp	r3, #2
 8014380:	d00d      	beq.n	801439e <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8014386:	2b01      	cmp	r3, #1
 8014388:	d111      	bne.n	80143ae <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801438e:	2b00      	cmp	r3, #0
 8014390:	d005      	beq.n	801439e <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8014392:	78fb      	ldrb	r3, [r7, #3]
 8014394:	b29a      	uxth	r2, r3
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	895b      	ldrh	r3, [r3, #10]
 801439a:	429a      	cmp	r2, r3
 801439c:	d207      	bcs.n	80143ae <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 801439e:	78fb      	ldrb	r3, [r7, #3]
 80143a0:	4619      	mov	r1, r3
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f7ff ffc0 	bl	8014328 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2201      	movs	r2, #1
 80143ac:	725a      	strb	r2, [r3, #9]
  }
}
 80143ae:	bf00      	nop
 80143b0:	3708      	adds	r7, #8
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}

080143b6 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 80143b6:	b580      	push	{r7, lr}
 80143b8:	b08c      	sub	sp, #48	@ 0x30
 80143ba:	af06      	add	r7, sp, #24
 80143bc:	60f8      	str	r0, [r7, #12]
 80143be:	60b9      	str	r1, [r7, #8]
 80143c0:	607a      	str	r2, [r7, #4]
 80143c2:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 80143c4:	f240 4394 	movw	r3, #1172	@ 0x494
 80143c8:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 80143ca:	2300      	movs	r3, #0
 80143cc:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 80143ce:	2304      	movs	r3, #4
 80143d0:	9304      	str	r3, [sp, #16]
 80143d2:	f107 0314 	add.w	r3, r7, #20
 80143d6:	9303      	str	r3, [sp, #12]
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	9302      	str	r3, [sp, #8]
 80143dc:	2302      	movs	r3, #2
 80143de:	9301      	str	r3, [sp, #4]
 80143e0:	2300      	movs	r3, #0
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	2301      	movs	r3, #1
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	68b9      	ldr	r1, [r7, #8]
 80143ea:	68f8      	ldr	r0, [r7, #12]
 80143ec:	f000 fa9f 	bl	801492e <ip4_output_if_opt>
 80143f0:	4603      	mov	r3, r0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3718      	adds	r7, #24
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
	...

080143fc <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b088      	sub	sp, #32
 8014400:	af00      	add	r7, sp, #0
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	60b9      	str	r1, [r7, #8]
 8014406:	4613      	mov	r3, r2
 8014408:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 801440a:	2300      	movs	r3, #0
 801440c:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 801440e:	2300      	movs	r3, #0
 8014410:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8014412:	4b2f      	ldr	r3, [pc, #188]	@ (80144d0 <igmp_send+0xd4>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8014418:	2300      	movs	r3, #0
 801441a:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 801441c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014420:	2108      	movs	r1, #8
 8014422:	2036      	movs	r0, #54	@ 0x36
 8014424:	f7f7 fd8e 	bl	800bf44 <pbuf_alloc>
 8014428:	61b8      	str	r0, [r7, #24]

  if (p) {
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d04b      	beq.n	80144c8 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 8014430:	69bb      	ldr	r3, [r7, #24]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	895b      	ldrh	r3, [r3, #10]
 801443a:	2b07      	cmp	r3, #7
 801443c:	d806      	bhi.n	801444c <igmp_send+0x50>
 801443e:	4b25      	ldr	r3, [pc, #148]	@ (80144d4 <igmp_send+0xd8>)
 8014440:	f240 3202 	movw	r2, #770	@ 0x302
 8014444:	4924      	ldr	r1, [pc, #144]	@ (80144d8 <igmp_send+0xdc>)
 8014446:	4825      	ldr	r0, [pc, #148]	@ (80144dc <igmp_send+0xe0>)
 8014448:	f003 ff10 	bl	801826c <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	3304      	adds	r3, #4
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8014454:	79fb      	ldrb	r3, [r7, #7]
 8014456:	2b16      	cmp	r3, #22
 8014458:	d10a      	bne.n	8014470 <igmp_send+0x74>
      dest = &(group->group_address);
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	3304      	adds	r3, #4
 801445e:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	685a      	ldr	r2, [r3, #4]
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	2201      	movs	r2, #1
 801446c:	721a      	strb	r2, [r3, #8]
 801446e:	e008      	b.n	8014482 <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8014470:	79fb      	ldrb	r3, [r7, #7]
 8014472:	2b17      	cmp	r3, #23
 8014474:	d105      	bne.n	8014482 <igmp_send+0x86>
        dest = &allrouters;
 8014476:	4b1a      	ldr	r3, [pc, #104]	@ (80144e0 <igmp_send+0xe4>)
 8014478:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	685a      	ldr	r2, [r3, #4]
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8014482:	79fb      	ldrb	r3, [r7, #7]
 8014484:	2b16      	cmp	r3, #22
 8014486:	d002      	beq.n	801448e <igmp_send+0x92>
 8014488:	79fb      	ldrb	r3, [r7, #7]
 801448a:	2b17      	cmp	r3, #23
 801448c:	d119      	bne.n	80144c2 <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	79fa      	ldrb	r2, [r7, #7]
 8014492:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	2200      	movs	r2, #0
 8014498:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	2200      	movs	r2, #0
 801449e:	709a      	strb	r2, [r3, #2]
 80144a0:	2200      	movs	r2, #0
 80144a2:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 80144a4:	2108      	movs	r1, #8
 80144a6:	6978      	ldr	r0, [r7, #20]
 80144a8:	f7f6 fccf 	bl	800ae4a <inet_chksum>
 80144ac:	4603      	mov	r3, r0
 80144ae:	461a      	mov	r2, r3
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 80144b4:	f107 0110 	add.w	r1, r7, #16
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	69fa      	ldr	r2, [r7, #28]
 80144bc:	69b8      	ldr	r0, [r7, #24]
 80144be:	f7ff ff7a 	bl	80143b6 <igmp_ip_output_if>
    }

    pbuf_free(p);
 80144c2:	69b8      	ldr	r0, [r7, #24]
 80144c4:	f7f8 f822 	bl	800c50c <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 80144c8:	bf00      	nop
 80144ca:	3720      	adds	r7, #32
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	0801e4c0 	.word	0x0801e4c0
 80144d4:	0801dba0 	.word	0x0801dba0
 80144d8:	0801debc 	.word	0x0801debc
 80144dc:	0801dc0c 	.word	0x0801dc0c
 80144e0:	20008908 	.word	0x20008908

080144e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b085      	sub	sp, #20
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80144f4:	2be0      	cmp	r3, #224	@ 0xe0
 80144f6:	d106      	bne.n	8014506 <ip4_route+0x22>
 80144f8:	4b36      	ldr	r3, [pc, #216]	@ (80145d4 <ip4_route+0xf0>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d002      	beq.n	8014506 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8014500:	4b34      	ldr	r3, [pc, #208]	@ (80145d4 <ip4_route+0xf0>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	e060      	b.n	80145c8 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014506:	4b34      	ldr	r3, [pc, #208]	@ (80145d8 <ip4_route+0xf4>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	60fb      	str	r3, [r7, #12]
 801450c:	e036      	b.n	801457c <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014514:	f003 0301 	and.w	r3, r3, #1
 8014518:	b2db      	uxtb	r3, r3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d02b      	beq.n	8014576 <ip4_route+0x92>
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014524:	089b      	lsrs	r3, r3, #2
 8014526:	f003 0301 	and.w	r3, r3, #1
 801452a:	b2db      	uxtb	r3, r3
 801452c:	2b00      	cmp	r3, #0
 801452e:	d022      	beq.n	8014576 <ip4_route+0x92>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	3304      	adds	r3, #4
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d01d      	beq.n	8014576 <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681a      	ldr	r2, [r3, #0]
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	3304      	adds	r3, #4
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	405a      	eors	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	3308      	adds	r3, #8
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	4013      	ands	r3, r2
 801454e:	2b00      	cmp	r3, #0
 8014550:	d101      	bne.n	8014556 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	e038      	b.n	80145c8 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801455c:	f003 0302 	and.w	r3, r3, #2
 8014560:	2b00      	cmp	r3, #0
 8014562:	d108      	bne.n	8014576 <ip4_route+0x92>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	330c      	adds	r3, #12
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	429a      	cmp	r2, r3
 8014570:	d101      	bne.n	8014576 <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	e028      	b.n	80145c8 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	60fb      	str	r3, [r7, #12]
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d1c5      	bne.n	801450e <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014582:	4b16      	ldr	r3, [pc, #88]	@ (80145dc <ip4_route+0xf8>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d01a      	beq.n	80145c0 <ip4_route+0xdc>
 801458a:	4b14      	ldr	r3, [pc, #80]	@ (80145dc <ip4_route+0xf8>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014592:	f003 0301 	and.w	r3, r3, #1
 8014596:	2b00      	cmp	r3, #0
 8014598:	d012      	beq.n	80145c0 <ip4_route+0xdc>
 801459a:	4b10      	ldr	r3, [pc, #64]	@ (80145dc <ip4_route+0xf8>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80145a2:	f003 0304 	and.w	r3, r3, #4
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d00a      	beq.n	80145c0 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80145aa:	4b0c      	ldr	r3, [pc, #48]	@ (80145dc <ip4_route+0xf8>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	3304      	adds	r3, #4
 80145b0:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d004      	beq.n	80145c0 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80145be:	d101      	bne.n	80145c4 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80145c0:	2300      	movs	r3, #0
 80145c2:	e001      	b.n	80145c8 <ip4_route+0xe4>
  }

  return netif_default;
 80145c4:	4b05      	ldr	r3, [pc, #20]	@ (80145dc <ip4_route+0xf8>)
 80145c6:	681b      	ldr	r3, [r3, #0]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3714      	adds	r7, #20
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	20008910 	.word	0x20008910
 80145d8:	200087a4 	.word	0x200087a4
 80145dc:	200087a8 	.word	0x200087a8

080145e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80145ee:	f003 0301 	and.w	r3, r3, #1
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d016      	beq.n	8014626 <ip4_input_accept+0x46>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3304      	adds	r3, #4
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d011      	beq.n	8014626 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014602:	4b0b      	ldr	r3, [pc, #44]	@ (8014630 <ip4_input_accept+0x50>)
 8014604:	695a      	ldr	r2, [r3, #20]
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	3304      	adds	r3, #4
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	429a      	cmp	r2, r3
 801460e:	d008      	beq.n	8014622 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014610:	4b07      	ldr	r3, [pc, #28]	@ (8014630 <ip4_input_accept+0x50>)
 8014612:	695b      	ldr	r3, [r3, #20]
 8014614:	6879      	ldr	r1, [r7, #4]
 8014616:	4618      	mov	r0, r3
 8014618:	f000 faba 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 801461c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801461e:	2b00      	cmp	r3, #0
 8014620:	d001      	beq.n	8014626 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014622:	2301      	movs	r3, #1
 8014624:	e000      	b.n	8014628 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014626:	2300      	movs	r3, #0
}
 8014628:	4618      	mov	r0, r3
 801462a:	3708      	adds	r7, #8
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	20005188 	.word	0x20005188

08014634 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b088      	sub	sp, #32
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801463e:	2301      	movs	r3, #1
 8014640:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	685b      	ldr	r3, [r3, #4]
 8014646:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	091b      	lsrs	r3, r3, #4
 801464e:	b2db      	uxtb	r3, r3
 8014650:	2b04      	cmp	r3, #4
 8014652:	d004      	beq.n	801465e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7f7 ff59 	bl	800c50c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801465a:	2300      	movs	r3, #0
 801465c:	e13d      	b.n	80148da <ip4_input+0x2a6>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801465e:	69fb      	ldr	r3, [r7, #28]
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	f003 030f 	and.w	r3, r3, #15
 8014666:	b2db      	uxtb	r3, r3
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	b2db      	uxtb	r3, r3
 801466c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801466e:	69fb      	ldr	r3, [r7, #28]
 8014670:	885b      	ldrh	r3, [r3, #2]
 8014672:	b29b      	uxth	r3, r3
 8014674:	4618      	mov	r0, r3
 8014676:	f7f6 fb5d 	bl	800ad34 <lwip_htons>
 801467a:	4603      	mov	r3, r0
 801467c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	891b      	ldrh	r3, [r3, #8]
 8014682:	8a3a      	ldrh	r2, [r7, #16]
 8014684:	429a      	cmp	r2, r3
 8014686:	d204      	bcs.n	8014692 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8014688:	8a3b      	ldrh	r3, [r7, #16]
 801468a:	4619      	mov	r1, r3
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7f7 fdb7 	bl	800c200 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	895b      	ldrh	r3, [r3, #10]
 8014696:	8a7a      	ldrh	r2, [r7, #18]
 8014698:	429a      	cmp	r2, r3
 801469a:	d807      	bhi.n	80146ac <ip4_input+0x78>
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	891b      	ldrh	r3, [r3, #8]
 80146a0:	8a3a      	ldrh	r2, [r7, #16]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d802      	bhi.n	80146ac <ip4_input+0x78>
 80146a6:	8a7b      	ldrh	r3, [r7, #18]
 80146a8:	2b13      	cmp	r3, #19
 80146aa:	d804      	bhi.n	80146b6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7f7 ff2d 	bl	800c50c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80146b2:	2300      	movs	r3, #0
 80146b4:	e111      	b.n	80148da <ip4_input+0x2a6>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	691b      	ldr	r3, [r3, #16]
 80146ba:	4a8a      	ldr	r2, [pc, #552]	@ (80148e4 <ip4_input+0x2b0>)
 80146bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	4a88      	ldr	r2, [pc, #544]	@ (80148e4 <ip4_input+0x2b0>)
 80146c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80146c6:	4b87      	ldr	r3, [pc, #540]	@ (80148e4 <ip4_input+0x2b0>)
 80146c8:	695b      	ldr	r3, [r3, #20]
 80146ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80146ce:	2be0      	cmp	r3, #224	@ 0xe0
 80146d0:	d120      	bne.n	8014714 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80146d8:	f003 0320 	and.w	r3, r3, #32
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d016      	beq.n	801470e <ip4_input+0xda>
 80146e0:	4981      	ldr	r1, [pc, #516]	@ (80148e8 <ip4_input+0x2b4>)
 80146e2:	6838      	ldr	r0, [r7, #0]
 80146e4:	f7ff fbd5 	bl	8013e92 <igmp_lookfor_group>
 80146e8:	4603      	mov	r3, r0
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d00f      	beq.n	801470e <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80146ee:	4b7f      	ldr	r3, [pc, #508]	@ (80148ec <ip4_input+0x2b8>)
 80146f0:	60fb      	str	r3, [r7, #12]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 80146f2:	4b7c      	ldr	r3, [pc, #496]	@ (80148e4 <ip4_input+0x2b0>)
 80146f4:	695a      	ldr	r2, [r3, #20]
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d105      	bne.n	8014708 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 80146fc:	4b79      	ldr	r3, [pc, #484]	@ (80148e4 <ip4_input+0x2b0>)
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d101      	bne.n	8014708 <ip4_input+0xd4>
        check_ip_src = 0;
 8014704:	2300      	movs	r3, #0
 8014706:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801470c:	e02a      	b.n	8014764 <ip4_input+0x130>
    } else {
      netif = NULL;
 801470e:	2300      	movs	r3, #0
 8014710:	61bb      	str	r3, [r7, #24]
 8014712:	e027      	b.n	8014764 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014714:	6838      	ldr	r0, [r7, #0]
 8014716:	f7ff ff63 	bl	80145e0 <ip4_input_accept>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	d002      	beq.n	8014726 <ip4_input+0xf2>
      netif = inp;
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	61bb      	str	r3, [r7, #24]
 8014724:	e01e      	b.n	8014764 <ip4_input+0x130>
    } else {
      netif = NULL;
 8014726:	2300      	movs	r3, #0
 8014728:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801472a:	4b6e      	ldr	r3, [pc, #440]	@ (80148e4 <ip4_input+0x2b0>)
 801472c:	695b      	ldr	r3, [r3, #20]
 801472e:	b2db      	uxtb	r3, r3
 8014730:	2b7f      	cmp	r3, #127	@ 0x7f
 8014732:	d017      	beq.n	8014764 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014734:	4b6e      	ldr	r3, [pc, #440]	@ (80148f0 <ip4_input+0x2bc>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	61bb      	str	r3, [r7, #24]
 801473a:	e00e      	b.n	801475a <ip4_input+0x126>
          if (netif == inp) {
 801473c:	69ba      	ldr	r2, [r7, #24]
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	429a      	cmp	r2, r3
 8014742:	d006      	beq.n	8014752 <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014744:	69b8      	ldr	r0, [r7, #24]
 8014746:	f7ff ff4b 	bl	80145e0 <ip4_input_accept>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d108      	bne.n	8014762 <ip4_input+0x12e>
 8014750:	e000      	b.n	8014754 <ip4_input+0x120>
            continue;
 8014752:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	61bb      	str	r3, [r7, #24]
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d1ed      	bne.n	801473c <ip4_input+0x108>
 8014760:	e000      	b.n	8014764 <ip4_input+0x130>
            break;
 8014762:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d013      	beq.n	8014792 <ip4_input+0x15e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801476a:	4b5e      	ldr	r3, [pc, #376]	@ (80148e4 <ip4_input+0x2b0>)
 801476c:	691b      	ldr	r3, [r3, #16]
 801476e:	6839      	ldr	r1, [r7, #0]
 8014770:	4618      	mov	r0, r3
 8014772:	f000 fa0d 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d105      	bne.n	8014788 <ip4_input+0x154>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801477c:	4b59      	ldr	r3, [pc, #356]	@ (80148e4 <ip4_input+0x2b0>)
 801477e:	691b      	ldr	r3, [r3, #16]
 8014780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014784:	2be0      	cmp	r3, #224	@ 0xe0
 8014786:	d104      	bne.n	8014792 <ip4_input+0x15e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7f7 febf 	bl	800c50c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801478e:	2300      	movs	r3, #0
 8014790:	e0a3      	b.n	80148da <ip4_input+0x2a6>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014792:	69bb      	ldr	r3, [r7, #24]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d104      	bne.n	80147a2 <ip4_input+0x16e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f7f7 feb7 	bl	800c50c <pbuf_free>
    return ERR_OK;
 801479e:	2300      	movs	r3, #0
 80147a0:	e09b      	b.n	80148da <ip4_input+0x2a6>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80147a2:	69fb      	ldr	r3, [r7, #28]
 80147a4:	88db      	ldrh	r3, [r3, #6]
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	461a      	mov	r2, r3
 80147aa:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80147ae:	4013      	ands	r3, r2
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d00b      	beq.n	80147cc <ip4_input+0x198>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 fdc1 	bl	801533c <ip4_reass>
 80147ba:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d101      	bne.n	80147c6 <ip4_input+0x192>
      return ERR_OK;
 80147c2:	2300      	movs	r3, #0
 80147c4:	e089      	b.n	80148da <ip4_input+0x2a6>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80147cc:	4a45      	ldr	r2, [pc, #276]	@ (80148e4 <ip4_input+0x2b0>)
 80147ce:	69bb      	ldr	r3, [r7, #24]
 80147d0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80147d2:	4a44      	ldr	r2, [pc, #272]	@ (80148e4 <ip4_input+0x2b0>)
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80147d8:	4a42      	ldr	r2, [pc, #264]	@ (80148e4 <ip4_input+0x2b0>)
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	f003 030f 	and.w	r3, r3, #15
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	461a      	mov	r2, r3
 80147ee:	4b3d      	ldr	r3, [pc, #244]	@ (80148e4 <ip4_input+0x2b0>)
 80147f0:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80147f2:	8a7b      	ldrh	r3, [r7, #18]
 80147f4:	4619      	mov	r1, r3
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f7f7 fe02 	bl	800c400 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80147fc:	69fb      	ldr	r3, [r7, #28]
 80147fe:	7a5b      	ldrb	r3, [r3, #9]
 8014800:	3b01      	subs	r3, #1
 8014802:	2b10      	cmp	r3, #16
 8014804:	d839      	bhi.n	801487a <ip4_input+0x246>
 8014806:	a201      	add	r2, pc, #4	@ (adr r2, 801480c <ip4_input+0x1d8>)
 8014808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801480c:	08014865 	.word	0x08014865
 8014810:	0801486f 	.word	0x0801486f
 8014814:	0801487b 	.word	0x0801487b
 8014818:	0801487b 	.word	0x0801487b
 801481c:	0801487b 	.word	0x0801487b
 8014820:	0801485b 	.word	0x0801485b
 8014824:	0801487b 	.word	0x0801487b
 8014828:	0801487b 	.word	0x0801487b
 801482c:	0801487b 	.word	0x0801487b
 8014830:	0801487b 	.word	0x0801487b
 8014834:	0801487b 	.word	0x0801487b
 8014838:	0801487b 	.word	0x0801487b
 801483c:	0801487b 	.word	0x0801487b
 8014840:	0801487b 	.word	0x0801487b
 8014844:	0801487b 	.word	0x0801487b
 8014848:	0801487b 	.word	0x0801487b
 801484c:	08014851 	.word	0x08014851
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7fd fcda 	bl	801220c <udp_input>
        break;
 8014858:	e02c      	b.n	80148b4 <ip4_input+0x280>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7f9 fd21 	bl	800e2a4 <tcp_input>
        break;
 8014862:	e027      	b.n	80148b4 <ip4_input+0x280>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014864:	6839      	ldr	r1, [r7, #0]
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7ff f928 	bl	8013abc <icmp_input>
        break;
 801486c:	e022      	b.n	80148b4 <ip4_input+0x280>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801486e:	4a1e      	ldr	r2, [pc, #120]	@ (80148e8 <ip4_input+0x2b4>)
 8014870:	6839      	ldr	r1, [r7, #0]
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff fb94 	bl	8013fa0 <igmp_input>
        break;
 8014878:	e01c      	b.n	80148b4 <ip4_input+0x280>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801487a:	4b1a      	ldr	r3, [pc, #104]	@ (80148e4 <ip4_input+0x2b0>)
 801487c:	695b      	ldr	r3, [r3, #20]
 801487e:	69b9      	ldr	r1, [r7, #24]
 8014880:	4618      	mov	r0, r3
 8014882:	f000 f985 	bl	8014b90 <ip4_addr_isbroadcast_u32>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d10f      	bne.n	80148ac <ip4_input+0x278>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801488c:	4b15      	ldr	r3, [pc, #84]	@ (80148e4 <ip4_input+0x2b0>)
 801488e:	695b      	ldr	r3, [r3, #20]
 8014890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014894:	2be0      	cmp	r3, #224	@ 0xe0
 8014896:	d009      	beq.n	80148ac <ip4_input+0x278>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801489c:	4619      	mov	r1, r3
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f7f7 fe21 	bl	800c4e6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80148a4:	2102      	movs	r1, #2
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7ff fa0c 	bl	8013cc4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f7f7 fe2d 	bl	800c50c <pbuf_free>
        break;
 80148b2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80148b4:	4b0b      	ldr	r3, [pc, #44]	@ (80148e4 <ip4_input+0x2b0>)
 80148b6:	2200      	movs	r2, #0
 80148b8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80148ba:	4b0a      	ldr	r3, [pc, #40]	@ (80148e4 <ip4_input+0x2b0>)
 80148bc:	2200      	movs	r2, #0
 80148be:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80148c0:	4b08      	ldr	r3, [pc, #32]	@ (80148e4 <ip4_input+0x2b0>)
 80148c2:	2200      	movs	r2, #0
 80148c4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80148c6:	4b07      	ldr	r3, [pc, #28]	@ (80148e4 <ip4_input+0x2b0>)
 80148c8:	2200      	movs	r2, #0
 80148ca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80148cc:	4b05      	ldr	r3, [pc, #20]	@ (80148e4 <ip4_input+0x2b0>)
 80148ce:	2200      	movs	r2, #0
 80148d0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80148d2:	4b04      	ldr	r3, [pc, #16]	@ (80148e4 <ip4_input+0x2b0>)
 80148d4:	2200      	movs	r2, #0
 80148d6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3720      	adds	r7, #32
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	20005188 	.word	0x20005188
 80148e8:	2000519c 	.word	0x2000519c
 80148ec:	010000e0 	.word	0x010000e0
 80148f0:	200087a4 	.word	0x200087a4

080148f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b08a      	sub	sp, #40	@ 0x28
 80148f8:	af06      	add	r7, sp, #24
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]
 8014900:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8014902:	78fa      	ldrb	r2, [r7, #3]
 8014904:	2300      	movs	r3, #0
 8014906:	9304      	str	r3, [sp, #16]
 8014908:	2300      	movs	r3, #0
 801490a:	9303      	str	r3, [sp, #12]
 801490c:	6a3b      	ldr	r3, [r7, #32]
 801490e:	9302      	str	r3, [sp, #8]
 8014910:	7f3b      	ldrb	r3, [r7, #28]
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	7e3b      	ldrb	r3, [r7, #24]
 8014916:	9300      	str	r3, [sp, #0]
 8014918:	4613      	mov	r3, r2
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	68b9      	ldr	r1, [r7, #8]
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f000 f805 	bl	801492e <ip4_output_if_opt>
 8014924:	4603      	mov	r3, r0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3710      	adds	r7, #16
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801492e:	b580      	push	{r7, lr}
 8014930:	b08c      	sub	sp, #48	@ 0x30
 8014932:	af06      	add	r7, sp, #24
 8014934:	60f8      	str	r0, [r7, #12]
 8014936:	60b9      	str	r1, [r7, #8]
 8014938:	607a      	str	r2, [r7, #4]
 801493a:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d009      	beq.n	801495a <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d003      	beq.n	8014954 <ip4_output_if_opt+0x26>
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d102      	bne.n	801495a <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8014954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014956:	3304      	adds	r3, #4
 8014958:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801495a:	78fa      	ldrb	r2, [r7, #3]
 801495c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801495e:	9304      	str	r3, [sp, #16]
 8014960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014962:	9303      	str	r3, [sp, #12]
 8014964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014966:	9302      	str	r3, [sp, #8]
 8014968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	4613      	mov	r3, r2
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	6979      	ldr	r1, [r7, #20]
 801497a:	68f8      	ldr	r0, [r7, #12]
 801497c:	f000 f822 	bl	80149c4 <ip4_output_if_opt_src>
 8014980:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 8014982:	4618      	mov	r0, r3
 8014984:	3718      	adds	r7, #24
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}

0801498a <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801498a:	b580      	push	{r7, lr}
 801498c:	b08a      	sub	sp, #40	@ 0x28
 801498e:	af06      	add	r7, sp, #24
 8014990:	60f8      	str	r0, [r7, #12]
 8014992:	60b9      	str	r1, [r7, #8]
 8014994:	607a      	str	r2, [r7, #4]
 8014996:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8014998:	78fa      	ldrb	r2, [r7, #3]
 801499a:	2300      	movs	r3, #0
 801499c:	9304      	str	r3, [sp, #16]
 801499e:	2300      	movs	r3, #0
 80149a0:	9303      	str	r3, [sp, #12]
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	9302      	str	r3, [sp, #8]
 80149a6:	7f3b      	ldrb	r3, [r7, #28]
 80149a8:	9301      	str	r3, [sp, #4]
 80149aa:	7e3b      	ldrb	r3, [r7, #24]
 80149ac:	9300      	str	r3, [sp, #0]
 80149ae:	4613      	mov	r3, r2
 80149b0:	687a      	ldr	r2, [r7, #4]
 80149b2:	68b9      	ldr	r1, [r7, #8]
 80149b4:	68f8      	ldr	r0, [r7, #12]
 80149b6:	f000 f805 	bl	80149c4 <ip4_output_if_opt_src>
 80149ba:	4603      	mov	r3, r0
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b088      	sub	sp, #32
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	607a      	str	r2, [r7, #4]
 80149d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	7b9b      	ldrb	r3, [r3, #14]
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d006      	beq.n	80149e8 <ip4_output_if_opt_src+0x24>
 80149da:	4b67      	ldr	r3, [pc, #412]	@ (8014b78 <ip4_output_if_opt_src+0x1b4>)
 80149dc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80149e0:	4966      	ldr	r1, [pc, #408]	@ (8014b7c <ip4_output_if_opt_src+0x1b8>)
 80149e2:	4867      	ldr	r0, [pc, #412]	@ (8014b80 <ip4_output_if_opt_src+0x1bc>)
 80149e4:	f003 fc42 	bl	801826c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	f000 8097 	beq.w	8014b1e <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 80149f0:	2314      	movs	r3, #20
 80149f2:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 80149f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d030      	beq.n	8014a60 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 80149fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014a00:	2b28      	cmp	r3, #40	@ 0x28
 8014a02:	d902      	bls.n	8014a0a <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8014a04:	f06f 0305 	mvn.w	r3, #5
 8014a08:	e0b1      	b.n	8014b6e <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8014a0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014a0c:	3303      	adds	r3, #3
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	f023 0303 	bic.w	r3, r3, #3
 8014a14:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8014a16:	8bfa      	ldrh	r2, [r7, #30]
 8014a18:	8afb      	ldrh	r3, [r7, #22]
 8014a1a:	4413      	add	r3, r2
 8014a1c:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 8014a1e:	8afb      	ldrh	r3, [r7, #22]
 8014a20:	4619      	mov	r1, r3
 8014a22:	68f8      	ldr	r0, [r7, #12]
 8014a24:	f7f7 fcdc 	bl	800c3e0 <pbuf_add_header>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d002      	beq.n	8014a34 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 8014a2e:	f06f 0301 	mvn.w	r3, #1
 8014a32:	e09c      	b.n	8014b6e <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8014a3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f003 ff80 	bl	8018942 <memcpy>
      if (optlen < optlen_aligned) {
 8014a42:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8014a44:	8afb      	ldrh	r3, [r7, #22]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d20a      	bcs.n	8014a60 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	685a      	ldr	r2, [r3, #4]
 8014a4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014a50:	18d0      	adds	r0, r2, r3
 8014a52:	8afa      	ldrh	r2, [r7, #22]
 8014a54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014a56:	1ad3      	subs	r3, r2, r3
 8014a58:	461a      	mov	r2, r3
 8014a5a:	2100      	movs	r1, #0
 8014a5c:	f003 fe70 	bl	8018740 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014a60:	2114      	movs	r1, #20
 8014a62:	68f8      	ldr	r0, [r7, #12]
 8014a64:	f7f7 fcbc 	bl	800c3e0 <pbuf_add_header>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d002      	beq.n	8014a74 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014a6e:	f06f 0301 	mvn.w	r3, #1
 8014a72:	e07c      	b.n	8014b6e <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	895b      	ldrh	r3, [r3, #10]
 8014a7e:	2b13      	cmp	r3, #19
 8014a80:	d806      	bhi.n	8014a90 <ip4_output_if_opt_src+0xcc>
 8014a82:	4b3d      	ldr	r3, [pc, #244]	@ (8014b78 <ip4_output_if_opt_src+0x1b4>)
 8014a84:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014a88:	493e      	ldr	r1, [pc, #248]	@ (8014b84 <ip4_output_if_opt_src+0x1c0>)
 8014a8a:	483d      	ldr	r0, [pc, #244]	@ (8014b80 <ip4_output_if_opt_src+0x1bc>)
 8014a8c:	f003 fbee 	bl	801826c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	78fa      	ldrb	r2, [r7, #3]
 8014a94:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014a9c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014aa6:	8bfb      	ldrh	r3, [r7, #30]
 8014aa8:	089b      	lsrs	r3, r3, #2
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ab2:	b2da      	uxtb	r2, r3
 8014ab4:	69bb      	ldr	r3, [r7, #24]
 8014ab6:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014ab8:	69bb      	ldr	r3, [r7, #24]
 8014aba:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014abe:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	891b      	ldrh	r3, [r3, #8]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7f6 f935 	bl	800ad34 <lwip_htons>
 8014aca:	4603      	mov	r3, r0
 8014acc:	461a      	mov	r2, r3
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	719a      	strb	r2, [r3, #6]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014adc:	4b2a      	ldr	r3, [pc, #168]	@ (8014b88 <ip4_output_if_opt_src+0x1c4>)
 8014ade:	881b      	ldrh	r3, [r3, #0]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7f6 f927 	bl	800ad34 <lwip_htons>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	461a      	mov	r2, r3
 8014aea:	69bb      	ldr	r3, [r7, #24]
 8014aec:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014aee:	4b26      	ldr	r3, [pc, #152]	@ (8014b88 <ip4_output_if_opt_src+0x1c4>)
 8014af0:	881b      	ldrh	r3, [r3, #0]
 8014af2:	3301      	adds	r3, #1
 8014af4:	b29a      	uxth	r2, r3
 8014af6:	4b24      	ldr	r3, [pc, #144]	@ (8014b88 <ip4_output_if_opt_src+0x1c4>)
 8014af8:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d104      	bne.n	8014b0a <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014b00:	4b22      	ldr	r3, [pc, #136]	@ (8014b8c <ip4_output_if_opt_src+0x1c8>)
 8014b02:	681a      	ldr	r2, [r3, #0]
 8014b04:	69bb      	ldr	r3, [r7, #24]
 8014b06:	60da      	str	r2, [r3, #12]
 8014b08:	e003      	b.n	8014b12 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	2200      	movs	r2, #0
 8014b16:	729a      	strb	r2, [r3, #10]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	72da      	strb	r2, [r3, #11]
 8014b1c:	e00f      	b.n	8014b3e <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	895b      	ldrh	r3, [r3, #10]
 8014b22:	2b13      	cmp	r3, #19
 8014b24:	d802      	bhi.n	8014b2c <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b26:	f06f 0301 	mvn.w	r3, #1
 8014b2a:	e020      	b.n	8014b6e <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	691b      	ldr	r3, [r3, #16]
 8014b36:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8014b38:	f107 0310 	add.w	r3, r7, #16
 8014b3c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d00c      	beq.n	8014b60 <ip4_output_if_opt_src+0x19c>
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	891a      	ldrh	r2, [r3, #8]
 8014b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d906      	bls.n	8014b60 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014b56:	68f8      	ldr	r0, [r7, #12]
 8014b58:	f000 fde4 	bl	8015724 <ip4_frag>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	e006      	b.n	8014b6e <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b62:	695b      	ldr	r3, [r3, #20]
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	68f9      	ldr	r1, [r7, #12]
 8014b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b6a:	4798      	blx	r3
 8014b6c:	4603      	mov	r3, r0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3720      	adds	r7, #32
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	0801def8 	.word	0x0801def8
 8014b7c:	0801df2c 	.word	0x0801df2c
 8014b80:	0801df38 	.word	0x0801df38
 8014b84:	0801df60 	.word	0x0801df60
 8014b88:	2000890c 	.word	0x2000890c
 8014b8c:	0801e4c0 	.word	0x0801e4c0

08014b90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014b90:	b480      	push	{r7}
 8014b92:	b085      	sub	sp, #20
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba4:	d002      	beq.n	8014bac <ip4_addr_isbroadcast_u32+0x1c>
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d101      	bne.n	8014bb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014bac:	2301      	movs	r3, #1
 8014bae:	e02a      	b.n	8014c06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014bb6:	f003 0302 	and.w	r3, r3, #2
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d101      	bne.n	8014bc2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	e021      	b.n	8014c06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	3304      	adds	r3, #4
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d101      	bne.n	8014bd2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	e019      	b.n	8014c06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014bd2:	68fa      	ldr	r2, [r7, #12]
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	405a      	eors	r2, r3
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	3308      	adds	r3, #8
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	4013      	ands	r3, r2
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d10d      	bne.n	8014c04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	3308      	adds	r3, #8
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	43da      	mvns	r2, r3
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	3308      	adds	r3, #8
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d101      	bne.n	8014c04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014c00:	2301      	movs	r3, #1
 8014c02:	e000      	b.n	8014c06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014c04:	2300      	movs	r3, #0
  }
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3714      	adds	r7, #20
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
	...

08014c14 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8014c1c:	2210      	movs	r2, #16
 8014c1e:	4904      	ldr	r1, [pc, #16]	@ (8014c30 <ip4addr_ntoa+0x1c>)
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f000 f807 	bl	8014c34 <ip4addr_ntoa_r>
 8014c26:	4603      	mov	r3, r0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3708      	adds	r7, #8
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	20008914 	.word	0x20008914

08014c34 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b08d      	sub	sp, #52	@ 0x34
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8014c4e:	f107 0318 	add.w	r3, r7, #24
 8014c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8014c54:	2300      	movs	r3, #0
 8014c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014c5a:	e058      	b.n	8014d0e <ip4addr_ntoa_r+0xda>
    i = 0;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8014c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c64:	781a      	ldrb	r2, [r3, #0]
 8014c66:	4b32      	ldr	r3, [pc, #200]	@ (8014d30 <ip4addr_ntoa_r+0xfc>)
 8014c68:	fba3 1302 	umull	r1, r3, r3, r2
 8014c6c:	08d9      	lsrs	r1, r3, #3
 8014c6e:	460b      	mov	r3, r1
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	440b      	add	r3, r1
 8014c74:	005b      	lsls	r3, r3, #1
 8014c76:	1ad3      	subs	r3, r2, r3
 8014c78:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8014c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8014d30 <ip4addr_ntoa_r+0xfc>)
 8014c80:	fba2 2303 	umull	r2, r3, r2, r3
 8014c84:	08db      	lsrs	r3, r3, #3
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c8a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8014c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014c90:	1c5a      	adds	r2, r3, #1
 8014c92:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8014c96:	4619      	mov	r1, r3
 8014c98:	7ffb      	ldrb	r3, [r7, #31]
 8014c9a:	3330      	adds	r3, #48	@ 0x30
 8014c9c:	b2da      	uxtb	r2, r3
 8014c9e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8014ca2:	443b      	add	r3, r7
 8014ca4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8014ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1d8      	bne.n	8014c62 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8014cb0:	e011      	b.n	8014cd6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8014cb2:	6a3b      	ldr	r3, [r7, #32]
 8014cb4:	1c5a      	adds	r2, r3, #1
 8014cb6:	623a      	str	r2, [r7, #32]
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	dc01      	bgt.n	8014cc2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	e030      	b.n	8014d24 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8014cc2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc8:	1c59      	adds	r1, r3, #1
 8014cca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8014ccc:	3230      	adds	r2, #48	@ 0x30
 8014cce:	443a      	add	r2, r7
 8014cd0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8014cd4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8014cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014cda:	1e5a      	subs	r2, r3, #1
 8014cdc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d1e6      	bne.n	8014cb2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8014ce4:	6a3b      	ldr	r3, [r7, #32]
 8014ce6:	1c5a      	adds	r2, r3, #1
 8014ce8:	623a      	str	r2, [r7, #32]
 8014cea:	687a      	ldr	r2, [r7, #4]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	dc01      	bgt.n	8014cf4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	e017      	b.n	8014d24 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8014cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cf6:	1c5a      	adds	r2, r3, #1
 8014cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014cfa:	222e      	movs	r2, #46	@ 0x2e
 8014cfc:	701a      	strb	r2, [r3, #0]
    ap++;
 8014cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d00:	3301      	adds	r3, #1
 8014d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8014d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d08:	3301      	adds	r3, #1
 8014d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d12:	2b03      	cmp	r3, #3
 8014d14:	d9a2      	bls.n	8014c5c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8014d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d18:	3b01      	subs	r3, #1
 8014d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d1e:	2200      	movs	r2, #0
 8014d20:	701a      	strb	r2, [r3, #0]
  return buf;
 8014d22:	68bb      	ldr	r3, [r7, #8]
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	3734      	adds	r7, #52	@ 0x34
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr
 8014d30:	cccccccd 	.word	0xcccccccd

08014d34 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b084      	sub	sp, #16
 8014d38:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014d3e:	4b12      	ldr	r3, [pc, #72]	@ (8014d88 <ip_reass_tmr+0x54>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014d44:	e018      	b.n	8014d78 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	7fdb      	ldrb	r3, [r3, #31]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d00b      	beq.n	8014d66 <ip_reass_tmr+0x32>
      r->timer--;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	7fdb      	ldrb	r3, [r3, #31]
 8014d52:	3b01      	subs	r3, #1
 8014d54:	b2da      	uxtb	r2, r3
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	60fb      	str	r3, [r7, #12]
 8014d64:	e008      	b.n	8014d78 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014d70:	68b9      	ldr	r1, [r7, #8]
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 f80a 	bl	8014d8c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d1e3      	bne.n	8014d46 <ip_reass_tmr+0x12>
    }
  }
}
 8014d7e:	bf00      	nop
 8014d80:	bf00      	nop
 8014d82:	3710      	adds	r7, #16
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	20008924 	.word	0x20008924

08014d8c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b088      	sub	sp, #32
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014d96:	2300      	movs	r3, #0
 8014d98:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014d9a:	683a      	ldr	r2, [r7, #0]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d105      	bne.n	8014dae <ip_reass_free_complete_datagram+0x22>
 8014da2:	4b45      	ldr	r3, [pc, #276]	@ (8014eb8 <ip_reass_free_complete_datagram+0x12c>)
 8014da4:	22ab      	movs	r2, #171	@ 0xab
 8014da6:	4945      	ldr	r1, [pc, #276]	@ (8014ebc <ip_reass_free_complete_datagram+0x130>)
 8014da8:	4845      	ldr	r0, [pc, #276]	@ (8014ec0 <ip_reass_free_complete_datagram+0x134>)
 8014daa:	f003 fa5f 	bl	801826c <iprintf>
  if (prev != NULL) {
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d00a      	beq.n	8014dca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	687a      	ldr	r2, [r7, #4]
 8014dba:	429a      	cmp	r2, r3
 8014dbc:	d005      	beq.n	8014dca <ip_reass_free_complete_datagram+0x3e>
 8014dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8014eb8 <ip_reass_free_complete_datagram+0x12c>)
 8014dc0:	22ad      	movs	r2, #173	@ 0xad
 8014dc2:	4940      	ldr	r1, [pc, #256]	@ (8014ec4 <ip_reass_free_complete_datagram+0x138>)
 8014dc4:	483e      	ldr	r0, [pc, #248]	@ (8014ec0 <ip_reass_free_complete_datagram+0x134>)
 8014dc6:	f003 fa51 	bl	801826c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	889b      	ldrh	r3, [r3, #4]
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d12a      	bne.n	8014e32 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	681a      	ldr	r2, [r3, #0]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014dea:	69bb      	ldr	r3, [r7, #24]
 8014dec:	6858      	ldr	r0, [r3, #4]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	3308      	adds	r3, #8
 8014df2:	2214      	movs	r2, #20
 8014df4:	4619      	mov	r1, r3
 8014df6:	f003 fda4 	bl	8018942 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014dfa:	2101      	movs	r1, #1
 8014dfc:	69b8      	ldr	r0, [r7, #24]
 8014dfe:	f7fe ff71 	bl	8013ce4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014e02:	69b8      	ldr	r0, [r7, #24]
 8014e04:	f7f7 fc0a 	bl	800c61c <pbuf_clen>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014e0c:	8bfa      	ldrh	r2, [r7, #30]
 8014e0e:	8a7b      	ldrh	r3, [r7, #18]
 8014e10:	4413      	add	r3, r2
 8014e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014e16:	db05      	blt.n	8014e24 <ip_reass_free_complete_datagram+0x98>
 8014e18:	4b27      	ldr	r3, [pc, #156]	@ (8014eb8 <ip_reass_free_complete_datagram+0x12c>)
 8014e1a:	22bc      	movs	r2, #188	@ 0xbc
 8014e1c:	492a      	ldr	r1, [pc, #168]	@ (8014ec8 <ip_reass_free_complete_datagram+0x13c>)
 8014e1e:	4828      	ldr	r0, [pc, #160]	@ (8014ec0 <ip_reass_free_complete_datagram+0x134>)
 8014e20:	f003 fa24 	bl	801826c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e24:	8bfa      	ldrh	r2, [r7, #30]
 8014e26:	8a7b      	ldrh	r3, [r7, #18]
 8014e28:	4413      	add	r3, r2
 8014e2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014e2c:	69b8      	ldr	r0, [r7, #24]
 8014e2e:	f7f7 fb6d 	bl	800c50c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014e38:	e01f      	b.n	8014e7a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014e40:	69bb      	ldr	r3, [r7, #24]
 8014e42:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	f7f7 fbe6 	bl	800c61c <pbuf_clen>
 8014e50:	4603      	mov	r3, r0
 8014e52:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014e54:	8bfa      	ldrh	r2, [r7, #30]
 8014e56:	8a7b      	ldrh	r3, [r7, #18]
 8014e58:	4413      	add	r3, r2
 8014e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014e5e:	db05      	blt.n	8014e6c <ip_reass_free_complete_datagram+0xe0>
 8014e60:	4b15      	ldr	r3, [pc, #84]	@ (8014eb8 <ip_reass_free_complete_datagram+0x12c>)
 8014e62:	22cc      	movs	r2, #204	@ 0xcc
 8014e64:	4918      	ldr	r1, [pc, #96]	@ (8014ec8 <ip_reass_free_complete_datagram+0x13c>)
 8014e66:	4816      	ldr	r0, [pc, #88]	@ (8014ec0 <ip_reass_free_complete_datagram+0x134>)
 8014e68:	f003 fa00 	bl	801826c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e6c:	8bfa      	ldrh	r2, [r7, #30]
 8014e6e:	8a7b      	ldrh	r3, [r7, #18]
 8014e70:	4413      	add	r3, r2
 8014e72:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f7f7 fb49 	bl	800c50c <pbuf_free>
  while (p != NULL) {
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d1dc      	bne.n	8014e3a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014e80:	6839      	ldr	r1, [r7, #0]
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f000 f8c2 	bl	801500c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014e88:	4b10      	ldr	r3, [pc, #64]	@ (8014ecc <ip_reass_free_complete_datagram+0x140>)
 8014e8a:	881b      	ldrh	r3, [r3, #0]
 8014e8c:	8bfa      	ldrh	r2, [r7, #30]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d905      	bls.n	8014e9e <ip_reass_free_complete_datagram+0x112>
 8014e92:	4b09      	ldr	r3, [pc, #36]	@ (8014eb8 <ip_reass_free_complete_datagram+0x12c>)
 8014e94:	22d2      	movs	r2, #210	@ 0xd2
 8014e96:	490e      	ldr	r1, [pc, #56]	@ (8014ed0 <ip_reass_free_complete_datagram+0x144>)
 8014e98:	4809      	ldr	r0, [pc, #36]	@ (8014ec0 <ip_reass_free_complete_datagram+0x134>)
 8014e9a:	f003 f9e7 	bl	801826c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8014ecc <ip_reass_free_complete_datagram+0x140>)
 8014ea0:	881a      	ldrh	r2, [r3, #0]
 8014ea2:	8bfb      	ldrh	r3, [r7, #30]
 8014ea4:	1ad3      	subs	r3, r2, r3
 8014ea6:	b29a      	uxth	r2, r3
 8014ea8:	4b08      	ldr	r3, [pc, #32]	@ (8014ecc <ip_reass_free_complete_datagram+0x140>)
 8014eaa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014eac:	8bfb      	ldrh	r3, [r7, #30]
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3720      	adds	r7, #32
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	0801df90 	.word	0x0801df90
 8014ebc:	0801dfcc 	.word	0x0801dfcc
 8014ec0:	0801dfd8 	.word	0x0801dfd8
 8014ec4:	0801e000 	.word	0x0801e000
 8014ec8:	0801e014 	.word	0x0801e014
 8014ecc:	20008928 	.word	0x20008928
 8014ed0:	0801e034 	.word	0x0801e034

08014ed4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b08a      	sub	sp, #40	@ 0x28
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014eea:	2300      	movs	r3, #0
 8014eec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014ef2:	4b28      	ldr	r3, [pc, #160]	@ (8014f94 <ip_reass_remove_oldest_datagram+0xc0>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014ef8:	e030      	b.n	8014f5c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014efc:	695a      	ldr	r2, [r3, #20]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	68db      	ldr	r3, [r3, #12]
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d10c      	bne.n	8014f20 <ip_reass_remove_oldest_datagram+0x4c>
 8014f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f08:	699a      	ldr	r2, [r3, #24]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	691b      	ldr	r3, [r3, #16]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d106      	bne.n	8014f20 <ip_reass_remove_oldest_datagram+0x4c>
 8014f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f14:	899a      	ldrh	r2, [r3, #12]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	889b      	ldrh	r3, [r3, #4]
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d014      	beq.n	8014f4a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	3301      	adds	r3, #1
 8014f24:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014f26:	6a3b      	ldr	r3, [r7, #32]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d104      	bne.n	8014f36 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f2e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	61bb      	str	r3, [r7, #24]
 8014f34:	e009      	b.n	8014f4a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f38:	7fda      	ldrb	r2, [r3, #31]
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	7fdb      	ldrb	r3, [r3, #31]
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d803      	bhi.n	8014f4a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f44:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d001      	beq.n	8014f56 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f54:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d1cb      	bne.n	8014efa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014f62:	6a3b      	ldr	r3, [r7, #32]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d008      	beq.n	8014f7a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014f68:	69b9      	ldr	r1, [r7, #24]
 8014f6a:	6a38      	ldr	r0, [r7, #32]
 8014f6c:	f7ff ff0e 	bl	8014d8c <ip_reass_free_complete_datagram>
 8014f70:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014f72:	697a      	ldr	r2, [r7, #20]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	4413      	add	r3, r2
 8014f78:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014f7a:	697a      	ldr	r2, [r7, #20]
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	da02      	bge.n	8014f88 <ip_reass_remove_oldest_datagram+0xb4>
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	dcac      	bgt.n	8014ee2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014f88:	697b      	ldr	r3, [r7, #20]
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3728      	adds	r7, #40	@ 0x28
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	20008924 	.word	0x20008924

08014f98 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b084      	sub	sp, #16
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014fa2:	2004      	movs	r0, #4
 8014fa4:	f7f6 fbae 	bl	800b704 <memp_malloc>
 8014fa8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d110      	bne.n	8014fd2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014fb0:	6839      	ldr	r1, [r7, #0]
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff ff8e 	bl	8014ed4 <ip_reass_remove_oldest_datagram>
 8014fb8:	4602      	mov	r2, r0
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	4293      	cmp	r3, r2
 8014fbe:	dc03      	bgt.n	8014fc8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014fc0:	2004      	movs	r0, #4
 8014fc2:	f7f6 fb9f 	bl	800b704 <memp_malloc>
 8014fc6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d101      	bne.n	8014fd2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	e016      	b.n	8015000 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014fd2:	2220      	movs	r2, #32
 8014fd4:	2100      	movs	r1, #0
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	f003 fbb2 	bl	8018740 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	220f      	movs	r2, #15
 8014fe0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014fe2:	4b09      	ldr	r3, [pc, #36]	@ (8015008 <ip_reass_enqueue_new_datagram+0x70>)
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014fea:	4a07      	ldr	r2, [pc, #28]	@ (8015008 <ip_reass_enqueue_new_datagram+0x70>)
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	3308      	adds	r3, #8
 8014ff4:	2214      	movs	r2, #20
 8014ff6:	6879      	ldr	r1, [r7, #4]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f003 fca2 	bl	8018942 <memcpy>
  return ipr;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
}
 8015000:	4618      	mov	r0, r3
 8015002:	3710      	adds	r7, #16
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	20008924 	.word	0x20008924

0801500c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015016:	4b10      	ldr	r3, [pc, #64]	@ (8015058 <ip_reass_dequeue_datagram+0x4c>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	687a      	ldr	r2, [r7, #4]
 801501c:	429a      	cmp	r2, r3
 801501e:	d104      	bne.n	801502a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	4a0c      	ldr	r2, [pc, #48]	@ (8015058 <ip_reass_dequeue_datagram+0x4c>)
 8015026:	6013      	str	r3, [r2, #0]
 8015028:	e00d      	b.n	8015046 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d106      	bne.n	801503e <ip_reass_dequeue_datagram+0x32>
 8015030:	4b0a      	ldr	r3, [pc, #40]	@ (801505c <ip_reass_dequeue_datagram+0x50>)
 8015032:	f240 1245 	movw	r2, #325	@ 0x145
 8015036:	490a      	ldr	r1, [pc, #40]	@ (8015060 <ip_reass_dequeue_datagram+0x54>)
 8015038:	480a      	ldr	r0, [pc, #40]	@ (8015064 <ip_reass_dequeue_datagram+0x58>)
 801503a:	f003 f917 	bl	801826c <iprintf>
    prev->next = ipr->next;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015046:	6879      	ldr	r1, [r7, #4]
 8015048:	2004      	movs	r0, #4
 801504a:	f7f6 fbcb 	bl	800b7e4 <memp_free>
}
 801504e:	bf00      	nop
 8015050:	3708      	adds	r7, #8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	20008924 	.word	0x20008924
 801505c:	0801df90 	.word	0x0801df90
 8015060:	0801e058 	.word	0x0801e058
 8015064:	0801dfd8 	.word	0x0801dfd8

08015068 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b08c      	sub	sp, #48	@ 0x30
 801506c:	af00      	add	r7, sp, #0
 801506e:	60f8      	str	r0, [r7, #12]
 8015070:	60b9      	str	r1, [r7, #8]
 8015072:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015074:	2300      	movs	r3, #0
 8015076:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015078:	2301      	movs	r3, #1
 801507a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	885b      	ldrh	r3, [r3, #2]
 8015086:	b29b      	uxth	r3, r3
 8015088:	4618      	mov	r0, r3
 801508a:	f7f5 fe53 	bl	800ad34 <lwip_htons>
 801508e:	4603      	mov	r3, r0
 8015090:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015092:	69fb      	ldr	r3, [r7, #28]
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	f003 030f 	and.w	r3, r3, #15
 801509a:	b2db      	uxtb	r3, r3
 801509c:	009b      	lsls	r3, r3, #2
 801509e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80150a0:	7e7b      	ldrb	r3, [r7, #25]
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	8b7a      	ldrh	r2, [r7, #26]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d202      	bcs.n	80150b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150aa:	f04f 33ff 	mov.w	r3, #4294967295
 80150ae:	e135      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80150b0:	7e7b      	ldrb	r3, [r7, #25]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	8b7a      	ldrh	r2, [r7, #26]
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	88db      	ldrh	r3, [r3, #6]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f5 fe37 	bl	800ad34 <lwip_htons>
 80150c6:	4603      	mov	r3, r0
 80150c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	00db      	lsls	r3, r3, #3
 80150d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	685b      	ldr	r3, [r3, #4]
 80150d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80150d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150da:	2200      	movs	r2, #0
 80150dc:	701a      	strb	r2, [r3, #0]
 80150de:	2200      	movs	r2, #0
 80150e0:	705a      	strb	r2, [r3, #1]
 80150e2:	2200      	movs	r2, #0
 80150e4:	709a      	strb	r2, [r3, #2]
 80150e6:	2200      	movs	r2, #0
 80150e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80150ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ec:	8afa      	ldrh	r2, [r7, #22]
 80150ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80150f0:	8afa      	ldrh	r2, [r7, #22]
 80150f2:	8b7b      	ldrh	r3, [r7, #26]
 80150f4:	4413      	add	r3, r2
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80150fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fe:	88db      	ldrh	r3, [r3, #6]
 8015100:	b29b      	uxth	r3, r3
 8015102:	8afa      	ldrh	r2, [r7, #22]
 8015104:	429a      	cmp	r2, r3
 8015106:	d902      	bls.n	801510e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015108:	f04f 33ff 	mov.w	r3, #4294967295
 801510c:	e106      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	627b      	str	r3, [r7, #36]	@ 0x24
 8015114:	e068      	b.n	80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511e:	889b      	ldrh	r3, [r3, #4]
 8015120:	b29a      	uxth	r2, r3
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	889b      	ldrh	r3, [r3, #4]
 8015126:	b29b      	uxth	r3, r3
 8015128:	429a      	cmp	r2, r3
 801512a:	d235      	bcs.n	8015198 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015130:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015134:	2b00      	cmp	r3, #0
 8015136:	d020      	beq.n	801517a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801513a:	889b      	ldrh	r3, [r3, #4]
 801513c:	b29a      	uxth	r2, r3
 801513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015140:	88db      	ldrh	r3, [r3, #6]
 8015142:	b29b      	uxth	r3, r3
 8015144:	429a      	cmp	r2, r3
 8015146:	d307      	bcc.n	8015158 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801514a:	88db      	ldrh	r3, [r3, #6]
 801514c:	b29a      	uxth	r2, r3
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	889b      	ldrh	r3, [r3, #4]
 8015152:	b29b      	uxth	r3, r3
 8015154:	429a      	cmp	r2, r3
 8015156:	d902      	bls.n	801515e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015158:	f04f 33ff 	mov.w	r3, #4294967295
 801515c:	e0de      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015160:	68ba      	ldr	r2, [r7, #8]
 8015162:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015166:	88db      	ldrh	r3, [r3, #6]
 8015168:	b29a      	uxth	r2, r3
 801516a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801516c:	889b      	ldrh	r3, [r3, #4]
 801516e:	b29b      	uxth	r3, r3
 8015170:	429a      	cmp	r2, r3
 8015172:	d03d      	beq.n	80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015174:	2300      	movs	r3, #0
 8015176:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015178:	e03a      	b.n	80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801517c:	88db      	ldrh	r3, [r3, #6]
 801517e:	b29a      	uxth	r2, r3
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	889b      	ldrh	r3, [r3, #4]
 8015184:	b29b      	uxth	r3, r3
 8015186:	429a      	cmp	r2, r3
 8015188:	d902      	bls.n	8015190 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801518a:	f04f 33ff 	mov.w	r3, #4294967295
 801518e:	e0c5      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	68ba      	ldr	r2, [r7, #8]
 8015194:	605a      	str	r2, [r3, #4]
      break;
 8015196:	e02b      	b.n	80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519a:	889b      	ldrh	r3, [r3, #4]
 801519c:	b29a      	uxth	r2, r3
 801519e:	693b      	ldr	r3, [r7, #16]
 80151a0:	889b      	ldrh	r3, [r3, #4]
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d102      	bne.n	80151ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151a8:	f04f 33ff 	mov.w	r3, #4294967295
 80151ac:	e0b6      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80151ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b0:	889b      	ldrh	r3, [r3, #4]
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	88db      	ldrh	r3, [r3, #6]
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d202      	bcs.n	80151c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151be:	f04f 33ff 	mov.w	r3, #4294967295
 80151c2:	e0ab      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80151c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d009      	beq.n	80151de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80151ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151cc:	88db      	ldrh	r3, [r3, #6]
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	889b      	ldrh	r3, [r3, #4]
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d001      	beq.n	80151de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80151da:	2300      	movs	r3, #0
 80151dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80151e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d193      	bne.n	8015116 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80151ee:	e000      	b.n	80151f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80151f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80151f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d12d      	bne.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80151f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d01c      	beq.n	8015238 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80151fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015200:	88db      	ldrh	r3, [r3, #6]
 8015202:	b29a      	uxth	r2, r3
 8015204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015206:	889b      	ldrh	r3, [r3, #4]
 8015208:	b29b      	uxth	r3, r3
 801520a:	429a      	cmp	r2, r3
 801520c:	d906      	bls.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801520e:	4b45      	ldr	r3, [pc, #276]	@ (8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015210:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015214:	4944      	ldr	r1, [pc, #272]	@ (8015328 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015216:	4845      	ldr	r0, [pc, #276]	@ (801532c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015218:	f003 f828 	bl	801826c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015224:	88db      	ldrh	r3, [r3, #6]
 8015226:	b29a      	uxth	r2, r3
 8015228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801522a:	889b      	ldrh	r3, [r3, #4]
 801522c:	b29b      	uxth	r3, r3
 801522e:	429a      	cmp	r2, r3
 8015230:	d010      	beq.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015232:	2300      	movs	r3, #0
 8015234:	623b      	str	r3, [r7, #32]
 8015236:	e00d      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d006      	beq.n	801524e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015240:	4b38      	ldr	r3, [pc, #224]	@ (8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015242:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015246:	493a      	ldr	r1, [pc, #232]	@ (8015330 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015248:	4838      	ldr	r0, [pc, #224]	@ (801532c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801524a:	f003 f80f 	bl	801826c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	68ba      	ldr	r2, [r7, #8]
 8015252:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d105      	bne.n	8015266 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	7f9b      	ldrb	r3, [r3, #30]
 801525e:	f003 0301 	and.w	r3, r3, #1
 8015262:	2b00      	cmp	r3, #0
 8015264:	d059      	beq.n	801531a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015266:	6a3b      	ldr	r3, [r7, #32]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d04f      	beq.n	801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d006      	beq.n	8015282 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	889b      	ldrh	r3, [r3, #4]
 801527c:	b29b      	uxth	r3, r3
 801527e:	2b00      	cmp	r3, #0
 8015280:	d002      	beq.n	8015288 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015282:	2300      	movs	r3, #0
 8015284:	623b      	str	r3, [r7, #32]
 8015286:	e041      	b.n	801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015292:	e012      	b.n	80152ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529c:	88db      	ldrh	r3, [r3, #6]
 801529e:	b29a      	uxth	r2, r3
 80152a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a2:	889b      	ldrh	r3, [r3, #4]
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d002      	beq.n	80152b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	623b      	str	r3, [r7, #32]
            break;
 80152ae:	e007      	b.n	80152c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80152b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80152b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80152ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1e9      	bne.n	8015294 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80152c0:	6a3b      	ldr	r3, [r7, #32]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d022      	beq.n	801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d106      	bne.n	80152dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80152ce:	4b15      	ldr	r3, [pc, #84]	@ (8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152d0:	f240 12df 	movw	r2, #479	@ 0x1df
 80152d4:	4917      	ldr	r1, [pc, #92]	@ (8015334 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152d6:	4815      	ldr	r0, [pc, #84]	@ (801532c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152d8:	f002 ffc8 	bl	801826c <iprintf>
          LWIP_ASSERT("sanity check",
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d106      	bne.n	80152f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80152e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80152ee:	4911      	ldr	r1, [pc, #68]	@ (8015334 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152f0:	480e      	ldr	r0, [pc, #56]	@ (801532c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152f2:	f002 ffbb 	bl	801826c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80152f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d006      	beq.n	801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80152fe:	4b09      	ldr	r3, [pc, #36]	@ (8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015300:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015304:	490c      	ldr	r1, [pc, #48]	@ (8015338 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015306:	4809      	ldr	r0, [pc, #36]	@ (801532c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015308:	f002 ffb0 	bl	801826c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801530c:	6a3b      	ldr	r3, [r7, #32]
 801530e:	2b00      	cmp	r3, #0
 8015310:	bf14      	ite	ne
 8015312:	2301      	movne	r3, #1
 8015314:	2300      	moveq	r3, #0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	e000      	b.n	801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801531a:	2300      	movs	r3, #0
}
 801531c:	4618      	mov	r0, r3
 801531e:	3730      	adds	r7, #48	@ 0x30
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	0801df90 	.word	0x0801df90
 8015328:	0801e074 	.word	0x0801e074
 801532c:	0801dfd8 	.word	0x0801dfd8
 8015330:	0801e094 	.word	0x0801e094
 8015334:	0801e0cc 	.word	0x0801e0cc
 8015338:	0801e0dc 	.word	0x0801e0dc

0801533c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b08e      	sub	sp, #56	@ 0x38
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	f003 030f 	and.w	r3, r3, #15
 8015352:	b2db      	uxtb	r3, r3
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	b2db      	uxtb	r3, r3
 8015358:	2b14      	cmp	r3, #20
 801535a:	f040 8171 	bne.w	8015640 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015360:	88db      	ldrh	r3, [r3, #6]
 8015362:	b29b      	uxth	r3, r3
 8015364:	4618      	mov	r0, r3
 8015366:	f7f5 fce5 	bl	800ad34 <lwip_htons>
 801536a:	4603      	mov	r3, r0
 801536c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015370:	b29b      	uxth	r3, r3
 8015372:	00db      	lsls	r3, r3, #3
 8015374:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015378:	885b      	ldrh	r3, [r3, #2]
 801537a:	b29b      	uxth	r3, r3
 801537c:	4618      	mov	r0, r3
 801537e:	f7f5 fcd9 	bl	800ad34 <lwip_htons>
 8015382:	4603      	mov	r3, r0
 8015384:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	f003 030f 	and.w	r3, r3, #15
 801538e:	b2db      	uxtb	r3, r3
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015396:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801539a:	b29b      	uxth	r3, r3
 801539c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801539e:	429a      	cmp	r2, r3
 80153a0:	f0c0 8150 	bcc.w	8015644 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80153a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80153ac:	1ad3      	subs	r3, r2, r3
 80153ae:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f7f7 f933 	bl	800c61c <pbuf_clen>
 80153b6:	4603      	mov	r3, r0
 80153b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80153ba:	4b8c      	ldr	r3, [pc, #560]	@ (80155ec <ip4_reass+0x2b0>)
 80153bc:	881b      	ldrh	r3, [r3, #0]
 80153be:	461a      	mov	r2, r3
 80153c0:	8c3b      	ldrh	r3, [r7, #32]
 80153c2:	4413      	add	r3, r2
 80153c4:	2b0a      	cmp	r3, #10
 80153c6:	dd10      	ble.n	80153ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153c8:	8c3b      	ldrh	r3, [r7, #32]
 80153ca:	4619      	mov	r1, r3
 80153cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80153ce:	f7ff fd81 	bl	8014ed4 <ip_reass_remove_oldest_datagram>
 80153d2:	4603      	mov	r3, r0
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	f000 8137 	beq.w	8015648 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80153da:	4b84      	ldr	r3, [pc, #528]	@ (80155ec <ip4_reass+0x2b0>)
 80153dc:	881b      	ldrh	r3, [r3, #0]
 80153de:	461a      	mov	r2, r3
 80153e0:	8c3b      	ldrh	r3, [r7, #32]
 80153e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153e4:	2b0a      	cmp	r3, #10
 80153e6:	f300 812f 	bgt.w	8015648 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153ea:	4b81      	ldr	r3, [pc, #516]	@ (80155f0 <ip4_reass+0x2b4>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80153f0:	e015      	b.n	801541e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80153f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153f4:	695a      	ldr	r2, [r3, #20]
 80153f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d10c      	bne.n	8015418 <ip4_reass+0xdc>
 80153fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015400:	699a      	ldr	r2, [r3, #24]
 8015402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015404:	691b      	ldr	r3, [r3, #16]
 8015406:	429a      	cmp	r2, r3
 8015408:	d106      	bne.n	8015418 <ip4_reass+0xdc>
 801540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801540c:	899a      	ldrh	r2, [r3, #12]
 801540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015410:	889b      	ldrh	r3, [r3, #4]
 8015412:	b29b      	uxth	r3, r3
 8015414:	429a      	cmp	r2, r3
 8015416:	d006      	beq.n	8015426 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	633b      	str	r3, [r7, #48]	@ 0x30
 801541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015420:	2b00      	cmp	r3, #0
 8015422:	d1e6      	bne.n	80153f2 <ip4_reass+0xb6>
 8015424:	e000      	b.n	8015428 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015426:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801542a:	2b00      	cmp	r3, #0
 801542c:	d109      	bne.n	8015442 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801542e:	8c3b      	ldrh	r3, [r7, #32]
 8015430:	4619      	mov	r1, r3
 8015432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015434:	f7ff fdb0 	bl	8014f98 <ip_reass_enqueue_new_datagram>
 8015438:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543c:	2b00      	cmp	r3, #0
 801543e:	d11c      	bne.n	801547a <ip4_reass+0x13e>
      goto nullreturn;
 8015440:	e105      	b.n	801564e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015444:	88db      	ldrh	r3, [r3, #6]
 8015446:	b29b      	uxth	r3, r3
 8015448:	4618      	mov	r0, r3
 801544a:	f7f5 fc73 	bl	800ad34 <lwip_htons>
 801544e:	4603      	mov	r3, r0
 8015450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015454:	2b00      	cmp	r3, #0
 8015456:	d110      	bne.n	801547a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801545a:	89db      	ldrh	r3, [r3, #14]
 801545c:	4618      	mov	r0, r3
 801545e:	f7f5 fc69 	bl	800ad34 <lwip_htons>
 8015462:	4603      	mov	r3, r0
 8015464:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015468:	2b00      	cmp	r3, #0
 801546a:	d006      	beq.n	801547a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546e:	3308      	adds	r3, #8
 8015470:	2214      	movs	r2, #20
 8015472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015474:	4618      	mov	r0, r3
 8015476:	f003 fa64 	bl	8018942 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801547c:	88db      	ldrh	r3, [r3, #6]
 801547e:	b29b      	uxth	r3, r3
 8015480:	f003 0320 	and.w	r3, r3, #32
 8015484:	2b00      	cmp	r3, #0
 8015486:	bf0c      	ite	eq
 8015488:	2301      	moveq	r3, #1
 801548a:	2300      	movne	r3, #0
 801548c:	b2db      	uxtb	r3, r3
 801548e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00e      	beq.n	80154b4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015496:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801549a:	4413      	add	r3, r2
 801549c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801549e:	8b7a      	ldrh	r2, [r7, #26]
 80154a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80154a2:	429a      	cmp	r2, r3
 80154a4:	f0c0 80a0 	bcc.w	80155e8 <ip4_reass+0x2ac>
 80154a8:	8b7b      	ldrh	r3, [r7, #26]
 80154aa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80154ae:	4293      	cmp	r3, r2
 80154b0:	f200 809a 	bhi.w	80155e8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80154b4:	69fa      	ldr	r2, [r7, #28]
 80154b6:	6879      	ldr	r1, [r7, #4]
 80154b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80154ba:	f7ff fdd5 	bl	8015068 <ip_reass_chain_frag_into_datagram_and_validate>
 80154be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154c6:	f000 809b 	beq.w	8015600 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80154ca:	4b48      	ldr	r3, [pc, #288]	@ (80155ec <ip4_reass+0x2b0>)
 80154cc:	881a      	ldrh	r2, [r3, #0]
 80154ce:	8c3b      	ldrh	r3, [r7, #32]
 80154d0:	4413      	add	r3, r2
 80154d2:	b29a      	uxth	r2, r3
 80154d4:	4b45      	ldr	r3, [pc, #276]	@ (80155ec <ip4_reass+0x2b0>)
 80154d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80154d8:	69fb      	ldr	r3, [r7, #28]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d00d      	beq.n	80154fa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80154de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80154e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80154e2:	4413      	add	r3, r2
 80154e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80154e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e8:	8a7a      	ldrh	r2, [r7, #18]
 80154ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80154ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ee:	7f9b      	ldrb	r3, [r3, #30]
 80154f0:	f043 0301 	orr.w	r3, r3, #1
 80154f4:	b2da      	uxtb	r2, r3
 80154f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d171      	bne.n	80155e4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015502:	8b9b      	ldrh	r3, [r3, #28]
 8015504:	3314      	adds	r3, #20
 8015506:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801551c:	3308      	adds	r3, #8
 801551e:	2214      	movs	r2, #20
 8015520:	4619      	mov	r1, r3
 8015522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015524:	f003 fa0d 	bl	8018942 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015528:	8a3b      	ldrh	r3, [r7, #16]
 801552a:	4618      	mov	r0, r3
 801552c:	f7f5 fc02 	bl	800ad34 <lwip_htons>
 8015530:	4603      	mov	r3, r0
 8015532:	461a      	mov	r2, r3
 8015534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015536:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801553a:	2200      	movs	r2, #0
 801553c:	719a      	strb	r2, [r3, #6]
 801553e:	2200      	movs	r2, #0
 8015540:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015544:	2200      	movs	r2, #0
 8015546:	729a      	strb	r2, [r3, #10]
 8015548:	2200      	movs	r2, #0
 801554a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015552:	e00d      	b.n	8015570 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801555a:	2114      	movs	r1, #20
 801555c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801555e:	f7f6 ff4f 	bl	800c400 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015562:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f7f7 f893 	bl	800c690 <pbuf_cat>
      r = iprh->next_pbuf;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1ee      	bne.n	8015554 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015576:	4b1e      	ldr	r3, [pc, #120]	@ (80155f0 <ip4_reass+0x2b4>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801557c:	429a      	cmp	r2, r3
 801557e:	d102      	bne.n	8015586 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015580:	2300      	movs	r3, #0
 8015582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015584:	e010      	b.n	80155a8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015586:	4b1a      	ldr	r3, [pc, #104]	@ (80155f0 <ip4_reass+0x2b4>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801558c:	e007      	b.n	801559e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015594:	429a      	cmp	r2, r3
 8015596:	d006      	beq.n	80155a6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d1f4      	bne.n	801558e <ip4_reass+0x252>
 80155a4:	e000      	b.n	80155a8 <ip4_reass+0x26c>
          break;
 80155a6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80155a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80155aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155ac:	f7ff fd2e 	bl	801500c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f7f7 f833 	bl	800c61c <pbuf_clen>
 80155b6:	4603      	mov	r3, r0
 80155b8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80155ba:	4b0c      	ldr	r3, [pc, #48]	@ (80155ec <ip4_reass+0x2b0>)
 80155bc:	881b      	ldrh	r3, [r3, #0]
 80155be:	8c3a      	ldrh	r2, [r7, #32]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d906      	bls.n	80155d2 <ip4_reass+0x296>
 80155c4:	4b0b      	ldr	r3, [pc, #44]	@ (80155f4 <ip4_reass+0x2b8>)
 80155c6:	f240 229b 	movw	r2, #667	@ 0x29b
 80155ca:	490b      	ldr	r1, [pc, #44]	@ (80155f8 <ip4_reass+0x2bc>)
 80155cc:	480b      	ldr	r0, [pc, #44]	@ (80155fc <ip4_reass+0x2c0>)
 80155ce:	f002 fe4d 	bl	801826c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80155d2:	4b06      	ldr	r3, [pc, #24]	@ (80155ec <ip4_reass+0x2b0>)
 80155d4:	881a      	ldrh	r2, [r3, #0]
 80155d6:	8c3b      	ldrh	r3, [r7, #32]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	b29a      	uxth	r2, r3
 80155dc:	4b03      	ldr	r3, [pc, #12]	@ (80155ec <ip4_reass+0x2b0>)
 80155de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	e038      	b.n	8015656 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80155e4:	2300      	movs	r3, #0
 80155e6:	e036      	b.n	8015656 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80155e8:	bf00      	nop
 80155ea:	e00a      	b.n	8015602 <ip4_reass+0x2c6>
 80155ec:	20008928 	.word	0x20008928
 80155f0:	20008924 	.word	0x20008924
 80155f4:	0801df90 	.word	0x0801df90
 80155f8:	0801e100 	.word	0x0801e100
 80155fc:	0801dfd8 	.word	0x0801dfd8
    goto nullreturn_ipr;
 8015600:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015604:	2b00      	cmp	r3, #0
 8015606:	d106      	bne.n	8015616 <ip4_reass+0x2da>
 8015608:	4b15      	ldr	r3, [pc, #84]	@ (8015660 <ip4_reass+0x324>)
 801560a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801560e:	4915      	ldr	r1, [pc, #84]	@ (8015664 <ip4_reass+0x328>)
 8015610:	4815      	ldr	r0, [pc, #84]	@ (8015668 <ip4_reass+0x32c>)
 8015612:	f002 fe2b 	bl	801826c <iprintf>
  if (ipr->p == NULL) {
 8015616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d116      	bne.n	801564c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801561e:	4b13      	ldr	r3, [pc, #76]	@ (801566c <ip4_reass+0x330>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015624:	429a      	cmp	r2, r3
 8015626:	d006      	beq.n	8015636 <ip4_reass+0x2fa>
 8015628:	4b0d      	ldr	r3, [pc, #52]	@ (8015660 <ip4_reass+0x324>)
 801562a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801562e:	4910      	ldr	r1, [pc, #64]	@ (8015670 <ip4_reass+0x334>)
 8015630:	480d      	ldr	r0, [pc, #52]	@ (8015668 <ip4_reass+0x32c>)
 8015632:	f002 fe1b 	bl	801826c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015636:	2100      	movs	r1, #0
 8015638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801563a:	f7ff fce7 	bl	801500c <ip_reass_dequeue_datagram>
 801563e:	e006      	b.n	801564e <ip4_reass+0x312>
    goto nullreturn;
 8015640:	bf00      	nop
 8015642:	e004      	b.n	801564e <ip4_reass+0x312>
    goto nullreturn;
 8015644:	bf00      	nop
 8015646:	e002      	b.n	801564e <ip4_reass+0x312>
      goto nullreturn;
 8015648:	bf00      	nop
 801564a:	e000      	b.n	801564e <ip4_reass+0x312>
  }

nullreturn:
 801564c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7f6 ff5c 	bl	800c50c <pbuf_free>
  return NULL;
 8015654:	2300      	movs	r3, #0
}
 8015656:	4618      	mov	r0, r3
 8015658:	3738      	adds	r7, #56	@ 0x38
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	0801df90 	.word	0x0801df90
 8015664:	0801e11c 	.word	0x0801e11c
 8015668:	0801dfd8 	.word	0x0801dfd8
 801566c:	20008924 	.word	0x20008924
 8015670:	0801e128 	.word	0x0801e128

08015674 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015678:	2005      	movs	r0, #5
 801567a:	f7f6 f843 	bl	800b704 <memp_malloc>
 801567e:	4603      	mov	r3, r0
}
 8015680:	4618      	mov	r0, r3
 8015682:	bd80      	pop	{r7, pc}

08015684 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d106      	bne.n	80156a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015692:	4b07      	ldr	r3, [pc, #28]	@ (80156b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015694:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015698:	4906      	ldr	r1, [pc, #24]	@ (80156b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801569a:	4807      	ldr	r0, [pc, #28]	@ (80156b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801569c:	f002 fde6 	bl	801826c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80156a0:	6879      	ldr	r1, [r7, #4]
 80156a2:	2005      	movs	r0, #5
 80156a4:	f7f6 f89e 	bl	800b7e4 <memp_free>
}
 80156a8:	bf00      	nop
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	0801df90 	.word	0x0801df90
 80156b4:	0801e148 	.word	0x0801e148
 80156b8:	0801dfd8 	.word	0x0801dfd8

080156bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d106      	bne.n	80156dc <ipfrag_free_pbuf_custom+0x20>
 80156ce:	4b11      	ldr	r3, [pc, #68]	@ (8015714 <ipfrag_free_pbuf_custom+0x58>)
 80156d0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80156d4:	4910      	ldr	r1, [pc, #64]	@ (8015718 <ipfrag_free_pbuf_custom+0x5c>)
 80156d6:	4811      	ldr	r0, [pc, #68]	@ (801571c <ipfrag_free_pbuf_custom+0x60>)
 80156d8:	f002 fdc8 	bl	801826c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d006      	beq.n	80156f2 <ipfrag_free_pbuf_custom+0x36>
 80156e4:	4b0b      	ldr	r3, [pc, #44]	@ (8015714 <ipfrag_free_pbuf_custom+0x58>)
 80156e6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80156ea:	490d      	ldr	r1, [pc, #52]	@ (8015720 <ipfrag_free_pbuf_custom+0x64>)
 80156ec:	480b      	ldr	r0, [pc, #44]	@ (801571c <ipfrag_free_pbuf_custom+0x60>)
 80156ee:	f002 fdbd 	bl	801826c <iprintf>
  if (pcr->original != NULL) {
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	695b      	ldr	r3, [r3, #20]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d004      	beq.n	8015704 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	695b      	ldr	r3, [r3, #20]
 80156fe:	4618      	mov	r0, r3
 8015700:	f7f6 ff04 	bl	800c50c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015704:	68f8      	ldr	r0, [r7, #12]
 8015706:	f7ff ffbd 	bl	8015684 <ip_frag_free_pbuf_custom_ref>
}
 801570a:	bf00      	nop
 801570c:	3710      	adds	r7, #16
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
 8015712:	bf00      	nop
 8015714:	0801df90 	.word	0x0801df90
 8015718:	0801e154 	.word	0x0801e154
 801571c:	0801dfd8 	.word	0x0801dfd8
 8015720:	0801e160 	.word	0x0801e160

08015724 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b094      	sub	sp, #80	@ 0x50
 8015728:	af02      	add	r7, sp, #8
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015730:	2300      	movs	r3, #0
 8015732:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801573a:	3b14      	subs	r3, #20
 801573c:	2b00      	cmp	r3, #0
 801573e:	da00      	bge.n	8015742 <ip4_frag+0x1e>
 8015740:	3307      	adds	r3, #7
 8015742:	10db      	asrs	r3, r3, #3
 8015744:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015746:	2314      	movs	r3, #20
 8015748:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015752:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	f003 030f 	and.w	r3, r3, #15
 801575c:	b2db      	uxtb	r3, r3
 801575e:	009b      	lsls	r3, r3, #2
 8015760:	b2db      	uxtb	r3, r3
 8015762:	2b14      	cmp	r3, #20
 8015764:	d002      	beq.n	801576c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015766:	f06f 0305 	mvn.w	r3, #5
 801576a:	e110      	b.n	801598e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	895b      	ldrh	r3, [r3, #10]
 8015770:	2b13      	cmp	r3, #19
 8015772:	d809      	bhi.n	8015788 <ip4_frag+0x64>
 8015774:	4b88      	ldr	r3, [pc, #544]	@ (8015998 <ip4_frag+0x274>)
 8015776:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801577a:	4988      	ldr	r1, [pc, #544]	@ (801599c <ip4_frag+0x278>)
 801577c:	4888      	ldr	r0, [pc, #544]	@ (80159a0 <ip4_frag+0x27c>)
 801577e:	f002 fd75 	bl	801826c <iprintf>
 8015782:	f06f 0305 	mvn.w	r3, #5
 8015786:	e102      	b.n	801598e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578a:	88db      	ldrh	r3, [r3, #6]
 801578c:	b29b      	uxth	r3, r3
 801578e:	4618      	mov	r0, r3
 8015790:	f7f5 fad0 	bl	800ad34 <lwip_htons>
 8015794:	4603      	mov	r3, r0
 8015796:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015798:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801579a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801579e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80157a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80157a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80157a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	891b      	ldrh	r3, [r3, #8]
 80157ae:	3b14      	subs	r3, #20
 80157b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80157b4:	e0e1      	b.n	801597a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80157b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80157b8:	00db      	lsls	r3, r3, #3
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80157c0:	4293      	cmp	r3, r2
 80157c2:	bf28      	it	cs
 80157c4:	4613      	movcs	r3, r2
 80157c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80157c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80157cc:	2114      	movs	r1, #20
 80157ce:	200e      	movs	r0, #14
 80157d0:	f7f6 fbb8 	bl	800bf44 <pbuf_alloc>
 80157d4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80157d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d8:	2b00      	cmp	r3, #0
 80157da:	f000 80d5 	beq.w	8015988 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80157de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e0:	895b      	ldrh	r3, [r3, #10]
 80157e2:	2b13      	cmp	r3, #19
 80157e4:	d806      	bhi.n	80157f4 <ip4_frag+0xd0>
 80157e6:	4b6c      	ldr	r3, [pc, #432]	@ (8015998 <ip4_frag+0x274>)
 80157e8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80157ec:	496d      	ldr	r1, [pc, #436]	@ (80159a4 <ip4_frag+0x280>)
 80157ee:	486c      	ldr	r0, [pc, #432]	@ (80159a0 <ip4_frag+0x27c>)
 80157f0:	f002 fd3c 	bl	801826c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80157f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	2214      	movs	r2, #20
 80157fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80157fc:	4618      	mov	r0, r3
 80157fe:	f003 f8a0 	bl	8018942 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015808:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801580a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801580e:	e064      	b.n	80158da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	895a      	ldrh	r2, [r3, #10]
 8015814:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015816:	1ad3      	subs	r3, r2, r3
 8015818:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	895b      	ldrh	r3, [r3, #10]
 801581e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015820:	429a      	cmp	r2, r3
 8015822:	d906      	bls.n	8015832 <ip4_frag+0x10e>
 8015824:	4b5c      	ldr	r3, [pc, #368]	@ (8015998 <ip4_frag+0x274>)
 8015826:	f240 322d 	movw	r2, #813	@ 0x32d
 801582a:	495f      	ldr	r1, [pc, #380]	@ (80159a8 <ip4_frag+0x284>)
 801582c:	485c      	ldr	r0, [pc, #368]	@ (80159a0 <ip4_frag+0x27c>)
 801582e:	f002 fd1d 	bl	801826c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015832:	8bfa      	ldrh	r2, [r7, #30]
 8015834:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015838:	4293      	cmp	r3, r2
 801583a:	bf28      	it	cs
 801583c:	4613      	movcs	r3, r2
 801583e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015842:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015846:	2b00      	cmp	r3, #0
 8015848:	d105      	bne.n	8015856 <ip4_frag+0x132>
        poff = 0;
 801584a:	2300      	movs	r3, #0
 801584c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	60fb      	str	r3, [r7, #12]
        continue;
 8015854:	e041      	b.n	80158da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015856:	f7ff ff0d 	bl	8015674 <ip_frag_alloc_pbuf_custom_ref>
 801585a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801585c:	69bb      	ldr	r3, [r7, #24]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d103      	bne.n	801586a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015862:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015864:	f7f6 fe52 	bl	800c50c <pbuf_free>
        goto memerr;
 8015868:	e08f      	b.n	801598a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801586a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015870:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015872:	4413      	add	r3, r2
 8015874:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015878:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801587c:	9201      	str	r2, [sp, #4]
 801587e:	9300      	str	r3, [sp, #0]
 8015880:	4603      	mov	r3, r0
 8015882:	2241      	movs	r2, #65	@ 0x41
 8015884:	2000      	movs	r0, #0
 8015886:	f7f6 fc87 	bl	800c198 <pbuf_alloced_custom>
 801588a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d106      	bne.n	80158a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015892:	69b8      	ldr	r0, [r7, #24]
 8015894:	f7ff fef6 	bl	8015684 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015898:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801589a:	f7f6 fe37 	bl	800c50c <pbuf_free>
        goto memerr;
 801589e:	e074      	b.n	801598a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f7f6 fed3 	bl	800c64c <pbuf_ref>
      pcr->original = p;
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	68fa      	ldr	r2, [r7, #12]
 80158aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80158ac:	69bb      	ldr	r3, [r7, #24]
 80158ae:	4a3f      	ldr	r2, [pc, #252]	@ (80159ac <ip4_frag+0x288>)
 80158b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80158b2:	6979      	ldr	r1, [r7, #20]
 80158b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80158b6:	f7f6 feeb 	bl	800c690 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80158ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80158be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80158c2:	1ad3      	subs	r3, r2, r3
 80158c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80158c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d004      	beq.n	80158da <ip4_frag+0x1b6>
        poff = 0;
 80158d0:	2300      	movs	r3, #0
 80158d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80158da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d196      	bne.n	8015810 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80158e2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80158e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80158e8:	4413      	add	r3, r2
 80158ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158f0:	f1a3 0213 	sub.w	r2, r3, #19
 80158f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80158f8:	429a      	cmp	r2, r3
 80158fa:	bfcc      	ite	gt
 80158fc:	2301      	movgt	r3, #1
 80158fe:	2300      	movle	r3, #0
 8015900:	b2db      	uxtb	r3, r3
 8015902:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801590c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801590e:	6a3b      	ldr	r3, [r7, #32]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d002      	beq.n	801591a <ip4_frag+0x1f6>
 8015914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015916:	2b00      	cmp	r3, #0
 8015918:	d003      	beq.n	8015922 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801591a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801591c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015920:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015922:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015924:	4618      	mov	r0, r3
 8015926:	f7f5 fa05 	bl	800ad34 <lwip_htons>
 801592a:	4603      	mov	r3, r0
 801592c:	461a      	mov	r2, r3
 801592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015930:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015932:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015934:	3314      	adds	r3, #20
 8015936:	b29b      	uxth	r3, r3
 8015938:	4618      	mov	r0, r3
 801593a:	f7f5 f9fb 	bl	800ad34 <lwip_htons>
 801593e:	4603      	mov	r3, r0
 8015940:	461a      	mov	r2, r3
 8015942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015944:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015948:	2200      	movs	r2, #0
 801594a:	729a      	strb	r2, [r3, #10]
 801594c:	2200      	movs	r2, #0
 801594e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	695b      	ldr	r3, [r3, #20]
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015958:	68b8      	ldr	r0, [r7, #8]
 801595a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801595c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801595e:	f7f6 fdd5 	bl	800c50c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015962:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015966:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801596e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015972:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015974:	4413      	add	r3, r2
 8015976:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801597a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801597e:	2b00      	cmp	r3, #0
 8015980:	f47f af19 	bne.w	80157b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	e002      	b.n	801598e <ip4_frag+0x26a>
      goto memerr;
 8015988:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801598a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801598e:	4618      	mov	r0, r3
 8015990:	3748      	adds	r7, #72	@ 0x48
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}
 8015996:	bf00      	nop
 8015998:	0801df90 	.word	0x0801df90
 801599c:	0801e16c 	.word	0x0801e16c
 80159a0:	0801dfd8 	.word	0x0801dfd8
 80159a4:	0801e188 	.word	0x0801e188
 80159a8:	0801e1a8 	.word	0x0801e1a8
 80159ac:	080156bd 	.word	0x080156bd

080159b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b086      	sub	sp, #24
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80159ba:	230e      	movs	r3, #14
 80159bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	895b      	ldrh	r3, [r3, #10]
 80159c2:	2b0e      	cmp	r3, #14
 80159c4:	d96e      	bls.n	8015aa4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	7bdb      	ldrb	r3, [r3, #15]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d106      	bne.n	80159dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80159d4:	3301      	adds	r3, #1
 80159d6:	b2da      	uxtb	r2, r3
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	7b1a      	ldrb	r2, [r3, #12]
 80159e6:	7b5b      	ldrb	r3, [r3, #13]
 80159e8:	021b      	lsls	r3, r3, #8
 80159ea:	4313      	orrs	r3, r2
 80159ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	f003 0301 	and.w	r3, r3, #1
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d023      	beq.n	8015a42 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d10f      	bne.n	8015a22 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	785b      	ldrb	r3, [r3, #1]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d11b      	bne.n	8015a42 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015a0e:	2b5e      	cmp	r3, #94	@ 0x5e
 8015a10:	d117      	bne.n	8015a42 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	7b5b      	ldrb	r3, [r3, #13]
 8015a16:	f043 0310 	orr.w	r3, r3, #16
 8015a1a:	b2da      	uxtb	r2, r3
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	735a      	strb	r2, [r3, #13]
 8015a20:	e00f      	b.n	8015a42 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	2206      	movs	r2, #6
 8015a26:	4928      	ldr	r1, [pc, #160]	@ (8015ac8 <ethernet_input+0x118>)
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f002 fe5f 	bl	80186ec <memcmp>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d106      	bne.n	8015a42 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	7b5b      	ldrb	r3, [r3, #13]
 8015a38:	f043 0308 	orr.w	r3, r3, #8
 8015a3c:	b2da      	uxtb	r2, r3
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015a42:	89fb      	ldrh	r3, [r7, #14]
 8015a44:	2b08      	cmp	r3, #8
 8015a46:	d003      	beq.n	8015a50 <ethernet_input+0xa0>
 8015a48:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015a4c:	d014      	beq.n	8015a78 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015a4e:	e032      	b.n	8015ab6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015a56:	f003 0308 	and.w	r3, r3, #8
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d024      	beq.n	8015aa8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a5e:	8afb      	ldrh	r3, [r7, #22]
 8015a60:	4619      	mov	r1, r3
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f7f6 fccc 	bl	800c400 <pbuf_remove_header>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d11e      	bne.n	8015aac <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7fe fddf 	bl	8014634 <ip4_input>
      break;
 8015a76:	e013      	b.n	8015aa0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015a7e:	f003 0308 	and.w	r3, r3, #8
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d014      	beq.n	8015ab0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a86:	8afb      	ldrh	r3, [r7, #22]
 8015a88:	4619      	mov	r1, r3
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7f6 fcb8 	bl	800c400 <pbuf_remove_header>
 8015a90:	4603      	mov	r3, r0
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d10e      	bne.n	8015ab4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f7fd fbeb 	bl	8013274 <etharp_input>
      break;
 8015a9e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e00c      	b.n	8015abe <ethernet_input+0x10e>
    goto free_and_return;
 8015aa4:	bf00      	nop
 8015aa6:	e006      	b.n	8015ab6 <ethernet_input+0x106>
        goto free_and_return;
 8015aa8:	bf00      	nop
 8015aaa:	e004      	b.n	8015ab6 <ethernet_input+0x106>
        goto free_and_return;
 8015aac:	bf00      	nop
 8015aae:	e002      	b.n	8015ab6 <ethernet_input+0x106>
        goto free_and_return;
 8015ab0:	bf00      	nop
 8015ab2:	e000      	b.n	8015ab6 <ethernet_input+0x106>
        goto free_and_return;
 8015ab4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7f6 fd28 	bl	800c50c <pbuf_free>
  return ERR_OK;
 8015abc:	2300      	movs	r3, #0
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3718      	adds	r7, #24
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	0801e4c8 	.word	0x0801e4c8

08015acc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	60f8      	str	r0, [r7, #12]
 8015ad4:	60b9      	str	r1, [r7, #8]
 8015ad6:	607a      	str	r2, [r7, #4]
 8015ad8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ada:	8c3b      	ldrh	r3, [r7, #32]
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7f5 f929 	bl	800ad34 <lwip_htons>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015ae6:	210e      	movs	r1, #14
 8015ae8:	68b8      	ldr	r0, [r7, #8]
 8015aea:	f7f6 fc79 	bl	800c3e0 <pbuf_add_header>
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d125      	bne.n	8015b40 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	8afa      	ldrh	r2, [r7, #22]
 8015afe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	2206      	movs	r2, #6
 8015b04:	6839      	ldr	r1, [r7, #0]
 8015b06:	4618      	mov	r0, r3
 8015b08:	f002 ff1b 	bl	8018942 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015b0c:	693b      	ldr	r3, [r7, #16]
 8015b0e:	3306      	adds	r3, #6
 8015b10:	2206      	movs	r2, #6
 8015b12:	6879      	ldr	r1, [r7, #4]
 8015b14:	4618      	mov	r0, r3
 8015b16:	f002 ff14 	bl	8018942 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015b20:	2b06      	cmp	r3, #6
 8015b22:	d006      	beq.n	8015b32 <ethernet_output+0x66>
 8015b24:	4b0a      	ldr	r3, [pc, #40]	@ (8015b50 <ethernet_output+0x84>)
 8015b26:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015b2a:	490a      	ldr	r1, [pc, #40]	@ (8015b54 <ethernet_output+0x88>)
 8015b2c:	480a      	ldr	r0, [pc, #40]	@ (8015b58 <ethernet_output+0x8c>)
 8015b2e:	f002 fb9d 	bl	801826c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	699b      	ldr	r3, [r3, #24]
 8015b36:	68b9      	ldr	r1, [r7, #8]
 8015b38:	68f8      	ldr	r0, [r7, #12]
 8015b3a:	4798      	blx	r3
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	e002      	b.n	8015b46 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015b40:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015b42:	f06f 0301 	mvn.w	r3, #1
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3718      	adds	r7, #24
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	0801e1b8 	.word	0x0801e1b8
 8015b54:	0801e1f0 	.word	0x0801e1f0
 8015b58:	0801e224 	.word	0x0801e224

08015b5c <Read_Temp_Value>:




void Read_Temp_Value(void)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	af00      	add	r7, sp, #0
  HMTP_Read_Temp_Value();
 8015b60:	f7f4 fd2e 	bl	800a5c0 <HMTP_Read_Temp_Value>

  if(Cmd_Received == 0) {
 8015b64:	4b0d      	ldr	r3, [pc, #52]	@ (8015b9c <Read_Temp_Value+0x40>)
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d108      	bne.n	8015b7e <Read_Temp_Value+0x22>
	  Temp_Val1 = (float)HMTP_Data[0].fTemp;
 8015b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8015ba0 <Read_Temp_Value+0x44>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	4a0c      	ldr	r2, [pc, #48]	@ (8015ba4 <Read_Temp_Value+0x48>)
 8015b72:	6013      	str	r3, [r2, #0]
	  Temp_Val2 = (float)HMTP_Data[1].fTemp;
 8015b74:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba0 <Read_Temp_Value+0x44>)
 8015b76:	68db      	ldr	r3, [r3, #12]
 8015b78:	4a0b      	ldr	r2, [pc, #44]	@ (8015ba8 <Read_Temp_Value+0x4c>)
 8015b7a:	6013      	str	r3, [r2, #0]
  }
  else if(Cmd_Received == 1) {
	  Temp_Val1 = cmdT1;
	  Temp_Val2 = cmdT2;
  }
}
 8015b7c:	e00b      	b.n	8015b96 <Read_Temp_Value+0x3a>
  else if(Cmd_Received == 1) {
 8015b7e:	4b07      	ldr	r3, [pc, #28]	@ (8015b9c <Read_Temp_Value+0x40>)
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	2b01      	cmp	r3, #1
 8015b84:	d107      	bne.n	8015b96 <Read_Temp_Value+0x3a>
	  Temp_Val1 = cmdT1;
 8015b86:	4b09      	ldr	r3, [pc, #36]	@ (8015bac <Read_Temp_Value+0x50>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	4a06      	ldr	r2, [pc, #24]	@ (8015ba4 <Read_Temp_Value+0x48>)
 8015b8c:	6013      	str	r3, [r2, #0]
	  Temp_Val2 = cmdT2;
 8015b8e:	4b08      	ldr	r3, [pc, #32]	@ (8015bb0 <Read_Temp_Value+0x54>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	4a05      	ldr	r2, [pc, #20]	@ (8015ba8 <Read_Temp_Value+0x4c>)
 8015b94:	6013      	str	r3, [r2, #0]
}
 8015b96:	bf00      	nop
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	20008adc 	.word	0x20008adc
 8015ba0:	2000515c 	.word	0x2000515c
 8015ba4:	2000892c 	.word	0x2000892c
 8015ba8:	20008930 	.word	0x20008930
 8015bac:	20008ad4 	.word	0x20008ad4
 8015bb0:	20008ad8 	.word	0x20008ad8

08015bb4 <Read_FAN_Status>:

//
void Read_FAN_Status(void)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	af00      	add	r7, sp, #0
  FAN_Read_FansStatus();
 8015bb8:	f7f4 fab6 	bl	800a128 <FAN_Read_FansStatus>

	FAN_Sense1 = Fan[0].err;
 8015bbc:	4b04      	ldr	r3, [pc, #16]	@ (8015bd0 <Read_FAN_Status+0x1c>)
 8015bbe:	789a      	ldrb	r2, [r3, #2]
 8015bc0:	4b04      	ldr	r3, [pc, #16]	@ (8015bd4 <Read_FAN_Status+0x20>)
 8015bc2:	701a      	strb	r2, [r3, #0]
	FAN_Sense2 = Fan[1].err;
 8015bc4:	4b02      	ldr	r3, [pc, #8]	@ (8015bd0 <Read_FAN_Status+0x1c>)
 8015bc6:	799a      	ldrb	r2, [r3, #6]
 8015bc8:	4b03      	ldr	r3, [pc, #12]	@ (8015bd8 <Read_FAN_Status+0x24>)
 8015bca:	701a      	strb	r2, [r3, #0]
//	FAN_Sense3 = Fan[2].err;
//	FAN_Sense4 = Fan[3].err;
//	FAN_Sense5 = Fan[4].err;
//	FAN_Sense6 = Fan[5].err;
}
 8015bcc:	bf00      	nop
 8015bce:	bd80      	pop	{r7, pc}
 8015bd0:	2000514c 	.word	0x2000514c
 8015bd4:	20008934 	.word	0x20008934
 8015bd8:	20008935 	.word	0x20008935

08015bdc <Read_DP_Status>:
//	PSU_Status1 = HAL_GPIO_ReadPin(INPUT_PSU1_GPIO_Port, INPUT_PSU1_Pin);
//	PSU_Status2 = HAL_GPIO_ReadPin(INPUT_PSU2_GPIO_Port, INPUT_PSU2_Pin);
//}

void Read_DP_Status(void)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	af00      	add	r7, sp, #0
  DP_Status1 = HAL_GPIO_ReadPin(INPUT_DP_LED1_GPIO_Port, INPUT_DP_LED1_Pin);
 8015be0:	2110      	movs	r1, #16
 8015be2:	480c      	ldr	r0, [pc, #48]	@ (8015c14 <Read_DP_Status+0x38>)
 8015be4:	f7ee fca4 	bl	8004530 <HAL_GPIO_ReadPin>
 8015be8:	4603      	mov	r3, r0
 8015bea:	461a      	mov	r2, r3
 8015bec:	4b0a      	ldr	r3, [pc, #40]	@ (8015c18 <Read_DP_Status+0x3c>)
 8015bee:	701a      	strb	r2, [r3, #0]
  DP_Status2 = HAL_GPIO_ReadPin(INPUT_DP_LED2_GPIO_Port, INPUT_DP_LED2_Pin);
 8015bf0:	2120      	movs	r1, #32
 8015bf2:	4808      	ldr	r0, [pc, #32]	@ (8015c14 <Read_DP_Status+0x38>)
 8015bf4:	f7ee fc9c 	bl	8004530 <HAL_GPIO_ReadPin>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	4b07      	ldr	r3, [pc, #28]	@ (8015c1c <Read_DP_Status+0x40>)
 8015bfe:	701a      	strb	r2, [r3, #0]
  DP_Status3 = HAL_GPIO_ReadPin(INPUT_DP_LED3_GPIO_Port, INPUT_DP_LED3_Pin);
 8015c00:	2140      	movs	r1, #64	@ 0x40
 8015c02:	4804      	ldr	r0, [pc, #16]	@ (8015c14 <Read_DP_Status+0x38>)
 8015c04:	f7ee fc94 	bl	8004530 <HAL_GPIO_ReadPin>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	4b04      	ldr	r3, [pc, #16]	@ (8015c20 <Read_DP_Status+0x44>)
 8015c0e:	701a      	strb	r2, [r3, #0]
}
 8015c10:	bf00      	nop
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	40021800 	.word	0x40021800
 8015c18:	20008936 	.word	0x20008936
 8015c1c:	20008937 	.word	0x20008937
 8015c20:	20008938 	.word	0x20008938

08015c24 <Read_MineDet_Number>:

void Read_MineDet_Number(void)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	af00      	add	r7, sp, #0
  MineDet_Num = UDP_Get_MineDetNum();
 8015c28:	f7f4 ff26 	bl	800aa78 <UDP_Get_MineDetNum>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	461a      	mov	r2, r3
 8015c30:	4b01      	ldr	r3, [pc, #4]	@ (8015c38 <Read_MineDet_Number+0x14>)
 8015c32:	701a      	strb	r2, [r3, #0]
}
 8015c34:	bf00      	nop
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	20008939 	.word	0x20008939

08015c3c <Read_Charger_Status>:

void Read_Charger_Status(void)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	af00      	add	r7, sp, #0
  Charger = HAL_GPIO_ReadPin(INPUT_CHG_GPIO_Port, INPUT_CHG_Pin);
 8015c40:	2120      	movs	r1, #32
 8015c42:	4804      	ldr	r0, [pc, #16]	@ (8015c54 <Read_Charger_Status+0x18>)
 8015c44:	f7ee fc74 	bl	8004530 <HAL_GPIO_ReadPin>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	4b02      	ldr	r3, [pc, #8]	@ (8015c58 <Read_Charger_Status+0x1c>)
 8015c4e:	701a      	strb	r2, [r3, #0]
}
 8015c50:	bf00      	nop
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	40020c00 	.word	0x40020c00
 8015c58:	2000893a 	.word	0x2000893a

08015c5c <Read_BAT_Status>:

void Read_BAT_Status(void)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	af00      	add	r7, sp, #0
  ReadBq34z100();
 8015c60:	f7f4 f87a 	bl	8009d58 <ReadBq34z100>

  Bat.SOC_Val     = BatData16[0];
 8015c64:	4b11      	ldr	r3, [pc, #68]	@ (8015cac <Read_BAT_Status+0x50>)
 8015c66:	881a      	ldrh	r2, [r3, #0]
 8015c68:	4b11      	ldr	r3, [pc, #68]	@ (8015cb0 <Read_BAT_Status+0x54>)
 8015c6a:	801a      	strh	r2, [r3, #0]
  Bat.Voltage     = BatData16[1];
 8015c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8015cac <Read_BAT_Status+0x50>)
 8015c6e:	885a      	ldrh	r2, [r3, #2]
 8015c70:	4b0f      	ldr	r3, [pc, #60]	@ (8015cb0 <Read_BAT_Status+0x54>)
 8015c72:	805a      	strh	r2, [r3, #2]
  Bat.AvgCurrent  = (int16_t)(BatData16[2]&0xFFFF);
 8015c74:	4b0d      	ldr	r3, [pc, #52]	@ (8015cac <Read_BAT_Status+0x50>)
 8015c76:	889b      	ldrh	r3, [r3, #4]
 8015c78:	b21a      	sxth	r2, r3
 8015c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8015cb0 <Read_BAT_Status+0x54>)
 8015c7c:	809a      	strh	r2, [r3, #4]
  Bat.CycleCount  = BatData16[3];
 8015c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8015cac <Read_BAT_Status+0x50>)
 8015c80:	88da      	ldrh	r2, [r3, #6]
 8015c82:	4b0b      	ldr	r3, [pc, #44]	@ (8015cb0 <Read_BAT_Status+0x54>)
 8015c84:	80da      	strh	r2, [r3, #6]
  Bat.InternalTemp= (float)((float)BatData16[4]/10.0f - KELVIN);
 8015c86:	4b09      	ldr	r3, [pc, #36]	@ (8015cac <Read_BAT_Status+0x50>)
 8015c88:	891b      	ldrh	r3, [r3, #8]
 8015c8a:	ee07 3a90 	vmov	s15, r3
 8015c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015c92:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8015c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015c9a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8015cb4 <Read_BAT_Status+0x58>
 8015c9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ca2:	4b03      	ldr	r3, [pc, #12]	@ (8015cb0 <Read_BAT_Status+0x54>)
 8015ca4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8015ca8:	bf00      	nop
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	20005110 	.word	0x20005110
 8015cb0:	200050fc 	.word	0x200050fc
 8015cb4:	43889333 	.word	0x43889333

08015cb8 <Read_BUZ_Status>:

void Read_BUZ_Status(void)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	af00      	add	r7, sp, #0
  // 0 : Buz ON, 1: Buz Off
  BUZ_Status = (uint8_t)HAL_GPIO_ReadPin(BUZ_GPIO_Port, BUZ_Pin);
 8015cbc:	2108      	movs	r1, #8
 8015cbe:	4804      	ldr	r0, [pc, #16]	@ (8015cd0 <Read_BUZ_Status+0x18>)
 8015cc0:	f7ee fc36 	bl	8004530 <HAL_GPIO_ReadPin>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	461a      	mov	r2, r3
 8015cc8:	4b02      	ldr	r3, [pc, #8]	@ (8015cd4 <Read_BUZ_Status+0x1c>)
 8015cca:	701a      	strb	r2, [r3, #0]
}
 8015ccc:	bf00      	nop
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	40020000 	.word	0x40020000
 8015cd4:	2000893b 	.word	0x2000893b

08015cd8 <GetTempStatus1>:

static uint8_t GetTempStatus1(void){
 8015cd8:	b480      	push	{r7}
 8015cda:	b083      	sub	sp, #12
 8015cdc:	af00      	add	r7, sp, #0

  uint8_t Temp_Status1 = 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	71fb      	strb	r3, [r7, #7]

  //if No i2c error
  if(HMTP_Data[0].error == 0)
 8015ce2:	4b28      	ldr	r3, [pc, #160]	@ (8015d84 <GetTempStatus1+0xac>)
 8015ce4:	7a1b      	ldrb	r3, [r3, #8]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d140      	bne.n	8015d6c <GetTempStatus1+0x94>
  {
    if(0<=Temp_Val1 && Temp_Val1<43.0f)
 8015cea:	4b27      	ldr	r3, [pc, #156]	@ (8015d88 <GetTempStatus1+0xb0>)
 8015cec:	edd3 7a00 	vldr	s15, [r3]
 8015cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf8:	db0c      	blt.n	8015d14 <GetTempStatus1+0x3c>
 8015cfa:	4b23      	ldr	r3, [pc, #140]	@ (8015d88 <GetTempStatus1+0xb0>)
 8015cfc:	edd3 7a00 	vldr	s15, [r3]
 8015d00:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8015d8c <GetTempStatus1+0xb4>
 8015d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0c:	d502      	bpl.n	8015d14 <GetTempStatus1+0x3c>
    {
      Temp_Status1 = 0;   //Normal
 8015d0e:	2300      	movs	r3, #0
 8015d10:	71fb      	strb	r3, [r7, #7]
 8015d12:	e02d      	b.n	8015d70 <GetTempStatus1+0x98>
    }
    else if(43.0f<=Temp_Val1 && Temp_Val1<55.0f)
 8015d14:	4b1c      	ldr	r3, [pc, #112]	@ (8015d88 <GetTempStatus1+0xb0>)
 8015d16:	edd3 7a00 	vldr	s15, [r3]
 8015d1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8015d8c <GetTempStatus1+0xb4>
 8015d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d26:	db0c      	blt.n	8015d42 <GetTempStatus1+0x6a>
 8015d28:	4b17      	ldr	r3, [pc, #92]	@ (8015d88 <GetTempStatus1+0xb0>)
 8015d2a:	edd3 7a00 	vldr	s15, [r3]
 8015d2e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8015d90 <GetTempStatus1+0xb8>
 8015d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d3a:	d502      	bpl.n	8015d42 <GetTempStatus1+0x6a>
    {
      Temp_Status1 = 2;   //Warning
 8015d3c:	2302      	movs	r3, #2
 8015d3e:	71fb      	strb	r3, [r7, #7]
 8015d40:	e016      	b.n	8015d70 <GetTempStatus1+0x98>
    }
    else if(Temp_Val1<0 || Temp_Val1>=55.0f)
 8015d42:	4b11      	ldr	r3, [pc, #68]	@ (8015d88 <GetTempStatus1+0xb0>)
 8015d44:	edd3 7a00 	vldr	s15, [r3]
 8015d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d50:	d409      	bmi.n	8015d66 <GetTempStatus1+0x8e>
 8015d52:	4b0d      	ldr	r3, [pc, #52]	@ (8015d88 <GetTempStatus1+0xb0>)
 8015d54:	edd3 7a00 	vldr	s15, [r3]
 8015d58:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8015d90 <GetTempStatus1+0xb8>
 8015d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d64:	db04      	blt.n	8015d70 <GetTempStatus1+0x98>
    {
      Temp_Status1 = 1;   //Danger
 8015d66:	2301      	movs	r3, #1
 8015d68:	71fb      	strb	r3, [r7, #7]
 8015d6a:	e001      	b.n	8015d70 <GetTempStatus1+0x98>
    }
  }
  //if i2c error
  else
  {
    Temp_Status1 = 3;
 8015d6c:	2303      	movs	r3, #3
 8015d6e:	71fb      	strb	r3, [r7, #7]
  }

  //clear i2c error
  HMTP_Data[0].error = 0;
 8015d70:	4b04      	ldr	r3, [pc, #16]	@ (8015d84 <GetTempStatus1+0xac>)
 8015d72:	2200      	movs	r2, #0
 8015d74:	721a      	strb	r2, [r3, #8]

  return Temp_Status1;
 8015d76:	79fb      	ldrb	r3, [r7, #7]
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	370c      	adds	r7, #12
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d82:	4770      	bx	lr
 8015d84:	2000515c 	.word	0x2000515c
 8015d88:	2000892c 	.word	0x2000892c
 8015d8c:	422c0000 	.word	0x422c0000
 8015d90:	425c0000 	.word	0x425c0000

08015d94 <GetTempStatus2>:

static uint8_t GetTempStatus2(void)
{
 8015d94:	b480      	push	{r7}
 8015d96:	b083      	sub	sp, #12
 8015d98:	af00      	add	r7, sp, #0
  uint8_t Temp_Status2 = 0;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	71fb      	strb	r3, [r7, #7]

  //if No i2c error
  if(HMTP_Data[1].error == 0)
 8015d9e:	4b28      	ldr	r3, [pc, #160]	@ (8015e40 <GetTempStatus2+0xac>)
 8015da0:	7d1b      	ldrb	r3, [r3, #20]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d140      	bne.n	8015e28 <GetTempStatus2+0x94>
  {
    if(0<=Temp_Val2 && Temp_Val2<43.0f)
 8015da6:	4b27      	ldr	r3, [pc, #156]	@ (8015e44 <GetTempStatus2+0xb0>)
 8015da8:	edd3 7a00 	vldr	s15, [r3]
 8015dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db4:	db0c      	blt.n	8015dd0 <GetTempStatus2+0x3c>
 8015db6:	4b23      	ldr	r3, [pc, #140]	@ (8015e44 <GetTempStatus2+0xb0>)
 8015db8:	edd3 7a00 	vldr	s15, [r3]
 8015dbc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8015e48 <GetTempStatus2+0xb4>
 8015dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc8:	d502      	bpl.n	8015dd0 <GetTempStatus2+0x3c>
    {
      Temp_Status2 = 0;   //Normal
 8015dca:	2300      	movs	r3, #0
 8015dcc:	71fb      	strb	r3, [r7, #7]
 8015dce:	e02d      	b.n	8015e2c <GetTempStatus2+0x98>
    }
    else if(43.0f<=Temp_Val2 && Temp_Val2<55.0f)
 8015dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8015e44 <GetTempStatus2+0xb0>)
 8015dd2:	edd3 7a00 	vldr	s15, [r3]
 8015dd6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8015e48 <GetTempStatus2+0xb4>
 8015dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de2:	db0c      	blt.n	8015dfe <GetTempStatus2+0x6a>
 8015de4:	4b17      	ldr	r3, [pc, #92]	@ (8015e44 <GetTempStatus2+0xb0>)
 8015de6:	edd3 7a00 	vldr	s15, [r3]
 8015dea:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8015e4c <GetTempStatus2+0xb8>
 8015dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df6:	d502      	bpl.n	8015dfe <GetTempStatus2+0x6a>
    {
      Temp_Status2 = 2;   //Warning
 8015df8:	2302      	movs	r3, #2
 8015dfa:	71fb      	strb	r3, [r7, #7]
 8015dfc:	e016      	b.n	8015e2c <GetTempStatus2+0x98>
    }
    else if(Temp_Val2<0 || Temp_Val2>=55.0f)
 8015dfe:	4b11      	ldr	r3, [pc, #68]	@ (8015e44 <GetTempStatus2+0xb0>)
 8015e00:	edd3 7a00 	vldr	s15, [r3]
 8015e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e0c:	d409      	bmi.n	8015e22 <GetTempStatus2+0x8e>
 8015e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8015e44 <GetTempStatus2+0xb0>)
 8015e10:	edd3 7a00 	vldr	s15, [r3]
 8015e14:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8015e4c <GetTempStatus2+0xb8>
 8015e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e20:	db04      	blt.n	8015e2c <GetTempStatus2+0x98>
    {
      Temp_Status2 = 1;   //Danger
 8015e22:	2301      	movs	r3, #1
 8015e24:	71fb      	strb	r3, [r7, #7]
 8015e26:	e001      	b.n	8015e2c <GetTempStatus2+0x98>
    }
  }
  //if i2c error
  else
  {
    Temp_Status2 = 3;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	71fb      	strb	r3, [r7, #7]
  }

  //clear i2c error
  HMTP_Data[1].error = 0;
 8015e2c:	4b04      	ldr	r3, [pc, #16]	@ (8015e40 <GetTempStatus2+0xac>)
 8015e2e:	2200      	movs	r2, #0
 8015e30:	751a      	strb	r2, [r3, #20]

  return Temp_Status2;
 8015e32:	79fb      	ldrb	r3, [r7, #7]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	370c      	adds	r7, #12
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3e:	4770      	bx	lr
 8015e40:	2000515c 	.word	0x2000515c
 8015e44:	20008930 	.word	0x20008930
 8015e48:	422c0000 	.word	0x422c0000
 8015e4c:	425c0000 	.word	0x425c0000

08015e50 <GetTempStatus>:

uint8_t GetTempStatus(void)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	af00      	add	r7, sp, #0
  uint8_t Temp_Status = 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	71fb      	strb	r3, [r7, #7]
  uint8_t Temp_Status1 = 0;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	71bb      	strb	r3, [r7, #6]
  uint8_t Temp_Status2 = 0;
 8015e5e:	2300      	movs	r3, #0
 8015e60:	717b      	strb	r3, [r7, #5]

  Temp_Status1 = GetTempStatus1();
 8015e62:	f7ff ff39 	bl	8015cd8 <GetTempStatus1>
 8015e66:	4603      	mov	r3, r0
 8015e68:	71bb      	strb	r3, [r7, #6]
  Temp_Status2 = GetTempStatus2();
 8015e6a:	f7ff ff93 	bl	8015d94 <GetTempStatus2>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	717b      	strb	r3, [r7, #5]

  //if i2c error
  if(Temp_Status1 == 3 || Temp_Status2 == 3)
 8015e72:	79bb      	ldrb	r3, [r7, #6]
 8015e74:	2b03      	cmp	r3, #3
 8015e76:	d002      	beq.n	8015e7e <GetTempStatus+0x2e>
 8015e78:	797b      	ldrb	r3, [r7, #5]
 8015e7a:	2b03      	cmp	r3, #3
 8015e7c:	d102      	bne.n	8015e84 <GetTempStatus+0x34>
  {
    Temp_Status = 3;
 8015e7e:	2303      	movs	r3, #3
 8015e80:	71fb      	strb	r3, [r7, #7]
 8015e82:	e019      	b.n	8015eb8 <GetTempStatus+0x68>
   }
  //Normal temp range
  else if(Temp_Status1 == 0 && Temp_Status2 == 0)
 8015e84:	79bb      	ldrb	r3, [r7, #6]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d105      	bne.n	8015e96 <GetTempStatus+0x46>
 8015e8a:	797b      	ldrb	r3, [r7, #5]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d102      	bne.n	8015e96 <GetTempStatus+0x46>
  {
    Temp_Status = 0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	71fb      	strb	r3, [r7, #7]
 8015e94:	e010      	b.n	8015eb8 <GetTempStatus+0x68>
   }
  //Danger temp range
  else if(Temp_Status1 == 1 || Temp_Status2 == 1)
 8015e96:	79bb      	ldrb	r3, [r7, #6]
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d002      	beq.n	8015ea2 <GetTempStatus+0x52>
 8015e9c:	797b      	ldrb	r3, [r7, #5]
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	d102      	bne.n	8015ea8 <GetTempStatus+0x58>
  {
    Temp_Status = 1;
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	71fb      	strb	r3, [r7, #7]
 8015ea6:	e007      	b.n	8015eb8 <GetTempStatus+0x68>
   }
  //Warning temp range
  else if(Temp_Status1 == 2 || Temp_Status2 == 2)
 8015ea8:	79bb      	ldrb	r3, [r7, #6]
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d002      	beq.n	8015eb4 <GetTempStatus+0x64>
 8015eae:	797b      	ldrb	r3, [r7, #5]
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	d101      	bne.n	8015eb8 <GetTempStatus+0x68>
  {
    Temp_Status = 2;
 8015eb4:	2302      	movs	r3, #2
 8015eb6:	71fb      	strb	r3, [r7, #7]
  }

  return Temp_Status;
 8015eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}
	...

08015ec4 <GetFanStatus1>:


static uint8_t GetFanStatus1(void)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b083      	sub	sp, #12
 8015ec8:	af00      	add	r7, sp, #0
  uint8_t Fan_AddStatus = 0;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	71bb      	strb	r3, [r7, #6]
  uint8_t Fan_Status1 = 0;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	71fb      	strb	r3, [r7, #7]

 Fan_AddStatus = FAN_Sense1 + FAN_Sense2;
 8015ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8015f08 <GetFanStatus1+0x44>)
 8015ed4:	781a      	ldrb	r2, [r3, #0]
 8015ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8015f0c <GetFanStatus1+0x48>)
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	4413      	add	r3, r2
 8015edc:	71bb      	strb	r3, [r7, #6]
 if(Fan_AddStatus == 0)
 8015ede:	79bb      	ldrb	r3, [r7, #6]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d102      	bne.n	8015eea <GetFanStatus1+0x26>
 {
   Fan_Status1 = 0;    //Good
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	71fb      	strb	r3, [r7, #7]
 8015ee8:	e007      	b.n	8015efa <GetFanStatus1+0x36>
 }
 else if(Fan_AddStatus == 2)
 8015eea:	79bb      	ldrb	r3, [r7, #6]
 8015eec:	2b02      	cmp	r3, #2
 8015eee:	d102      	bne.n	8015ef6 <GetFanStatus1+0x32>
 {
   Fan_Status1 = 1;    //3 Fans abnormal
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	71fb      	strb	r3, [r7, #7]
 8015ef4:	e001      	b.n	8015efa <GetFanStatus1+0x36>
 }
 else
 {
   Fan_Status1 = 1;    //1 Fan  Warning
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	71fb      	strb	r3, [r7, #7]
 }

  return Fan_Status1;
 8015efa:	79fb      	ldrb	r3, [r7, #7]
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	370c      	adds	r7, #12
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr
 8015f08:	20008934 	.word	0x20008934
 8015f0c:	20008935 	.word	0x20008935

08015f10 <Store_Portable_Status>:
//}


//Portable LED Status
void Store_Portable_Status(void)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	af00      	add	r7, sp, #0
  Console_Status.Temp1 = Temp_Val1;
 8015f14:	4b14      	ldr	r3, [pc, #80]	@ (8015f68 <Store_Portable_Status+0x58>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	4a14      	ldr	r2, [pc, #80]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f1a:	6013      	str	r3, [r2, #0]
  Console_Status.Temp2 = Temp_Val2;
 8015f1c:	4b14      	ldr	r3, [pc, #80]	@ (8015f70 <Store_Portable_Status+0x60>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4a12      	ldr	r2, [pc, #72]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f22:	6053      	str	r3, [r2, #4]
  Console_Status.Temp_Range = GetTempStatus();
 8015f24:	f7ff ff94 	bl	8015e50 <GetTempStatus>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	461a      	mov	r2, r3
 8015f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f2e:	721a      	strb	r2, [r3, #8]
  Console_Status.FAN1  = GetFanStatus1();
 8015f30:	f7ff ffc8 	bl	8015ec4 <GetFanStatus1>
 8015f34:	4603      	mov	r3, r0
 8015f36:	461a      	mov	r2, r3
 8015f38:	4b0c      	ldr	r3, [pc, #48]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f3a:	725a      	strb	r2, [r3, #9]
  //Console_Status.FAN2  = 0; //GetFanStatus2();	//미사용
  //Console_Status.PSU   = GetPSUStatus();
  Console_Status.DP1   = DP_Status1;
 8015f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8015f74 <Store_Portable_Status+0x64>)
 8015f3e:	781a      	ldrb	r2, [r3, #0]
 8015f40:	4b0a      	ldr	r3, [pc, #40]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f42:	729a      	strb	r2, [r3, #10]
  Console_Status.DP2   = DP_Status2;
 8015f44:	4b0c      	ldr	r3, [pc, #48]	@ (8015f78 <Store_Portable_Status+0x68>)
 8015f46:	781a      	ldrb	r2, [r3, #0]
 8015f48:	4b08      	ldr	r3, [pc, #32]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f4a:	72da      	strb	r2, [r3, #11]
  Console_Status.DP3   = DP_Status3;
 8015f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8015f7c <Store_Portable_Status+0x6c>)
 8015f4e:	781a      	ldrb	r2, [r3, #0]
 8015f50:	4b06      	ldr	r3, [pc, #24]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f52:	731a      	strb	r2, [r3, #12]
  Console_Status.MineDet = MineDet_Num;
 8015f54:	4b0a      	ldr	r3, [pc, #40]	@ (8015f80 <Store_Portable_Status+0x70>)
 8015f56:	781a      	ldrb	r2, [r3, #0]
 8015f58:	4b04      	ldr	r3, [pc, #16]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f5a:	735a      	strb	r2, [r3, #13]
  Console_Status.Charger = Charger;
 8015f5c:	4b09      	ldr	r3, [pc, #36]	@ (8015f84 <Store_Portable_Status+0x74>)
 8015f5e:	781a      	ldrb	r2, [r3, #0]
 8015f60:	4b02      	ldr	r3, [pc, #8]	@ (8015f6c <Store_Portable_Status+0x5c>)
 8015f62:	739a      	strb	r2, [r3, #14]
}
 8015f64:	bf00      	nop
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	2000892c 	.word	0x2000892c
 8015f6c:	2000893c 	.word	0x2000893c
 8015f70:	20008930 	.word	0x20008930
 8015f74:	20008936 	.word	0x20008936
 8015f78:	20008937 	.word	0x20008937
 8015f7c:	20008938 	.word	0x20008938
 8015f80:	20008939 	.word	0x20008939
 8015f84:	2000893a 	.word	0x2000893a

08015f88 <Print_Display_Status>:

void Print_Display_Status(void)
{
 8015f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f8a:	b08f      	sub	sp, #60	@ 0x3c
 8015f8c:	af0a      	add	r7, sp, #40	@ 0x28
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
      Console_Status.Temp1,
 8015f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8016000 <Print_Display_Status+0x78>)
 8015f90:	681b      	ldr	r3, [r3, #0]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7ea fae8 	bl	8000568 <__aeabi_f2d>
 8015f98:	4604      	mov	r4, r0
 8015f9a:	460d      	mov	r5, r1
      Console_Status.Temp2,
 8015f9c:	4b18      	ldr	r3, [pc, #96]	@ (8016000 <Print_Display_Status+0x78>)
 8015f9e:	685b      	ldr	r3, [r3, #4]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7ea fae1 	bl	8000568 <__aeabi_f2d>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	460b      	mov	r3, r1
      Console_Status.Temp_Range,
 8015faa:	4915      	ldr	r1, [pc, #84]	@ (8016000 <Print_Display_Status+0x78>)
 8015fac:	7a09      	ldrb	r1, [r1, #8]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fae:	4608      	mov	r0, r1
      Console_Status.FAN1,
 8015fb0:	4913      	ldr	r1, [pc, #76]	@ (8016000 <Print_Display_Status+0x78>)
 8015fb2:	7a49      	ldrb	r1, [r1, #9]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fb4:	460e      	mov	r6, r1
      //Console_Status.FAN2,
      //Console_Status.PSU,
      Console_Status.DP1,
 8015fb6:	4912      	ldr	r1, [pc, #72]	@ (8016000 <Print_Display_Status+0x78>)
 8015fb8:	7a89      	ldrb	r1, [r1, #10]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fba:	60f9      	str	r1, [r7, #12]
      Console_Status.DP2,
 8015fbc:	4910      	ldr	r1, [pc, #64]	@ (8016000 <Print_Display_Status+0x78>)
 8015fbe:	7ac9      	ldrb	r1, [r1, #11]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fc0:	60b9      	str	r1, [r7, #8]
      Console_Status.DP3,
 8015fc2:	490f      	ldr	r1, [pc, #60]	@ (8016000 <Print_Display_Status+0x78>)
 8015fc4:	7b09      	ldrb	r1, [r1, #12]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fc6:	6079      	str	r1, [r7, #4]
      Console_Status.MineDet,
 8015fc8:	490d      	ldr	r1, [pc, #52]	@ (8016000 <Print_Display_Status+0x78>)
 8015fca:	7b49      	ldrb	r1, [r1, #13]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fcc:	6039      	str	r1, [r7, #0]
      Console_Status.Charger );
 8015fce:	490c      	ldr	r1, [pc, #48]	@ (8016000 <Print_Display_Status+0x78>)
 8015fd0:	7b89      	ldrb	r1, [r1, #14]
  printf("TVal[%.1f %.1f] -> Temp[%d], FAN[%d], DP[%d %d %d], MD[%d], CHG[%d]\n",
 8015fd2:	9108      	str	r1, [sp, #32]
 8015fd4:	6839      	ldr	r1, [r7, #0]
 8015fd6:	9107      	str	r1, [sp, #28]
 8015fd8:	6879      	ldr	r1, [r7, #4]
 8015fda:	9106      	str	r1, [sp, #24]
 8015fdc:	68b9      	ldr	r1, [r7, #8]
 8015fde:	9105      	str	r1, [sp, #20]
 8015fe0:	68f9      	ldr	r1, [r7, #12]
 8015fe2:	9104      	str	r1, [sp, #16]
 8015fe4:	9603      	str	r6, [sp, #12]
 8015fe6:	9002      	str	r0, [sp, #8]
 8015fe8:	e9cd 2300 	strd	r2, r3, [sp]
 8015fec:	4622      	mov	r2, r4
 8015fee:	462b      	mov	r3, r5
 8015ff0:	4804      	ldr	r0, [pc, #16]	@ (8016004 <Print_Display_Status+0x7c>)
 8015ff2:	f002 f93b 	bl	801826c <iprintf>
}
 8015ff6:	bf00      	nop
 8015ff8:	3714      	adds	r7, #20
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ffe:	bf00      	nop
 8016000:	2000893c 	.word	0x2000893c
 8016004:	0801e24c 	.word	0x0801e24c

08016008 <Print_Portable_Status>:

void Print_Portable_Status(void)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	af00      	add	r7, sp, #0
  Print_FanStatus();
 801600c:	f7f4 f9ae 	bl	800a36c <Print_FanStatus>
  Print_Read_Status();
 8016010:	f000 fa46 	bl	80164a0 <Print_Read_Status>
  Print_Display_Status();
 8016014:	f7ff ffb8 	bl	8015f88 <Print_Display_Status>
  printf("\n");
 8016018:	200a      	movs	r0, #10
 801601a:	f002 f939 	bl	8018290 <putchar>

}
 801601e:	bf00      	nop
 8016020:	bd80      	pop	{r7, pc}
	...

08016024 <DBG_Uart_Init>:
uint8_t Cmd_Received = 0;



void DBG_Uart_Init()
{
 8016024:	b580      	push	{r7, lr}
 8016026:	af00      	add	r7, sp, #0
  RingBuffer_Init(&rxBuffer);
 8016028:	4802      	ldr	r0, [pc, #8]	@ (8016034 <DBG_Uart_Init+0x10>)
 801602a:	f000 fcd6 	bl	80169da <RingBuffer_Init>
}
 801602e:	bf00      	nop
 8016030:	bd80      	pop	{r7, pc}
 8016032:	bf00      	nop
 8016034:	2000894c 	.word	0x2000894c

08016038 <uart_isr>:


void uart_isr(UART_HandleTypeDef *huart) {
 8016038:	b480      	push	{r7}
 801603a:	b083      	sub	sp, #12
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
//    huart->Instance->SR;
//    rx = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
//   // RB_Write (&ring_buff, rx);
//    return;
//  }
}
 8016040:	bf00      	nop
 8016042:	370c      	adds	r7, #12
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <parseReceivedString>:
//{
//
//}


void parseReceivedString(char* receivedString, float* cmdT1, float* cmdT2) {
 801604c:	b580      	push	{r7, lr}
 801604e:	b088      	sub	sp, #32
 8016050:	af00      	add	r7, sp, #0
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
    char* token;
    char* endPtr;
    int index = 0;
 8016058:	2300      	movs	r3, #0
 801605a:	61bb      	str	r3, [r7, #24]

    token = strtok(receivedString, " ");
 801605c:	4919      	ldr	r1, [pc, #100]	@ (80160c4 <parseReceivedString+0x78>)
 801605e:	68f8      	ldr	r0, [r7, #12]
 8016060:	f002 fb9c 	bl	801879c <strtok>
 8016064:	61f8      	str	r0, [r7, #28]
    while (token != NULL) {
 8016066:	e024      	b.n	80160b2 <parseReceivedString+0x66>
        if (index == 1) {
 8016068:	69bb      	ldr	r3, [r7, #24]
 801606a:	2b01      	cmp	r3, #1
 801606c:	d10b      	bne.n	8016086 <parseReceivedString+0x3a>
            *cmdT1 = strtof(token, &endPtr); // ASCII to float 변환
 801606e:	f107 0314 	add.w	r3, r7, #20
 8016072:	4619      	mov	r1, r3
 8016074:	69f8      	ldr	r0, [r7, #28]
 8016076:	f001 fb7b 	bl	8017770 <strtof>
 801607a:	eef0 7a40 	vmov.f32	s15, s0
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	edc3 7a00 	vstr	s15, [r3]
 8016084:	e00d      	b.n	80160a2 <parseReceivedString+0x56>
        } else if (index == 2) {
 8016086:	69bb      	ldr	r3, [r7, #24]
 8016088:	2b02      	cmp	r3, #2
 801608a:	d10a      	bne.n	80160a2 <parseReceivedString+0x56>
            *cmdT2 = strtof(token, &endPtr); // ASCII to float 변환
 801608c:	f107 0314 	add.w	r3, r7, #20
 8016090:	4619      	mov	r1, r3
 8016092:	69f8      	ldr	r0, [r7, #28]
 8016094:	f001 fb6c 	bl	8017770 <strtof>
 8016098:	eef0 7a40 	vmov.f32	s15, s0
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	edc3 7a00 	vstr	s15, [r3]
        }
        token = strtok(NULL, " ");
 80160a2:	4908      	ldr	r1, [pc, #32]	@ (80160c4 <parseReceivedString+0x78>)
 80160a4:	2000      	movs	r0, #0
 80160a6:	f002 fb79 	bl	801879c <strtok>
 80160aa:	61f8      	str	r0, [r7, #28]
        index++;
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	3301      	adds	r3, #1
 80160b0:	61bb      	str	r3, [r7, #24]
    while (token != NULL) {
 80160b2:	69fb      	ldr	r3, [r7, #28]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1d7      	bne.n	8016068 <parseReceivedString+0x1c>
    }
}
 80160b8:	bf00      	nop
 80160ba:	bf00      	nop
 80160bc:	3720      	adds	r7, #32
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	0801e294 	.word	0x0801e294

080160c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80160c8:	b5b0      	push	{r4, r5, r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af02      	add	r7, sp, #8
 80160ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	4a46      	ldr	r2, [pc, #280]	@ (80161f0 <HAL_UART_RxCpltCallback+0x128>)
 80160d6:	4293      	cmp	r3, r2
 80160d8:	f040 8085 	bne.w	80161e6 <HAL_UART_RxCpltCallback+0x11e>
        uint8_t data = rxBuffer.buffer[rxBuffer.head];
 80160dc:	4b45      	ldr	r3, [pc, #276]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 80160de:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	461a      	mov	r2, r3
 80160e6:	4b43      	ldr	r3, [pc, #268]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 80160e8:	5c9b      	ldrb	r3, [r3, r2]
 80160ea:	73fb      	strb	r3, [r7, #15]
        RingBuffer_Put(&rxBuffer, data);
 80160ec:	7bfb      	ldrb	r3, [r7, #15]
 80160ee:	4619      	mov	r1, r3
 80160f0:	4840      	ldr	r0, [pc, #256]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 80160f2:	f000 fca3 	bl	8016a3c <RingBuffer_Put>
        rxBuffer.head = (rxBuffer.head + 1) % RING_BUFFER_SIZE; // update index
 80160f6:	4b3f      	ldr	r3, [pc, #252]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 80160f8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	3301      	adds	r3, #1
 8016100:	425a      	negs	r2, r3
 8016102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016106:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801610a:	bf58      	it	pl
 801610c:	4253      	negpl	r3, r2
 801610e:	b29a      	uxth	r2, r3
 8016110:	4b38      	ldr	r3, [pc, #224]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 8016112:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer.buffer[rxBuffer.head], 1);
 8016116:	4b37      	ldr	r3, [pc, #220]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 8016118:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 801611c:	b29b      	uxth	r3, r3
 801611e:	461a      	mov	r2, r3
 8016120:	4b34      	ldr	r3, [pc, #208]	@ (80161f4 <HAL_UART_RxCpltCallback+0x12c>)
 8016122:	4413      	add	r3, r2
 8016124:	2201      	movs	r2, #1
 8016126:	4619      	mov	r1, r3
 8016128:	4833      	ldr	r0, [pc, #204]	@ (80161f8 <HAL_UART_RxCpltCallback+0x130>)
 801612a:	f7f2 f99c 	bl	8008466 <HAL_UART_Receive_IT>

        //if Enter key is pressed
        if (data == '\r') {
 801612e:	7bfb      	ldrb	r3, [r7, #15]
 8016130:	2b0d      	cmp	r3, #13
 8016132:	d147      	bne.n	80161c4 <HAL_UART_RxCpltCallback+0xfc>
            receivedString[rxIndex] = '\0'; // string end
 8016134:	4b31      	ldr	r3, [pc, #196]	@ (80161fc <HAL_UART_RxCpltCallback+0x134>)
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	461a      	mov	r2, r3
 801613a:	4b31      	ldr	r3, [pc, #196]	@ (8016200 <HAL_UART_RxCpltCallback+0x138>)
 801613c:	2100      	movs	r1, #0
 801613e:	5499      	strb	r1, [r3, r2]
            strncpy((char*)cmd_buf, (char*)&receivedString, strlen(receivedString));
 8016140:	482f      	ldr	r0, [pc, #188]	@ (8016200 <HAL_UART_RxCpltCallback+0x138>)
 8016142:	f7ea f8a5 	bl	8000290 <strlen>
 8016146:	4603      	mov	r3, r0
 8016148:	461a      	mov	r2, r3
 801614a:	492d      	ldr	r1, [pc, #180]	@ (8016200 <HAL_UART_RxCpltCallback+0x138>)
 801614c:	482d      	ldr	r0, [pc, #180]	@ (8016204 <HAL_UART_RxCpltCallback+0x13c>)
 801614e:	f002 fb11 	bl	8018774 <strncpy>

            // 여기에 코드 넣어 주세요
            parseReceivedString((char*)cmd_buf, &cmdT1, &cmdT2);
 8016152:	4a2d      	ldr	r2, [pc, #180]	@ (8016208 <HAL_UART_RxCpltCallback+0x140>)
 8016154:	492d      	ldr	r1, [pc, #180]	@ (801620c <HAL_UART_RxCpltCallback+0x144>)
 8016156:	482b      	ldr	r0, [pc, #172]	@ (8016204 <HAL_UART_RxCpltCallback+0x13c>)
 8016158:	f7ff ff78 	bl	801604c <parseReceivedString>
            printf("cmdT1: %.2f, cmdT2: %.2f\n", cmdT1, cmdT2);
 801615c:	4b2b      	ldr	r3, [pc, #172]	@ (801620c <HAL_UART_RxCpltCallback+0x144>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	4618      	mov	r0, r3
 8016162:	f7ea fa01 	bl	8000568 <__aeabi_f2d>
 8016166:	4604      	mov	r4, r0
 8016168:	460d      	mov	r5, r1
 801616a:	4b27      	ldr	r3, [pc, #156]	@ (8016208 <HAL_UART_RxCpltCallback+0x140>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4618      	mov	r0, r3
 8016170:	f7ea f9fa 	bl	8000568 <__aeabi_f2d>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	e9cd 2300 	strd	r2, r3, [sp]
 801617c:	4622      	mov	r2, r4
 801617e:	462b      	mov	r3, r5
 8016180:	4823      	ldr	r0, [pc, #140]	@ (8016210 <HAL_UART_RxCpltCallback+0x148>)
 8016182:	f002 f873 	bl	801826c <iprintf>

            if(cmdT1 >= 100.0 && cmdT2 >= 100.0)
 8016186:	4b21      	ldr	r3, [pc, #132]	@ (801620c <HAL_UART_RxCpltCallback+0x144>)
 8016188:	edd3 7a00 	vldr	s15, [r3]
 801618c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8016214 <HAL_UART_RxCpltCallback+0x14c>
 8016190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016198:	db0d      	blt.n	80161b6 <HAL_UART_RxCpltCallback+0xee>
 801619a:	4b1b      	ldr	r3, [pc, #108]	@ (8016208 <HAL_UART_RxCpltCallback+0x140>)
 801619c:	edd3 7a00 	vldr	s15, [r3]
 80161a0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8016214 <HAL_UART_RxCpltCallback+0x14c>
 80161a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80161a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ac:	db03      	blt.n	80161b6 <HAL_UART_RxCpltCallback+0xee>
              Cmd_Received = 0;
 80161ae:	4b1a      	ldr	r3, [pc, #104]	@ (8016218 <HAL_UART_RxCpltCallback+0x150>)
 80161b0:	2200      	movs	r2, #0
 80161b2:	701a      	strb	r2, [r3, #0]
 80161b4:	e002      	b.n	80161bc <HAL_UART_RxCpltCallback+0xf4>
            else
              Cmd_Received = 1;
 80161b6:	4b18      	ldr	r3, [pc, #96]	@ (8016218 <HAL_UART_RxCpltCallback+0x150>)
 80161b8:	2201      	movs	r2, #1
 80161ba:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;      // initializing index
 80161bc:	4b0f      	ldr	r3, [pc, #60]	@ (80161fc <HAL_UART_RxCpltCallback+0x134>)
 80161be:	2200      	movs	r2, #0
 80161c0:	801a      	strh	r2, [r3, #0]
            if (rxIndex >= RING_BUFFER_SIZE) {
                rxIndex = 0; // Preventing buffer overflow
            }
        }
    }
}
 80161c2:	e010      	b.n	80161e6 <HAL_UART_RxCpltCallback+0x11e>
            receivedString[rxIndex++] = data;
 80161c4:	4b0d      	ldr	r3, [pc, #52]	@ (80161fc <HAL_UART_RxCpltCallback+0x134>)
 80161c6:	881b      	ldrh	r3, [r3, #0]
 80161c8:	1c5a      	adds	r2, r3, #1
 80161ca:	b291      	uxth	r1, r2
 80161cc:	4a0b      	ldr	r2, [pc, #44]	@ (80161fc <HAL_UART_RxCpltCallback+0x134>)
 80161ce:	8011      	strh	r1, [r2, #0]
 80161d0:	4619      	mov	r1, r3
 80161d2:	4a0b      	ldr	r2, [pc, #44]	@ (8016200 <HAL_UART_RxCpltCallback+0x138>)
 80161d4:	7bfb      	ldrb	r3, [r7, #15]
 80161d6:	5453      	strb	r3, [r2, r1]
            if (rxIndex >= RING_BUFFER_SIZE) {
 80161d8:	4b08      	ldr	r3, [pc, #32]	@ (80161fc <HAL_UART_RxCpltCallback+0x134>)
 80161da:	881b      	ldrh	r3, [r3, #0]
 80161dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80161de:	d902      	bls.n	80161e6 <HAL_UART_RxCpltCallback+0x11e>
                rxIndex = 0; // Preventing buffer overflow
 80161e0:	4b06      	ldr	r3, [pc, #24]	@ (80161fc <HAL_UART_RxCpltCallback+0x134>)
 80161e2:	2200      	movs	r2, #0
 80161e4:	801a      	strh	r2, [r3, #0]
}
 80161e6:	bf00      	nop
 80161e8:	3710      	adds	r7, #16
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bdb0      	pop	{r4, r5, r7, pc}
 80161ee:	bf00      	nop
 80161f0:	40004800 	.word	0x40004800
 80161f4:	2000894c 	.word	0x2000894c
 80161f8:	20000488 	.word	0x20000488
 80161fc:	20008a50 	.word	0x20008a50
 8016200:	200089d0 	.word	0x200089d0
 8016204:	20008a54 	.word	0x20008a54
 8016208:	20008ad8 	.word	0x20008ad8
 801620c:	20008ad4 	.word	0x20008ad4
 8016210:	0801e298 	.word	0x0801e298
 8016214:	42c80000 	.word	0x42c80000
 8016218:	20008adc 	.word	0x20008adc

0801621c <LED_Init>:
#include "bq34z100.h"
#include "buzzer.h"


void LED_Init(void)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
  uint8_t shift = 0;
 8016222:	2300      	movs	r3, #0
 8016224:	73fb      	strb	r3, [r7, #15]
  uint16_t led_port = 0;
 8016226:	2300      	movs	r3, #0
 8016228:	80fb      	strh	r3, [r7, #6]

   for(int i=0; i<14; i++)
 801622a:	2300      	movs	r3, #0
 801622c:	60bb      	str	r3, [r7, #8]
 801622e:	e010      	b.n	8016252 <LED_Init+0x36>
  {
    led_port = 0x0001 << shift;
 8016230:	7bfb      	ldrb	r3, [r7, #15]
 8016232:	2201      	movs	r2, #1
 8016234:	fa02 f303 	lsl.w	r3, r2, r3
 8016238:	80fb      	strh	r3, [r7, #6]

    HAL_GPIO_WritePin(GPIOF, (uint16_t)led_port, GPIO_PIN_SET);
 801623a:	88fb      	ldrh	r3, [r7, #6]
 801623c:	2201      	movs	r2, #1
 801623e:	4619      	mov	r1, r3
 8016240:	4808      	ldr	r0, [pc, #32]	@ (8016264 <LED_Init+0x48>)
 8016242:	f7ee f98d 	bl	8004560 <HAL_GPIO_WritePin>
    shift++;
 8016246:	7bfb      	ldrb	r3, [r7, #15]
 8016248:	3301      	adds	r3, #1
 801624a:	73fb      	strb	r3, [r7, #15]
   for(int i=0; i<14; i++)
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	3301      	adds	r3, #1
 8016250:	60bb      	str	r3, [r7, #8]
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	2b0d      	cmp	r3, #13
 8016256:	ddeb      	ble.n	8016230 <LED_Init+0x14>
  }
}
 8016258:	bf00      	nop
 801625a:	bf00      	nop
 801625c:	3710      	adds	r7, #16
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	40021400 	.word	0x40021400

08016268 <Display_Temp_LED>:

}


void Display_Temp_LED(void)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	af00      	add	r7, sp, #0

  if(Console_Status.Temp_Range == 3)  //i2c_error
 801626c:	4b1e      	ldr	r3, [pc, #120]	@ (80162e8 <Display_Temp_LED+0x80>)
 801626e:	7a1b      	ldrb	r3, [r3, #8]
 8016270:	2b03      	cmp	r3, #3
 8016272:	d10a      	bne.n	801628a <Display_Temp_LED+0x22>
  {
    HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
 8016274:	2200      	movs	r2, #0
 8016276:	2101      	movs	r1, #1
 8016278:	481c      	ldr	r0, [pc, #112]	@ (80162ec <Display_Temp_LED+0x84>)
 801627a:	f7ee f971 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, SET);
 801627e:	2201      	movs	r2, #1
 8016280:	2102      	movs	r1, #2
 8016282:	481a      	ldr	r0, [pc, #104]	@ (80162ec <Display_Temp_LED+0x84>)
 8016284:	f7ee f96c 	bl	8004560 <HAL_GPIO_WritePin>
  {
    HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
    HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, RESET);
  }

}
 8016288:	e02b      	b.n	80162e2 <Display_Temp_LED+0x7a>
  else if(Console_Status.Temp_Range == 0)  //Normal -> GRN
 801628a:	4b17      	ldr	r3, [pc, #92]	@ (80162e8 <Display_Temp_LED+0x80>)
 801628c:	7a1b      	ldrb	r3, [r3, #8]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d10a      	bne.n	80162a8 <Display_Temp_LED+0x40>
    HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, SET);
 8016292:	2201      	movs	r2, #1
 8016294:	2101      	movs	r1, #1
 8016296:	4815      	ldr	r0, [pc, #84]	@ (80162ec <Display_Temp_LED+0x84>)
 8016298:	f7ee f962 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, RESET);
 801629c:	2200      	movs	r2, #0
 801629e:	2102      	movs	r1, #2
 80162a0:	4812      	ldr	r0, [pc, #72]	@ (80162ec <Display_Temp_LED+0x84>)
 80162a2:	f7ee f95d 	bl	8004560 <HAL_GPIO_WritePin>
}
 80162a6:	e01c      	b.n	80162e2 <Display_Temp_LED+0x7a>
  else if(Console_Status.Temp_Range == 1) //Danger -> RED
 80162a8:	4b0f      	ldr	r3, [pc, #60]	@ (80162e8 <Display_Temp_LED+0x80>)
 80162aa:	7a1b      	ldrb	r3, [r3, #8]
 80162ac:	2b01      	cmp	r3, #1
 80162ae:	d10a      	bne.n	80162c6 <Display_Temp_LED+0x5e>
    HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
 80162b0:	2200      	movs	r2, #0
 80162b2:	2101      	movs	r1, #1
 80162b4:	480d      	ldr	r0, [pc, #52]	@ (80162ec <Display_Temp_LED+0x84>)
 80162b6:	f7ee f953 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, SET);
 80162ba:	2201      	movs	r2, #1
 80162bc:	2102      	movs	r1, #2
 80162be:	480b      	ldr	r0, [pc, #44]	@ (80162ec <Display_Temp_LED+0x84>)
 80162c0:	f7ee f94e 	bl	8004560 <HAL_GPIO_WritePin>
}
 80162c4:	e00d      	b.n	80162e2 <Display_Temp_LED+0x7a>
  else if(Console_Status.Temp_Range == 2) //Warning -> YEL
 80162c6:	4b08      	ldr	r3, [pc, #32]	@ (80162e8 <Display_Temp_LED+0x80>)
 80162c8:	7a1b      	ldrb	r3, [r3, #8]
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d109      	bne.n	80162e2 <Display_Temp_LED+0x7a>
    HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
 80162ce:	2200      	movs	r2, #0
 80162d0:	2101      	movs	r1, #1
 80162d2:	4806      	ldr	r0, [pc, #24]	@ (80162ec <Display_Temp_LED+0x84>)
 80162d4:	f7ee f944 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, RESET);
 80162d8:	2200      	movs	r2, #0
 80162da:	2102      	movs	r1, #2
 80162dc:	4803      	ldr	r0, [pc, #12]	@ (80162ec <Display_Temp_LED+0x84>)
 80162de:	f7ee f93f 	bl	8004560 <HAL_GPIO_WritePin>
}
 80162e2:	bf00      	nop
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	2000893c 	.word	0x2000893c
 80162ec:	40021400 	.word	0x40021400

080162f0 <Display_FAN1_LED>:

void Display_FAN1_LED(void)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	af00      	add	r7, sp, #0
   if(Console_Status.Temp_Range == 0)  //Normal -> GRN
 80162f4:	4b16      	ldr	r3, [pc, #88]	@ (8016350 <Display_FAN1_LED+0x60>)
 80162f6:	7a1b      	ldrb	r3, [r3, #8]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d10a      	bne.n	8016312 <Display_FAN1_LED+0x22>
   {
     HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, SET);
 80162fc:	2201      	movs	r2, #1
 80162fe:	2101      	movs	r1, #1
 8016300:	4814      	ldr	r0, [pc, #80]	@ (8016354 <Display_FAN1_LED+0x64>)
 8016302:	f7ee f92d 	bl	8004560 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, RESET);
 8016306:	2200      	movs	r2, #0
 8016308:	2102      	movs	r1, #2
 801630a:	4812      	ldr	r0, [pc, #72]	@ (8016354 <Display_FAN1_LED+0x64>)
 801630c:	f7ee f928 	bl	8004560 <HAL_GPIO_WritePin>
   {
     HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
     HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, RESET);
   }

}
 8016310:	e01c      	b.n	801634c <Display_FAN1_LED+0x5c>
   else if(Console_Status.Temp_Range == 1) //Danger -> RED
 8016312:	4b0f      	ldr	r3, [pc, #60]	@ (8016350 <Display_FAN1_LED+0x60>)
 8016314:	7a1b      	ldrb	r3, [r3, #8]
 8016316:	2b01      	cmp	r3, #1
 8016318:	d10a      	bne.n	8016330 <Display_FAN1_LED+0x40>
     HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
 801631a:	2200      	movs	r2, #0
 801631c:	2101      	movs	r1, #1
 801631e:	480d      	ldr	r0, [pc, #52]	@ (8016354 <Display_FAN1_LED+0x64>)
 8016320:	f7ee f91e 	bl	8004560 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, SET);
 8016324:	2201      	movs	r2, #1
 8016326:	2102      	movs	r1, #2
 8016328:	480a      	ldr	r0, [pc, #40]	@ (8016354 <Display_FAN1_LED+0x64>)
 801632a:	f7ee f919 	bl	8004560 <HAL_GPIO_WritePin>
}
 801632e:	e00d      	b.n	801634c <Display_FAN1_LED+0x5c>
   else if(Console_Status.Temp_Range == 2) //Warning -> YEL
 8016330:	4b07      	ldr	r3, [pc, #28]	@ (8016350 <Display_FAN1_LED+0x60>)
 8016332:	7a1b      	ldrb	r3, [r3, #8]
 8016334:	2b02      	cmp	r3, #2
 8016336:	d109      	bne.n	801634c <Display_FAN1_LED+0x5c>
     HAL_GPIO_WritePin(LED_TEMP_R_GPIO_Port, LED_TEMP_R_Pin, RESET);
 8016338:	2200      	movs	r2, #0
 801633a:	2101      	movs	r1, #1
 801633c:	4805      	ldr	r0, [pc, #20]	@ (8016354 <Display_FAN1_LED+0x64>)
 801633e:	f7ee f90f 	bl	8004560 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LED_TEMP_G_GPIO_Port, LED_TEMP_G_Pin, RESET);
 8016342:	2200      	movs	r2, #0
 8016344:	2102      	movs	r1, #2
 8016346:	4803      	ldr	r0, [pc, #12]	@ (8016354 <Display_FAN1_LED+0x64>)
 8016348:	f7ee f90a 	bl	8004560 <HAL_GPIO_WritePin>
}
 801634c:	bf00      	nop
 801634e:	bd80      	pop	{r7, pc}
 8016350:	2000893c 	.word	0x2000893c
 8016354:	40021400 	.word	0x40021400

08016358 <Display_DP_LED>:
//    HAL_GPIO_WritePin(LED_PSU_G_GPIO_Port, LED_PSU_G_Pin, RESET);
//  }
//}

void Display_DP_LED(void)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	af00      	add	r7, sp, #0
  //DP1 LED
  if(Console_Status.DP1 == 0)       //DP1 Pwr On -> ON
 801635c:	4b20      	ldr	r3, [pc, #128]	@ (80163e0 <Display_DP_LED+0x88>)
 801635e:	7a9b      	ldrb	r3, [r3, #10]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d106      	bne.n	8016372 <Display_DP_LED+0x1a>
  {
    HAL_GPIO_WritePin(LED_DP1_G_GPIO_Port, LED_DP1_G_Pin, RESET);
 8016364:	2200      	movs	r2, #0
 8016366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801636a:	481e      	ldr	r0, [pc, #120]	@ (80163e4 <Display_DP_LED+0x8c>)
 801636c:	f7ee f8f8 	bl	8004560 <HAL_GPIO_WritePin>
 8016370:	e009      	b.n	8016386 <Display_DP_LED+0x2e>
  }
  else if(Console_Status.DP1 == 1)  //DP1 Pwr Off -> OFF
 8016372:	4b1b      	ldr	r3, [pc, #108]	@ (80163e0 <Display_DP_LED+0x88>)
 8016374:	7a9b      	ldrb	r3, [r3, #10]
 8016376:	2b01      	cmp	r3, #1
 8016378:	d105      	bne.n	8016386 <Display_DP_LED+0x2e>
  {
    HAL_GPIO_WritePin(LED_DP1_G_GPIO_Port, LED_DP1_G_Pin, SET);
 801637a:	2201      	movs	r2, #1
 801637c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016380:	4818      	ldr	r0, [pc, #96]	@ (80163e4 <Display_DP_LED+0x8c>)
 8016382:	f7ee f8ed 	bl	8004560 <HAL_GPIO_WritePin>
  }

  //DP2 LED
  if(Console_Status.DP2 == 0)       //DP2 Pwr On -> ON
 8016386:	4b16      	ldr	r3, [pc, #88]	@ (80163e0 <Display_DP_LED+0x88>)
 8016388:	7adb      	ldrb	r3, [r3, #11]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d106      	bne.n	801639c <Display_DP_LED+0x44>
  {
    HAL_GPIO_WritePin(LED_DP2_G_GPIO_Port, LED_DP2_G_Pin, RESET);
 801638e:	2200      	movs	r2, #0
 8016390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8016394:	4813      	ldr	r0, [pc, #76]	@ (80163e4 <Display_DP_LED+0x8c>)
 8016396:	f7ee f8e3 	bl	8004560 <HAL_GPIO_WritePin>
 801639a:	e009      	b.n	80163b0 <Display_DP_LED+0x58>
  }
  else if(Console_Status.DP2 == 1)  //DP2 Pwr Off -> OFF
 801639c:	4b10      	ldr	r3, [pc, #64]	@ (80163e0 <Display_DP_LED+0x88>)
 801639e:	7adb      	ldrb	r3, [r3, #11]
 80163a0:	2b01      	cmp	r3, #1
 80163a2:	d105      	bne.n	80163b0 <Display_DP_LED+0x58>
  {
    HAL_GPIO_WritePin(LED_DP2_G_GPIO_Port, LED_DP2_G_Pin, SET);
 80163a4:	2201      	movs	r2, #1
 80163a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80163aa:	480e      	ldr	r0, [pc, #56]	@ (80163e4 <Display_DP_LED+0x8c>)
 80163ac:	f7ee f8d8 	bl	8004560 <HAL_GPIO_WritePin>
  }

  //DP3 LED
  if(Console_Status.DP3 == 0)       //DP3 Pwr On -> ON
 80163b0:	4b0b      	ldr	r3, [pc, #44]	@ (80163e0 <Display_DP_LED+0x88>)
 80163b2:	7b1b      	ldrb	r3, [r3, #12]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d106      	bne.n	80163c6 <Display_DP_LED+0x6e>
  {
    HAL_GPIO_WritePin(LED_DP3_G_GPIO_Port, LED_DP3_G_Pin, RESET);
 80163b8:	2200      	movs	r2, #0
 80163ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80163be:	4809      	ldr	r0, [pc, #36]	@ (80163e4 <Display_DP_LED+0x8c>)
 80163c0:	f7ee f8ce 	bl	8004560 <HAL_GPIO_WritePin>
  }
  else if(Console_Status.DP3 == 1)  //DP3 Pwr Off -> OFF
  {
    HAL_GPIO_WritePin(LED_DP3_G_GPIO_Port, LED_DP3_G_Pin, SET);
  }
}
 80163c4:	e009      	b.n	80163da <Display_DP_LED+0x82>
  else if(Console_Status.DP3 == 1)  //DP3 Pwr Off -> OFF
 80163c6:	4b06      	ldr	r3, [pc, #24]	@ (80163e0 <Display_DP_LED+0x88>)
 80163c8:	7b1b      	ldrb	r3, [r3, #12]
 80163ca:	2b01      	cmp	r3, #1
 80163cc:	d105      	bne.n	80163da <Display_DP_LED+0x82>
    HAL_GPIO_WritePin(LED_DP3_G_GPIO_Port, LED_DP3_G_Pin, SET);
 80163ce:	2201      	movs	r2, #1
 80163d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80163d4:	4803      	ldr	r0, [pc, #12]	@ (80163e4 <Display_DP_LED+0x8c>)
 80163d6:	f7ee f8c3 	bl	8004560 <HAL_GPIO_WritePin>
}
 80163da:	bf00      	nop
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	2000893c 	.word	0x2000893c
 80163e4:	40021400 	.word	0x40021400

080163e8 <Alarm_MineDet_BUZ>:

void Alarm_MineDet_BUZ(void)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	af00      	add	r7, sp, #0
   if(MineDet_Num == 0) {
 80163ec:	4b08      	ldr	r3, [pc, #32]	@ (8016410 <Alarm_MineDet_BUZ+0x28>)
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d105      	bne.n	8016400 <Alarm_MineDet_BUZ+0x18>
     //Buzzer_Off();
     HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, RESET);
 80163f4:	2200      	movs	r2, #0
 80163f6:	2108      	movs	r1, #8
 80163f8:	4806      	ldr	r0, [pc, #24]	@ (8016414 <Alarm_MineDet_BUZ+0x2c>)
 80163fa:	f7ee f8b1 	bl	8004560 <HAL_GPIO_WritePin>
   }
   else {
     //Buzzer_On();
     HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, SET);
   }
}
 80163fe:	e004      	b.n	801640a <Alarm_MineDet_BUZ+0x22>
     HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, SET);
 8016400:	2201      	movs	r2, #1
 8016402:	2108      	movs	r1, #8
 8016404:	4803      	ldr	r0, [pc, #12]	@ (8016414 <Alarm_MineDet_BUZ+0x2c>)
 8016406:	f7ee f8ab 	bl	8004560 <HAL_GPIO_WritePin>
}
 801640a:	bf00      	nop
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	20008939 	.word	0x20008939
 8016414:	40020000 	.word	0x40020000

08016418 <Display_Charger_LED>:

void Display_Charger_LED(void)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	af00      	add	r7, sp, #0
  //Charger LED
  if(Console_Status.Charger == 0)       //Charger Normal -> GRN
 801641c:	4b11      	ldr	r3, [pc, #68]	@ (8016464 <Display_Charger_LED+0x4c>)
 801641e:	7b9b      	ldrb	r3, [r3, #14]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10c      	bne.n	801643e <Display_Charger_LED+0x26>
  {
    HAL_GPIO_WritePin(LED_CHG_R_GPIO_Port, LED_CHG_R_Pin, SET);
 8016424:	2201      	movs	r2, #1
 8016426:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801642a:	480f      	ldr	r0, [pc, #60]	@ (8016468 <Display_Charger_LED+0x50>)
 801642c:	f7ee f898 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_CHG_G_GPIO_Port, LED_CHG_G_Pin, RESET);
 8016430:	2200      	movs	r2, #0
 8016432:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8016436:	480c      	ldr	r0, [pc, #48]	@ (8016468 <Display_Charger_LED+0x50>)
 8016438:	f7ee f892 	bl	8004560 <HAL_GPIO_WritePin>
  else if(Console_Status.Charger == 1)  //Charger Abnormal -> RED
  {
    HAL_GPIO_WritePin(LED_CHG_R_GPIO_Port, LED_CHG_R_Pin, RESET);
    HAL_GPIO_WritePin(LED_CHG_G_GPIO_Port, LED_CHG_G_Pin, SET);
  }
}
 801643c:	e00f      	b.n	801645e <Display_Charger_LED+0x46>
  else if(Console_Status.Charger == 1)  //Charger Abnormal -> RED
 801643e:	4b09      	ldr	r3, [pc, #36]	@ (8016464 <Display_Charger_LED+0x4c>)
 8016440:	7b9b      	ldrb	r3, [r3, #14]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d10b      	bne.n	801645e <Display_Charger_LED+0x46>
    HAL_GPIO_WritePin(LED_CHG_R_GPIO_Port, LED_CHG_R_Pin, RESET);
 8016446:	2200      	movs	r2, #0
 8016448:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801644c:	4806      	ldr	r0, [pc, #24]	@ (8016468 <Display_Charger_LED+0x50>)
 801644e:	f7ee f887 	bl	8004560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_CHG_G_GPIO_Port, LED_CHG_G_Pin, SET);
 8016452:	2201      	movs	r2, #1
 8016454:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8016458:	4803      	ldr	r0, [pc, #12]	@ (8016468 <Display_Charger_LED+0x50>)
 801645a:	f7ee f881 	bl	8004560 <HAL_GPIO_WritePin>
}
 801645e:	bf00      	nop
 8016460:	bd80      	pop	{r7, pc}
 8016462:	bf00      	nop
 8016464:	2000893c 	.word	0x2000893c
 8016468:	40021400 	.word	0x40021400

0801646c <Display_SOC_7SEG>:

void Display_SOC_7SEG(void)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0


  uint16_t num;

  num = (uint16_t)Bat.SOC_Val;
 8016472:	4b09      	ldr	r3, [pc, #36]	@ (8016498 <Display_SOC_7SEG+0x2c>)
 8016474:	881b      	ldrh	r3, [r3, #0]
 8016476:	80fb      	strh	r3, [r7, #6]

   if(num > 100) {
 8016478:	88fb      	ldrh	r3, [r7, #6]
 801647a:	2b64      	cmp	r3, #100	@ 0x64
 801647c:	d903      	bls.n	8016486 <Display_SOC_7SEG+0x1a>
    Display_3Digit("Err");
 801647e:	4807      	ldr	r0, [pc, #28]	@ (801649c <Display_SOC_7SEG+0x30>)
 8016480:	f7f4 fa28 	bl	800a8d4 <Display_3Digit>
  }
  else {
    Display_Number(num);
  }
}
 8016484:	e003      	b.n	801648e <Display_SOC_7SEG+0x22>
    Display_Number(num);
 8016486:	88fb      	ldrh	r3, [r7, #6]
 8016488:	4618      	mov	r0, r3
 801648a:	f7f4 fa4f 	bl	800a92c <Display_Number>
}
 801648e:	bf00      	nop
 8016490:	3708      	adds	r7, #8
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
 8016496:	bf00      	nop
 8016498:	200050fc 	.word	0x200050fc
 801649c:	0801e2b4 	.word	0x0801e2b4

080164a0 <Print_Read_Status>:

void Print_Read_Status(void)
{
 80164a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a4:	b084      	sub	sp, #16
 80164a6:	af04      	add	r7, sp, #16
  //printf("PSU(%d %d) : ", PSU_Status1, PSU_Status2);
  printf("DP(%d %d %d) : ", DP_Status1, DP_Status2, DP_Status3);
 80164a8:	4b20      	ldr	r3, [pc, #128]	@ (801652c <Print_Read_Status+0x8c>)
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	4619      	mov	r1, r3
 80164ae:	4b20      	ldr	r3, [pc, #128]	@ (8016530 <Print_Read_Status+0x90>)
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	461a      	mov	r2, r3
 80164b4:	4b1f      	ldr	r3, [pc, #124]	@ (8016534 <Print_Read_Status+0x94>)
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	481f      	ldr	r0, [pc, #124]	@ (8016538 <Print_Read_Status+0x98>)
 80164ba:	f001 fed7 	bl	801826c <iprintf>
  printf("Buz(%d) : ", MineDet_Num);
 80164be:	4b1f      	ldr	r3, [pc, #124]	@ (801653c <Print_Read_Status+0x9c>)
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	4619      	mov	r1, r3
 80164c4:	481e      	ldr	r0, [pc, #120]	@ (8016540 <Print_Read_Status+0xa0>)
 80164c6:	f001 fed1 	bl	801826c <iprintf>
  printf("CHG(%d) ", Charger);
 80164ca:	4b1e      	ldr	r3, [pc, #120]	@ (8016544 <Print_Read_Status+0xa4>)
 80164cc:	781b      	ldrb	r3, [r3, #0]
 80164ce:	4619      	mov	r1, r3
 80164d0:	481d      	ldr	r0, [pc, #116]	@ (8016548 <Print_Read_Status+0xa8>)
 80164d2:	f001 fecb 	bl	801826c <iprintf>

  printf("bat: SOC=%d%% V=%dmV AI=%dmA  CC=%dcount IT=%.1fC\n", \
         (uint8_t)Bat.SOC_Val, Bat.Voltage, Bat.AvgCurrent, Bat.CycleCount, Bat.InternalTemp);
 80164d6:	4b1d      	ldr	r3, [pc, #116]	@ (801654c <Print_Read_Status+0xac>)
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	b2db      	uxtb	r3, r3
  printf("bat: SOC=%d%% V=%dmV AI=%dmA  CC=%dcount IT=%.1fC\n", \
 80164dc:	461d      	mov	r5, r3
         (uint8_t)Bat.SOC_Val, Bat.Voltage, Bat.AvgCurrent, Bat.CycleCount, Bat.InternalTemp);
 80164de:	4b1b      	ldr	r3, [pc, #108]	@ (801654c <Print_Read_Status+0xac>)
 80164e0:	885b      	ldrh	r3, [r3, #2]
  printf("bat: SOC=%d%% V=%dmV AI=%dmA  CC=%dcount IT=%.1fC\n", \
 80164e2:	461e      	mov	r6, r3
         (uint8_t)Bat.SOC_Val, Bat.Voltage, Bat.AvgCurrent, Bat.CycleCount, Bat.InternalTemp);
 80164e4:	4b19      	ldr	r3, [pc, #100]	@ (801654c <Print_Read_Status+0xac>)
 80164e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  printf("bat: SOC=%d%% V=%dmV AI=%dmA  CC=%dcount IT=%.1fC\n", \
 80164ea:	4698      	mov	r8, r3
         (uint8_t)Bat.SOC_Val, Bat.Voltage, Bat.AvgCurrent, Bat.CycleCount, Bat.InternalTemp);
 80164ec:	4b17      	ldr	r3, [pc, #92]	@ (801654c <Print_Read_Status+0xac>)
 80164ee:	88db      	ldrh	r3, [r3, #6]
  printf("bat: SOC=%d%% V=%dmV AI=%dmA  CC=%dcount IT=%.1fC\n", \
 80164f0:	461c      	mov	r4, r3
         (uint8_t)Bat.SOC_Val, Bat.Voltage, Bat.AvgCurrent, Bat.CycleCount, Bat.InternalTemp);
 80164f2:	4b16      	ldr	r3, [pc, #88]	@ (801654c <Print_Read_Status+0xac>)
 80164f4:	689b      	ldr	r3, [r3, #8]
  printf("bat: SOC=%d%% V=%dmV AI=%dmA  CC=%dcount IT=%.1fC\n", \
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7ea f836 	bl	8000568 <__aeabi_f2d>
 80164fc:	4602      	mov	r2, r0
 80164fe:	460b      	mov	r3, r1
 8016500:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016504:	9400      	str	r4, [sp, #0]
 8016506:	4643      	mov	r3, r8
 8016508:	4632      	mov	r2, r6
 801650a:	4629      	mov	r1, r5
 801650c:	4810      	ldr	r0, [pc, #64]	@ (8016550 <Print_Read_Status+0xb0>)
 801650e:	f001 fead 	bl	801826c <iprintf>

  printf("MineDet(%d) : ", MineDet_Num);
 8016512:	4b0a      	ldr	r3, [pc, #40]	@ (801653c <Print_Read_Status+0x9c>)
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	4619      	mov	r1, r3
 8016518:	480e      	ldr	r0, [pc, #56]	@ (8016554 <Print_Read_Status+0xb4>)
 801651a:	f001 fea7 	bl	801826c <iprintf>

  printf("\n");
 801651e:	200a      	movs	r0, #10
 8016520:	f001 feb6 	bl	8018290 <putchar>

}
 8016524:	bf00      	nop
 8016526:	46bd      	mov	sp, r7
 8016528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801652c:	20008936 	.word	0x20008936
 8016530:	20008937 	.word	0x20008937
 8016534:	20008938 	.word	0x20008938
 8016538:	0801e2b8 	.word	0x0801e2b8
 801653c:	20008939 	.word	0x20008939
 8016540:	0801e2c8 	.word	0x0801e2c8
 8016544:	2000893a 	.word	0x2000893a
 8016548:	0801e2d4 	.word	0x0801e2d4
 801654c:	200050fc 	.word	0x200050fc
 8016550:	0801e2e0 	.word	0x0801e2e0
 8016554:	0801e314 	.word	0x0801e314

08016558 <Process_Init>:

static void Collect_Portable_Status(void);
static void Display_Portable_LED(void);

void Process_Init(void)
{
 8016558:	b480      	push	{r7}
 801655a:	af00      	add	r7, sp, #0
  collect_stamp_100ms = 0;
 801655c:	4b09      	ldr	r3, [pc, #36]	@ (8016584 <Process_Init+0x2c>)
 801655e:	2200      	movs	r2, #0
 8016560:	601a      	str	r2, [r3, #0]
  collect_stamp_500ms = 0;
 8016562:	4b09      	ldr	r3, [pc, #36]	@ (8016588 <Process_Init+0x30>)
 8016564:	2200      	movs	r2, #0
 8016566:	601a      	str	r2, [r3, #0]
  collect_stamp_1sec = 0;
 8016568:	4b08      	ldr	r3, [pc, #32]	@ (801658c <Process_Init+0x34>)
 801656a:	2200      	movs	r2, #0
 801656c:	601a      	str	r2, [r3, #0]
  display_stamp_1sec = 0;
 801656e:	4b08      	ldr	r3, [pc, #32]	@ (8016590 <Process_Init+0x38>)
 8016570:	2200      	movs	r2, #0
 8016572:	601a      	str	r2, [r3, #0]
  send_stamp_1sec = 0;
 8016574:	4b07      	ldr	r3, [pc, #28]	@ (8016594 <Process_Init+0x3c>)
 8016576:	2200      	movs	r2, #0
 8016578:	601a      	str	r2, [r3, #0]
}
 801657a:	bf00      	nop
 801657c:	46bd      	mov	sp, r7
 801657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016582:	4770      	bx	lr
 8016584:	20008ae0 	.word	0x20008ae0
 8016588:	20008ae4 	.word	0x20008ae4
 801658c:	20008ae8 	.word	0x20008ae8
 8016590:	20008aec 	.word	0x20008aec
 8016594:	20008af0 	.word	0x20008af0

08016598 <Process_Portable_Status>:

void Process_Portable_Status(void)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	af00      	add	r7, sp, #0
  //Ethernet UDP Server
  ethernetif_input(&gnetif);
 801659c:	4813      	ldr	r0, [pc, #76]	@ (80165ec <Process_Portable_Status+0x54>)
 801659e:	f7f3 f953 	bl	8009848 <ethernetif_input>
  sys_check_timeouts();
 80165a2:	f7fb fd43 	bl	801202c <sys_check_timeouts>

  Read_FAN_Status();
 80165a6:	f7ff fb05 	bl	8015bb4 <Read_FAN_Status>

  if (fan_done == 1 && (mills() - collect_stamp_1sec >= 1000))
 80165aa:	4b11      	ldr	r3, [pc, #68]	@ (80165f0 <Process_Portable_Status+0x58>)
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	2b01      	cmp	r3, #1
 80165b0:	d116      	bne.n	80165e0 <Process_Portable_Status+0x48>
 80165b2:	f000 f9f1 	bl	8016998 <HAL_GetTick>
 80165b6:	4602      	mov	r2, r0
 80165b8:	4b0e      	ldr	r3, [pc, #56]	@ (80165f4 <Process_Portable_Status+0x5c>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80165c2:	d30d      	bcc.n	80165e0 <Process_Portable_Status+0x48>
  {
    Collect_Portable_Status();
 80165c4:	f000 f81a 	bl	80165fc <Collect_Portable_Status>
    Display_Portable_LED();
 80165c8:	f000 f834 	bl	8016634 <Display_Portable_LED>
    Send_Portable_Status();
 80165cc:	f000 f84a 	bl	8016664 <Send_Portable_Status>

    fan_done = 0;
 80165d0:	4b07      	ldr	r3, [pc, #28]	@ (80165f0 <Process_Portable_Status+0x58>)
 80165d2:	2200      	movs	r2, #0
 80165d4:	701a      	strb	r2, [r3, #0]
    collect_stamp_1sec = mills();
 80165d6:	f000 f9df 	bl	8016998 <HAL_GetTick>
 80165da:	4603      	mov	r3, r0
 80165dc:	4a05      	ldr	r2, [pc, #20]	@ (80165f4 <Process_Portable_Status+0x5c>)
 80165de:	6013      	str	r3, [r2, #0]
  }

  Control_Fan(&Console_Status);
 80165e0:	4805      	ldr	r0, [pc, #20]	@ (80165f8 <Process_Portable_Status+0x60>)
 80165e2:	f7f3 ffc3 	bl	800a56c <Control_Fan>
}
 80165e6:	bf00      	nop
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	200004d4 	.word	0x200004d4
 80165f0:	2000514a 	.word	0x2000514a
 80165f4:	20008ae8 	.word	0x20008ae8
 80165f8:	2000893c 	.word	0x2000893c

080165fc <Collect_Portable_Status>:


static void Collect_Portable_Status(void)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	af00      	add	r7, sp, #0
  Read_Temp_Value();
 8016600:	f7ff faac 	bl	8015b5c <Read_Temp_Value>
  //Read_PSU_Status();
  Read_DP_Status();
 8016604:	f7ff faea 	bl	8015bdc <Read_DP_Status>
  Read_MineDet_Number();
 8016608:	f7ff fb0c 	bl	8015c24 <Read_MineDet_Number>
  Read_Charger_Status();
 801660c:	f7ff fb16 	bl	8015c3c <Read_Charger_Status>
  Read_BAT_Status();
 8016610:	f7ff fb24 	bl	8015c5c <Read_BAT_Status>
  Read_BUZ_Status();
 8016614:	f7ff fb50 	bl	8015cb8 <Read_BUZ_Status>

  Store_Portable_Status();
 8016618:	f7ff fc7a 	bl	8015f10 <Store_Portable_Status>
  UDP_Make_StatusPacket();
 801661c:	f000 f89a 	bl	8016754 <UDP_Make_StatusPacket>


  //----------------------------------------------------
  HAL_GPIO_TogglePin(LD3_RED_GPIO_Port, LD3_RED_Pin);
 8016620:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016624:	4802      	ldr	r0, [pc, #8]	@ (8016630 <Collect_Portable_Status+0x34>)
 8016626:	f7ed ffb4 	bl	8004592 <HAL_GPIO_TogglePin>

}
 801662a:	bf00      	nop
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	40020400 	.word	0x40020400

08016634 <Display_Portable_LED>:


static void Display_Portable_LED(void)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	af00      	add	r7, sp, #0
  Display_Temp_LED();
 8016638:	f7ff fe16 	bl	8016268 <Display_Temp_LED>
  Display_FAN1_LED();
 801663c:	f7ff fe58 	bl	80162f0 <Display_FAN1_LED>
  //Display_FAN2_LED();
  //Display_PSU_LED();
  Display_DP_LED();
 8016640:	f7ff fe8a 	bl	8016358 <Display_DP_LED>
  Display_Charger_LED();
 8016644:	f7ff fee8 	bl	8016418 <Display_Charger_LED>
  Alarm_MineDet_BUZ();
 8016648:	f7ff fece 	bl	80163e8 <Alarm_MineDet_BUZ>
  Display_SOC_7SEG();
 801664c:	f7ff ff0e 	bl	801646c <Display_SOC_7SEG>

  Print_Portable_Status();
 8016650:	f7ff fcda 	bl	8016008 <Print_Portable_Status>

   //----------------------------------------------------

  HAL_GPIO_TogglePin(LD2_BLU_GPIO_Port, LD2_BLU_Pin);
 8016654:	2180      	movs	r1, #128	@ 0x80
 8016656:	4802      	ldr	r0, [pc, #8]	@ (8016660 <Display_Portable_LED+0x2c>)
 8016658:	f7ed ff9b 	bl	8004592 <HAL_GPIO_TogglePin>
}
 801665c:	bf00      	nop
 801665e:	bd80      	pop	{r7, pc}
 8016660:	40020400 	.word	0x40020400

08016664 <Send_Portable_Status>:
#include "send.h"
#include "udp_protocol.h"
#include "udp_server.h"

void Send_Portable_Status(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	af00      	add	r7, sp, #0
	StatusCount++;
 8016668:	4b07      	ldr	r3, [pc, #28]	@ (8016688 <Send_Portable_Status+0x24>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	3301      	adds	r3, #1
 801666e:	4a06      	ldr	r2, [pc, #24]	@ (8016688 <Send_Portable_Status+0x24>)
 8016670:	6013      	str	r3, [r2, #0]
	UDP_Make_StatusPacket();
 8016672:	f000 f86f 	bl	8016754 <UDP_Make_StatusPacket>
	udp_send_multicast(&status);
 8016676:	4805      	ldr	r0, [pc, #20]	@ (801668c <Send_Portable_Status+0x28>)
 8016678:	f7f4 fb00 	bl	800ac7c <udp_send_multicast>
	print_status_packet(&status);
 801667c:	4803      	ldr	r0, [pc, #12]	@ (801668c <Send_Portable_Status+0x28>)
 801667e:	f000 f8e7 	bl	8016850 <print_status_packet>
}
 8016682:	bf00      	nop
 8016684:	bd80      	pop	{r7, pc}
 8016686:	bf00      	nop
 8016688:	20008b2c 	.word	0x20008b2c
 801668c:	20008b08 	.word	0x20008b08

08016690 <UDP_Protocol_Init>:
  status.Bat_IntTemp    = 0;
}


void UDP_Protocol_Init(void)
{
 8016690:	b480      	push	{r7}
 8016692:	af00      	add	r7, sp, #0
//  UDP_ReplyPacket_Init();
//  UDP_RequestPacket_Init();
//  UDP_StatusPacket_Init();
	StatusCount = 0;
 8016694:	4b05      	ldr	r3, [pc, #20]	@ (80166ac <UDP_Protocol_Init+0x1c>)
 8016696:	2200      	movs	r2, #0
 8016698:	601a      	str	r2, [r3, #0]
	ReplyCount = 0;
 801669a:	4b05      	ldr	r3, [pc, #20]	@ (80166b0 <UDP_Protocol_Init+0x20>)
 801669c:	2200      	movs	r2, #0
 801669e:	601a      	str	r2, [r3, #0]
}
 80166a0:	bf00      	nop
 80166a2:	46bd      	mov	sp, r7
 80166a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a8:	4770      	bx	lr
 80166aa:	bf00      	nop
 80166ac:	20008b2c 	.word	0x20008b2c
 80166b0:	20008b30 	.word	0x20008b30

080166b4 <UDP_GetFanStatus1>:

//Fan3, Fan2, Fan1
static uint8_t UDP_GetFanStatus1(void)
{
 80166b4:	b480      	push	{r7}
 80166b6:	b083      	sub	sp, #12
 80166b8:	af00      	add	r7, sp, #0
  uint8_t Fan_Status = 0;
 80166ba:	2300      	movs	r3, #0
 80166bc:	71fb      	strb	r3, [r7, #7]

  Fan_Status  =  FAN_Sense1 & 0x01;
 80166be:	4b0c      	ldr	r3, [pc, #48]	@ (80166f0 <UDP_GetFanStatus1+0x3c>)
 80166c0:	781b      	ldrb	r3, [r3, #0]
 80166c2:	f003 0301 	and.w	r3, r3, #1
 80166c6:	71fb      	strb	r3, [r7, #7]
  Fan_Status |= (FAN_Sense2 & 0x01) << 1;
 80166c8:	4b0a      	ldr	r3, [pc, #40]	@ (80166f4 <UDP_GetFanStatus1+0x40>)
 80166ca:	781b      	ldrb	r3, [r3, #0]
 80166cc:	005b      	lsls	r3, r3, #1
 80166ce:	b25b      	sxtb	r3, r3
 80166d0:	f003 0302 	and.w	r3, r3, #2
 80166d4:	b25a      	sxtb	r2, r3
 80166d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166da:	4313      	orrs	r3, r2
 80166dc:	b25b      	sxtb	r3, r3
 80166de:	71fb      	strb	r3, [r7, #7]

  return Fan_Status;
 80166e0:	79fb      	ldrb	r3, [r7, #7]
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	370c      	adds	r7, #12
 80166e6:	46bd      	mov	sp, r7
 80166e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ec:	4770      	bx	lr
 80166ee:	bf00      	nop
 80166f0:	20008934 	.word	0x20008934
 80166f4:	20008935 	.word	0x20008935

080166f8 <UDP_GetDPStatus>:
//
//  return PSUStatus;
//}

static uint8_t UDP_GetDPStatus(void)
{
 80166f8:	b480      	push	{r7}
 80166fa:	b083      	sub	sp, #12
 80166fc:	af00      	add	r7, sp, #0
  uint8_t DPStatus;

  DPStatus  =  DP_Status1 & 0x01;
 80166fe:	4b12      	ldr	r3, [pc, #72]	@ (8016748 <UDP_GetDPStatus+0x50>)
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	f003 0301 	and.w	r3, r3, #1
 8016706:	71fb      	strb	r3, [r7, #7]
  DPStatus |= (DP_Status2 & 0x01) << 1;
 8016708:	4b10      	ldr	r3, [pc, #64]	@ (801674c <UDP_GetDPStatus+0x54>)
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	005b      	lsls	r3, r3, #1
 801670e:	b25b      	sxtb	r3, r3
 8016710:	f003 0302 	and.w	r3, r3, #2
 8016714:	b25a      	sxtb	r2, r3
 8016716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801671a:	4313      	orrs	r3, r2
 801671c:	b25b      	sxtb	r3, r3
 801671e:	71fb      	strb	r3, [r7, #7]
  DPStatus |= (DP_Status3 & 0x01) << 2;
 8016720:	4b0b      	ldr	r3, [pc, #44]	@ (8016750 <UDP_GetDPStatus+0x58>)
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	009b      	lsls	r3, r3, #2
 8016726:	b25b      	sxtb	r3, r3
 8016728:	f003 0304 	and.w	r3, r3, #4
 801672c:	b25a      	sxtb	r2, r3
 801672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016732:	4313      	orrs	r3, r2
 8016734:	b25b      	sxtb	r3, r3
 8016736:	71fb      	strb	r3, [r7, #7]

  return DPStatus;
 8016738:	79fb      	ldrb	r3, [r7, #7]
}
 801673a:	4618      	mov	r0, r3
 801673c:	370c      	adds	r7, #12
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr
 8016746:	bf00      	nop
 8016748:	20008936 	.word	0x20008936
 801674c:	20008937 	.word	0x20008937
 8016750:	20008938 	.word	0x20008938

08016754 <UDP_Make_StatusPacket>:

void UDP_Make_StatusPacket(void)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	af00      	add	r7, sp, #0
  //Header
  status.Sender   = 0x01;
 8016758:	4b21      	ldr	r3, [pc, #132]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 801675a:	2201      	movs	r2, #1
 801675c:	701a      	strb	r2, [r3, #0]
  status.Receiver = 0x02;
 801675e:	4b20      	ldr	r3, [pc, #128]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016760:	2202      	movs	r2, #2
 8016762:	705a      	strb	r2, [r3, #1]
  status.Command  = ID_STATUS;
 8016764:	4b1e      	ldr	r3, [pc, #120]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016766:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801676a:	805a      	strh	r2, [r3, #2]
  status.Size     = sizeof(StatusPacket_t) - HEAD_SIZE;
 801676c:	4b1c      	ldr	r3, [pc, #112]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 801676e:	221a      	movs	r2, #26
 8016770:	809a      	strh	r2, [r3, #4]
  status.Count    = StatusCount;
 8016772:	4b1c      	ldr	r3, [pc, #112]	@ (80167e4 <UDP_Make_StatusPacket+0x90>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4a1a      	ldr	r2, [pc, #104]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016778:	6093      	str	r3, [r2, #8]

  //Body
  status.Temp1 = Temp_Val1;
 801677a:	4b1b      	ldr	r3, [pc, #108]	@ (80167e8 <UDP_Make_StatusPacket+0x94>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	4a18      	ldr	r2, [pc, #96]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016780:	60d3      	str	r3, [r2, #12]
  status.Temp2 = Temp_Val2;
 8016782:	4b1a      	ldr	r3, [pc, #104]	@ (80167ec <UDP_Make_StatusPacket+0x98>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4a16      	ldr	r2, [pc, #88]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016788:	6113      	str	r3, [r2, #16]
  status.FAN1  = UDP_GetFanStatus1();
 801678a:	f7ff ff93 	bl	80166b4 <UDP_GetFanStatus1>
 801678e:	4603      	mov	r3, r0
 8016790:	461a      	mov	r2, r3
 8016792:	4b13      	ldr	r3, [pc, #76]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016794:	751a      	strb	r2, [r3, #20]
  //status.FAN2  = UDP_GetFanStatus2();
  status.PSU   = 0;	//UDP_GetPSUStatus();	//Console과 포맷을 맞추기 위해 그대로 둠
 8016796:	4b12      	ldr	r3, [pc, #72]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 8016798:	2200      	movs	r2, #0
 801679a:	759a      	strb	r2, [r3, #22]
  status.DP    = UDP_GetDPStatus();
 801679c:	f7ff ffac 	bl	80166f8 <UDP_GetDPStatus>
 80167a0:	4603      	mov	r3, r0
 80167a2:	461a      	mov	r2, r3
 80167a4:	4b0e      	ldr	r3, [pc, #56]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167a6:	75da      	strb	r2, [r3, #23]
  status.Charger        = Charger;
 80167a8:	4b11      	ldr	r3, [pc, #68]	@ (80167f0 <UDP_Make_StatusPacket+0x9c>)
 80167aa:	781a      	ldrb	r2, [r3, #0]
 80167ac:	4b0c      	ldr	r3, [pc, #48]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167ae:	761a      	strb	r2, [r3, #24]
  status.Bat_SOC        = Bat.SOC_Val;
 80167b0:	4b10      	ldr	r3, [pc, #64]	@ (80167f4 <UDP_Make_StatusPacket+0xa0>)
 80167b2:	881a      	ldrh	r2, [r3, #0]
 80167b4:	4b0a      	ldr	r3, [pc, #40]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167b6:	835a      	strh	r2, [r3, #26]
  status.Bat_Volt       = Bat.Voltage;
 80167b8:	4b0e      	ldr	r3, [pc, #56]	@ (80167f4 <UDP_Make_StatusPacket+0xa0>)
 80167ba:	885a      	ldrh	r2, [r3, #2]
 80167bc:	4b08      	ldr	r3, [pc, #32]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167be:	839a      	strh	r2, [r3, #28]
  status.Bat_AvgCurrent = Bat.AvgCurrent;
 80167c0:	4b0c      	ldr	r3, [pc, #48]	@ (80167f4 <UDP_Make_StatusPacket+0xa0>)
 80167c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	4b05      	ldr	r3, [pc, #20]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167ca:	83da      	strh	r2, [r3, #30]
  status.Bat_CycleCnt   = Bat.CycleCount;
 80167cc:	4b09      	ldr	r3, [pc, #36]	@ (80167f4 <UDP_Make_StatusPacket+0xa0>)
 80167ce:	88da      	ldrh	r2, [r3, #6]
 80167d0:	4b03      	ldr	r3, [pc, #12]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167d2:	841a      	strh	r2, [r3, #32]
  status.Bat_IntTemp    = BatData16[4];
 80167d4:	4b08      	ldr	r3, [pc, #32]	@ (80167f8 <UDP_Make_StatusPacket+0xa4>)
 80167d6:	891a      	ldrh	r2, [r3, #8]
 80167d8:	4b01      	ldr	r3, [pc, #4]	@ (80167e0 <UDP_Make_StatusPacket+0x8c>)
 80167da:	845a      	strh	r2, [r3, #34]	@ 0x22

}
 80167dc:	bf00      	nop
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	20008b08 	.word	0x20008b08
 80167e4:	20008b2c 	.word	0x20008b2c
 80167e8:	2000892c 	.word	0x2000892c
 80167ec:	20008930 	.word	0x20008930
 80167f0:	2000893a 	.word	0x2000893a
 80167f4:	200050fc 	.word	0x200050fc
 80167f8:	20005110 	.word	0x20005110

080167fc <UDP_Make_ReplyPacket>:

void UDP_Make_ReplyPacket(RequsetPacket_t *reqPacket)
{
 80167fc:	b480      	push	{r7}
 80167fe:	b083      	sub	sp, #12
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
  //Header
  reply.Sender   = 0x01;
 8016804:	4b0f      	ldr	r3, [pc, #60]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 8016806:	2201      	movs	r2, #1
 8016808:	701a      	strb	r2, [r3, #0]
  reply.Receiver = 0x02;
 801680a:	4b0e      	ldr	r3, [pc, #56]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 801680c:	2202      	movs	r2, #2
 801680e:	705a      	strb	r2, [r3, #1]
  reply.Command  = ID_REPLY;
 8016810:	4b0c      	ldr	r3, [pc, #48]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 8016812:	f240 1201 	movw	r2, #257	@ 0x101
 8016816:	805a      	strh	r2, [r3, #2]
  reply.Size     = sizeof(ReplyPacket_t) - HEAD_SIZE;
 8016818:	4b0a      	ldr	r3, [pc, #40]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 801681a:	220a      	movs	r2, #10
 801681c:	809a      	strh	r2, [r3, #4]
  reply.Count    = ReplyCount;
 801681e:	4b0a      	ldr	r3, [pc, #40]	@ (8016848 <UDP_Make_ReplyPacket+0x4c>)
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	4a08      	ldr	r2, [pc, #32]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 8016824:	6093      	str	r3, [r2, #8]

  //Body
  reply.SeqNo    = reqPacket->Count;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	689b      	ldr	r3, [r3, #8]
 801682a:	4a06      	ldr	r2, [pc, #24]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 801682c:	60d3      	str	r3, [r2, #12]
  reply.Result   = BUZ_Status;
 801682e:	4b07      	ldr	r3, [pc, #28]	@ (801684c <UDP_Make_ReplyPacket+0x50>)
 8016830:	781a      	ldrb	r2, [r3, #0]
 8016832:	4b04      	ldr	r3, [pc, #16]	@ (8016844 <UDP_Make_ReplyPacket+0x48>)
 8016834:	741a      	strb	r2, [r3, #16]
}
 8016836:	bf00      	nop
 8016838:	370c      	adds	r7, #12
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	20008af4 	.word	0x20008af4
 8016848:	20008b30 	.word	0x20008b30
 801684c:	2000893b 	.word	0x2000893b

08016850 <print_status_packet>:
    }
    printf("\n");
}

void print_status_packet(const StatusPacket_t *status)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
//    printf("==[ Received STATUS Packet ]==\n");
//    printf("Sender: %d\n", status->Sender);
//    printf("Receiver: %d\n", status->Receiver);
//    printf("Command: 0x%X\n", status->Command);
//    printf("Size: %d\n", status->Size);
    printf("Count: %lu\n", status->Count);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	689b      	ldr	r3, [r3, #8]
 801685c:	4619      	mov	r1, r3
 801685e:	4803      	ldr	r0, [pc, #12]	@ (801686c <print_status_packet+0x1c>)
 8016860:	f001 fd04 	bl	801826c <iprintf>
//    printf("Bat_AvgCurrent: %d mA\n", status->Bat_AvgCurrent);
//    printf("Bat_CycleCnt: %d count\n", status->Bat_CycleCnt);
//    fBat_IntTemp = (float)((float)status->Bat_IntTemp / 10.0f - (float)273.15f);
//    printf("Bat_IntTemp: %.1f C\n", fBat_IntTemp);
//    printf("\n");
}
 8016864:	bf00      	nop
 8016866:	3708      	adds	r7, #8
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	0801e328 	.word	0x0801e328

08016870 <uTimer_Init>:
int32_t LongTimer[uTimerMax];
uint32_t ResetCounter;
uint8_t ResetTxState = 0U;
volatile uint32_t msTicks; /* counts 1ms timeTicks */

void uTimer_Init(void) {
 8016870:	b480      	push	{r7}
 8016872:	b083      	sub	sp, #12
 8016874:	af00      	add	r7, sp, #0

  uint32_t ii;

  /* uTimer 변수 초기화 */
  for (ii = 0U; ii < ((uint32_t)uTimerMax); ii++ ){
 8016876:	2300      	movs	r3, #0
 8016878:	607b      	str	r3, [r7, #4]
 801687a:	e008      	b.n	801688e <uTimer_Init+0x1e>
    LongTimer[ii] = -1;
 801687c:	4a09      	ldr	r2, [pc, #36]	@ (80168a4 <uTimer_Init+0x34>)
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f04f 31ff 	mov.w	r1, #4294967295
 8016884:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (ii = 0U; ii < ((uint32_t)uTimerMax); ii++ ){
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	3301      	adds	r3, #1
 801688c:	607b      	str	r3, [r7, #4]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2b02      	cmp	r3, #2
 8016892:	d9f3      	bls.n	801687c <uTimer_Init+0xc>
  }

}
 8016894:	bf00      	nop
 8016896:	bf00      	nop
 8016898:	370c      	adds	r7, #12
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr
 80168a2:	bf00      	nop
 80168a4:	20008b34 	.word	0x20008b34

080168a8 <uTimer_Regist>:

void uTimer_Regist(const uint8_t uTimeId, const int32_t uTimeCnt) {
 80168a8:	b480      	push	{r7}
 80168aa:	b083      	sub	sp, #12
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	4603      	mov	r3, r0
 80168b0:	6039      	str	r1, [r7, #0]
 80168b2:	71fb      	strb	r3, [r7, #7]
  /**
  1. uTimer ID 등록
  **/

  /* uTimer ID 등록 */
  if (uTimeId < (uint8_t)uTimerMax)
 80168b4:	79fb      	ldrb	r3, [r7, #7]
 80168b6:	2b02      	cmp	r3, #2
 80168b8:	d804      	bhi.n	80168c4 <uTimer_Regist+0x1c>
  {
    LongTimer[uTimeId] = uTimeCnt;
 80168ba:	79fb      	ldrb	r3, [r7, #7]
 80168bc:	4904      	ldr	r1, [pc, #16]	@ (80168d0 <uTimer_Regist+0x28>)
 80168be:	683a      	ldr	r2, [r7, #0]
 80168c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}/* End of uTimer_Regist func. */
 80168c4:	bf00      	nop
 80168c6:	370c      	adds	r7, #12
 80168c8:	46bd      	mov	sp, r7
 80168ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ce:	4770      	bx	lr
 80168d0:	20008b34 	.word	0x20008b34

080168d4 <uTimer_CheckTimeOut>:

uint8_t uTimer_CheckTimeOut(const uint8_t uTimeId) {
 80168d4:	b480      	push	{r7}
 80168d6:	b085      	sub	sp, #20
 80168d8:	af00      	add	r7, sp, #0
 80168da:	4603      	mov	r3, r0
 80168dc:	71fb      	strb	r3, [r7, #7]
  /**
  1. uTimer ID 타임아웃 체크
  **/

  uint8_t result = FALSE;
 80168de:	2300      	movs	r3, #0
 80168e0:	73fb      	strb	r3, [r7, #15]

  /* uTimer ID 타임아웃 체크 */
  if (uTimeId < (uint8_t)uTimerMax)
 80168e2:	79fb      	ldrb	r3, [r7, #7]
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	d810      	bhi.n	801690a <uTimer_CheckTimeOut+0x36>
  {
    if (LongTimer[uTimeId] == 0){
 80168e8:	79fb      	ldrb	r3, [r7, #7]
 80168ea:	4a0b      	ldr	r2, [pc, #44]	@ (8016918 <uTimer_CheckTimeOut+0x44>)
 80168ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d108      	bne.n	8016906 <uTimer_CheckTimeOut+0x32>
      LongTimer[uTimeId] = -1;
 80168f4:	79fb      	ldrb	r3, [r7, #7]
 80168f6:	4a08      	ldr	r2, [pc, #32]	@ (8016918 <uTimer_CheckTimeOut+0x44>)
 80168f8:	f04f 31ff 	mov.w	r1, #4294967295
 80168fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      result = TRUE;
 8016900:	2301      	movs	r3, #1
 8016902:	73fb      	strb	r3, [r7, #15]
 8016904:	e001      	b.n	801690a <uTimer_CheckTimeOut+0x36>
    }
    else{
      result = FALSE;
 8016906:	2300      	movs	r3, #0
 8016908:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (result);
 801690a:	7bfb      	ldrb	r3, [r7, #15]
}/* End of uTimer_CheckTimeOut func. */
 801690c:	4618      	mov	r0, r3
 801690e:	3714      	adds	r7, #20
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	20008b34 	.word	0x20008b34

0801691c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 801691c:	b480      	push	{r7}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
  uint8_t ii;

  msTicks++;	//1ms Tick
 8016922:	4b11      	ldr	r3, [pc, #68]	@ (8016968 <HAL_SYSTICK_Callback+0x4c>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	3301      	adds	r3, #1
 8016928:	4a0f      	ldr	r2, [pc, #60]	@ (8016968 <HAL_SYSTICK_Callback+0x4c>)
 801692a:	6013      	str	r3, [r2, #0]

  /* 등록된 uTimer ID 타이머카운터 값 감소 */
  for (ii = 0U ; ii < ((uint8_t)uTimerMax); ii++){
 801692c:	2300      	movs	r3, #0
 801692e:	71fb      	strb	r3, [r7, #7]
 8016930:	e010      	b.n	8016954 <HAL_SYSTICK_Callback+0x38>
    if (LongTimer[ii] > 0) {
 8016932:	79fb      	ldrb	r3, [r7, #7]
 8016934:	4a0d      	ldr	r2, [pc, #52]	@ (801696c <HAL_SYSTICK_Callback+0x50>)
 8016936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801693a:	2b00      	cmp	r3, #0
 801693c:	dd07      	ble.n	801694e <HAL_SYSTICK_Callback+0x32>
      LongTimer[ii]--;
 801693e:	79fb      	ldrb	r3, [r7, #7]
 8016940:	4a0a      	ldr	r2, [pc, #40]	@ (801696c <HAL_SYSTICK_Callback+0x50>)
 8016942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016946:	3a01      	subs	r2, #1
 8016948:	4908      	ldr	r1, [pc, #32]	@ (801696c <HAL_SYSTICK_Callback+0x50>)
 801694a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (ii = 0U ; ii < ((uint8_t)uTimerMax); ii++){
 801694e:	79fb      	ldrb	r3, [r7, #7]
 8016950:	3301      	adds	r3, #1
 8016952:	71fb      	strb	r3, [r7, #7]
 8016954:	79fb      	ldrb	r3, [r7, #7]
 8016956:	2b02      	cmp	r3, #2
 8016958:	d9eb      	bls.n	8016932 <HAL_SYSTICK_Callback+0x16>
    }
  }

}/* End of HAL_SYSTICK_Callback func. */
 801695a:	bf00      	nop
 801695c:	bf00      	nop
 801695e:	370c      	adds	r7, #12
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr
 8016968:	20008b40 	.word	0x20008b40
 801696c:	20008b34 	.word	0x20008b34

08016970 <HAL_IncTick>:


void HAL_IncTick(void)
{
 8016970:	b480      	push	{r7}
 8016972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016974:	4b06      	ldr	r3, [pc, #24]	@ (8016990 <HAL_IncTick+0x20>)
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	461a      	mov	r2, r3
 801697a:	4b06      	ldr	r3, [pc, #24]	@ (8016994 <HAL_IncTick+0x24>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	4413      	add	r3, r2
 8016980:	4a04      	ldr	r2, [pc, #16]	@ (8016994 <HAL_IncTick+0x24>)
 8016982:	6013      	str	r3, [r2, #0]
}
 8016984:	bf00      	nop
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	20000008 	.word	0x20000008
 8016994:	200004d0 	.word	0x200004d0

08016998 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 8016998:	b480      	push	{r7}
 801699a:	af00      	add	r7, sp, #0
  return uwTick;
 801699c:	4b03      	ldr	r3, [pc, #12]	@ (80169ac <HAL_GetTick+0x14>)
 801699e:	681b      	ldr	r3, [r3, #0]
}
 80169a0:	4618      	mov	r0, r3
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr
 80169aa:	bf00      	nop
 80169ac:	200004d0 	.word	0x200004d0

080169b0 <Delay_clock>:


void Delay_clock(const uint32_t iCount) {
 80169b0:	b480      	push	{r7}
 80169b2:	b085      	sub	sp, #20
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
  uint32_t  delay_clk;

  for(delay_clk = 0U; delay_clk < iCount; delay_clk++){}
 80169b8:	2300      	movs	r3, #0
 80169ba:	60fb      	str	r3, [r7, #12]
 80169bc:	e002      	b.n	80169c4 <Delay_clock+0x14>
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	3301      	adds	r3, #1
 80169c2:	60fb      	str	r3, [r7, #12]
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d3f8      	bcc.n	80169be <Delay_clock+0xe>

}
 80169cc:	bf00      	nop
 80169ce:	bf00      	nop
 80169d0:	3714      	adds	r7, #20
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr

080169da <RingBuffer_Init>:

#include "ring_buffer.h"



void RingBuffer_Init(RingBuffer *rb) {
 80169da:	b480      	push	{r7}
 80169dc:	b083      	sub	sp, #12
 80169de:	af00      	add	r7, sp, #0
 80169e0:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2200      	movs	r2, #0
 80169e6:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    rb->tail = 0;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2200      	movs	r2, #0
 80169ee:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
}
 80169f2:	bf00      	nop
 80169f4:	370c      	adds	r7, #12
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr

080169fe <RingBuffer_IsFull>:

bool RingBuffer_IsEmpty(RingBuffer *rb) {
    return rb->head == rb->tail;
}

bool RingBuffer_IsFull(RingBuffer *rb) {
 80169fe:	b480      	push	{r7}
 8016a00:	b083      	sub	sp, #12
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
    return ((rb->head + 1) % RING_BUFFER_SIZE) == rb->tail;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8016a0c:	b29b      	uxth	r3, r3
 8016a0e:	3301      	adds	r3, #1
 8016a10:	425a      	negs	r2, r3
 8016a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016a16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016a1a:	bf58      	it	pl
 8016a1c:	4253      	negpl	r3, r2
 8016a1e:	687a      	ldr	r2, [r7, #4]
 8016a20:	f8b2 2082 	ldrh.w	r2, [r2, #130]	@ 0x82
 8016a24:	b292      	uxth	r2, r2
 8016a26:	4293      	cmp	r3, r2
 8016a28:	bf0c      	ite	eq
 8016a2a:	2301      	moveq	r3, #1
 8016a2c:	2300      	movne	r3, #0
 8016a2e:	b2db      	uxtb	r3, r3
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	370c      	adds	r7, #12
 8016a34:	46bd      	mov	sp, r7
 8016a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3a:	4770      	bx	lr

08016a3c <RingBuffer_Put>:

bool RingBuffer_Put(RingBuffer *rb, uint8_t data) {
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
 8016a44:	460b      	mov	r3, r1
 8016a46:	70fb      	strb	r3, [r7, #3]
    if (RingBuffer_IsFull(rb)) {
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f7ff ffd8 	bl	80169fe <RingBuffer_IsFull>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d001      	beq.n	8016a58 <RingBuffer_Put+0x1c>
        return false; // Buffer is full
 8016a54:	2300      	movs	r3, #0
 8016a56:	e018      	b.n	8016a8a <RingBuffer_Put+0x4e>
    }
    rb->buffer[rb->head] = data;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	4619      	mov	r1, r3
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	78fa      	ldrb	r2, [r7, #3]
 8016a66:	545a      	strb	r2, [r3, r1]
    rb->head = (rb->head + 1) % RING_BUFFER_SIZE;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	3301      	adds	r3, #1
 8016a72:	425a      	negs	r2, r3
 8016a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016a78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016a7c:	bf58      	it	pl
 8016a7e:	4253      	negpl	r3, r2
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    return true;
 8016a88:	2301      	movs	r3, #1
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3708      	adds	r7, #8
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <make16>:
#include "utility.h"


///////////////////////////////////////////////////
// Make two 8-bit into a 16-bit word
uint16_t make16(uint8_t *hbyte, uint8_t *lbyte) {
 8016a92:	b480      	push	{r7}
 8016a94:	b085      	sub	sp, #20
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
 8016a9a:	6039      	str	r1, [r7, #0]
  uint16_t data16=0;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	81fb      	strh	r3, [r7, #14]
    data16 = (uint16_t)(*hbyte);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	81fb      	strh	r3, [r7, #14]
    data16 = data16 << 8;
 8016aa6:	89fb      	ldrh	r3, [r7, #14]
 8016aa8:	021b      	lsls	r3, r3, #8
 8016aaa:	81fb      	strh	r3, [r7, #14]
    data16 |= (uint16_t)(*lbyte);
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	89fb      	ldrh	r3, [r7, #14]
 8016ab4:	4313      	orrs	r3, r2
 8016ab6:	81fb      	strh	r3, [r7, #14]
    return data16;
 8016ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8016aba:	4618      	mov	r0, r3
 8016abc:	3714      	adds	r7, #20
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac4:	4770      	bx	lr

08016ac6 <make8>:

///////////////////////////////////////////////////
// Seperate 16-bit into two 8-bit
uint8_t make8(uint16_t word, uint8_t pos) {
 8016ac6:	b480      	push	{r7}
 8016ac8:	b085      	sub	sp, #20
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	4603      	mov	r3, r0
 8016ace:	460a      	mov	r2, r1
 8016ad0:	80fb      	strh	r3, [r7, #6]
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	717b      	strb	r3, [r7, #5]
  uint8_t byte;
    byte = (uint8_t)(word>>(8*pos) & 0x00FF);
 8016ad6:	88fa      	ldrh	r2, [r7, #6]
 8016ad8:	797b      	ldrb	r3, [r7, #5]
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	fa42 f303 	asr.w	r3, r2, r3
 8016ae0:	73fb      	strb	r3, [r7, #15]
    return byte;
 8016ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3714      	adds	r7, #20
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aee:	4770      	bx	lr

08016af0 <rand>:
 8016af0:	4b16      	ldr	r3, [pc, #88]	@ (8016b4c <rand+0x5c>)
 8016af2:	b510      	push	{r4, lr}
 8016af4:	681c      	ldr	r4, [r3, #0]
 8016af6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016af8:	b9b3      	cbnz	r3, 8016b28 <rand+0x38>
 8016afa:	2018      	movs	r0, #24
 8016afc:	f003 f92c 	bl	8019d58 <malloc>
 8016b00:	4602      	mov	r2, r0
 8016b02:	6320      	str	r0, [r4, #48]	@ 0x30
 8016b04:	b920      	cbnz	r0, 8016b10 <rand+0x20>
 8016b06:	4b12      	ldr	r3, [pc, #72]	@ (8016b50 <rand+0x60>)
 8016b08:	4812      	ldr	r0, [pc, #72]	@ (8016b54 <rand+0x64>)
 8016b0a:	2152      	movs	r1, #82	@ 0x52
 8016b0c:	f001 ff36 	bl	801897c <__assert_func>
 8016b10:	4911      	ldr	r1, [pc, #68]	@ (8016b58 <rand+0x68>)
 8016b12:	4b12      	ldr	r3, [pc, #72]	@ (8016b5c <rand+0x6c>)
 8016b14:	e9c0 1300 	strd	r1, r3, [r0]
 8016b18:	4b11      	ldr	r3, [pc, #68]	@ (8016b60 <rand+0x70>)
 8016b1a:	6083      	str	r3, [r0, #8]
 8016b1c:	230b      	movs	r3, #11
 8016b1e:	8183      	strh	r3, [r0, #12]
 8016b20:	2100      	movs	r1, #0
 8016b22:	2001      	movs	r0, #1
 8016b24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b2a:	480e      	ldr	r0, [pc, #56]	@ (8016b64 <rand+0x74>)
 8016b2c:	690b      	ldr	r3, [r1, #16]
 8016b2e:	694c      	ldr	r4, [r1, #20]
 8016b30:	4a0d      	ldr	r2, [pc, #52]	@ (8016b68 <rand+0x78>)
 8016b32:	4358      	muls	r0, r3
 8016b34:	fb02 0004 	mla	r0, r2, r4, r0
 8016b38:	fba3 3202 	umull	r3, r2, r3, r2
 8016b3c:	3301      	adds	r3, #1
 8016b3e:	eb40 0002 	adc.w	r0, r0, r2
 8016b42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b46:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b4a:	bd10      	pop	{r4, pc}
 8016b4c:	200001a8 	.word	0x200001a8
 8016b50:	0801e4d6 	.word	0x0801e4d6
 8016b54:	0801e4ed 	.word	0x0801e4ed
 8016b58:	abcd330e 	.word	0xabcd330e
 8016b5c:	e66d1234 	.word	0xe66d1234
 8016b60:	0005deec 	.word	0x0005deec
 8016b64:	5851f42d 	.word	0x5851f42d
 8016b68:	4c957f2d 	.word	0x4c957f2d

08016b6c <sulp>:
 8016b6c:	b570      	push	{r4, r5, r6, lr}
 8016b6e:	4604      	mov	r4, r0
 8016b70:	460d      	mov	r5, r1
 8016b72:	ec45 4b10 	vmov	d0, r4, r5
 8016b76:	4616      	mov	r6, r2
 8016b78:	f003 fd2a 	bl	801a5d0 <__ulp>
 8016b7c:	ec51 0b10 	vmov	r0, r1, d0
 8016b80:	b17e      	cbz	r6, 8016ba2 <sulp+0x36>
 8016b82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016b86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	dd09      	ble.n	8016ba2 <sulp+0x36>
 8016b8e:	051b      	lsls	r3, r3, #20
 8016b90:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016b94:	2400      	movs	r4, #0
 8016b96:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016b9a:	4622      	mov	r2, r4
 8016b9c:	462b      	mov	r3, r5
 8016b9e:	f7e9 fd3b 	bl	8000618 <__aeabi_dmul>
 8016ba2:	ec41 0b10 	vmov	d0, r0, r1
 8016ba6:	bd70      	pop	{r4, r5, r6, pc}

08016ba8 <_strtod_l>:
 8016ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bac:	b09f      	sub	sp, #124	@ 0x7c
 8016bae:	460c      	mov	r4, r1
 8016bb0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	921a      	str	r2, [sp, #104]	@ 0x68
 8016bb6:	9005      	str	r0, [sp, #20]
 8016bb8:	f04f 0a00 	mov.w	sl, #0
 8016bbc:	f04f 0b00 	mov.w	fp, #0
 8016bc0:	460a      	mov	r2, r1
 8016bc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016bc4:	7811      	ldrb	r1, [r2, #0]
 8016bc6:	292b      	cmp	r1, #43	@ 0x2b
 8016bc8:	d04a      	beq.n	8016c60 <_strtod_l+0xb8>
 8016bca:	d838      	bhi.n	8016c3e <_strtod_l+0x96>
 8016bcc:	290d      	cmp	r1, #13
 8016bce:	d832      	bhi.n	8016c36 <_strtod_l+0x8e>
 8016bd0:	2908      	cmp	r1, #8
 8016bd2:	d832      	bhi.n	8016c3a <_strtod_l+0x92>
 8016bd4:	2900      	cmp	r1, #0
 8016bd6:	d03b      	beq.n	8016c50 <_strtod_l+0xa8>
 8016bd8:	2200      	movs	r2, #0
 8016bda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016bdc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016bde:	782a      	ldrb	r2, [r5, #0]
 8016be0:	2a30      	cmp	r2, #48	@ 0x30
 8016be2:	f040 80b3 	bne.w	8016d4c <_strtod_l+0x1a4>
 8016be6:	786a      	ldrb	r2, [r5, #1]
 8016be8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016bec:	2a58      	cmp	r2, #88	@ 0x58
 8016bee:	d16e      	bne.n	8016cce <_strtod_l+0x126>
 8016bf0:	9302      	str	r3, [sp, #8]
 8016bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bf4:	9301      	str	r3, [sp, #4]
 8016bf6:	ab1a      	add	r3, sp, #104	@ 0x68
 8016bf8:	9300      	str	r3, [sp, #0]
 8016bfa:	4a8e      	ldr	r2, [pc, #568]	@ (8016e34 <_strtod_l+0x28c>)
 8016bfc:	9805      	ldr	r0, [sp, #20]
 8016bfe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016c00:	a919      	add	r1, sp, #100	@ 0x64
 8016c02:	f002 fdd7 	bl	80197b4 <__gethex>
 8016c06:	f010 060f 	ands.w	r6, r0, #15
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	d005      	beq.n	8016c1a <_strtod_l+0x72>
 8016c0e:	2e06      	cmp	r6, #6
 8016c10:	d128      	bne.n	8016c64 <_strtod_l+0xbc>
 8016c12:	3501      	adds	r5, #1
 8016c14:	2300      	movs	r3, #0
 8016c16:	9519      	str	r5, [sp, #100]	@ 0x64
 8016c18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f040 858e 	bne.w	801773e <_strtod_l+0xb96>
 8016c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c24:	b1cb      	cbz	r3, 8016c5a <_strtod_l+0xb2>
 8016c26:	4652      	mov	r2, sl
 8016c28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016c2c:	ec43 2b10 	vmov	d0, r2, r3
 8016c30:	b01f      	add	sp, #124	@ 0x7c
 8016c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c36:	2920      	cmp	r1, #32
 8016c38:	d1ce      	bne.n	8016bd8 <_strtod_l+0x30>
 8016c3a:	3201      	adds	r2, #1
 8016c3c:	e7c1      	b.n	8016bc2 <_strtod_l+0x1a>
 8016c3e:	292d      	cmp	r1, #45	@ 0x2d
 8016c40:	d1ca      	bne.n	8016bd8 <_strtod_l+0x30>
 8016c42:	2101      	movs	r1, #1
 8016c44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016c46:	1c51      	adds	r1, r2, #1
 8016c48:	9119      	str	r1, [sp, #100]	@ 0x64
 8016c4a:	7852      	ldrb	r2, [r2, #1]
 8016c4c:	2a00      	cmp	r2, #0
 8016c4e:	d1c5      	bne.n	8016bdc <_strtod_l+0x34>
 8016c50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c52:	9419      	str	r4, [sp, #100]	@ 0x64
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f040 8570 	bne.w	801773a <_strtod_l+0xb92>
 8016c5a:	4652      	mov	r2, sl
 8016c5c:	465b      	mov	r3, fp
 8016c5e:	e7e5      	b.n	8016c2c <_strtod_l+0x84>
 8016c60:	2100      	movs	r1, #0
 8016c62:	e7ef      	b.n	8016c44 <_strtod_l+0x9c>
 8016c64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016c66:	b13a      	cbz	r2, 8016c78 <_strtod_l+0xd0>
 8016c68:	2135      	movs	r1, #53	@ 0x35
 8016c6a:	a81c      	add	r0, sp, #112	@ 0x70
 8016c6c:	f003 fdaa 	bl	801a7c4 <__copybits>
 8016c70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016c72:	9805      	ldr	r0, [sp, #20]
 8016c74:	f003 f978 	bl	8019f68 <_Bfree>
 8016c78:	3e01      	subs	r6, #1
 8016c7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016c7c:	2e04      	cmp	r6, #4
 8016c7e:	d806      	bhi.n	8016c8e <_strtod_l+0xe6>
 8016c80:	e8df f006 	tbb	[pc, r6]
 8016c84:	201d0314 	.word	0x201d0314
 8016c88:	14          	.byte	0x14
 8016c89:	00          	.byte	0x00
 8016c8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016c8e:	05e1      	lsls	r1, r4, #23
 8016c90:	bf48      	it	mi
 8016c92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016c96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016c9a:	0d1b      	lsrs	r3, r3, #20
 8016c9c:	051b      	lsls	r3, r3, #20
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d1bb      	bne.n	8016c1a <_strtod_l+0x72>
 8016ca2:	f001 fe21 	bl	80188e8 <__errno>
 8016ca6:	2322      	movs	r3, #34	@ 0x22
 8016ca8:	6003      	str	r3, [r0, #0]
 8016caa:	e7b6      	b.n	8016c1a <_strtod_l+0x72>
 8016cac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016cb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016cb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016cb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016cbc:	e7e7      	b.n	8016c8e <_strtod_l+0xe6>
 8016cbe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8016e3c <_strtod_l+0x294>
 8016cc2:	e7e4      	b.n	8016c8e <_strtod_l+0xe6>
 8016cc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016cc8:	f04f 3aff 	mov.w	sl, #4294967295
 8016ccc:	e7df      	b.n	8016c8e <_strtod_l+0xe6>
 8016cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cd0:	1c5a      	adds	r2, r3, #1
 8016cd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016cd4:	785b      	ldrb	r3, [r3, #1]
 8016cd6:	2b30      	cmp	r3, #48	@ 0x30
 8016cd8:	d0f9      	beq.n	8016cce <_strtod_l+0x126>
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d09d      	beq.n	8016c1a <_strtod_l+0x72>
 8016cde:	2301      	movs	r3, #1
 8016ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	9308      	str	r3, [sp, #32]
 8016cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8016cec:	461f      	mov	r7, r3
 8016cee:	220a      	movs	r2, #10
 8016cf0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016cf2:	7805      	ldrb	r5, [r0, #0]
 8016cf4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016cf8:	b2d9      	uxtb	r1, r3
 8016cfa:	2909      	cmp	r1, #9
 8016cfc:	d928      	bls.n	8016d50 <_strtod_l+0x1a8>
 8016cfe:	494e      	ldr	r1, [pc, #312]	@ (8016e38 <_strtod_l+0x290>)
 8016d00:	2201      	movs	r2, #1
 8016d02:	f001 fd25 	bl	8018750 <strncmp>
 8016d06:	2800      	cmp	r0, #0
 8016d08:	d032      	beq.n	8016d70 <_strtod_l+0x1c8>
 8016d0a:	2000      	movs	r0, #0
 8016d0c:	462a      	mov	r2, r5
 8016d0e:	4681      	mov	r9, r0
 8016d10:	463d      	mov	r5, r7
 8016d12:	4603      	mov	r3, r0
 8016d14:	2a65      	cmp	r2, #101	@ 0x65
 8016d16:	d001      	beq.n	8016d1c <_strtod_l+0x174>
 8016d18:	2a45      	cmp	r2, #69	@ 0x45
 8016d1a:	d114      	bne.n	8016d46 <_strtod_l+0x19e>
 8016d1c:	b91d      	cbnz	r5, 8016d26 <_strtod_l+0x17e>
 8016d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d20:	4302      	orrs	r2, r0
 8016d22:	d095      	beq.n	8016c50 <_strtod_l+0xa8>
 8016d24:	2500      	movs	r5, #0
 8016d26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016d28:	1c62      	adds	r2, r4, #1
 8016d2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d2c:	7862      	ldrb	r2, [r4, #1]
 8016d2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8016d30:	d077      	beq.n	8016e22 <_strtod_l+0x27a>
 8016d32:	2a2d      	cmp	r2, #45	@ 0x2d
 8016d34:	d07b      	beq.n	8016e2e <_strtod_l+0x286>
 8016d36:	f04f 0c00 	mov.w	ip, #0
 8016d3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016d3e:	2909      	cmp	r1, #9
 8016d40:	f240 8082 	bls.w	8016e48 <_strtod_l+0x2a0>
 8016d44:	9419      	str	r4, [sp, #100]	@ 0x64
 8016d46:	f04f 0800 	mov.w	r8, #0
 8016d4a:	e0a2      	b.n	8016e92 <_strtod_l+0x2ea>
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	e7c7      	b.n	8016ce0 <_strtod_l+0x138>
 8016d50:	2f08      	cmp	r7, #8
 8016d52:	bfd5      	itete	le
 8016d54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8016d56:	9908      	ldrgt	r1, [sp, #32]
 8016d58:	fb02 3301 	mlale	r3, r2, r1, r3
 8016d5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016d60:	f100 0001 	add.w	r0, r0, #1
 8016d64:	bfd4      	ite	le
 8016d66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8016d68:	9308      	strgt	r3, [sp, #32]
 8016d6a:	3701      	adds	r7, #1
 8016d6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8016d6e:	e7bf      	b.n	8016cf0 <_strtod_l+0x148>
 8016d70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d72:	1c5a      	adds	r2, r3, #1
 8016d74:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d76:	785a      	ldrb	r2, [r3, #1]
 8016d78:	b37f      	cbz	r7, 8016dda <_strtod_l+0x232>
 8016d7a:	4681      	mov	r9, r0
 8016d7c:	463d      	mov	r5, r7
 8016d7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016d82:	2b09      	cmp	r3, #9
 8016d84:	d912      	bls.n	8016dac <_strtod_l+0x204>
 8016d86:	2301      	movs	r3, #1
 8016d88:	e7c4      	b.n	8016d14 <_strtod_l+0x16c>
 8016d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d8c:	1c5a      	adds	r2, r3, #1
 8016d8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d90:	785a      	ldrb	r2, [r3, #1]
 8016d92:	3001      	adds	r0, #1
 8016d94:	2a30      	cmp	r2, #48	@ 0x30
 8016d96:	d0f8      	beq.n	8016d8a <_strtod_l+0x1e2>
 8016d98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016d9c:	2b08      	cmp	r3, #8
 8016d9e:	f200 84d3 	bhi.w	8017748 <_strtod_l+0xba0>
 8016da2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016da4:	930c      	str	r3, [sp, #48]	@ 0x30
 8016da6:	4681      	mov	r9, r0
 8016da8:	2000      	movs	r0, #0
 8016daa:	4605      	mov	r5, r0
 8016dac:	3a30      	subs	r2, #48	@ 0x30
 8016dae:	f100 0301 	add.w	r3, r0, #1
 8016db2:	d02a      	beq.n	8016e0a <_strtod_l+0x262>
 8016db4:	4499      	add	r9, r3
 8016db6:	eb00 0c05 	add.w	ip, r0, r5
 8016dba:	462b      	mov	r3, r5
 8016dbc:	210a      	movs	r1, #10
 8016dbe:	4563      	cmp	r3, ip
 8016dc0:	d10d      	bne.n	8016dde <_strtod_l+0x236>
 8016dc2:	1c69      	adds	r1, r5, #1
 8016dc4:	4401      	add	r1, r0
 8016dc6:	4428      	add	r0, r5
 8016dc8:	2808      	cmp	r0, #8
 8016dca:	dc16      	bgt.n	8016dfa <_strtod_l+0x252>
 8016dcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016dce:	230a      	movs	r3, #10
 8016dd0:	fb03 2300 	mla	r3, r3, r0, r2
 8016dd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	e018      	b.n	8016e0c <_strtod_l+0x264>
 8016dda:	4638      	mov	r0, r7
 8016ddc:	e7da      	b.n	8016d94 <_strtod_l+0x1ec>
 8016dde:	2b08      	cmp	r3, #8
 8016de0:	f103 0301 	add.w	r3, r3, #1
 8016de4:	dc03      	bgt.n	8016dee <_strtod_l+0x246>
 8016de6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016de8:	434e      	muls	r6, r1
 8016dea:	960a      	str	r6, [sp, #40]	@ 0x28
 8016dec:	e7e7      	b.n	8016dbe <_strtod_l+0x216>
 8016dee:	2b10      	cmp	r3, #16
 8016df0:	bfde      	ittt	le
 8016df2:	9e08      	ldrle	r6, [sp, #32]
 8016df4:	434e      	mulle	r6, r1
 8016df6:	9608      	strle	r6, [sp, #32]
 8016df8:	e7e1      	b.n	8016dbe <_strtod_l+0x216>
 8016dfa:	280f      	cmp	r0, #15
 8016dfc:	dceb      	bgt.n	8016dd6 <_strtod_l+0x22e>
 8016dfe:	9808      	ldr	r0, [sp, #32]
 8016e00:	230a      	movs	r3, #10
 8016e02:	fb03 2300 	mla	r3, r3, r0, r2
 8016e06:	9308      	str	r3, [sp, #32]
 8016e08:	e7e5      	b.n	8016dd6 <_strtod_l+0x22e>
 8016e0a:	4629      	mov	r1, r5
 8016e0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e0e:	1c50      	adds	r0, r2, #1
 8016e10:	9019      	str	r0, [sp, #100]	@ 0x64
 8016e12:	7852      	ldrb	r2, [r2, #1]
 8016e14:	4618      	mov	r0, r3
 8016e16:	460d      	mov	r5, r1
 8016e18:	e7b1      	b.n	8016d7e <_strtod_l+0x1d6>
 8016e1a:	f04f 0900 	mov.w	r9, #0
 8016e1e:	2301      	movs	r3, #1
 8016e20:	e77d      	b.n	8016d1e <_strtod_l+0x176>
 8016e22:	f04f 0c00 	mov.w	ip, #0
 8016e26:	1ca2      	adds	r2, r4, #2
 8016e28:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e2a:	78a2      	ldrb	r2, [r4, #2]
 8016e2c:	e785      	b.n	8016d3a <_strtod_l+0x192>
 8016e2e:	f04f 0c01 	mov.w	ip, #1
 8016e32:	e7f8      	b.n	8016e26 <_strtod_l+0x27e>
 8016e34:	0801e55c 	.word	0x0801e55c
 8016e38:	0801e545 	.word	0x0801e545
 8016e3c:	7ff00000 	.word	0x7ff00000
 8016e40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e42:	1c51      	adds	r1, r2, #1
 8016e44:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e46:	7852      	ldrb	r2, [r2, #1]
 8016e48:	2a30      	cmp	r2, #48	@ 0x30
 8016e4a:	d0f9      	beq.n	8016e40 <_strtod_l+0x298>
 8016e4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016e50:	2908      	cmp	r1, #8
 8016e52:	f63f af78 	bhi.w	8016d46 <_strtod_l+0x19e>
 8016e56:	3a30      	subs	r2, #48	@ 0x30
 8016e58:	920e      	str	r2, [sp, #56]	@ 0x38
 8016e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016e5e:	f04f 080a 	mov.w	r8, #10
 8016e62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e64:	1c56      	adds	r6, r2, #1
 8016e66:	9619      	str	r6, [sp, #100]	@ 0x64
 8016e68:	7852      	ldrb	r2, [r2, #1]
 8016e6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016e6e:	f1be 0f09 	cmp.w	lr, #9
 8016e72:	d939      	bls.n	8016ee8 <_strtod_l+0x340>
 8016e74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016e76:	1a76      	subs	r6, r6, r1
 8016e78:	2e08      	cmp	r6, #8
 8016e7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016e7e:	dc03      	bgt.n	8016e88 <_strtod_l+0x2e0>
 8016e80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016e82:	4588      	cmp	r8, r1
 8016e84:	bfa8      	it	ge
 8016e86:	4688      	movge	r8, r1
 8016e88:	f1bc 0f00 	cmp.w	ip, #0
 8016e8c:	d001      	beq.n	8016e92 <_strtod_l+0x2ea>
 8016e8e:	f1c8 0800 	rsb	r8, r8, #0
 8016e92:	2d00      	cmp	r5, #0
 8016e94:	d14e      	bne.n	8016f34 <_strtod_l+0x38c>
 8016e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016e98:	4308      	orrs	r0, r1
 8016e9a:	f47f aebe 	bne.w	8016c1a <_strtod_l+0x72>
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	f47f aed6 	bne.w	8016c50 <_strtod_l+0xa8>
 8016ea4:	2a69      	cmp	r2, #105	@ 0x69
 8016ea6:	d028      	beq.n	8016efa <_strtod_l+0x352>
 8016ea8:	dc25      	bgt.n	8016ef6 <_strtod_l+0x34e>
 8016eaa:	2a49      	cmp	r2, #73	@ 0x49
 8016eac:	d025      	beq.n	8016efa <_strtod_l+0x352>
 8016eae:	2a4e      	cmp	r2, #78	@ 0x4e
 8016eb0:	f47f aece 	bne.w	8016c50 <_strtod_l+0xa8>
 8016eb4:	499b      	ldr	r1, [pc, #620]	@ (8017124 <_strtod_l+0x57c>)
 8016eb6:	a819      	add	r0, sp, #100	@ 0x64
 8016eb8:	f002 fe9e 	bl	8019bf8 <__match>
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	f43f aec7 	beq.w	8016c50 <_strtod_l+0xa8>
 8016ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	2b28      	cmp	r3, #40	@ 0x28
 8016ec8:	d12e      	bne.n	8016f28 <_strtod_l+0x380>
 8016eca:	4997      	ldr	r1, [pc, #604]	@ (8017128 <_strtod_l+0x580>)
 8016ecc:	aa1c      	add	r2, sp, #112	@ 0x70
 8016ece:	a819      	add	r0, sp, #100	@ 0x64
 8016ed0:	f002 fea6 	bl	8019c20 <__hexnan>
 8016ed4:	2805      	cmp	r0, #5
 8016ed6:	d127      	bne.n	8016f28 <_strtod_l+0x380>
 8016ed8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016eda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016ede:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016ee2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016ee6:	e698      	b.n	8016c1a <_strtod_l+0x72>
 8016ee8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016eea:	fb08 2101 	mla	r1, r8, r1, r2
 8016eee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016ef2:	920e      	str	r2, [sp, #56]	@ 0x38
 8016ef4:	e7b5      	b.n	8016e62 <_strtod_l+0x2ba>
 8016ef6:	2a6e      	cmp	r2, #110	@ 0x6e
 8016ef8:	e7da      	b.n	8016eb0 <_strtod_l+0x308>
 8016efa:	498c      	ldr	r1, [pc, #560]	@ (801712c <_strtod_l+0x584>)
 8016efc:	a819      	add	r0, sp, #100	@ 0x64
 8016efe:	f002 fe7b 	bl	8019bf8 <__match>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	f43f aea4 	beq.w	8016c50 <_strtod_l+0xa8>
 8016f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f0a:	4989      	ldr	r1, [pc, #548]	@ (8017130 <_strtod_l+0x588>)
 8016f0c:	3b01      	subs	r3, #1
 8016f0e:	a819      	add	r0, sp, #100	@ 0x64
 8016f10:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f12:	f002 fe71 	bl	8019bf8 <__match>
 8016f16:	b910      	cbnz	r0, 8016f1e <_strtod_l+0x376>
 8016f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f1a:	3301      	adds	r3, #1
 8016f1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8017140 <_strtod_l+0x598>
 8016f22:	f04f 0a00 	mov.w	sl, #0
 8016f26:	e678      	b.n	8016c1a <_strtod_l+0x72>
 8016f28:	4882      	ldr	r0, [pc, #520]	@ (8017134 <_strtod_l+0x58c>)
 8016f2a:	f001 fd19 	bl	8018960 <nan>
 8016f2e:	ec5b ab10 	vmov	sl, fp, d0
 8016f32:	e672      	b.n	8016c1a <_strtod_l+0x72>
 8016f34:	eba8 0309 	sub.w	r3, r8, r9
 8016f38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f3c:	2f00      	cmp	r7, #0
 8016f3e:	bf08      	it	eq
 8016f40:	462f      	moveq	r7, r5
 8016f42:	2d10      	cmp	r5, #16
 8016f44:	462c      	mov	r4, r5
 8016f46:	bfa8      	it	ge
 8016f48:	2410      	movge	r4, #16
 8016f4a:	f7e9 faeb 	bl	8000524 <__aeabi_ui2d>
 8016f4e:	2d09      	cmp	r5, #9
 8016f50:	4682      	mov	sl, r0
 8016f52:	468b      	mov	fp, r1
 8016f54:	dc13      	bgt.n	8016f7e <_strtod_l+0x3d6>
 8016f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	f43f ae5e 	beq.w	8016c1a <_strtod_l+0x72>
 8016f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f60:	dd78      	ble.n	8017054 <_strtod_l+0x4ac>
 8016f62:	2b16      	cmp	r3, #22
 8016f64:	dc5f      	bgt.n	8017026 <_strtod_l+0x47e>
 8016f66:	4974      	ldr	r1, [pc, #464]	@ (8017138 <_strtod_l+0x590>)
 8016f68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f70:	4652      	mov	r2, sl
 8016f72:	465b      	mov	r3, fp
 8016f74:	f7e9 fb50 	bl	8000618 <__aeabi_dmul>
 8016f78:	4682      	mov	sl, r0
 8016f7a:	468b      	mov	fp, r1
 8016f7c:	e64d      	b.n	8016c1a <_strtod_l+0x72>
 8016f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8017138 <_strtod_l+0x590>)
 8016f80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016f84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016f88:	f7e9 fb46 	bl	8000618 <__aeabi_dmul>
 8016f8c:	4682      	mov	sl, r0
 8016f8e:	9808      	ldr	r0, [sp, #32]
 8016f90:	468b      	mov	fp, r1
 8016f92:	f7e9 fac7 	bl	8000524 <__aeabi_ui2d>
 8016f96:	4602      	mov	r2, r0
 8016f98:	460b      	mov	r3, r1
 8016f9a:	4650      	mov	r0, sl
 8016f9c:	4659      	mov	r1, fp
 8016f9e:	f7e9 f985 	bl	80002ac <__adddf3>
 8016fa2:	2d0f      	cmp	r5, #15
 8016fa4:	4682      	mov	sl, r0
 8016fa6:	468b      	mov	fp, r1
 8016fa8:	ddd5      	ble.n	8016f56 <_strtod_l+0x3ae>
 8016faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fac:	1b2c      	subs	r4, r5, r4
 8016fae:	441c      	add	r4, r3
 8016fb0:	2c00      	cmp	r4, #0
 8016fb2:	f340 8096 	ble.w	80170e2 <_strtod_l+0x53a>
 8016fb6:	f014 030f 	ands.w	r3, r4, #15
 8016fba:	d00a      	beq.n	8016fd2 <_strtod_l+0x42a>
 8016fbc:	495e      	ldr	r1, [pc, #376]	@ (8017138 <_strtod_l+0x590>)
 8016fbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016fc2:	4652      	mov	r2, sl
 8016fc4:	465b      	mov	r3, fp
 8016fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fca:	f7e9 fb25 	bl	8000618 <__aeabi_dmul>
 8016fce:	4682      	mov	sl, r0
 8016fd0:	468b      	mov	fp, r1
 8016fd2:	f034 040f 	bics.w	r4, r4, #15
 8016fd6:	d073      	beq.n	80170c0 <_strtod_l+0x518>
 8016fd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016fdc:	dd48      	ble.n	8017070 <_strtod_l+0x4c8>
 8016fde:	2400      	movs	r4, #0
 8016fe0:	46a0      	mov	r8, r4
 8016fe2:	940a      	str	r4, [sp, #40]	@ 0x28
 8016fe4:	46a1      	mov	r9, r4
 8016fe6:	9a05      	ldr	r2, [sp, #20]
 8016fe8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017140 <_strtod_l+0x598>
 8016fec:	2322      	movs	r3, #34	@ 0x22
 8016fee:	6013      	str	r3, [r2, #0]
 8016ff0:	f04f 0a00 	mov.w	sl, #0
 8016ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	f43f ae0f 	beq.w	8016c1a <_strtod_l+0x72>
 8016ffc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016ffe:	9805      	ldr	r0, [sp, #20]
 8017000:	f002 ffb2 	bl	8019f68 <_Bfree>
 8017004:	9805      	ldr	r0, [sp, #20]
 8017006:	4649      	mov	r1, r9
 8017008:	f002 ffae 	bl	8019f68 <_Bfree>
 801700c:	9805      	ldr	r0, [sp, #20]
 801700e:	4641      	mov	r1, r8
 8017010:	f002 ffaa 	bl	8019f68 <_Bfree>
 8017014:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017016:	9805      	ldr	r0, [sp, #20]
 8017018:	f002 ffa6 	bl	8019f68 <_Bfree>
 801701c:	9805      	ldr	r0, [sp, #20]
 801701e:	4621      	mov	r1, r4
 8017020:	f002 ffa2 	bl	8019f68 <_Bfree>
 8017024:	e5f9      	b.n	8016c1a <_strtod_l+0x72>
 8017026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017028:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801702c:	4293      	cmp	r3, r2
 801702e:	dbbc      	blt.n	8016faa <_strtod_l+0x402>
 8017030:	4c41      	ldr	r4, [pc, #260]	@ (8017138 <_strtod_l+0x590>)
 8017032:	f1c5 050f 	rsb	r5, r5, #15
 8017036:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801703a:	4652      	mov	r2, sl
 801703c:	465b      	mov	r3, fp
 801703e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017042:	f7e9 fae9 	bl	8000618 <__aeabi_dmul>
 8017046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017048:	1b5d      	subs	r5, r3, r5
 801704a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801704e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017052:	e78f      	b.n	8016f74 <_strtod_l+0x3cc>
 8017054:	3316      	adds	r3, #22
 8017056:	dba8      	blt.n	8016faa <_strtod_l+0x402>
 8017058:	4b37      	ldr	r3, [pc, #220]	@ (8017138 <_strtod_l+0x590>)
 801705a:	eba9 0808 	sub.w	r8, r9, r8
 801705e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017062:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017066:	4650      	mov	r0, sl
 8017068:	4659      	mov	r1, fp
 801706a:	f7e9 fbff 	bl	800086c <__aeabi_ddiv>
 801706e:	e783      	b.n	8016f78 <_strtod_l+0x3d0>
 8017070:	4b32      	ldr	r3, [pc, #200]	@ (801713c <_strtod_l+0x594>)
 8017072:	9308      	str	r3, [sp, #32]
 8017074:	2300      	movs	r3, #0
 8017076:	1124      	asrs	r4, r4, #4
 8017078:	4650      	mov	r0, sl
 801707a:	4659      	mov	r1, fp
 801707c:	461e      	mov	r6, r3
 801707e:	2c01      	cmp	r4, #1
 8017080:	dc21      	bgt.n	80170c6 <_strtod_l+0x51e>
 8017082:	b10b      	cbz	r3, 8017088 <_strtod_l+0x4e0>
 8017084:	4682      	mov	sl, r0
 8017086:	468b      	mov	fp, r1
 8017088:	492c      	ldr	r1, [pc, #176]	@ (801713c <_strtod_l+0x594>)
 801708a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801708e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017092:	4652      	mov	r2, sl
 8017094:	465b      	mov	r3, fp
 8017096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801709a:	f7e9 fabd 	bl	8000618 <__aeabi_dmul>
 801709e:	4b28      	ldr	r3, [pc, #160]	@ (8017140 <_strtod_l+0x598>)
 80170a0:	460a      	mov	r2, r1
 80170a2:	400b      	ands	r3, r1
 80170a4:	4927      	ldr	r1, [pc, #156]	@ (8017144 <_strtod_l+0x59c>)
 80170a6:	428b      	cmp	r3, r1
 80170a8:	4682      	mov	sl, r0
 80170aa:	d898      	bhi.n	8016fde <_strtod_l+0x436>
 80170ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80170b0:	428b      	cmp	r3, r1
 80170b2:	bf86      	itte	hi
 80170b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8017148 <_strtod_l+0x5a0>
 80170b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80170bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80170c0:	2300      	movs	r3, #0
 80170c2:	9308      	str	r3, [sp, #32]
 80170c4:	e07a      	b.n	80171bc <_strtod_l+0x614>
 80170c6:	07e2      	lsls	r2, r4, #31
 80170c8:	d505      	bpl.n	80170d6 <_strtod_l+0x52e>
 80170ca:	9b08      	ldr	r3, [sp, #32]
 80170cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d0:	f7e9 faa2 	bl	8000618 <__aeabi_dmul>
 80170d4:	2301      	movs	r3, #1
 80170d6:	9a08      	ldr	r2, [sp, #32]
 80170d8:	3208      	adds	r2, #8
 80170da:	3601      	adds	r6, #1
 80170dc:	1064      	asrs	r4, r4, #1
 80170de:	9208      	str	r2, [sp, #32]
 80170e0:	e7cd      	b.n	801707e <_strtod_l+0x4d6>
 80170e2:	d0ed      	beq.n	80170c0 <_strtod_l+0x518>
 80170e4:	4264      	negs	r4, r4
 80170e6:	f014 020f 	ands.w	r2, r4, #15
 80170ea:	d00a      	beq.n	8017102 <_strtod_l+0x55a>
 80170ec:	4b12      	ldr	r3, [pc, #72]	@ (8017138 <_strtod_l+0x590>)
 80170ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170f2:	4650      	mov	r0, sl
 80170f4:	4659      	mov	r1, fp
 80170f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fa:	f7e9 fbb7 	bl	800086c <__aeabi_ddiv>
 80170fe:	4682      	mov	sl, r0
 8017100:	468b      	mov	fp, r1
 8017102:	1124      	asrs	r4, r4, #4
 8017104:	d0dc      	beq.n	80170c0 <_strtod_l+0x518>
 8017106:	2c1f      	cmp	r4, #31
 8017108:	dd20      	ble.n	801714c <_strtod_l+0x5a4>
 801710a:	2400      	movs	r4, #0
 801710c:	46a0      	mov	r8, r4
 801710e:	940a      	str	r4, [sp, #40]	@ 0x28
 8017110:	46a1      	mov	r9, r4
 8017112:	9a05      	ldr	r2, [sp, #20]
 8017114:	2322      	movs	r3, #34	@ 0x22
 8017116:	f04f 0a00 	mov.w	sl, #0
 801711a:	f04f 0b00 	mov.w	fp, #0
 801711e:	6013      	str	r3, [r2, #0]
 8017120:	e768      	b.n	8016ff4 <_strtod_l+0x44c>
 8017122:	bf00      	nop
 8017124:	0801e6a6 	.word	0x0801e6a6
 8017128:	0801e548 	.word	0x0801e548
 801712c:	0801e69e 	.word	0x0801e69e
 8017130:	0801e76e 	.word	0x0801e76e
 8017134:	0801e76a 	.word	0x0801e76a
 8017138:	0801e8d0 	.word	0x0801e8d0
 801713c:	0801e8a8 	.word	0x0801e8a8
 8017140:	7ff00000 	.word	0x7ff00000
 8017144:	7ca00000 	.word	0x7ca00000
 8017148:	7fefffff 	.word	0x7fefffff
 801714c:	f014 0310 	ands.w	r3, r4, #16
 8017150:	bf18      	it	ne
 8017152:	236a      	movne	r3, #106	@ 0x6a
 8017154:	4ea9      	ldr	r6, [pc, #676]	@ (80173fc <_strtod_l+0x854>)
 8017156:	9308      	str	r3, [sp, #32]
 8017158:	4650      	mov	r0, sl
 801715a:	4659      	mov	r1, fp
 801715c:	2300      	movs	r3, #0
 801715e:	07e2      	lsls	r2, r4, #31
 8017160:	d504      	bpl.n	801716c <_strtod_l+0x5c4>
 8017162:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017166:	f7e9 fa57 	bl	8000618 <__aeabi_dmul>
 801716a:	2301      	movs	r3, #1
 801716c:	1064      	asrs	r4, r4, #1
 801716e:	f106 0608 	add.w	r6, r6, #8
 8017172:	d1f4      	bne.n	801715e <_strtod_l+0x5b6>
 8017174:	b10b      	cbz	r3, 801717a <_strtod_l+0x5d2>
 8017176:	4682      	mov	sl, r0
 8017178:	468b      	mov	fp, r1
 801717a:	9b08      	ldr	r3, [sp, #32]
 801717c:	b1b3      	cbz	r3, 80171ac <_strtod_l+0x604>
 801717e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017182:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017186:	2b00      	cmp	r3, #0
 8017188:	4659      	mov	r1, fp
 801718a:	dd0f      	ble.n	80171ac <_strtod_l+0x604>
 801718c:	2b1f      	cmp	r3, #31
 801718e:	dd55      	ble.n	801723c <_strtod_l+0x694>
 8017190:	2b34      	cmp	r3, #52	@ 0x34
 8017192:	bfde      	ittt	le
 8017194:	f04f 33ff 	movle.w	r3, #4294967295
 8017198:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801719c:	4093      	lslle	r3, r2
 801719e:	f04f 0a00 	mov.w	sl, #0
 80171a2:	bfcc      	ite	gt
 80171a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80171a8:	ea03 0b01 	andle.w	fp, r3, r1
 80171ac:	2200      	movs	r2, #0
 80171ae:	2300      	movs	r3, #0
 80171b0:	4650      	mov	r0, sl
 80171b2:	4659      	mov	r1, fp
 80171b4:	f7e9 fc98 	bl	8000ae8 <__aeabi_dcmpeq>
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d1a6      	bne.n	801710a <_strtod_l+0x562>
 80171bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171be:	9300      	str	r3, [sp, #0]
 80171c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80171c2:	9805      	ldr	r0, [sp, #20]
 80171c4:	462b      	mov	r3, r5
 80171c6:	463a      	mov	r2, r7
 80171c8:	f002 ff36 	bl	801a038 <__s2b>
 80171cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80171ce:	2800      	cmp	r0, #0
 80171d0:	f43f af05 	beq.w	8016fde <_strtod_l+0x436>
 80171d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171d6:	2a00      	cmp	r2, #0
 80171d8:	eba9 0308 	sub.w	r3, r9, r8
 80171dc:	bfa8      	it	ge
 80171de:	2300      	movge	r3, #0
 80171e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80171e2:	2400      	movs	r4, #0
 80171e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80171e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80171ea:	46a0      	mov	r8, r4
 80171ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171ee:	9805      	ldr	r0, [sp, #20]
 80171f0:	6859      	ldr	r1, [r3, #4]
 80171f2:	f002 fe79 	bl	8019ee8 <_Balloc>
 80171f6:	4681      	mov	r9, r0
 80171f8:	2800      	cmp	r0, #0
 80171fa:	f43f aef4 	beq.w	8016fe6 <_strtod_l+0x43e>
 80171fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017200:	691a      	ldr	r2, [r3, #16]
 8017202:	3202      	adds	r2, #2
 8017204:	f103 010c 	add.w	r1, r3, #12
 8017208:	0092      	lsls	r2, r2, #2
 801720a:	300c      	adds	r0, #12
 801720c:	f001 fb99 	bl	8018942 <memcpy>
 8017210:	ec4b ab10 	vmov	d0, sl, fp
 8017214:	9805      	ldr	r0, [sp, #20]
 8017216:	aa1c      	add	r2, sp, #112	@ 0x70
 8017218:	a91b      	add	r1, sp, #108	@ 0x6c
 801721a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801721e:	f003 fa47 	bl	801a6b0 <__d2b>
 8017222:	901a      	str	r0, [sp, #104]	@ 0x68
 8017224:	2800      	cmp	r0, #0
 8017226:	f43f aede 	beq.w	8016fe6 <_strtod_l+0x43e>
 801722a:	9805      	ldr	r0, [sp, #20]
 801722c:	2101      	movs	r1, #1
 801722e:	f002 ff99 	bl	801a164 <__i2b>
 8017232:	4680      	mov	r8, r0
 8017234:	b948      	cbnz	r0, 801724a <_strtod_l+0x6a2>
 8017236:	f04f 0800 	mov.w	r8, #0
 801723a:	e6d4      	b.n	8016fe6 <_strtod_l+0x43e>
 801723c:	f04f 32ff 	mov.w	r2, #4294967295
 8017240:	fa02 f303 	lsl.w	r3, r2, r3
 8017244:	ea03 0a0a 	and.w	sl, r3, sl
 8017248:	e7b0      	b.n	80171ac <_strtod_l+0x604>
 801724a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801724c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801724e:	2d00      	cmp	r5, #0
 8017250:	bfab      	itete	ge
 8017252:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017254:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017256:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8017258:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801725a:	bfac      	ite	ge
 801725c:	18ef      	addge	r7, r5, r3
 801725e:	1b5e      	sublt	r6, r3, r5
 8017260:	9b08      	ldr	r3, [sp, #32]
 8017262:	1aed      	subs	r5, r5, r3
 8017264:	4415      	add	r5, r2
 8017266:	4b66      	ldr	r3, [pc, #408]	@ (8017400 <_strtod_l+0x858>)
 8017268:	3d01      	subs	r5, #1
 801726a:	429d      	cmp	r5, r3
 801726c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017270:	da50      	bge.n	8017314 <_strtod_l+0x76c>
 8017272:	1b5b      	subs	r3, r3, r5
 8017274:	2b1f      	cmp	r3, #31
 8017276:	eba2 0203 	sub.w	r2, r2, r3
 801727a:	f04f 0101 	mov.w	r1, #1
 801727e:	dc3d      	bgt.n	80172fc <_strtod_l+0x754>
 8017280:	fa01 f303 	lsl.w	r3, r1, r3
 8017284:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017286:	2300      	movs	r3, #0
 8017288:	9310      	str	r3, [sp, #64]	@ 0x40
 801728a:	18bd      	adds	r5, r7, r2
 801728c:	9b08      	ldr	r3, [sp, #32]
 801728e:	42af      	cmp	r7, r5
 8017290:	4416      	add	r6, r2
 8017292:	441e      	add	r6, r3
 8017294:	463b      	mov	r3, r7
 8017296:	bfa8      	it	ge
 8017298:	462b      	movge	r3, r5
 801729a:	42b3      	cmp	r3, r6
 801729c:	bfa8      	it	ge
 801729e:	4633      	movge	r3, r6
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	bfc2      	ittt	gt
 80172a4:	1aed      	subgt	r5, r5, r3
 80172a6:	1af6      	subgt	r6, r6, r3
 80172a8:	1aff      	subgt	r7, r7, r3
 80172aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	dd16      	ble.n	80172de <_strtod_l+0x736>
 80172b0:	4641      	mov	r1, r8
 80172b2:	9805      	ldr	r0, [sp, #20]
 80172b4:	461a      	mov	r2, r3
 80172b6:	f003 f815 	bl	801a2e4 <__pow5mult>
 80172ba:	4680      	mov	r8, r0
 80172bc:	2800      	cmp	r0, #0
 80172be:	d0ba      	beq.n	8017236 <_strtod_l+0x68e>
 80172c0:	4601      	mov	r1, r0
 80172c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80172c4:	9805      	ldr	r0, [sp, #20]
 80172c6:	f002 ff63 	bl	801a190 <__multiply>
 80172ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80172cc:	2800      	cmp	r0, #0
 80172ce:	f43f ae8a 	beq.w	8016fe6 <_strtod_l+0x43e>
 80172d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80172d4:	9805      	ldr	r0, [sp, #20]
 80172d6:	f002 fe47 	bl	8019f68 <_Bfree>
 80172da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80172dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80172de:	2d00      	cmp	r5, #0
 80172e0:	dc1d      	bgt.n	801731e <_strtod_l+0x776>
 80172e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	dd23      	ble.n	8017330 <_strtod_l+0x788>
 80172e8:	4649      	mov	r1, r9
 80172ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80172ec:	9805      	ldr	r0, [sp, #20]
 80172ee:	f002 fff9 	bl	801a2e4 <__pow5mult>
 80172f2:	4681      	mov	r9, r0
 80172f4:	b9e0      	cbnz	r0, 8017330 <_strtod_l+0x788>
 80172f6:	f04f 0900 	mov.w	r9, #0
 80172fa:	e674      	b.n	8016fe6 <_strtod_l+0x43e>
 80172fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017300:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017304:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8017308:	35e2      	adds	r5, #226	@ 0xe2
 801730a:	fa01 f305 	lsl.w	r3, r1, r5
 801730e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017310:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017312:	e7ba      	b.n	801728a <_strtod_l+0x6e2>
 8017314:	2300      	movs	r3, #0
 8017316:	9310      	str	r3, [sp, #64]	@ 0x40
 8017318:	2301      	movs	r3, #1
 801731a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801731c:	e7b5      	b.n	801728a <_strtod_l+0x6e2>
 801731e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017320:	9805      	ldr	r0, [sp, #20]
 8017322:	462a      	mov	r2, r5
 8017324:	f003 f838 	bl	801a398 <__lshift>
 8017328:	901a      	str	r0, [sp, #104]	@ 0x68
 801732a:	2800      	cmp	r0, #0
 801732c:	d1d9      	bne.n	80172e2 <_strtod_l+0x73a>
 801732e:	e65a      	b.n	8016fe6 <_strtod_l+0x43e>
 8017330:	2e00      	cmp	r6, #0
 8017332:	dd07      	ble.n	8017344 <_strtod_l+0x79c>
 8017334:	4649      	mov	r1, r9
 8017336:	9805      	ldr	r0, [sp, #20]
 8017338:	4632      	mov	r2, r6
 801733a:	f003 f82d 	bl	801a398 <__lshift>
 801733e:	4681      	mov	r9, r0
 8017340:	2800      	cmp	r0, #0
 8017342:	d0d8      	beq.n	80172f6 <_strtod_l+0x74e>
 8017344:	2f00      	cmp	r7, #0
 8017346:	dd08      	ble.n	801735a <_strtod_l+0x7b2>
 8017348:	4641      	mov	r1, r8
 801734a:	9805      	ldr	r0, [sp, #20]
 801734c:	463a      	mov	r2, r7
 801734e:	f003 f823 	bl	801a398 <__lshift>
 8017352:	4680      	mov	r8, r0
 8017354:	2800      	cmp	r0, #0
 8017356:	f43f ae46 	beq.w	8016fe6 <_strtod_l+0x43e>
 801735a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801735c:	9805      	ldr	r0, [sp, #20]
 801735e:	464a      	mov	r2, r9
 8017360:	f003 f8a2 	bl	801a4a8 <__mdiff>
 8017364:	4604      	mov	r4, r0
 8017366:	2800      	cmp	r0, #0
 8017368:	f43f ae3d 	beq.w	8016fe6 <_strtod_l+0x43e>
 801736c:	68c3      	ldr	r3, [r0, #12]
 801736e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017370:	2300      	movs	r3, #0
 8017372:	60c3      	str	r3, [r0, #12]
 8017374:	4641      	mov	r1, r8
 8017376:	f003 f87b 	bl	801a470 <__mcmp>
 801737a:	2800      	cmp	r0, #0
 801737c:	da46      	bge.n	801740c <_strtod_l+0x864>
 801737e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017380:	ea53 030a 	orrs.w	r3, r3, sl
 8017384:	d16c      	bne.n	8017460 <_strtod_l+0x8b8>
 8017386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801738a:	2b00      	cmp	r3, #0
 801738c:	d168      	bne.n	8017460 <_strtod_l+0x8b8>
 801738e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017392:	0d1b      	lsrs	r3, r3, #20
 8017394:	051b      	lsls	r3, r3, #20
 8017396:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801739a:	d961      	bls.n	8017460 <_strtod_l+0x8b8>
 801739c:	6963      	ldr	r3, [r4, #20]
 801739e:	b913      	cbnz	r3, 80173a6 <_strtod_l+0x7fe>
 80173a0:	6923      	ldr	r3, [r4, #16]
 80173a2:	2b01      	cmp	r3, #1
 80173a4:	dd5c      	ble.n	8017460 <_strtod_l+0x8b8>
 80173a6:	4621      	mov	r1, r4
 80173a8:	2201      	movs	r2, #1
 80173aa:	9805      	ldr	r0, [sp, #20]
 80173ac:	f002 fff4 	bl	801a398 <__lshift>
 80173b0:	4641      	mov	r1, r8
 80173b2:	4604      	mov	r4, r0
 80173b4:	f003 f85c 	bl	801a470 <__mcmp>
 80173b8:	2800      	cmp	r0, #0
 80173ba:	dd51      	ble.n	8017460 <_strtod_l+0x8b8>
 80173bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80173c0:	9a08      	ldr	r2, [sp, #32]
 80173c2:	0d1b      	lsrs	r3, r3, #20
 80173c4:	051b      	lsls	r3, r3, #20
 80173c6:	2a00      	cmp	r2, #0
 80173c8:	d06b      	beq.n	80174a2 <_strtod_l+0x8fa>
 80173ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80173ce:	d868      	bhi.n	80174a2 <_strtod_l+0x8fa>
 80173d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80173d4:	f67f ae9d 	bls.w	8017112 <_strtod_l+0x56a>
 80173d8:	4b0a      	ldr	r3, [pc, #40]	@ (8017404 <_strtod_l+0x85c>)
 80173da:	4650      	mov	r0, sl
 80173dc:	4659      	mov	r1, fp
 80173de:	2200      	movs	r2, #0
 80173e0:	f7e9 f91a 	bl	8000618 <__aeabi_dmul>
 80173e4:	4b08      	ldr	r3, [pc, #32]	@ (8017408 <_strtod_l+0x860>)
 80173e6:	400b      	ands	r3, r1
 80173e8:	4682      	mov	sl, r0
 80173ea:	468b      	mov	fp, r1
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	f47f ae05 	bne.w	8016ffc <_strtod_l+0x454>
 80173f2:	9a05      	ldr	r2, [sp, #20]
 80173f4:	2322      	movs	r3, #34	@ 0x22
 80173f6:	6013      	str	r3, [r2, #0]
 80173f8:	e600      	b.n	8016ffc <_strtod_l+0x454>
 80173fa:	bf00      	nop
 80173fc:	0801e570 	.word	0x0801e570
 8017400:	fffffc02 	.word	0xfffffc02
 8017404:	39500000 	.word	0x39500000
 8017408:	7ff00000 	.word	0x7ff00000
 801740c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8017410:	d165      	bne.n	80174de <_strtod_l+0x936>
 8017412:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017418:	b35a      	cbz	r2, 8017472 <_strtod_l+0x8ca>
 801741a:	4a9f      	ldr	r2, [pc, #636]	@ (8017698 <_strtod_l+0xaf0>)
 801741c:	4293      	cmp	r3, r2
 801741e:	d12b      	bne.n	8017478 <_strtod_l+0x8d0>
 8017420:	9b08      	ldr	r3, [sp, #32]
 8017422:	4651      	mov	r1, sl
 8017424:	b303      	cbz	r3, 8017468 <_strtod_l+0x8c0>
 8017426:	4b9d      	ldr	r3, [pc, #628]	@ (801769c <_strtod_l+0xaf4>)
 8017428:	465a      	mov	r2, fp
 801742a:	4013      	ands	r3, r2
 801742c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017430:	f04f 32ff 	mov.w	r2, #4294967295
 8017434:	d81b      	bhi.n	801746e <_strtod_l+0x8c6>
 8017436:	0d1b      	lsrs	r3, r3, #20
 8017438:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801743c:	fa02 f303 	lsl.w	r3, r2, r3
 8017440:	4299      	cmp	r1, r3
 8017442:	d119      	bne.n	8017478 <_strtod_l+0x8d0>
 8017444:	4b96      	ldr	r3, [pc, #600]	@ (80176a0 <_strtod_l+0xaf8>)
 8017446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017448:	429a      	cmp	r2, r3
 801744a:	d102      	bne.n	8017452 <_strtod_l+0x8aa>
 801744c:	3101      	adds	r1, #1
 801744e:	f43f adca 	beq.w	8016fe6 <_strtod_l+0x43e>
 8017452:	4b92      	ldr	r3, [pc, #584]	@ (801769c <_strtod_l+0xaf4>)
 8017454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017456:	401a      	ands	r2, r3
 8017458:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801745c:	f04f 0a00 	mov.w	sl, #0
 8017460:	9b08      	ldr	r3, [sp, #32]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d1b8      	bne.n	80173d8 <_strtod_l+0x830>
 8017466:	e5c9      	b.n	8016ffc <_strtod_l+0x454>
 8017468:	f04f 33ff 	mov.w	r3, #4294967295
 801746c:	e7e8      	b.n	8017440 <_strtod_l+0x898>
 801746e:	4613      	mov	r3, r2
 8017470:	e7e6      	b.n	8017440 <_strtod_l+0x898>
 8017472:	ea53 030a 	orrs.w	r3, r3, sl
 8017476:	d0a1      	beq.n	80173bc <_strtod_l+0x814>
 8017478:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801747a:	b1db      	cbz	r3, 80174b4 <_strtod_l+0x90c>
 801747c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801747e:	4213      	tst	r3, r2
 8017480:	d0ee      	beq.n	8017460 <_strtod_l+0x8b8>
 8017482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017484:	9a08      	ldr	r2, [sp, #32]
 8017486:	4650      	mov	r0, sl
 8017488:	4659      	mov	r1, fp
 801748a:	b1bb      	cbz	r3, 80174bc <_strtod_l+0x914>
 801748c:	f7ff fb6e 	bl	8016b6c <sulp>
 8017490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017494:	ec53 2b10 	vmov	r2, r3, d0
 8017498:	f7e8 ff08 	bl	80002ac <__adddf3>
 801749c:	4682      	mov	sl, r0
 801749e:	468b      	mov	fp, r1
 80174a0:	e7de      	b.n	8017460 <_strtod_l+0x8b8>
 80174a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80174a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80174aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80174ae:	f04f 3aff 	mov.w	sl, #4294967295
 80174b2:	e7d5      	b.n	8017460 <_strtod_l+0x8b8>
 80174b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80174b6:	ea13 0f0a 	tst.w	r3, sl
 80174ba:	e7e1      	b.n	8017480 <_strtod_l+0x8d8>
 80174bc:	f7ff fb56 	bl	8016b6c <sulp>
 80174c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80174c4:	ec53 2b10 	vmov	r2, r3, d0
 80174c8:	f7e8 feee 	bl	80002a8 <__aeabi_dsub>
 80174cc:	2200      	movs	r2, #0
 80174ce:	2300      	movs	r3, #0
 80174d0:	4682      	mov	sl, r0
 80174d2:	468b      	mov	fp, r1
 80174d4:	f7e9 fb08 	bl	8000ae8 <__aeabi_dcmpeq>
 80174d8:	2800      	cmp	r0, #0
 80174da:	d0c1      	beq.n	8017460 <_strtod_l+0x8b8>
 80174dc:	e619      	b.n	8017112 <_strtod_l+0x56a>
 80174de:	4641      	mov	r1, r8
 80174e0:	4620      	mov	r0, r4
 80174e2:	f003 f93d 	bl	801a760 <__ratio>
 80174e6:	ec57 6b10 	vmov	r6, r7, d0
 80174ea:	2200      	movs	r2, #0
 80174ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80174f0:	4630      	mov	r0, r6
 80174f2:	4639      	mov	r1, r7
 80174f4:	f7e9 fb0c 	bl	8000b10 <__aeabi_dcmple>
 80174f8:	2800      	cmp	r0, #0
 80174fa:	d06f      	beq.n	80175dc <_strtod_l+0xa34>
 80174fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d17a      	bne.n	80175f8 <_strtod_l+0xa50>
 8017502:	f1ba 0f00 	cmp.w	sl, #0
 8017506:	d158      	bne.n	80175ba <_strtod_l+0xa12>
 8017508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801750a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801750e:	2b00      	cmp	r3, #0
 8017510:	d15a      	bne.n	80175c8 <_strtod_l+0xa20>
 8017512:	4b64      	ldr	r3, [pc, #400]	@ (80176a4 <_strtod_l+0xafc>)
 8017514:	2200      	movs	r2, #0
 8017516:	4630      	mov	r0, r6
 8017518:	4639      	mov	r1, r7
 801751a:	f7e9 faef 	bl	8000afc <__aeabi_dcmplt>
 801751e:	2800      	cmp	r0, #0
 8017520:	d159      	bne.n	80175d6 <_strtod_l+0xa2e>
 8017522:	4630      	mov	r0, r6
 8017524:	4639      	mov	r1, r7
 8017526:	4b60      	ldr	r3, [pc, #384]	@ (80176a8 <_strtod_l+0xb00>)
 8017528:	2200      	movs	r2, #0
 801752a:	f7e9 f875 	bl	8000618 <__aeabi_dmul>
 801752e:	4606      	mov	r6, r0
 8017530:	460f      	mov	r7, r1
 8017532:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017536:	9606      	str	r6, [sp, #24]
 8017538:	9307      	str	r3, [sp, #28]
 801753a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801753e:	4d57      	ldr	r5, [pc, #348]	@ (801769c <_strtod_l+0xaf4>)
 8017540:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017546:	401d      	ands	r5, r3
 8017548:	4b58      	ldr	r3, [pc, #352]	@ (80176ac <_strtod_l+0xb04>)
 801754a:	429d      	cmp	r5, r3
 801754c:	f040 80b2 	bne.w	80176b4 <_strtod_l+0xb0c>
 8017550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017552:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017556:	ec4b ab10 	vmov	d0, sl, fp
 801755a:	f003 f839 	bl	801a5d0 <__ulp>
 801755e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017562:	ec51 0b10 	vmov	r0, r1, d0
 8017566:	f7e9 f857 	bl	8000618 <__aeabi_dmul>
 801756a:	4652      	mov	r2, sl
 801756c:	465b      	mov	r3, fp
 801756e:	f7e8 fe9d 	bl	80002ac <__adddf3>
 8017572:	460b      	mov	r3, r1
 8017574:	4949      	ldr	r1, [pc, #292]	@ (801769c <_strtod_l+0xaf4>)
 8017576:	4a4e      	ldr	r2, [pc, #312]	@ (80176b0 <_strtod_l+0xb08>)
 8017578:	4019      	ands	r1, r3
 801757a:	4291      	cmp	r1, r2
 801757c:	4682      	mov	sl, r0
 801757e:	d942      	bls.n	8017606 <_strtod_l+0xa5e>
 8017580:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017582:	4b47      	ldr	r3, [pc, #284]	@ (80176a0 <_strtod_l+0xaf8>)
 8017584:	429a      	cmp	r2, r3
 8017586:	d103      	bne.n	8017590 <_strtod_l+0x9e8>
 8017588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801758a:	3301      	adds	r3, #1
 801758c:	f43f ad2b 	beq.w	8016fe6 <_strtod_l+0x43e>
 8017590:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80176a0 <_strtod_l+0xaf8>
 8017594:	f04f 3aff 	mov.w	sl, #4294967295
 8017598:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801759a:	9805      	ldr	r0, [sp, #20]
 801759c:	f002 fce4 	bl	8019f68 <_Bfree>
 80175a0:	9805      	ldr	r0, [sp, #20]
 80175a2:	4649      	mov	r1, r9
 80175a4:	f002 fce0 	bl	8019f68 <_Bfree>
 80175a8:	9805      	ldr	r0, [sp, #20]
 80175aa:	4641      	mov	r1, r8
 80175ac:	f002 fcdc 	bl	8019f68 <_Bfree>
 80175b0:	9805      	ldr	r0, [sp, #20]
 80175b2:	4621      	mov	r1, r4
 80175b4:	f002 fcd8 	bl	8019f68 <_Bfree>
 80175b8:	e618      	b.n	80171ec <_strtod_l+0x644>
 80175ba:	f1ba 0f01 	cmp.w	sl, #1
 80175be:	d103      	bne.n	80175c8 <_strtod_l+0xa20>
 80175c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	f43f ada5 	beq.w	8017112 <_strtod_l+0x56a>
 80175c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017678 <_strtod_l+0xad0>
 80175cc:	4f35      	ldr	r7, [pc, #212]	@ (80176a4 <_strtod_l+0xafc>)
 80175ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80175d2:	2600      	movs	r6, #0
 80175d4:	e7b1      	b.n	801753a <_strtod_l+0x992>
 80175d6:	4f34      	ldr	r7, [pc, #208]	@ (80176a8 <_strtod_l+0xb00>)
 80175d8:	2600      	movs	r6, #0
 80175da:	e7aa      	b.n	8017532 <_strtod_l+0x98a>
 80175dc:	4b32      	ldr	r3, [pc, #200]	@ (80176a8 <_strtod_l+0xb00>)
 80175de:	4630      	mov	r0, r6
 80175e0:	4639      	mov	r1, r7
 80175e2:	2200      	movs	r2, #0
 80175e4:	f7e9 f818 	bl	8000618 <__aeabi_dmul>
 80175e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175ea:	4606      	mov	r6, r0
 80175ec:	460f      	mov	r7, r1
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d09f      	beq.n	8017532 <_strtod_l+0x98a>
 80175f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80175f6:	e7a0      	b.n	801753a <_strtod_l+0x992>
 80175f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017680 <_strtod_l+0xad8>
 80175fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017600:	ec57 6b17 	vmov	r6, r7, d7
 8017604:	e799      	b.n	801753a <_strtod_l+0x992>
 8017606:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801760a:	9b08      	ldr	r3, [sp, #32]
 801760c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8017610:	2b00      	cmp	r3, #0
 8017612:	d1c1      	bne.n	8017598 <_strtod_l+0x9f0>
 8017614:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017618:	0d1b      	lsrs	r3, r3, #20
 801761a:	051b      	lsls	r3, r3, #20
 801761c:	429d      	cmp	r5, r3
 801761e:	d1bb      	bne.n	8017598 <_strtod_l+0x9f0>
 8017620:	4630      	mov	r0, r6
 8017622:	4639      	mov	r1, r7
 8017624:	f7e9 fb58 	bl	8000cd8 <__aeabi_d2lz>
 8017628:	f7e8 ffc8 	bl	80005bc <__aeabi_l2d>
 801762c:	4602      	mov	r2, r0
 801762e:	460b      	mov	r3, r1
 8017630:	4630      	mov	r0, r6
 8017632:	4639      	mov	r1, r7
 8017634:	f7e8 fe38 	bl	80002a8 <__aeabi_dsub>
 8017638:	460b      	mov	r3, r1
 801763a:	4602      	mov	r2, r0
 801763c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017640:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017646:	ea46 060a 	orr.w	r6, r6, sl
 801764a:	431e      	orrs	r6, r3
 801764c:	d06f      	beq.n	801772e <_strtod_l+0xb86>
 801764e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017688 <_strtod_l+0xae0>)
 8017650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017654:	f7e9 fa52 	bl	8000afc <__aeabi_dcmplt>
 8017658:	2800      	cmp	r0, #0
 801765a:	f47f accf 	bne.w	8016ffc <_strtod_l+0x454>
 801765e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017690 <_strtod_l+0xae8>)
 8017660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017664:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017668:	f7e9 fa66 	bl	8000b38 <__aeabi_dcmpgt>
 801766c:	2800      	cmp	r0, #0
 801766e:	d093      	beq.n	8017598 <_strtod_l+0x9f0>
 8017670:	e4c4      	b.n	8016ffc <_strtod_l+0x454>
 8017672:	bf00      	nop
 8017674:	f3af 8000 	nop.w
 8017678:	00000000 	.word	0x00000000
 801767c:	bff00000 	.word	0xbff00000
 8017680:	00000000 	.word	0x00000000
 8017684:	3ff00000 	.word	0x3ff00000
 8017688:	94a03595 	.word	0x94a03595
 801768c:	3fdfffff 	.word	0x3fdfffff
 8017690:	35afe535 	.word	0x35afe535
 8017694:	3fe00000 	.word	0x3fe00000
 8017698:	000fffff 	.word	0x000fffff
 801769c:	7ff00000 	.word	0x7ff00000
 80176a0:	7fefffff 	.word	0x7fefffff
 80176a4:	3ff00000 	.word	0x3ff00000
 80176a8:	3fe00000 	.word	0x3fe00000
 80176ac:	7fe00000 	.word	0x7fe00000
 80176b0:	7c9fffff 	.word	0x7c9fffff
 80176b4:	9b08      	ldr	r3, [sp, #32]
 80176b6:	b323      	cbz	r3, 8017702 <_strtod_l+0xb5a>
 80176b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80176bc:	d821      	bhi.n	8017702 <_strtod_l+0xb5a>
 80176be:	a328      	add	r3, pc, #160	@ (adr r3, 8017760 <_strtod_l+0xbb8>)
 80176c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c4:	4630      	mov	r0, r6
 80176c6:	4639      	mov	r1, r7
 80176c8:	f7e9 fa22 	bl	8000b10 <__aeabi_dcmple>
 80176cc:	b1a0      	cbz	r0, 80176f8 <_strtod_l+0xb50>
 80176ce:	4639      	mov	r1, r7
 80176d0:	4630      	mov	r0, r6
 80176d2:	f7e9 fa79 	bl	8000bc8 <__aeabi_d2uiz>
 80176d6:	2801      	cmp	r0, #1
 80176d8:	bf38      	it	cc
 80176da:	2001      	movcc	r0, #1
 80176dc:	f7e8 ff22 	bl	8000524 <__aeabi_ui2d>
 80176e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176e2:	4606      	mov	r6, r0
 80176e4:	460f      	mov	r7, r1
 80176e6:	b9fb      	cbnz	r3, 8017728 <_strtod_l+0xb80>
 80176e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80176ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80176ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80176f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80176f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80176f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80176fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80176fe:	1b5b      	subs	r3, r3, r5
 8017700:	9311      	str	r3, [sp, #68]	@ 0x44
 8017702:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017706:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801770a:	f002 ff61 	bl	801a5d0 <__ulp>
 801770e:	4650      	mov	r0, sl
 8017710:	ec53 2b10 	vmov	r2, r3, d0
 8017714:	4659      	mov	r1, fp
 8017716:	f7e8 ff7f 	bl	8000618 <__aeabi_dmul>
 801771a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801771e:	f7e8 fdc5 	bl	80002ac <__adddf3>
 8017722:	4682      	mov	sl, r0
 8017724:	468b      	mov	fp, r1
 8017726:	e770      	b.n	801760a <_strtod_l+0xa62>
 8017728:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801772c:	e7e0      	b.n	80176f0 <_strtod_l+0xb48>
 801772e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017768 <_strtod_l+0xbc0>)
 8017730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017734:	f7e9 f9e2 	bl	8000afc <__aeabi_dcmplt>
 8017738:	e798      	b.n	801766c <_strtod_l+0xac4>
 801773a:	2300      	movs	r3, #0
 801773c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801773e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017742:	6013      	str	r3, [r2, #0]
 8017744:	f7ff ba6d 	b.w	8016c22 <_strtod_l+0x7a>
 8017748:	2a65      	cmp	r2, #101	@ 0x65
 801774a:	f43f ab66 	beq.w	8016e1a <_strtod_l+0x272>
 801774e:	2a45      	cmp	r2, #69	@ 0x45
 8017750:	f43f ab63 	beq.w	8016e1a <_strtod_l+0x272>
 8017754:	2301      	movs	r3, #1
 8017756:	f7ff bb9e 	b.w	8016e96 <_strtod_l+0x2ee>
 801775a:	bf00      	nop
 801775c:	f3af 8000 	nop.w
 8017760:	ffc00000 	.word	0xffc00000
 8017764:	41dfffff 	.word	0x41dfffff
 8017768:	94a03595 	.word	0x94a03595
 801776c:	3fcfffff 	.word	0x3fcfffff

08017770 <strtof>:
 8017770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017774:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8017834 <strtof+0xc4>
 8017778:	4b29      	ldr	r3, [pc, #164]	@ (8017820 <strtof+0xb0>)
 801777a:	460a      	mov	r2, r1
 801777c:	ed2d 8b02 	vpush	{d8}
 8017780:	4601      	mov	r1, r0
 8017782:	f8d8 0000 	ldr.w	r0, [r8]
 8017786:	f7ff fa0f 	bl	8016ba8 <_strtod_l>
 801778a:	ec55 4b10 	vmov	r4, r5, d0
 801778e:	4622      	mov	r2, r4
 8017790:	462b      	mov	r3, r5
 8017792:	4620      	mov	r0, r4
 8017794:	4629      	mov	r1, r5
 8017796:	f7e9 f9d9 	bl	8000b4c <__aeabi_dcmpun>
 801779a:	b190      	cbz	r0, 80177c2 <strtof+0x52>
 801779c:	2d00      	cmp	r5, #0
 801779e:	4821      	ldr	r0, [pc, #132]	@ (8017824 <strtof+0xb4>)
 80177a0:	da09      	bge.n	80177b6 <strtof+0x46>
 80177a2:	f001 f8e5 	bl	8018970 <nanf>
 80177a6:	eeb1 8a40 	vneg.f32	s16, s0
 80177aa:	eeb0 0a48 	vmov.f32	s0, s16
 80177ae:	ecbd 8b02 	vpop	{d8}
 80177b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b6:	ecbd 8b02 	vpop	{d8}
 80177ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177be:	f001 b8d7 	b.w	8018970 <nanf>
 80177c2:	4620      	mov	r0, r4
 80177c4:	4629      	mov	r1, r5
 80177c6:	f7e9 fa1f 	bl	8000c08 <__aeabi_d2f>
 80177ca:	ee08 0a10 	vmov	s16, r0
 80177ce:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8017828 <strtof+0xb8>
 80177d2:	eeb0 7ac8 	vabs.f32	s14, s16
 80177d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80177da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177de:	dd11      	ble.n	8017804 <strtof+0x94>
 80177e0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80177e4:	4b11      	ldr	r3, [pc, #68]	@ (801782c <strtof+0xbc>)
 80177e6:	f04f 32ff 	mov.w	r2, #4294967295
 80177ea:	4620      	mov	r0, r4
 80177ec:	4639      	mov	r1, r7
 80177ee:	f7e9 f9ad 	bl	8000b4c <__aeabi_dcmpun>
 80177f2:	b980      	cbnz	r0, 8017816 <strtof+0xa6>
 80177f4:	4b0d      	ldr	r3, [pc, #52]	@ (801782c <strtof+0xbc>)
 80177f6:	f04f 32ff 	mov.w	r2, #4294967295
 80177fa:	4620      	mov	r0, r4
 80177fc:	4639      	mov	r1, r7
 80177fe:	f7e9 f987 	bl	8000b10 <__aeabi_dcmple>
 8017802:	b940      	cbnz	r0, 8017816 <strtof+0xa6>
 8017804:	ee18 3a10 	vmov	r3, s16
 8017808:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801780c:	d1cd      	bne.n	80177aa <strtof+0x3a>
 801780e:	4b08      	ldr	r3, [pc, #32]	@ (8017830 <strtof+0xc0>)
 8017810:	402b      	ands	r3, r5
 8017812:	2b00      	cmp	r3, #0
 8017814:	d0c9      	beq.n	80177aa <strtof+0x3a>
 8017816:	f8d8 3000 	ldr.w	r3, [r8]
 801781a:	2222      	movs	r2, #34	@ 0x22
 801781c:	601a      	str	r2, [r3, #0]
 801781e:	e7c4      	b.n	80177aa <strtof+0x3a>
 8017820:	2000003c 	.word	0x2000003c
 8017824:	0801e76a 	.word	0x0801e76a
 8017828:	7f7fffff 	.word	0x7f7fffff
 801782c:	7fefffff 	.word	0x7fefffff
 8017830:	7ff00000 	.word	0x7ff00000
 8017834:	200001a8 	.word	0x200001a8

08017838 <__cvt>:
 8017838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801783c:	ec57 6b10 	vmov	r6, r7, d0
 8017840:	2f00      	cmp	r7, #0
 8017842:	460c      	mov	r4, r1
 8017844:	4619      	mov	r1, r3
 8017846:	463b      	mov	r3, r7
 8017848:	bfbb      	ittet	lt
 801784a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801784e:	461f      	movlt	r7, r3
 8017850:	2300      	movge	r3, #0
 8017852:	232d      	movlt	r3, #45	@ 0x2d
 8017854:	700b      	strb	r3, [r1, #0]
 8017856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017858:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801785c:	4691      	mov	r9, r2
 801785e:	f023 0820 	bic.w	r8, r3, #32
 8017862:	bfbc      	itt	lt
 8017864:	4632      	movlt	r2, r6
 8017866:	4616      	movlt	r6, r2
 8017868:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801786c:	d005      	beq.n	801787a <__cvt+0x42>
 801786e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8017872:	d100      	bne.n	8017876 <__cvt+0x3e>
 8017874:	3401      	adds	r4, #1
 8017876:	2102      	movs	r1, #2
 8017878:	e000      	b.n	801787c <__cvt+0x44>
 801787a:	2103      	movs	r1, #3
 801787c:	ab03      	add	r3, sp, #12
 801787e:	9301      	str	r3, [sp, #4]
 8017880:	ab02      	add	r3, sp, #8
 8017882:	9300      	str	r3, [sp, #0]
 8017884:	ec47 6b10 	vmov	d0, r6, r7
 8017888:	4653      	mov	r3, sl
 801788a:	4622      	mov	r2, r4
 801788c:	f001 f91c 	bl	8018ac8 <_dtoa_r>
 8017890:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017894:	4605      	mov	r5, r0
 8017896:	d119      	bne.n	80178cc <__cvt+0x94>
 8017898:	f019 0f01 	tst.w	r9, #1
 801789c:	d00e      	beq.n	80178bc <__cvt+0x84>
 801789e:	eb00 0904 	add.w	r9, r0, r4
 80178a2:	2200      	movs	r2, #0
 80178a4:	2300      	movs	r3, #0
 80178a6:	4630      	mov	r0, r6
 80178a8:	4639      	mov	r1, r7
 80178aa:	f7e9 f91d 	bl	8000ae8 <__aeabi_dcmpeq>
 80178ae:	b108      	cbz	r0, 80178b4 <__cvt+0x7c>
 80178b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80178b4:	2230      	movs	r2, #48	@ 0x30
 80178b6:	9b03      	ldr	r3, [sp, #12]
 80178b8:	454b      	cmp	r3, r9
 80178ba:	d31e      	bcc.n	80178fa <__cvt+0xc2>
 80178bc:	9b03      	ldr	r3, [sp, #12]
 80178be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80178c0:	1b5b      	subs	r3, r3, r5
 80178c2:	4628      	mov	r0, r5
 80178c4:	6013      	str	r3, [r2, #0]
 80178c6:	b004      	add	sp, #16
 80178c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80178d0:	eb00 0904 	add.w	r9, r0, r4
 80178d4:	d1e5      	bne.n	80178a2 <__cvt+0x6a>
 80178d6:	7803      	ldrb	r3, [r0, #0]
 80178d8:	2b30      	cmp	r3, #48	@ 0x30
 80178da:	d10a      	bne.n	80178f2 <__cvt+0xba>
 80178dc:	2200      	movs	r2, #0
 80178de:	2300      	movs	r3, #0
 80178e0:	4630      	mov	r0, r6
 80178e2:	4639      	mov	r1, r7
 80178e4:	f7e9 f900 	bl	8000ae8 <__aeabi_dcmpeq>
 80178e8:	b918      	cbnz	r0, 80178f2 <__cvt+0xba>
 80178ea:	f1c4 0401 	rsb	r4, r4, #1
 80178ee:	f8ca 4000 	str.w	r4, [sl]
 80178f2:	f8da 3000 	ldr.w	r3, [sl]
 80178f6:	4499      	add	r9, r3
 80178f8:	e7d3      	b.n	80178a2 <__cvt+0x6a>
 80178fa:	1c59      	adds	r1, r3, #1
 80178fc:	9103      	str	r1, [sp, #12]
 80178fe:	701a      	strb	r2, [r3, #0]
 8017900:	e7d9      	b.n	80178b6 <__cvt+0x7e>

08017902 <__exponent>:
 8017902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017904:	2900      	cmp	r1, #0
 8017906:	bfba      	itte	lt
 8017908:	4249      	neglt	r1, r1
 801790a:	232d      	movlt	r3, #45	@ 0x2d
 801790c:	232b      	movge	r3, #43	@ 0x2b
 801790e:	2909      	cmp	r1, #9
 8017910:	7002      	strb	r2, [r0, #0]
 8017912:	7043      	strb	r3, [r0, #1]
 8017914:	dd29      	ble.n	801796a <__exponent+0x68>
 8017916:	f10d 0307 	add.w	r3, sp, #7
 801791a:	461d      	mov	r5, r3
 801791c:	270a      	movs	r7, #10
 801791e:	461a      	mov	r2, r3
 8017920:	fbb1 f6f7 	udiv	r6, r1, r7
 8017924:	fb07 1416 	mls	r4, r7, r6, r1
 8017928:	3430      	adds	r4, #48	@ 0x30
 801792a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801792e:	460c      	mov	r4, r1
 8017930:	2c63      	cmp	r4, #99	@ 0x63
 8017932:	f103 33ff 	add.w	r3, r3, #4294967295
 8017936:	4631      	mov	r1, r6
 8017938:	dcf1      	bgt.n	801791e <__exponent+0x1c>
 801793a:	3130      	adds	r1, #48	@ 0x30
 801793c:	1e94      	subs	r4, r2, #2
 801793e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017942:	1c41      	adds	r1, r0, #1
 8017944:	4623      	mov	r3, r4
 8017946:	42ab      	cmp	r3, r5
 8017948:	d30a      	bcc.n	8017960 <__exponent+0x5e>
 801794a:	f10d 0309 	add.w	r3, sp, #9
 801794e:	1a9b      	subs	r3, r3, r2
 8017950:	42ac      	cmp	r4, r5
 8017952:	bf88      	it	hi
 8017954:	2300      	movhi	r3, #0
 8017956:	3302      	adds	r3, #2
 8017958:	4403      	add	r3, r0
 801795a:	1a18      	subs	r0, r3, r0
 801795c:	b003      	add	sp, #12
 801795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017960:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017964:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017968:	e7ed      	b.n	8017946 <__exponent+0x44>
 801796a:	2330      	movs	r3, #48	@ 0x30
 801796c:	3130      	adds	r1, #48	@ 0x30
 801796e:	7083      	strb	r3, [r0, #2]
 8017970:	70c1      	strb	r1, [r0, #3]
 8017972:	1d03      	adds	r3, r0, #4
 8017974:	e7f1      	b.n	801795a <__exponent+0x58>
	...

08017978 <_printf_float>:
 8017978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801797c:	b08d      	sub	sp, #52	@ 0x34
 801797e:	460c      	mov	r4, r1
 8017980:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017984:	4616      	mov	r6, r2
 8017986:	461f      	mov	r7, r3
 8017988:	4605      	mov	r5, r0
 801798a:	f000 ff63 	bl	8018854 <_localeconv_r>
 801798e:	6803      	ldr	r3, [r0, #0]
 8017990:	9304      	str	r3, [sp, #16]
 8017992:	4618      	mov	r0, r3
 8017994:	f7e8 fc7c 	bl	8000290 <strlen>
 8017998:	2300      	movs	r3, #0
 801799a:	930a      	str	r3, [sp, #40]	@ 0x28
 801799c:	f8d8 3000 	ldr.w	r3, [r8]
 80179a0:	9005      	str	r0, [sp, #20]
 80179a2:	3307      	adds	r3, #7
 80179a4:	f023 0307 	bic.w	r3, r3, #7
 80179a8:	f103 0208 	add.w	r2, r3, #8
 80179ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80179b0:	f8d4 b000 	ldr.w	fp, [r4]
 80179b4:	f8c8 2000 	str.w	r2, [r8]
 80179b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80179bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80179c0:	9307      	str	r3, [sp, #28]
 80179c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80179c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80179ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80179ce:	4b9c      	ldr	r3, [pc, #624]	@ (8017c40 <_printf_float+0x2c8>)
 80179d0:	f04f 32ff 	mov.w	r2, #4294967295
 80179d4:	f7e9 f8ba 	bl	8000b4c <__aeabi_dcmpun>
 80179d8:	bb70      	cbnz	r0, 8017a38 <_printf_float+0xc0>
 80179da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80179de:	4b98      	ldr	r3, [pc, #608]	@ (8017c40 <_printf_float+0x2c8>)
 80179e0:	f04f 32ff 	mov.w	r2, #4294967295
 80179e4:	f7e9 f894 	bl	8000b10 <__aeabi_dcmple>
 80179e8:	bb30      	cbnz	r0, 8017a38 <_printf_float+0xc0>
 80179ea:	2200      	movs	r2, #0
 80179ec:	2300      	movs	r3, #0
 80179ee:	4640      	mov	r0, r8
 80179f0:	4649      	mov	r1, r9
 80179f2:	f7e9 f883 	bl	8000afc <__aeabi_dcmplt>
 80179f6:	b110      	cbz	r0, 80179fe <_printf_float+0x86>
 80179f8:	232d      	movs	r3, #45	@ 0x2d
 80179fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179fe:	4a91      	ldr	r2, [pc, #580]	@ (8017c44 <_printf_float+0x2cc>)
 8017a00:	4b91      	ldr	r3, [pc, #580]	@ (8017c48 <_printf_float+0x2d0>)
 8017a02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017a06:	bf94      	ite	ls
 8017a08:	4690      	movls	r8, r2
 8017a0a:	4698      	movhi	r8, r3
 8017a0c:	2303      	movs	r3, #3
 8017a0e:	6123      	str	r3, [r4, #16]
 8017a10:	f02b 0304 	bic.w	r3, fp, #4
 8017a14:	6023      	str	r3, [r4, #0]
 8017a16:	f04f 0900 	mov.w	r9, #0
 8017a1a:	9700      	str	r7, [sp, #0]
 8017a1c:	4633      	mov	r3, r6
 8017a1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017a20:	4621      	mov	r1, r4
 8017a22:	4628      	mov	r0, r5
 8017a24:	f000 f9d2 	bl	8017dcc <_printf_common>
 8017a28:	3001      	adds	r0, #1
 8017a2a:	f040 808d 	bne.w	8017b48 <_printf_float+0x1d0>
 8017a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a32:	b00d      	add	sp, #52	@ 0x34
 8017a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a38:	4642      	mov	r2, r8
 8017a3a:	464b      	mov	r3, r9
 8017a3c:	4640      	mov	r0, r8
 8017a3e:	4649      	mov	r1, r9
 8017a40:	f7e9 f884 	bl	8000b4c <__aeabi_dcmpun>
 8017a44:	b140      	cbz	r0, 8017a58 <_printf_float+0xe0>
 8017a46:	464b      	mov	r3, r9
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	bfbc      	itt	lt
 8017a4c:	232d      	movlt	r3, #45	@ 0x2d
 8017a4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017a52:	4a7e      	ldr	r2, [pc, #504]	@ (8017c4c <_printf_float+0x2d4>)
 8017a54:	4b7e      	ldr	r3, [pc, #504]	@ (8017c50 <_printf_float+0x2d8>)
 8017a56:	e7d4      	b.n	8017a02 <_printf_float+0x8a>
 8017a58:	6863      	ldr	r3, [r4, #4]
 8017a5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8017a5e:	9206      	str	r2, [sp, #24]
 8017a60:	1c5a      	adds	r2, r3, #1
 8017a62:	d13b      	bne.n	8017adc <_printf_float+0x164>
 8017a64:	2306      	movs	r3, #6
 8017a66:	6063      	str	r3, [r4, #4]
 8017a68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	6022      	str	r2, [r4, #0]
 8017a70:	9303      	str	r3, [sp, #12]
 8017a72:	ab0a      	add	r3, sp, #40	@ 0x28
 8017a74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017a78:	ab09      	add	r3, sp, #36	@ 0x24
 8017a7a:	9300      	str	r3, [sp, #0]
 8017a7c:	6861      	ldr	r1, [r4, #4]
 8017a7e:	ec49 8b10 	vmov	d0, r8, r9
 8017a82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017a86:	4628      	mov	r0, r5
 8017a88:	f7ff fed6 	bl	8017838 <__cvt>
 8017a8c:	9b06      	ldr	r3, [sp, #24]
 8017a8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017a90:	2b47      	cmp	r3, #71	@ 0x47
 8017a92:	4680      	mov	r8, r0
 8017a94:	d129      	bne.n	8017aea <_printf_float+0x172>
 8017a96:	1cc8      	adds	r0, r1, #3
 8017a98:	db02      	blt.n	8017aa0 <_printf_float+0x128>
 8017a9a:	6863      	ldr	r3, [r4, #4]
 8017a9c:	4299      	cmp	r1, r3
 8017a9e:	dd41      	ble.n	8017b24 <_printf_float+0x1ac>
 8017aa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8017aa4:	fa5f fa8a 	uxtb.w	sl, sl
 8017aa8:	3901      	subs	r1, #1
 8017aaa:	4652      	mov	r2, sl
 8017aac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017ab0:	9109      	str	r1, [sp, #36]	@ 0x24
 8017ab2:	f7ff ff26 	bl	8017902 <__exponent>
 8017ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017ab8:	1813      	adds	r3, r2, r0
 8017aba:	2a01      	cmp	r2, #1
 8017abc:	4681      	mov	r9, r0
 8017abe:	6123      	str	r3, [r4, #16]
 8017ac0:	dc02      	bgt.n	8017ac8 <_printf_float+0x150>
 8017ac2:	6822      	ldr	r2, [r4, #0]
 8017ac4:	07d2      	lsls	r2, r2, #31
 8017ac6:	d501      	bpl.n	8017acc <_printf_float+0x154>
 8017ac8:	3301      	adds	r3, #1
 8017aca:	6123      	str	r3, [r4, #16]
 8017acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d0a2      	beq.n	8017a1a <_printf_float+0xa2>
 8017ad4:	232d      	movs	r3, #45	@ 0x2d
 8017ad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017ada:	e79e      	b.n	8017a1a <_printf_float+0xa2>
 8017adc:	9a06      	ldr	r2, [sp, #24]
 8017ade:	2a47      	cmp	r2, #71	@ 0x47
 8017ae0:	d1c2      	bne.n	8017a68 <_printf_float+0xf0>
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d1c0      	bne.n	8017a68 <_printf_float+0xf0>
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	e7bd      	b.n	8017a66 <_printf_float+0xee>
 8017aea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017aee:	d9db      	bls.n	8017aa8 <_printf_float+0x130>
 8017af0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017af4:	d118      	bne.n	8017b28 <_printf_float+0x1b0>
 8017af6:	2900      	cmp	r1, #0
 8017af8:	6863      	ldr	r3, [r4, #4]
 8017afa:	dd0b      	ble.n	8017b14 <_printf_float+0x19c>
 8017afc:	6121      	str	r1, [r4, #16]
 8017afe:	b913      	cbnz	r3, 8017b06 <_printf_float+0x18e>
 8017b00:	6822      	ldr	r2, [r4, #0]
 8017b02:	07d0      	lsls	r0, r2, #31
 8017b04:	d502      	bpl.n	8017b0c <_printf_float+0x194>
 8017b06:	3301      	adds	r3, #1
 8017b08:	440b      	add	r3, r1
 8017b0a:	6123      	str	r3, [r4, #16]
 8017b0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017b0e:	f04f 0900 	mov.w	r9, #0
 8017b12:	e7db      	b.n	8017acc <_printf_float+0x154>
 8017b14:	b913      	cbnz	r3, 8017b1c <_printf_float+0x1a4>
 8017b16:	6822      	ldr	r2, [r4, #0]
 8017b18:	07d2      	lsls	r2, r2, #31
 8017b1a:	d501      	bpl.n	8017b20 <_printf_float+0x1a8>
 8017b1c:	3302      	adds	r3, #2
 8017b1e:	e7f4      	b.n	8017b0a <_printf_float+0x192>
 8017b20:	2301      	movs	r3, #1
 8017b22:	e7f2      	b.n	8017b0a <_printf_float+0x192>
 8017b24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8017b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017b2a:	4299      	cmp	r1, r3
 8017b2c:	db05      	blt.n	8017b3a <_printf_float+0x1c2>
 8017b2e:	6823      	ldr	r3, [r4, #0]
 8017b30:	6121      	str	r1, [r4, #16]
 8017b32:	07d8      	lsls	r0, r3, #31
 8017b34:	d5ea      	bpl.n	8017b0c <_printf_float+0x194>
 8017b36:	1c4b      	adds	r3, r1, #1
 8017b38:	e7e7      	b.n	8017b0a <_printf_float+0x192>
 8017b3a:	2900      	cmp	r1, #0
 8017b3c:	bfd4      	ite	le
 8017b3e:	f1c1 0202 	rsble	r2, r1, #2
 8017b42:	2201      	movgt	r2, #1
 8017b44:	4413      	add	r3, r2
 8017b46:	e7e0      	b.n	8017b0a <_printf_float+0x192>
 8017b48:	6823      	ldr	r3, [r4, #0]
 8017b4a:	055a      	lsls	r2, r3, #21
 8017b4c:	d407      	bmi.n	8017b5e <_printf_float+0x1e6>
 8017b4e:	6923      	ldr	r3, [r4, #16]
 8017b50:	4642      	mov	r2, r8
 8017b52:	4631      	mov	r1, r6
 8017b54:	4628      	mov	r0, r5
 8017b56:	47b8      	blx	r7
 8017b58:	3001      	adds	r0, #1
 8017b5a:	d12b      	bne.n	8017bb4 <_printf_float+0x23c>
 8017b5c:	e767      	b.n	8017a2e <_printf_float+0xb6>
 8017b5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017b62:	f240 80dd 	bls.w	8017d20 <_printf_float+0x3a8>
 8017b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	f7e8 ffbb 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b72:	2800      	cmp	r0, #0
 8017b74:	d033      	beq.n	8017bde <_printf_float+0x266>
 8017b76:	4a37      	ldr	r2, [pc, #220]	@ (8017c54 <_printf_float+0x2dc>)
 8017b78:	2301      	movs	r3, #1
 8017b7a:	4631      	mov	r1, r6
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	47b8      	blx	r7
 8017b80:	3001      	adds	r0, #1
 8017b82:	f43f af54 	beq.w	8017a2e <_printf_float+0xb6>
 8017b86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017b8a:	4543      	cmp	r3, r8
 8017b8c:	db02      	blt.n	8017b94 <_printf_float+0x21c>
 8017b8e:	6823      	ldr	r3, [r4, #0]
 8017b90:	07d8      	lsls	r0, r3, #31
 8017b92:	d50f      	bpl.n	8017bb4 <_printf_float+0x23c>
 8017b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017b98:	4631      	mov	r1, r6
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	47b8      	blx	r7
 8017b9e:	3001      	adds	r0, #1
 8017ba0:	f43f af45 	beq.w	8017a2e <_printf_float+0xb6>
 8017ba4:	f04f 0900 	mov.w	r9, #0
 8017ba8:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bac:	f104 0a1a 	add.w	sl, r4, #26
 8017bb0:	45c8      	cmp	r8, r9
 8017bb2:	dc09      	bgt.n	8017bc8 <_printf_float+0x250>
 8017bb4:	6823      	ldr	r3, [r4, #0]
 8017bb6:	079b      	lsls	r3, r3, #30
 8017bb8:	f100 8103 	bmi.w	8017dc2 <_printf_float+0x44a>
 8017bbc:	68e0      	ldr	r0, [r4, #12]
 8017bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017bc0:	4298      	cmp	r0, r3
 8017bc2:	bfb8      	it	lt
 8017bc4:	4618      	movlt	r0, r3
 8017bc6:	e734      	b.n	8017a32 <_printf_float+0xba>
 8017bc8:	2301      	movs	r3, #1
 8017bca:	4652      	mov	r2, sl
 8017bcc:	4631      	mov	r1, r6
 8017bce:	4628      	mov	r0, r5
 8017bd0:	47b8      	blx	r7
 8017bd2:	3001      	adds	r0, #1
 8017bd4:	f43f af2b 	beq.w	8017a2e <_printf_float+0xb6>
 8017bd8:	f109 0901 	add.w	r9, r9, #1
 8017bdc:	e7e8      	b.n	8017bb0 <_printf_float+0x238>
 8017bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	dc39      	bgt.n	8017c58 <_printf_float+0x2e0>
 8017be4:	4a1b      	ldr	r2, [pc, #108]	@ (8017c54 <_printf_float+0x2dc>)
 8017be6:	2301      	movs	r3, #1
 8017be8:	4631      	mov	r1, r6
 8017bea:	4628      	mov	r0, r5
 8017bec:	47b8      	blx	r7
 8017bee:	3001      	adds	r0, #1
 8017bf0:	f43f af1d 	beq.w	8017a2e <_printf_float+0xb6>
 8017bf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017bf8:	ea59 0303 	orrs.w	r3, r9, r3
 8017bfc:	d102      	bne.n	8017c04 <_printf_float+0x28c>
 8017bfe:	6823      	ldr	r3, [r4, #0]
 8017c00:	07d9      	lsls	r1, r3, #31
 8017c02:	d5d7      	bpl.n	8017bb4 <_printf_float+0x23c>
 8017c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017c08:	4631      	mov	r1, r6
 8017c0a:	4628      	mov	r0, r5
 8017c0c:	47b8      	blx	r7
 8017c0e:	3001      	adds	r0, #1
 8017c10:	f43f af0d 	beq.w	8017a2e <_printf_float+0xb6>
 8017c14:	f04f 0a00 	mov.w	sl, #0
 8017c18:	f104 0b1a 	add.w	fp, r4, #26
 8017c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c1e:	425b      	negs	r3, r3
 8017c20:	4553      	cmp	r3, sl
 8017c22:	dc01      	bgt.n	8017c28 <_printf_float+0x2b0>
 8017c24:	464b      	mov	r3, r9
 8017c26:	e793      	b.n	8017b50 <_printf_float+0x1d8>
 8017c28:	2301      	movs	r3, #1
 8017c2a:	465a      	mov	r2, fp
 8017c2c:	4631      	mov	r1, r6
 8017c2e:	4628      	mov	r0, r5
 8017c30:	47b8      	blx	r7
 8017c32:	3001      	adds	r0, #1
 8017c34:	f43f aefb 	beq.w	8017a2e <_printf_float+0xb6>
 8017c38:	f10a 0a01 	add.w	sl, sl, #1
 8017c3c:	e7ee      	b.n	8017c1c <_printf_float+0x2a4>
 8017c3e:	bf00      	nop
 8017c40:	7fefffff 	.word	0x7fefffff
 8017c44:	0801e699 	.word	0x0801e699
 8017c48:	0801e69d 	.word	0x0801e69d
 8017c4c:	0801e6a1 	.word	0x0801e6a1
 8017c50:	0801e6a5 	.word	0x0801e6a5
 8017c54:	0801e6a9 	.word	0x0801e6a9
 8017c58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017c5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017c5e:	4553      	cmp	r3, sl
 8017c60:	bfa8      	it	ge
 8017c62:	4653      	movge	r3, sl
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	4699      	mov	r9, r3
 8017c68:	dc36      	bgt.n	8017cd8 <_printf_float+0x360>
 8017c6a:	f04f 0b00 	mov.w	fp, #0
 8017c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017c72:	f104 021a 	add.w	r2, r4, #26
 8017c76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017c78:	9306      	str	r3, [sp, #24]
 8017c7a:	eba3 0309 	sub.w	r3, r3, r9
 8017c7e:	455b      	cmp	r3, fp
 8017c80:	dc31      	bgt.n	8017ce6 <_printf_float+0x36e>
 8017c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c84:	459a      	cmp	sl, r3
 8017c86:	dc3a      	bgt.n	8017cfe <_printf_float+0x386>
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	07da      	lsls	r2, r3, #31
 8017c8c:	d437      	bmi.n	8017cfe <_printf_float+0x386>
 8017c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c90:	ebaa 0903 	sub.w	r9, sl, r3
 8017c94:	9b06      	ldr	r3, [sp, #24]
 8017c96:	ebaa 0303 	sub.w	r3, sl, r3
 8017c9a:	4599      	cmp	r9, r3
 8017c9c:	bfa8      	it	ge
 8017c9e:	4699      	movge	r9, r3
 8017ca0:	f1b9 0f00 	cmp.w	r9, #0
 8017ca4:	dc33      	bgt.n	8017d0e <_printf_float+0x396>
 8017ca6:	f04f 0800 	mov.w	r8, #0
 8017caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017cae:	f104 0b1a 	add.w	fp, r4, #26
 8017cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8017cb8:	eba3 0309 	sub.w	r3, r3, r9
 8017cbc:	4543      	cmp	r3, r8
 8017cbe:	f77f af79 	ble.w	8017bb4 <_printf_float+0x23c>
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	465a      	mov	r2, fp
 8017cc6:	4631      	mov	r1, r6
 8017cc8:	4628      	mov	r0, r5
 8017cca:	47b8      	blx	r7
 8017ccc:	3001      	adds	r0, #1
 8017cce:	f43f aeae 	beq.w	8017a2e <_printf_float+0xb6>
 8017cd2:	f108 0801 	add.w	r8, r8, #1
 8017cd6:	e7ec      	b.n	8017cb2 <_printf_float+0x33a>
 8017cd8:	4642      	mov	r2, r8
 8017cda:	4631      	mov	r1, r6
 8017cdc:	4628      	mov	r0, r5
 8017cde:	47b8      	blx	r7
 8017ce0:	3001      	adds	r0, #1
 8017ce2:	d1c2      	bne.n	8017c6a <_printf_float+0x2f2>
 8017ce4:	e6a3      	b.n	8017a2e <_printf_float+0xb6>
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	4631      	mov	r1, r6
 8017cea:	4628      	mov	r0, r5
 8017cec:	9206      	str	r2, [sp, #24]
 8017cee:	47b8      	blx	r7
 8017cf0:	3001      	adds	r0, #1
 8017cf2:	f43f ae9c 	beq.w	8017a2e <_printf_float+0xb6>
 8017cf6:	9a06      	ldr	r2, [sp, #24]
 8017cf8:	f10b 0b01 	add.w	fp, fp, #1
 8017cfc:	e7bb      	b.n	8017c76 <_printf_float+0x2fe>
 8017cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d02:	4631      	mov	r1, r6
 8017d04:	4628      	mov	r0, r5
 8017d06:	47b8      	blx	r7
 8017d08:	3001      	adds	r0, #1
 8017d0a:	d1c0      	bne.n	8017c8e <_printf_float+0x316>
 8017d0c:	e68f      	b.n	8017a2e <_printf_float+0xb6>
 8017d0e:	9a06      	ldr	r2, [sp, #24]
 8017d10:	464b      	mov	r3, r9
 8017d12:	4442      	add	r2, r8
 8017d14:	4631      	mov	r1, r6
 8017d16:	4628      	mov	r0, r5
 8017d18:	47b8      	blx	r7
 8017d1a:	3001      	adds	r0, #1
 8017d1c:	d1c3      	bne.n	8017ca6 <_printf_float+0x32e>
 8017d1e:	e686      	b.n	8017a2e <_printf_float+0xb6>
 8017d20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017d24:	f1ba 0f01 	cmp.w	sl, #1
 8017d28:	dc01      	bgt.n	8017d2e <_printf_float+0x3b6>
 8017d2a:	07db      	lsls	r3, r3, #31
 8017d2c:	d536      	bpl.n	8017d9c <_printf_float+0x424>
 8017d2e:	2301      	movs	r3, #1
 8017d30:	4642      	mov	r2, r8
 8017d32:	4631      	mov	r1, r6
 8017d34:	4628      	mov	r0, r5
 8017d36:	47b8      	blx	r7
 8017d38:	3001      	adds	r0, #1
 8017d3a:	f43f ae78 	beq.w	8017a2e <_printf_float+0xb6>
 8017d3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d42:	4631      	mov	r1, r6
 8017d44:	4628      	mov	r0, r5
 8017d46:	47b8      	blx	r7
 8017d48:	3001      	adds	r0, #1
 8017d4a:	f43f ae70 	beq.w	8017a2e <_printf_float+0xb6>
 8017d4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017d52:	2200      	movs	r2, #0
 8017d54:	2300      	movs	r3, #0
 8017d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d5a:	f7e8 fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 8017d5e:	b9c0      	cbnz	r0, 8017d92 <_printf_float+0x41a>
 8017d60:	4653      	mov	r3, sl
 8017d62:	f108 0201 	add.w	r2, r8, #1
 8017d66:	4631      	mov	r1, r6
 8017d68:	4628      	mov	r0, r5
 8017d6a:	47b8      	blx	r7
 8017d6c:	3001      	adds	r0, #1
 8017d6e:	d10c      	bne.n	8017d8a <_printf_float+0x412>
 8017d70:	e65d      	b.n	8017a2e <_printf_float+0xb6>
 8017d72:	2301      	movs	r3, #1
 8017d74:	465a      	mov	r2, fp
 8017d76:	4631      	mov	r1, r6
 8017d78:	4628      	mov	r0, r5
 8017d7a:	47b8      	blx	r7
 8017d7c:	3001      	adds	r0, #1
 8017d7e:	f43f ae56 	beq.w	8017a2e <_printf_float+0xb6>
 8017d82:	f108 0801 	add.w	r8, r8, #1
 8017d86:	45d0      	cmp	r8, sl
 8017d88:	dbf3      	blt.n	8017d72 <_printf_float+0x3fa>
 8017d8a:	464b      	mov	r3, r9
 8017d8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017d90:	e6df      	b.n	8017b52 <_printf_float+0x1da>
 8017d92:	f04f 0800 	mov.w	r8, #0
 8017d96:	f104 0b1a 	add.w	fp, r4, #26
 8017d9a:	e7f4      	b.n	8017d86 <_printf_float+0x40e>
 8017d9c:	2301      	movs	r3, #1
 8017d9e:	4642      	mov	r2, r8
 8017da0:	e7e1      	b.n	8017d66 <_printf_float+0x3ee>
 8017da2:	2301      	movs	r3, #1
 8017da4:	464a      	mov	r2, r9
 8017da6:	4631      	mov	r1, r6
 8017da8:	4628      	mov	r0, r5
 8017daa:	47b8      	blx	r7
 8017dac:	3001      	adds	r0, #1
 8017dae:	f43f ae3e 	beq.w	8017a2e <_printf_float+0xb6>
 8017db2:	f108 0801 	add.w	r8, r8, #1
 8017db6:	68e3      	ldr	r3, [r4, #12]
 8017db8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017dba:	1a5b      	subs	r3, r3, r1
 8017dbc:	4543      	cmp	r3, r8
 8017dbe:	dcf0      	bgt.n	8017da2 <_printf_float+0x42a>
 8017dc0:	e6fc      	b.n	8017bbc <_printf_float+0x244>
 8017dc2:	f04f 0800 	mov.w	r8, #0
 8017dc6:	f104 0919 	add.w	r9, r4, #25
 8017dca:	e7f4      	b.n	8017db6 <_printf_float+0x43e>

08017dcc <_printf_common>:
 8017dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dd0:	4616      	mov	r6, r2
 8017dd2:	4698      	mov	r8, r3
 8017dd4:	688a      	ldr	r2, [r1, #8]
 8017dd6:	690b      	ldr	r3, [r1, #16]
 8017dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	bfb8      	it	lt
 8017de0:	4613      	movlt	r3, r2
 8017de2:	6033      	str	r3, [r6, #0]
 8017de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017de8:	4607      	mov	r7, r0
 8017dea:	460c      	mov	r4, r1
 8017dec:	b10a      	cbz	r2, 8017df2 <_printf_common+0x26>
 8017dee:	3301      	adds	r3, #1
 8017df0:	6033      	str	r3, [r6, #0]
 8017df2:	6823      	ldr	r3, [r4, #0]
 8017df4:	0699      	lsls	r1, r3, #26
 8017df6:	bf42      	ittt	mi
 8017df8:	6833      	ldrmi	r3, [r6, #0]
 8017dfa:	3302      	addmi	r3, #2
 8017dfc:	6033      	strmi	r3, [r6, #0]
 8017dfe:	6825      	ldr	r5, [r4, #0]
 8017e00:	f015 0506 	ands.w	r5, r5, #6
 8017e04:	d106      	bne.n	8017e14 <_printf_common+0x48>
 8017e06:	f104 0a19 	add.w	sl, r4, #25
 8017e0a:	68e3      	ldr	r3, [r4, #12]
 8017e0c:	6832      	ldr	r2, [r6, #0]
 8017e0e:	1a9b      	subs	r3, r3, r2
 8017e10:	42ab      	cmp	r3, r5
 8017e12:	dc26      	bgt.n	8017e62 <_printf_common+0x96>
 8017e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017e18:	6822      	ldr	r2, [r4, #0]
 8017e1a:	3b00      	subs	r3, #0
 8017e1c:	bf18      	it	ne
 8017e1e:	2301      	movne	r3, #1
 8017e20:	0692      	lsls	r2, r2, #26
 8017e22:	d42b      	bmi.n	8017e7c <_printf_common+0xb0>
 8017e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017e28:	4641      	mov	r1, r8
 8017e2a:	4638      	mov	r0, r7
 8017e2c:	47c8      	blx	r9
 8017e2e:	3001      	adds	r0, #1
 8017e30:	d01e      	beq.n	8017e70 <_printf_common+0xa4>
 8017e32:	6823      	ldr	r3, [r4, #0]
 8017e34:	6922      	ldr	r2, [r4, #16]
 8017e36:	f003 0306 	and.w	r3, r3, #6
 8017e3a:	2b04      	cmp	r3, #4
 8017e3c:	bf02      	ittt	eq
 8017e3e:	68e5      	ldreq	r5, [r4, #12]
 8017e40:	6833      	ldreq	r3, [r6, #0]
 8017e42:	1aed      	subeq	r5, r5, r3
 8017e44:	68a3      	ldr	r3, [r4, #8]
 8017e46:	bf0c      	ite	eq
 8017e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017e4c:	2500      	movne	r5, #0
 8017e4e:	4293      	cmp	r3, r2
 8017e50:	bfc4      	itt	gt
 8017e52:	1a9b      	subgt	r3, r3, r2
 8017e54:	18ed      	addgt	r5, r5, r3
 8017e56:	2600      	movs	r6, #0
 8017e58:	341a      	adds	r4, #26
 8017e5a:	42b5      	cmp	r5, r6
 8017e5c:	d11a      	bne.n	8017e94 <_printf_common+0xc8>
 8017e5e:	2000      	movs	r0, #0
 8017e60:	e008      	b.n	8017e74 <_printf_common+0xa8>
 8017e62:	2301      	movs	r3, #1
 8017e64:	4652      	mov	r2, sl
 8017e66:	4641      	mov	r1, r8
 8017e68:	4638      	mov	r0, r7
 8017e6a:	47c8      	blx	r9
 8017e6c:	3001      	adds	r0, #1
 8017e6e:	d103      	bne.n	8017e78 <_printf_common+0xac>
 8017e70:	f04f 30ff 	mov.w	r0, #4294967295
 8017e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e78:	3501      	adds	r5, #1
 8017e7a:	e7c6      	b.n	8017e0a <_printf_common+0x3e>
 8017e7c:	18e1      	adds	r1, r4, r3
 8017e7e:	1c5a      	adds	r2, r3, #1
 8017e80:	2030      	movs	r0, #48	@ 0x30
 8017e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e86:	4422      	add	r2, r4
 8017e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e90:	3302      	adds	r3, #2
 8017e92:	e7c7      	b.n	8017e24 <_printf_common+0x58>
 8017e94:	2301      	movs	r3, #1
 8017e96:	4622      	mov	r2, r4
 8017e98:	4641      	mov	r1, r8
 8017e9a:	4638      	mov	r0, r7
 8017e9c:	47c8      	blx	r9
 8017e9e:	3001      	adds	r0, #1
 8017ea0:	d0e6      	beq.n	8017e70 <_printf_common+0xa4>
 8017ea2:	3601      	adds	r6, #1
 8017ea4:	e7d9      	b.n	8017e5a <_printf_common+0x8e>
	...

08017ea8 <_printf_i>:
 8017ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017eac:	7e0f      	ldrb	r7, [r1, #24]
 8017eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017eb0:	2f78      	cmp	r7, #120	@ 0x78
 8017eb2:	4691      	mov	r9, r2
 8017eb4:	4680      	mov	r8, r0
 8017eb6:	460c      	mov	r4, r1
 8017eb8:	469a      	mov	sl, r3
 8017eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017ebe:	d807      	bhi.n	8017ed0 <_printf_i+0x28>
 8017ec0:	2f62      	cmp	r7, #98	@ 0x62
 8017ec2:	d80a      	bhi.n	8017eda <_printf_i+0x32>
 8017ec4:	2f00      	cmp	r7, #0
 8017ec6:	f000 80d2 	beq.w	801806e <_printf_i+0x1c6>
 8017eca:	2f58      	cmp	r7, #88	@ 0x58
 8017ecc:	f000 80b9 	beq.w	8018042 <_printf_i+0x19a>
 8017ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017ed8:	e03a      	b.n	8017f50 <_printf_i+0xa8>
 8017eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017ede:	2b15      	cmp	r3, #21
 8017ee0:	d8f6      	bhi.n	8017ed0 <_printf_i+0x28>
 8017ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8017ee8 <_printf_i+0x40>)
 8017ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ee8:	08017f41 	.word	0x08017f41
 8017eec:	08017f55 	.word	0x08017f55
 8017ef0:	08017ed1 	.word	0x08017ed1
 8017ef4:	08017ed1 	.word	0x08017ed1
 8017ef8:	08017ed1 	.word	0x08017ed1
 8017efc:	08017ed1 	.word	0x08017ed1
 8017f00:	08017f55 	.word	0x08017f55
 8017f04:	08017ed1 	.word	0x08017ed1
 8017f08:	08017ed1 	.word	0x08017ed1
 8017f0c:	08017ed1 	.word	0x08017ed1
 8017f10:	08017ed1 	.word	0x08017ed1
 8017f14:	08018055 	.word	0x08018055
 8017f18:	08017f7f 	.word	0x08017f7f
 8017f1c:	0801800f 	.word	0x0801800f
 8017f20:	08017ed1 	.word	0x08017ed1
 8017f24:	08017ed1 	.word	0x08017ed1
 8017f28:	08018077 	.word	0x08018077
 8017f2c:	08017ed1 	.word	0x08017ed1
 8017f30:	08017f7f 	.word	0x08017f7f
 8017f34:	08017ed1 	.word	0x08017ed1
 8017f38:	08017ed1 	.word	0x08017ed1
 8017f3c:	08018017 	.word	0x08018017
 8017f40:	6833      	ldr	r3, [r6, #0]
 8017f42:	1d1a      	adds	r2, r3, #4
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	6032      	str	r2, [r6, #0]
 8017f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017f50:	2301      	movs	r3, #1
 8017f52:	e09d      	b.n	8018090 <_printf_i+0x1e8>
 8017f54:	6833      	ldr	r3, [r6, #0]
 8017f56:	6820      	ldr	r0, [r4, #0]
 8017f58:	1d19      	adds	r1, r3, #4
 8017f5a:	6031      	str	r1, [r6, #0]
 8017f5c:	0606      	lsls	r6, r0, #24
 8017f5e:	d501      	bpl.n	8017f64 <_printf_i+0xbc>
 8017f60:	681d      	ldr	r5, [r3, #0]
 8017f62:	e003      	b.n	8017f6c <_printf_i+0xc4>
 8017f64:	0645      	lsls	r5, r0, #25
 8017f66:	d5fb      	bpl.n	8017f60 <_printf_i+0xb8>
 8017f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f6c:	2d00      	cmp	r5, #0
 8017f6e:	da03      	bge.n	8017f78 <_printf_i+0xd0>
 8017f70:	232d      	movs	r3, #45	@ 0x2d
 8017f72:	426d      	negs	r5, r5
 8017f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f78:	4859      	ldr	r0, [pc, #356]	@ (80180e0 <_printf_i+0x238>)
 8017f7a:	230a      	movs	r3, #10
 8017f7c:	e011      	b.n	8017fa2 <_printf_i+0xfa>
 8017f7e:	6821      	ldr	r1, [r4, #0]
 8017f80:	6833      	ldr	r3, [r6, #0]
 8017f82:	0608      	lsls	r0, r1, #24
 8017f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f88:	d402      	bmi.n	8017f90 <_printf_i+0xe8>
 8017f8a:	0649      	lsls	r1, r1, #25
 8017f8c:	bf48      	it	mi
 8017f8e:	b2ad      	uxthmi	r5, r5
 8017f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f92:	4853      	ldr	r0, [pc, #332]	@ (80180e0 <_printf_i+0x238>)
 8017f94:	6033      	str	r3, [r6, #0]
 8017f96:	bf14      	ite	ne
 8017f98:	230a      	movne	r3, #10
 8017f9a:	2308      	moveq	r3, #8
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017fa2:	6866      	ldr	r6, [r4, #4]
 8017fa4:	60a6      	str	r6, [r4, #8]
 8017fa6:	2e00      	cmp	r6, #0
 8017fa8:	bfa2      	ittt	ge
 8017faa:	6821      	ldrge	r1, [r4, #0]
 8017fac:	f021 0104 	bicge.w	r1, r1, #4
 8017fb0:	6021      	strge	r1, [r4, #0]
 8017fb2:	b90d      	cbnz	r5, 8017fb8 <_printf_i+0x110>
 8017fb4:	2e00      	cmp	r6, #0
 8017fb6:	d04b      	beq.n	8018050 <_printf_i+0x1a8>
 8017fb8:	4616      	mov	r6, r2
 8017fba:	fbb5 f1f3 	udiv	r1, r5, r3
 8017fbe:	fb03 5711 	mls	r7, r3, r1, r5
 8017fc2:	5dc7      	ldrb	r7, [r0, r7]
 8017fc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017fc8:	462f      	mov	r7, r5
 8017fca:	42bb      	cmp	r3, r7
 8017fcc:	460d      	mov	r5, r1
 8017fce:	d9f4      	bls.n	8017fba <_printf_i+0x112>
 8017fd0:	2b08      	cmp	r3, #8
 8017fd2:	d10b      	bne.n	8017fec <_printf_i+0x144>
 8017fd4:	6823      	ldr	r3, [r4, #0]
 8017fd6:	07df      	lsls	r7, r3, #31
 8017fd8:	d508      	bpl.n	8017fec <_printf_i+0x144>
 8017fda:	6923      	ldr	r3, [r4, #16]
 8017fdc:	6861      	ldr	r1, [r4, #4]
 8017fde:	4299      	cmp	r1, r3
 8017fe0:	bfde      	ittt	le
 8017fe2:	2330      	movle	r3, #48	@ 0x30
 8017fe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017fe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017fec:	1b92      	subs	r2, r2, r6
 8017fee:	6122      	str	r2, [r4, #16]
 8017ff0:	f8cd a000 	str.w	sl, [sp]
 8017ff4:	464b      	mov	r3, r9
 8017ff6:	aa03      	add	r2, sp, #12
 8017ff8:	4621      	mov	r1, r4
 8017ffa:	4640      	mov	r0, r8
 8017ffc:	f7ff fee6 	bl	8017dcc <_printf_common>
 8018000:	3001      	adds	r0, #1
 8018002:	d14a      	bne.n	801809a <_printf_i+0x1f2>
 8018004:	f04f 30ff 	mov.w	r0, #4294967295
 8018008:	b004      	add	sp, #16
 801800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	f043 0320 	orr.w	r3, r3, #32
 8018014:	6023      	str	r3, [r4, #0]
 8018016:	4833      	ldr	r0, [pc, #204]	@ (80180e4 <_printf_i+0x23c>)
 8018018:	2778      	movs	r7, #120	@ 0x78
 801801a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801801e:	6823      	ldr	r3, [r4, #0]
 8018020:	6831      	ldr	r1, [r6, #0]
 8018022:	061f      	lsls	r7, r3, #24
 8018024:	f851 5b04 	ldr.w	r5, [r1], #4
 8018028:	d402      	bmi.n	8018030 <_printf_i+0x188>
 801802a:	065f      	lsls	r7, r3, #25
 801802c:	bf48      	it	mi
 801802e:	b2ad      	uxthmi	r5, r5
 8018030:	6031      	str	r1, [r6, #0]
 8018032:	07d9      	lsls	r1, r3, #31
 8018034:	bf44      	itt	mi
 8018036:	f043 0320 	orrmi.w	r3, r3, #32
 801803a:	6023      	strmi	r3, [r4, #0]
 801803c:	b11d      	cbz	r5, 8018046 <_printf_i+0x19e>
 801803e:	2310      	movs	r3, #16
 8018040:	e7ac      	b.n	8017f9c <_printf_i+0xf4>
 8018042:	4827      	ldr	r0, [pc, #156]	@ (80180e0 <_printf_i+0x238>)
 8018044:	e7e9      	b.n	801801a <_printf_i+0x172>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	f023 0320 	bic.w	r3, r3, #32
 801804c:	6023      	str	r3, [r4, #0]
 801804e:	e7f6      	b.n	801803e <_printf_i+0x196>
 8018050:	4616      	mov	r6, r2
 8018052:	e7bd      	b.n	8017fd0 <_printf_i+0x128>
 8018054:	6833      	ldr	r3, [r6, #0]
 8018056:	6825      	ldr	r5, [r4, #0]
 8018058:	6961      	ldr	r1, [r4, #20]
 801805a:	1d18      	adds	r0, r3, #4
 801805c:	6030      	str	r0, [r6, #0]
 801805e:	062e      	lsls	r6, r5, #24
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	d501      	bpl.n	8018068 <_printf_i+0x1c0>
 8018064:	6019      	str	r1, [r3, #0]
 8018066:	e002      	b.n	801806e <_printf_i+0x1c6>
 8018068:	0668      	lsls	r0, r5, #25
 801806a:	d5fb      	bpl.n	8018064 <_printf_i+0x1bc>
 801806c:	8019      	strh	r1, [r3, #0]
 801806e:	2300      	movs	r3, #0
 8018070:	6123      	str	r3, [r4, #16]
 8018072:	4616      	mov	r6, r2
 8018074:	e7bc      	b.n	8017ff0 <_printf_i+0x148>
 8018076:	6833      	ldr	r3, [r6, #0]
 8018078:	1d1a      	adds	r2, r3, #4
 801807a:	6032      	str	r2, [r6, #0]
 801807c:	681e      	ldr	r6, [r3, #0]
 801807e:	6862      	ldr	r2, [r4, #4]
 8018080:	2100      	movs	r1, #0
 8018082:	4630      	mov	r0, r6
 8018084:	f7e8 f8b4 	bl	80001f0 <memchr>
 8018088:	b108      	cbz	r0, 801808e <_printf_i+0x1e6>
 801808a:	1b80      	subs	r0, r0, r6
 801808c:	6060      	str	r0, [r4, #4]
 801808e:	6863      	ldr	r3, [r4, #4]
 8018090:	6123      	str	r3, [r4, #16]
 8018092:	2300      	movs	r3, #0
 8018094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018098:	e7aa      	b.n	8017ff0 <_printf_i+0x148>
 801809a:	6923      	ldr	r3, [r4, #16]
 801809c:	4632      	mov	r2, r6
 801809e:	4649      	mov	r1, r9
 80180a0:	4640      	mov	r0, r8
 80180a2:	47d0      	blx	sl
 80180a4:	3001      	adds	r0, #1
 80180a6:	d0ad      	beq.n	8018004 <_printf_i+0x15c>
 80180a8:	6823      	ldr	r3, [r4, #0]
 80180aa:	079b      	lsls	r3, r3, #30
 80180ac:	d413      	bmi.n	80180d6 <_printf_i+0x22e>
 80180ae:	68e0      	ldr	r0, [r4, #12]
 80180b0:	9b03      	ldr	r3, [sp, #12]
 80180b2:	4298      	cmp	r0, r3
 80180b4:	bfb8      	it	lt
 80180b6:	4618      	movlt	r0, r3
 80180b8:	e7a6      	b.n	8018008 <_printf_i+0x160>
 80180ba:	2301      	movs	r3, #1
 80180bc:	4632      	mov	r2, r6
 80180be:	4649      	mov	r1, r9
 80180c0:	4640      	mov	r0, r8
 80180c2:	47d0      	blx	sl
 80180c4:	3001      	adds	r0, #1
 80180c6:	d09d      	beq.n	8018004 <_printf_i+0x15c>
 80180c8:	3501      	adds	r5, #1
 80180ca:	68e3      	ldr	r3, [r4, #12]
 80180cc:	9903      	ldr	r1, [sp, #12]
 80180ce:	1a5b      	subs	r3, r3, r1
 80180d0:	42ab      	cmp	r3, r5
 80180d2:	dcf2      	bgt.n	80180ba <_printf_i+0x212>
 80180d4:	e7eb      	b.n	80180ae <_printf_i+0x206>
 80180d6:	2500      	movs	r5, #0
 80180d8:	f104 0619 	add.w	r6, r4, #25
 80180dc:	e7f5      	b.n	80180ca <_printf_i+0x222>
 80180de:	bf00      	nop
 80180e0:	0801e6ab 	.word	0x0801e6ab
 80180e4:	0801e6bc 	.word	0x0801e6bc

080180e8 <std>:
 80180e8:	2300      	movs	r3, #0
 80180ea:	b510      	push	{r4, lr}
 80180ec:	4604      	mov	r4, r0
 80180ee:	e9c0 3300 	strd	r3, r3, [r0]
 80180f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80180f6:	6083      	str	r3, [r0, #8]
 80180f8:	8181      	strh	r1, [r0, #12]
 80180fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80180fc:	81c2      	strh	r2, [r0, #14]
 80180fe:	6183      	str	r3, [r0, #24]
 8018100:	4619      	mov	r1, r3
 8018102:	2208      	movs	r2, #8
 8018104:	305c      	adds	r0, #92	@ 0x5c
 8018106:	f000 fb1b 	bl	8018740 <memset>
 801810a:	4b0d      	ldr	r3, [pc, #52]	@ (8018140 <std+0x58>)
 801810c:	6263      	str	r3, [r4, #36]	@ 0x24
 801810e:	4b0d      	ldr	r3, [pc, #52]	@ (8018144 <std+0x5c>)
 8018110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018112:	4b0d      	ldr	r3, [pc, #52]	@ (8018148 <std+0x60>)
 8018114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018116:	4b0d      	ldr	r3, [pc, #52]	@ (801814c <std+0x64>)
 8018118:	6323      	str	r3, [r4, #48]	@ 0x30
 801811a:	4b0d      	ldr	r3, [pc, #52]	@ (8018150 <std+0x68>)
 801811c:	6224      	str	r4, [r4, #32]
 801811e:	429c      	cmp	r4, r3
 8018120:	d006      	beq.n	8018130 <std+0x48>
 8018122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018126:	4294      	cmp	r4, r2
 8018128:	d002      	beq.n	8018130 <std+0x48>
 801812a:	33d0      	adds	r3, #208	@ 0xd0
 801812c:	429c      	cmp	r4, r3
 801812e:	d105      	bne.n	801813c <std+0x54>
 8018130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018138:	f000 bc00 	b.w	801893c <__retarget_lock_init_recursive>
 801813c:	bd10      	pop	{r4, pc}
 801813e:	bf00      	nop
 8018140:	0801853d 	.word	0x0801853d
 8018144:	0801855f 	.word	0x0801855f
 8018148:	08018597 	.word	0x08018597
 801814c:	080185bb 	.word	0x080185bb
 8018150:	20008b44 	.word	0x20008b44

08018154 <stdio_exit_handler>:
 8018154:	4a02      	ldr	r2, [pc, #8]	@ (8018160 <stdio_exit_handler+0xc>)
 8018156:	4903      	ldr	r1, [pc, #12]	@ (8018164 <stdio_exit_handler+0x10>)
 8018158:	4803      	ldr	r0, [pc, #12]	@ (8018168 <stdio_exit_handler+0x14>)
 801815a:	f000 b869 	b.w	8018230 <_fwalk_sglue>
 801815e:	bf00      	nop
 8018160:	20000030 	.word	0x20000030
 8018164:	0801aea1 	.word	0x0801aea1
 8018168:	200001ac 	.word	0x200001ac

0801816c <cleanup_stdio>:
 801816c:	6841      	ldr	r1, [r0, #4]
 801816e:	4b0c      	ldr	r3, [pc, #48]	@ (80181a0 <cleanup_stdio+0x34>)
 8018170:	4299      	cmp	r1, r3
 8018172:	b510      	push	{r4, lr}
 8018174:	4604      	mov	r4, r0
 8018176:	d001      	beq.n	801817c <cleanup_stdio+0x10>
 8018178:	f002 fe92 	bl	801aea0 <_fflush_r>
 801817c:	68a1      	ldr	r1, [r4, #8]
 801817e:	4b09      	ldr	r3, [pc, #36]	@ (80181a4 <cleanup_stdio+0x38>)
 8018180:	4299      	cmp	r1, r3
 8018182:	d002      	beq.n	801818a <cleanup_stdio+0x1e>
 8018184:	4620      	mov	r0, r4
 8018186:	f002 fe8b 	bl	801aea0 <_fflush_r>
 801818a:	68e1      	ldr	r1, [r4, #12]
 801818c:	4b06      	ldr	r3, [pc, #24]	@ (80181a8 <cleanup_stdio+0x3c>)
 801818e:	4299      	cmp	r1, r3
 8018190:	d004      	beq.n	801819c <cleanup_stdio+0x30>
 8018192:	4620      	mov	r0, r4
 8018194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018198:	f002 be82 	b.w	801aea0 <_fflush_r>
 801819c:	bd10      	pop	{r4, pc}
 801819e:	bf00      	nop
 80181a0:	20008b44 	.word	0x20008b44
 80181a4:	20008bac 	.word	0x20008bac
 80181a8:	20008c14 	.word	0x20008c14

080181ac <global_stdio_init.part.0>:
 80181ac:	b510      	push	{r4, lr}
 80181ae:	4b0b      	ldr	r3, [pc, #44]	@ (80181dc <global_stdio_init.part.0+0x30>)
 80181b0:	4c0b      	ldr	r4, [pc, #44]	@ (80181e0 <global_stdio_init.part.0+0x34>)
 80181b2:	4a0c      	ldr	r2, [pc, #48]	@ (80181e4 <global_stdio_init.part.0+0x38>)
 80181b4:	601a      	str	r2, [r3, #0]
 80181b6:	4620      	mov	r0, r4
 80181b8:	2200      	movs	r2, #0
 80181ba:	2104      	movs	r1, #4
 80181bc:	f7ff ff94 	bl	80180e8 <std>
 80181c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80181c4:	2201      	movs	r2, #1
 80181c6:	2109      	movs	r1, #9
 80181c8:	f7ff ff8e 	bl	80180e8 <std>
 80181cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80181d0:	2202      	movs	r2, #2
 80181d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181d6:	2112      	movs	r1, #18
 80181d8:	f7ff bf86 	b.w	80180e8 <std>
 80181dc:	20008c7c 	.word	0x20008c7c
 80181e0:	20008b44 	.word	0x20008b44
 80181e4:	08018155 	.word	0x08018155

080181e8 <__sfp_lock_acquire>:
 80181e8:	4801      	ldr	r0, [pc, #4]	@ (80181f0 <__sfp_lock_acquire+0x8>)
 80181ea:	f000 bba8 	b.w	801893e <__retarget_lock_acquire_recursive>
 80181ee:	bf00      	nop
 80181f0:	20008c85 	.word	0x20008c85

080181f4 <__sfp_lock_release>:
 80181f4:	4801      	ldr	r0, [pc, #4]	@ (80181fc <__sfp_lock_release+0x8>)
 80181f6:	f000 bba3 	b.w	8018940 <__retarget_lock_release_recursive>
 80181fa:	bf00      	nop
 80181fc:	20008c85 	.word	0x20008c85

08018200 <__sinit>:
 8018200:	b510      	push	{r4, lr}
 8018202:	4604      	mov	r4, r0
 8018204:	f7ff fff0 	bl	80181e8 <__sfp_lock_acquire>
 8018208:	6a23      	ldr	r3, [r4, #32]
 801820a:	b11b      	cbz	r3, 8018214 <__sinit+0x14>
 801820c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018210:	f7ff bff0 	b.w	80181f4 <__sfp_lock_release>
 8018214:	4b04      	ldr	r3, [pc, #16]	@ (8018228 <__sinit+0x28>)
 8018216:	6223      	str	r3, [r4, #32]
 8018218:	4b04      	ldr	r3, [pc, #16]	@ (801822c <__sinit+0x2c>)
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1f5      	bne.n	801820c <__sinit+0xc>
 8018220:	f7ff ffc4 	bl	80181ac <global_stdio_init.part.0>
 8018224:	e7f2      	b.n	801820c <__sinit+0xc>
 8018226:	bf00      	nop
 8018228:	0801816d 	.word	0x0801816d
 801822c:	20008c7c 	.word	0x20008c7c

08018230 <_fwalk_sglue>:
 8018230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018234:	4607      	mov	r7, r0
 8018236:	4688      	mov	r8, r1
 8018238:	4614      	mov	r4, r2
 801823a:	2600      	movs	r6, #0
 801823c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018240:	f1b9 0901 	subs.w	r9, r9, #1
 8018244:	d505      	bpl.n	8018252 <_fwalk_sglue+0x22>
 8018246:	6824      	ldr	r4, [r4, #0]
 8018248:	2c00      	cmp	r4, #0
 801824a:	d1f7      	bne.n	801823c <_fwalk_sglue+0xc>
 801824c:	4630      	mov	r0, r6
 801824e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018252:	89ab      	ldrh	r3, [r5, #12]
 8018254:	2b01      	cmp	r3, #1
 8018256:	d907      	bls.n	8018268 <_fwalk_sglue+0x38>
 8018258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801825c:	3301      	adds	r3, #1
 801825e:	d003      	beq.n	8018268 <_fwalk_sglue+0x38>
 8018260:	4629      	mov	r1, r5
 8018262:	4638      	mov	r0, r7
 8018264:	47c0      	blx	r8
 8018266:	4306      	orrs	r6, r0
 8018268:	3568      	adds	r5, #104	@ 0x68
 801826a:	e7e9      	b.n	8018240 <_fwalk_sglue+0x10>

0801826c <iprintf>:
 801826c:	b40f      	push	{r0, r1, r2, r3}
 801826e:	b507      	push	{r0, r1, r2, lr}
 8018270:	4906      	ldr	r1, [pc, #24]	@ (801828c <iprintf+0x20>)
 8018272:	ab04      	add	r3, sp, #16
 8018274:	6808      	ldr	r0, [r1, #0]
 8018276:	f853 2b04 	ldr.w	r2, [r3], #4
 801827a:	6881      	ldr	r1, [r0, #8]
 801827c:	9301      	str	r3, [sp, #4]
 801827e:	f002 fc73 	bl	801ab68 <_vfiprintf_r>
 8018282:	b003      	add	sp, #12
 8018284:	f85d eb04 	ldr.w	lr, [sp], #4
 8018288:	b004      	add	sp, #16
 801828a:	4770      	bx	lr
 801828c:	200001a8 	.word	0x200001a8

08018290 <putchar>:
 8018290:	4b02      	ldr	r3, [pc, #8]	@ (801829c <putchar+0xc>)
 8018292:	4601      	mov	r1, r0
 8018294:	6818      	ldr	r0, [r3, #0]
 8018296:	6882      	ldr	r2, [r0, #8]
 8018298:	f002 be9e 	b.w	801afd8 <_putc_r>
 801829c:	200001a8 	.word	0x200001a8

080182a0 <_puts_r>:
 80182a0:	6a03      	ldr	r3, [r0, #32]
 80182a2:	b570      	push	{r4, r5, r6, lr}
 80182a4:	6884      	ldr	r4, [r0, #8]
 80182a6:	4605      	mov	r5, r0
 80182a8:	460e      	mov	r6, r1
 80182aa:	b90b      	cbnz	r3, 80182b0 <_puts_r+0x10>
 80182ac:	f7ff ffa8 	bl	8018200 <__sinit>
 80182b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182b2:	07db      	lsls	r3, r3, #31
 80182b4:	d405      	bmi.n	80182c2 <_puts_r+0x22>
 80182b6:	89a3      	ldrh	r3, [r4, #12]
 80182b8:	0598      	lsls	r0, r3, #22
 80182ba:	d402      	bmi.n	80182c2 <_puts_r+0x22>
 80182bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182be:	f000 fb3e 	bl	801893e <__retarget_lock_acquire_recursive>
 80182c2:	89a3      	ldrh	r3, [r4, #12]
 80182c4:	0719      	lsls	r1, r3, #28
 80182c6:	d502      	bpl.n	80182ce <_puts_r+0x2e>
 80182c8:	6923      	ldr	r3, [r4, #16]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d135      	bne.n	801833a <_puts_r+0x9a>
 80182ce:	4621      	mov	r1, r4
 80182d0:	4628      	mov	r0, r5
 80182d2:	f000 f9b5 	bl	8018640 <__swsetup_r>
 80182d6:	b380      	cbz	r0, 801833a <_puts_r+0x9a>
 80182d8:	f04f 35ff 	mov.w	r5, #4294967295
 80182dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182de:	07da      	lsls	r2, r3, #31
 80182e0:	d405      	bmi.n	80182ee <_puts_r+0x4e>
 80182e2:	89a3      	ldrh	r3, [r4, #12]
 80182e4:	059b      	lsls	r3, r3, #22
 80182e6:	d402      	bmi.n	80182ee <_puts_r+0x4e>
 80182e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182ea:	f000 fb29 	bl	8018940 <__retarget_lock_release_recursive>
 80182ee:	4628      	mov	r0, r5
 80182f0:	bd70      	pop	{r4, r5, r6, pc}
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	da04      	bge.n	8018300 <_puts_r+0x60>
 80182f6:	69a2      	ldr	r2, [r4, #24]
 80182f8:	429a      	cmp	r2, r3
 80182fa:	dc17      	bgt.n	801832c <_puts_r+0x8c>
 80182fc:	290a      	cmp	r1, #10
 80182fe:	d015      	beq.n	801832c <_puts_r+0x8c>
 8018300:	6823      	ldr	r3, [r4, #0]
 8018302:	1c5a      	adds	r2, r3, #1
 8018304:	6022      	str	r2, [r4, #0]
 8018306:	7019      	strb	r1, [r3, #0]
 8018308:	68a3      	ldr	r3, [r4, #8]
 801830a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801830e:	3b01      	subs	r3, #1
 8018310:	60a3      	str	r3, [r4, #8]
 8018312:	2900      	cmp	r1, #0
 8018314:	d1ed      	bne.n	80182f2 <_puts_r+0x52>
 8018316:	2b00      	cmp	r3, #0
 8018318:	da11      	bge.n	801833e <_puts_r+0x9e>
 801831a:	4622      	mov	r2, r4
 801831c:	210a      	movs	r1, #10
 801831e:	4628      	mov	r0, r5
 8018320:	f000 f94f 	bl	80185c2 <__swbuf_r>
 8018324:	3001      	adds	r0, #1
 8018326:	d0d7      	beq.n	80182d8 <_puts_r+0x38>
 8018328:	250a      	movs	r5, #10
 801832a:	e7d7      	b.n	80182dc <_puts_r+0x3c>
 801832c:	4622      	mov	r2, r4
 801832e:	4628      	mov	r0, r5
 8018330:	f000 f947 	bl	80185c2 <__swbuf_r>
 8018334:	3001      	adds	r0, #1
 8018336:	d1e7      	bne.n	8018308 <_puts_r+0x68>
 8018338:	e7ce      	b.n	80182d8 <_puts_r+0x38>
 801833a:	3e01      	subs	r6, #1
 801833c:	e7e4      	b.n	8018308 <_puts_r+0x68>
 801833e:	6823      	ldr	r3, [r4, #0]
 8018340:	1c5a      	adds	r2, r3, #1
 8018342:	6022      	str	r2, [r4, #0]
 8018344:	220a      	movs	r2, #10
 8018346:	701a      	strb	r2, [r3, #0]
 8018348:	e7ee      	b.n	8018328 <_puts_r+0x88>
	...

0801834c <puts>:
 801834c:	4b02      	ldr	r3, [pc, #8]	@ (8018358 <puts+0xc>)
 801834e:	4601      	mov	r1, r0
 8018350:	6818      	ldr	r0, [r3, #0]
 8018352:	f7ff bfa5 	b.w	80182a0 <_puts_r>
 8018356:	bf00      	nop
 8018358:	200001a8 	.word	0x200001a8

0801835c <setbuf>:
 801835c:	fab1 f281 	clz	r2, r1
 8018360:	0952      	lsrs	r2, r2, #5
 8018362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018366:	0052      	lsls	r2, r2, #1
 8018368:	f000 b800 	b.w	801836c <setvbuf>

0801836c <setvbuf>:
 801836c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018370:	461d      	mov	r5, r3
 8018372:	4b57      	ldr	r3, [pc, #348]	@ (80184d0 <setvbuf+0x164>)
 8018374:	681f      	ldr	r7, [r3, #0]
 8018376:	4604      	mov	r4, r0
 8018378:	460e      	mov	r6, r1
 801837a:	4690      	mov	r8, r2
 801837c:	b127      	cbz	r7, 8018388 <setvbuf+0x1c>
 801837e:	6a3b      	ldr	r3, [r7, #32]
 8018380:	b913      	cbnz	r3, 8018388 <setvbuf+0x1c>
 8018382:	4638      	mov	r0, r7
 8018384:	f7ff ff3c 	bl	8018200 <__sinit>
 8018388:	f1b8 0f02 	cmp.w	r8, #2
 801838c:	d006      	beq.n	801839c <setvbuf+0x30>
 801838e:	f1b8 0f01 	cmp.w	r8, #1
 8018392:	f200 809a 	bhi.w	80184ca <setvbuf+0x15e>
 8018396:	2d00      	cmp	r5, #0
 8018398:	f2c0 8097 	blt.w	80184ca <setvbuf+0x15e>
 801839c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801839e:	07d9      	lsls	r1, r3, #31
 80183a0:	d405      	bmi.n	80183ae <setvbuf+0x42>
 80183a2:	89a3      	ldrh	r3, [r4, #12]
 80183a4:	059a      	lsls	r2, r3, #22
 80183a6:	d402      	bmi.n	80183ae <setvbuf+0x42>
 80183a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183aa:	f000 fac8 	bl	801893e <__retarget_lock_acquire_recursive>
 80183ae:	4621      	mov	r1, r4
 80183b0:	4638      	mov	r0, r7
 80183b2:	f002 fd75 	bl	801aea0 <_fflush_r>
 80183b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80183b8:	b141      	cbz	r1, 80183cc <setvbuf+0x60>
 80183ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80183be:	4299      	cmp	r1, r3
 80183c0:	d002      	beq.n	80183c8 <setvbuf+0x5c>
 80183c2:	4638      	mov	r0, r7
 80183c4:	f001 f944 	bl	8019650 <_free_r>
 80183c8:	2300      	movs	r3, #0
 80183ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80183cc:	2300      	movs	r3, #0
 80183ce:	61a3      	str	r3, [r4, #24]
 80183d0:	6063      	str	r3, [r4, #4]
 80183d2:	89a3      	ldrh	r3, [r4, #12]
 80183d4:	061b      	lsls	r3, r3, #24
 80183d6:	d503      	bpl.n	80183e0 <setvbuf+0x74>
 80183d8:	6921      	ldr	r1, [r4, #16]
 80183da:	4638      	mov	r0, r7
 80183dc:	f001 f938 	bl	8019650 <_free_r>
 80183e0:	89a3      	ldrh	r3, [r4, #12]
 80183e2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80183e6:	f023 0303 	bic.w	r3, r3, #3
 80183ea:	f1b8 0f02 	cmp.w	r8, #2
 80183ee:	81a3      	strh	r3, [r4, #12]
 80183f0:	d061      	beq.n	80184b6 <setvbuf+0x14a>
 80183f2:	ab01      	add	r3, sp, #4
 80183f4:	466a      	mov	r2, sp
 80183f6:	4621      	mov	r1, r4
 80183f8:	4638      	mov	r0, r7
 80183fa:	f002 fd8b 	bl	801af14 <__swhatbuf_r>
 80183fe:	89a3      	ldrh	r3, [r4, #12]
 8018400:	4318      	orrs	r0, r3
 8018402:	81a0      	strh	r0, [r4, #12]
 8018404:	bb2d      	cbnz	r5, 8018452 <setvbuf+0xe6>
 8018406:	9d00      	ldr	r5, [sp, #0]
 8018408:	4628      	mov	r0, r5
 801840a:	f001 fca5 	bl	8019d58 <malloc>
 801840e:	4606      	mov	r6, r0
 8018410:	2800      	cmp	r0, #0
 8018412:	d152      	bne.n	80184ba <setvbuf+0x14e>
 8018414:	f8dd 9000 	ldr.w	r9, [sp]
 8018418:	45a9      	cmp	r9, r5
 801841a:	d140      	bne.n	801849e <setvbuf+0x132>
 801841c:	f04f 35ff 	mov.w	r5, #4294967295
 8018420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018424:	f043 0202 	orr.w	r2, r3, #2
 8018428:	81a2      	strh	r2, [r4, #12]
 801842a:	2200      	movs	r2, #0
 801842c:	60a2      	str	r2, [r4, #8]
 801842e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8018432:	6022      	str	r2, [r4, #0]
 8018434:	6122      	str	r2, [r4, #16]
 8018436:	2201      	movs	r2, #1
 8018438:	6162      	str	r2, [r4, #20]
 801843a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801843c:	07d6      	lsls	r6, r2, #31
 801843e:	d404      	bmi.n	801844a <setvbuf+0xde>
 8018440:	0598      	lsls	r0, r3, #22
 8018442:	d402      	bmi.n	801844a <setvbuf+0xde>
 8018444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018446:	f000 fa7b 	bl	8018940 <__retarget_lock_release_recursive>
 801844a:	4628      	mov	r0, r5
 801844c:	b003      	add	sp, #12
 801844e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018452:	2e00      	cmp	r6, #0
 8018454:	d0d8      	beq.n	8018408 <setvbuf+0x9c>
 8018456:	6a3b      	ldr	r3, [r7, #32]
 8018458:	b913      	cbnz	r3, 8018460 <setvbuf+0xf4>
 801845a:	4638      	mov	r0, r7
 801845c:	f7ff fed0 	bl	8018200 <__sinit>
 8018460:	f1b8 0f01 	cmp.w	r8, #1
 8018464:	bf08      	it	eq
 8018466:	89a3      	ldrheq	r3, [r4, #12]
 8018468:	6026      	str	r6, [r4, #0]
 801846a:	bf04      	itt	eq
 801846c:	f043 0301 	orreq.w	r3, r3, #1
 8018470:	81a3      	strheq	r3, [r4, #12]
 8018472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018476:	f013 0208 	ands.w	r2, r3, #8
 801847a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801847e:	d01e      	beq.n	80184be <setvbuf+0x152>
 8018480:	07d9      	lsls	r1, r3, #31
 8018482:	bf41      	itttt	mi
 8018484:	2200      	movmi	r2, #0
 8018486:	426d      	negmi	r5, r5
 8018488:	60a2      	strmi	r2, [r4, #8]
 801848a:	61a5      	strmi	r5, [r4, #24]
 801848c:	bf58      	it	pl
 801848e:	60a5      	strpl	r5, [r4, #8]
 8018490:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018492:	07d2      	lsls	r2, r2, #31
 8018494:	d401      	bmi.n	801849a <setvbuf+0x12e>
 8018496:	059b      	lsls	r3, r3, #22
 8018498:	d513      	bpl.n	80184c2 <setvbuf+0x156>
 801849a:	2500      	movs	r5, #0
 801849c:	e7d5      	b.n	801844a <setvbuf+0xde>
 801849e:	4648      	mov	r0, r9
 80184a0:	f001 fc5a 	bl	8019d58 <malloc>
 80184a4:	4606      	mov	r6, r0
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d0b8      	beq.n	801841c <setvbuf+0xb0>
 80184aa:	89a3      	ldrh	r3, [r4, #12]
 80184ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184b0:	81a3      	strh	r3, [r4, #12]
 80184b2:	464d      	mov	r5, r9
 80184b4:	e7cf      	b.n	8018456 <setvbuf+0xea>
 80184b6:	2500      	movs	r5, #0
 80184b8:	e7b2      	b.n	8018420 <setvbuf+0xb4>
 80184ba:	46a9      	mov	r9, r5
 80184bc:	e7f5      	b.n	80184aa <setvbuf+0x13e>
 80184be:	60a2      	str	r2, [r4, #8]
 80184c0:	e7e6      	b.n	8018490 <setvbuf+0x124>
 80184c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184c4:	f000 fa3c 	bl	8018940 <__retarget_lock_release_recursive>
 80184c8:	e7e7      	b.n	801849a <setvbuf+0x12e>
 80184ca:	f04f 35ff 	mov.w	r5, #4294967295
 80184ce:	e7bc      	b.n	801844a <setvbuf+0xde>
 80184d0:	200001a8 	.word	0x200001a8

080184d4 <sniprintf>:
 80184d4:	b40c      	push	{r2, r3}
 80184d6:	b530      	push	{r4, r5, lr}
 80184d8:	4b17      	ldr	r3, [pc, #92]	@ (8018538 <sniprintf+0x64>)
 80184da:	1e0c      	subs	r4, r1, #0
 80184dc:	681d      	ldr	r5, [r3, #0]
 80184de:	b09d      	sub	sp, #116	@ 0x74
 80184e0:	da08      	bge.n	80184f4 <sniprintf+0x20>
 80184e2:	238b      	movs	r3, #139	@ 0x8b
 80184e4:	602b      	str	r3, [r5, #0]
 80184e6:	f04f 30ff 	mov.w	r0, #4294967295
 80184ea:	b01d      	add	sp, #116	@ 0x74
 80184ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184f0:	b002      	add	sp, #8
 80184f2:	4770      	bx	lr
 80184f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80184f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80184fc:	bf14      	ite	ne
 80184fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018502:	4623      	moveq	r3, r4
 8018504:	9304      	str	r3, [sp, #16]
 8018506:	9307      	str	r3, [sp, #28]
 8018508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801850c:	9002      	str	r0, [sp, #8]
 801850e:	9006      	str	r0, [sp, #24]
 8018510:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018514:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018516:	ab21      	add	r3, sp, #132	@ 0x84
 8018518:	a902      	add	r1, sp, #8
 801851a:	4628      	mov	r0, r5
 801851c:	9301      	str	r3, [sp, #4]
 801851e:	f002 f9fd 	bl	801a91c <_svfiprintf_r>
 8018522:	1c43      	adds	r3, r0, #1
 8018524:	bfbc      	itt	lt
 8018526:	238b      	movlt	r3, #139	@ 0x8b
 8018528:	602b      	strlt	r3, [r5, #0]
 801852a:	2c00      	cmp	r4, #0
 801852c:	d0dd      	beq.n	80184ea <sniprintf+0x16>
 801852e:	9b02      	ldr	r3, [sp, #8]
 8018530:	2200      	movs	r2, #0
 8018532:	701a      	strb	r2, [r3, #0]
 8018534:	e7d9      	b.n	80184ea <sniprintf+0x16>
 8018536:	bf00      	nop
 8018538:	200001a8 	.word	0x200001a8

0801853c <__sread>:
 801853c:	b510      	push	{r4, lr}
 801853e:	460c      	mov	r4, r1
 8018540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018544:	f000 f9ac 	bl	80188a0 <_read_r>
 8018548:	2800      	cmp	r0, #0
 801854a:	bfab      	itete	ge
 801854c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801854e:	89a3      	ldrhlt	r3, [r4, #12]
 8018550:	181b      	addge	r3, r3, r0
 8018552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018556:	bfac      	ite	ge
 8018558:	6563      	strge	r3, [r4, #84]	@ 0x54
 801855a:	81a3      	strhlt	r3, [r4, #12]
 801855c:	bd10      	pop	{r4, pc}

0801855e <__swrite>:
 801855e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018562:	461f      	mov	r7, r3
 8018564:	898b      	ldrh	r3, [r1, #12]
 8018566:	05db      	lsls	r3, r3, #23
 8018568:	4605      	mov	r5, r0
 801856a:	460c      	mov	r4, r1
 801856c:	4616      	mov	r6, r2
 801856e:	d505      	bpl.n	801857c <__swrite+0x1e>
 8018570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018574:	2302      	movs	r3, #2
 8018576:	2200      	movs	r2, #0
 8018578:	f000 f980 	bl	801887c <_lseek_r>
 801857c:	89a3      	ldrh	r3, [r4, #12]
 801857e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018586:	81a3      	strh	r3, [r4, #12]
 8018588:	4632      	mov	r2, r6
 801858a:	463b      	mov	r3, r7
 801858c:	4628      	mov	r0, r5
 801858e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018592:	f000 b997 	b.w	80188c4 <_write_r>

08018596 <__sseek>:
 8018596:	b510      	push	{r4, lr}
 8018598:	460c      	mov	r4, r1
 801859a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801859e:	f000 f96d 	bl	801887c <_lseek_r>
 80185a2:	1c43      	adds	r3, r0, #1
 80185a4:	89a3      	ldrh	r3, [r4, #12]
 80185a6:	bf15      	itete	ne
 80185a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80185aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80185ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80185b2:	81a3      	strheq	r3, [r4, #12]
 80185b4:	bf18      	it	ne
 80185b6:	81a3      	strhne	r3, [r4, #12]
 80185b8:	bd10      	pop	{r4, pc}

080185ba <__sclose>:
 80185ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185be:	f000 b94d 	b.w	801885c <_close_r>

080185c2 <__swbuf_r>:
 80185c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c4:	460e      	mov	r6, r1
 80185c6:	4614      	mov	r4, r2
 80185c8:	4605      	mov	r5, r0
 80185ca:	b118      	cbz	r0, 80185d4 <__swbuf_r+0x12>
 80185cc:	6a03      	ldr	r3, [r0, #32]
 80185ce:	b90b      	cbnz	r3, 80185d4 <__swbuf_r+0x12>
 80185d0:	f7ff fe16 	bl	8018200 <__sinit>
 80185d4:	69a3      	ldr	r3, [r4, #24]
 80185d6:	60a3      	str	r3, [r4, #8]
 80185d8:	89a3      	ldrh	r3, [r4, #12]
 80185da:	071a      	lsls	r2, r3, #28
 80185dc:	d501      	bpl.n	80185e2 <__swbuf_r+0x20>
 80185de:	6923      	ldr	r3, [r4, #16]
 80185e0:	b943      	cbnz	r3, 80185f4 <__swbuf_r+0x32>
 80185e2:	4621      	mov	r1, r4
 80185e4:	4628      	mov	r0, r5
 80185e6:	f000 f82b 	bl	8018640 <__swsetup_r>
 80185ea:	b118      	cbz	r0, 80185f4 <__swbuf_r+0x32>
 80185ec:	f04f 37ff 	mov.w	r7, #4294967295
 80185f0:	4638      	mov	r0, r7
 80185f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	6922      	ldr	r2, [r4, #16]
 80185f8:	1a98      	subs	r0, r3, r2
 80185fa:	6963      	ldr	r3, [r4, #20]
 80185fc:	b2f6      	uxtb	r6, r6
 80185fe:	4283      	cmp	r3, r0
 8018600:	4637      	mov	r7, r6
 8018602:	dc05      	bgt.n	8018610 <__swbuf_r+0x4e>
 8018604:	4621      	mov	r1, r4
 8018606:	4628      	mov	r0, r5
 8018608:	f002 fc4a 	bl	801aea0 <_fflush_r>
 801860c:	2800      	cmp	r0, #0
 801860e:	d1ed      	bne.n	80185ec <__swbuf_r+0x2a>
 8018610:	68a3      	ldr	r3, [r4, #8]
 8018612:	3b01      	subs	r3, #1
 8018614:	60a3      	str	r3, [r4, #8]
 8018616:	6823      	ldr	r3, [r4, #0]
 8018618:	1c5a      	adds	r2, r3, #1
 801861a:	6022      	str	r2, [r4, #0]
 801861c:	701e      	strb	r6, [r3, #0]
 801861e:	6962      	ldr	r2, [r4, #20]
 8018620:	1c43      	adds	r3, r0, #1
 8018622:	429a      	cmp	r2, r3
 8018624:	d004      	beq.n	8018630 <__swbuf_r+0x6e>
 8018626:	89a3      	ldrh	r3, [r4, #12]
 8018628:	07db      	lsls	r3, r3, #31
 801862a:	d5e1      	bpl.n	80185f0 <__swbuf_r+0x2e>
 801862c:	2e0a      	cmp	r6, #10
 801862e:	d1df      	bne.n	80185f0 <__swbuf_r+0x2e>
 8018630:	4621      	mov	r1, r4
 8018632:	4628      	mov	r0, r5
 8018634:	f002 fc34 	bl	801aea0 <_fflush_r>
 8018638:	2800      	cmp	r0, #0
 801863a:	d0d9      	beq.n	80185f0 <__swbuf_r+0x2e>
 801863c:	e7d6      	b.n	80185ec <__swbuf_r+0x2a>
	...

08018640 <__swsetup_r>:
 8018640:	b538      	push	{r3, r4, r5, lr}
 8018642:	4b29      	ldr	r3, [pc, #164]	@ (80186e8 <__swsetup_r+0xa8>)
 8018644:	4605      	mov	r5, r0
 8018646:	6818      	ldr	r0, [r3, #0]
 8018648:	460c      	mov	r4, r1
 801864a:	b118      	cbz	r0, 8018654 <__swsetup_r+0x14>
 801864c:	6a03      	ldr	r3, [r0, #32]
 801864e:	b90b      	cbnz	r3, 8018654 <__swsetup_r+0x14>
 8018650:	f7ff fdd6 	bl	8018200 <__sinit>
 8018654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018658:	0719      	lsls	r1, r3, #28
 801865a:	d422      	bmi.n	80186a2 <__swsetup_r+0x62>
 801865c:	06da      	lsls	r2, r3, #27
 801865e:	d407      	bmi.n	8018670 <__swsetup_r+0x30>
 8018660:	2209      	movs	r2, #9
 8018662:	602a      	str	r2, [r5, #0]
 8018664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018668:	81a3      	strh	r3, [r4, #12]
 801866a:	f04f 30ff 	mov.w	r0, #4294967295
 801866e:	e033      	b.n	80186d8 <__swsetup_r+0x98>
 8018670:	0758      	lsls	r0, r3, #29
 8018672:	d512      	bpl.n	801869a <__swsetup_r+0x5a>
 8018674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018676:	b141      	cbz	r1, 801868a <__swsetup_r+0x4a>
 8018678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801867c:	4299      	cmp	r1, r3
 801867e:	d002      	beq.n	8018686 <__swsetup_r+0x46>
 8018680:	4628      	mov	r0, r5
 8018682:	f000 ffe5 	bl	8019650 <_free_r>
 8018686:	2300      	movs	r3, #0
 8018688:	6363      	str	r3, [r4, #52]	@ 0x34
 801868a:	89a3      	ldrh	r3, [r4, #12]
 801868c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018690:	81a3      	strh	r3, [r4, #12]
 8018692:	2300      	movs	r3, #0
 8018694:	6063      	str	r3, [r4, #4]
 8018696:	6923      	ldr	r3, [r4, #16]
 8018698:	6023      	str	r3, [r4, #0]
 801869a:	89a3      	ldrh	r3, [r4, #12]
 801869c:	f043 0308 	orr.w	r3, r3, #8
 80186a0:	81a3      	strh	r3, [r4, #12]
 80186a2:	6923      	ldr	r3, [r4, #16]
 80186a4:	b94b      	cbnz	r3, 80186ba <__swsetup_r+0x7a>
 80186a6:	89a3      	ldrh	r3, [r4, #12]
 80186a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80186ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80186b0:	d003      	beq.n	80186ba <__swsetup_r+0x7a>
 80186b2:	4621      	mov	r1, r4
 80186b4:	4628      	mov	r0, r5
 80186b6:	f002 fc53 	bl	801af60 <__smakebuf_r>
 80186ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186be:	f013 0201 	ands.w	r2, r3, #1
 80186c2:	d00a      	beq.n	80186da <__swsetup_r+0x9a>
 80186c4:	2200      	movs	r2, #0
 80186c6:	60a2      	str	r2, [r4, #8]
 80186c8:	6962      	ldr	r2, [r4, #20]
 80186ca:	4252      	negs	r2, r2
 80186cc:	61a2      	str	r2, [r4, #24]
 80186ce:	6922      	ldr	r2, [r4, #16]
 80186d0:	b942      	cbnz	r2, 80186e4 <__swsetup_r+0xa4>
 80186d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80186d6:	d1c5      	bne.n	8018664 <__swsetup_r+0x24>
 80186d8:	bd38      	pop	{r3, r4, r5, pc}
 80186da:	0799      	lsls	r1, r3, #30
 80186dc:	bf58      	it	pl
 80186de:	6962      	ldrpl	r2, [r4, #20]
 80186e0:	60a2      	str	r2, [r4, #8]
 80186e2:	e7f4      	b.n	80186ce <__swsetup_r+0x8e>
 80186e4:	2000      	movs	r0, #0
 80186e6:	e7f7      	b.n	80186d8 <__swsetup_r+0x98>
 80186e8:	200001a8 	.word	0x200001a8

080186ec <memcmp>:
 80186ec:	b510      	push	{r4, lr}
 80186ee:	3901      	subs	r1, #1
 80186f0:	4402      	add	r2, r0
 80186f2:	4290      	cmp	r0, r2
 80186f4:	d101      	bne.n	80186fa <memcmp+0xe>
 80186f6:	2000      	movs	r0, #0
 80186f8:	e005      	b.n	8018706 <memcmp+0x1a>
 80186fa:	7803      	ldrb	r3, [r0, #0]
 80186fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018700:	42a3      	cmp	r3, r4
 8018702:	d001      	beq.n	8018708 <memcmp+0x1c>
 8018704:	1b18      	subs	r0, r3, r4
 8018706:	bd10      	pop	{r4, pc}
 8018708:	3001      	adds	r0, #1
 801870a:	e7f2      	b.n	80186f2 <memcmp+0x6>

0801870c <memmove>:
 801870c:	4288      	cmp	r0, r1
 801870e:	b510      	push	{r4, lr}
 8018710:	eb01 0402 	add.w	r4, r1, r2
 8018714:	d902      	bls.n	801871c <memmove+0x10>
 8018716:	4284      	cmp	r4, r0
 8018718:	4623      	mov	r3, r4
 801871a:	d807      	bhi.n	801872c <memmove+0x20>
 801871c:	1e43      	subs	r3, r0, #1
 801871e:	42a1      	cmp	r1, r4
 8018720:	d008      	beq.n	8018734 <memmove+0x28>
 8018722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801872a:	e7f8      	b.n	801871e <memmove+0x12>
 801872c:	4402      	add	r2, r0
 801872e:	4601      	mov	r1, r0
 8018730:	428a      	cmp	r2, r1
 8018732:	d100      	bne.n	8018736 <memmove+0x2a>
 8018734:	bd10      	pop	{r4, pc}
 8018736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801873a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801873e:	e7f7      	b.n	8018730 <memmove+0x24>

08018740 <memset>:
 8018740:	4402      	add	r2, r0
 8018742:	4603      	mov	r3, r0
 8018744:	4293      	cmp	r3, r2
 8018746:	d100      	bne.n	801874a <memset+0xa>
 8018748:	4770      	bx	lr
 801874a:	f803 1b01 	strb.w	r1, [r3], #1
 801874e:	e7f9      	b.n	8018744 <memset+0x4>

08018750 <strncmp>:
 8018750:	b510      	push	{r4, lr}
 8018752:	b16a      	cbz	r2, 8018770 <strncmp+0x20>
 8018754:	3901      	subs	r1, #1
 8018756:	1884      	adds	r4, r0, r2
 8018758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801875c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018760:	429a      	cmp	r2, r3
 8018762:	d103      	bne.n	801876c <strncmp+0x1c>
 8018764:	42a0      	cmp	r0, r4
 8018766:	d001      	beq.n	801876c <strncmp+0x1c>
 8018768:	2a00      	cmp	r2, #0
 801876a:	d1f5      	bne.n	8018758 <strncmp+0x8>
 801876c:	1ad0      	subs	r0, r2, r3
 801876e:	bd10      	pop	{r4, pc}
 8018770:	4610      	mov	r0, r2
 8018772:	e7fc      	b.n	801876e <strncmp+0x1e>

08018774 <strncpy>:
 8018774:	b510      	push	{r4, lr}
 8018776:	3901      	subs	r1, #1
 8018778:	4603      	mov	r3, r0
 801877a:	b132      	cbz	r2, 801878a <strncpy+0x16>
 801877c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018780:	f803 4b01 	strb.w	r4, [r3], #1
 8018784:	3a01      	subs	r2, #1
 8018786:	2c00      	cmp	r4, #0
 8018788:	d1f7      	bne.n	801877a <strncpy+0x6>
 801878a:	441a      	add	r2, r3
 801878c:	2100      	movs	r1, #0
 801878e:	4293      	cmp	r3, r2
 8018790:	d100      	bne.n	8018794 <strncpy+0x20>
 8018792:	bd10      	pop	{r4, pc}
 8018794:	f803 1b01 	strb.w	r1, [r3], #1
 8018798:	e7f9      	b.n	801878e <strncpy+0x1a>
	...

0801879c <strtok>:
 801879c:	4b16      	ldr	r3, [pc, #88]	@ (80187f8 <strtok+0x5c>)
 801879e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187a2:	681f      	ldr	r7, [r3, #0]
 80187a4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80187a6:	4605      	mov	r5, r0
 80187a8:	460e      	mov	r6, r1
 80187aa:	b9ec      	cbnz	r4, 80187e8 <strtok+0x4c>
 80187ac:	2050      	movs	r0, #80	@ 0x50
 80187ae:	f001 fad3 	bl	8019d58 <malloc>
 80187b2:	4602      	mov	r2, r0
 80187b4:	6478      	str	r0, [r7, #68]	@ 0x44
 80187b6:	b920      	cbnz	r0, 80187c2 <strtok+0x26>
 80187b8:	4b10      	ldr	r3, [pc, #64]	@ (80187fc <strtok+0x60>)
 80187ba:	4811      	ldr	r0, [pc, #68]	@ (8018800 <strtok+0x64>)
 80187bc:	215b      	movs	r1, #91	@ 0x5b
 80187be:	f000 f8dd 	bl	801897c <__assert_func>
 80187c2:	e9c0 4400 	strd	r4, r4, [r0]
 80187c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80187ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80187ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80187d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80187d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80187da:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80187de:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80187e2:	6184      	str	r4, [r0, #24]
 80187e4:	7704      	strb	r4, [r0, #28]
 80187e6:	6244      	str	r4, [r0, #36]	@ 0x24
 80187e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80187ea:	4631      	mov	r1, r6
 80187ec:	4628      	mov	r0, r5
 80187ee:	2301      	movs	r3, #1
 80187f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187f4:	f000 b806 	b.w	8018804 <__strtok_r>
 80187f8:	200001a8 	.word	0x200001a8
 80187fc:	0801e4d6 	.word	0x0801e4d6
 8018800:	0801e6cd 	.word	0x0801e6cd

08018804 <__strtok_r>:
 8018804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018806:	4604      	mov	r4, r0
 8018808:	b908      	cbnz	r0, 801880e <__strtok_r+0xa>
 801880a:	6814      	ldr	r4, [r2, #0]
 801880c:	b144      	cbz	r4, 8018820 <__strtok_r+0x1c>
 801880e:	4620      	mov	r0, r4
 8018810:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018814:	460f      	mov	r7, r1
 8018816:	f817 6b01 	ldrb.w	r6, [r7], #1
 801881a:	b91e      	cbnz	r6, 8018824 <__strtok_r+0x20>
 801881c:	b965      	cbnz	r5, 8018838 <__strtok_r+0x34>
 801881e:	6015      	str	r5, [r2, #0]
 8018820:	2000      	movs	r0, #0
 8018822:	e005      	b.n	8018830 <__strtok_r+0x2c>
 8018824:	42b5      	cmp	r5, r6
 8018826:	d1f6      	bne.n	8018816 <__strtok_r+0x12>
 8018828:	2b00      	cmp	r3, #0
 801882a:	d1f0      	bne.n	801880e <__strtok_r+0xa>
 801882c:	6014      	str	r4, [r2, #0]
 801882e:	7003      	strb	r3, [r0, #0]
 8018830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018832:	461c      	mov	r4, r3
 8018834:	e00c      	b.n	8018850 <__strtok_r+0x4c>
 8018836:	b915      	cbnz	r5, 801883e <__strtok_r+0x3a>
 8018838:	f814 3b01 	ldrb.w	r3, [r4], #1
 801883c:	460e      	mov	r6, r1
 801883e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018842:	42ab      	cmp	r3, r5
 8018844:	d1f7      	bne.n	8018836 <__strtok_r+0x32>
 8018846:	2b00      	cmp	r3, #0
 8018848:	d0f3      	beq.n	8018832 <__strtok_r+0x2e>
 801884a:	2300      	movs	r3, #0
 801884c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018850:	6014      	str	r4, [r2, #0]
 8018852:	e7ed      	b.n	8018830 <__strtok_r+0x2c>

08018854 <_localeconv_r>:
 8018854:	4800      	ldr	r0, [pc, #0]	@ (8018858 <_localeconv_r+0x4>)
 8018856:	4770      	bx	lr
 8018858:	2000012c 	.word	0x2000012c

0801885c <_close_r>:
 801885c:	b538      	push	{r3, r4, r5, lr}
 801885e:	4d06      	ldr	r5, [pc, #24]	@ (8018878 <_close_r+0x1c>)
 8018860:	2300      	movs	r3, #0
 8018862:	4604      	mov	r4, r0
 8018864:	4608      	mov	r0, r1
 8018866:	602b      	str	r3, [r5, #0]
 8018868:	f7e9 f926 	bl	8001ab8 <_close>
 801886c:	1c43      	adds	r3, r0, #1
 801886e:	d102      	bne.n	8018876 <_close_r+0x1a>
 8018870:	682b      	ldr	r3, [r5, #0]
 8018872:	b103      	cbz	r3, 8018876 <_close_r+0x1a>
 8018874:	6023      	str	r3, [r4, #0]
 8018876:	bd38      	pop	{r3, r4, r5, pc}
 8018878:	20008c80 	.word	0x20008c80

0801887c <_lseek_r>:
 801887c:	b538      	push	{r3, r4, r5, lr}
 801887e:	4d07      	ldr	r5, [pc, #28]	@ (801889c <_lseek_r+0x20>)
 8018880:	4604      	mov	r4, r0
 8018882:	4608      	mov	r0, r1
 8018884:	4611      	mov	r1, r2
 8018886:	2200      	movs	r2, #0
 8018888:	602a      	str	r2, [r5, #0]
 801888a:	461a      	mov	r2, r3
 801888c:	f7e9 f93b 	bl	8001b06 <_lseek>
 8018890:	1c43      	adds	r3, r0, #1
 8018892:	d102      	bne.n	801889a <_lseek_r+0x1e>
 8018894:	682b      	ldr	r3, [r5, #0]
 8018896:	b103      	cbz	r3, 801889a <_lseek_r+0x1e>
 8018898:	6023      	str	r3, [r4, #0]
 801889a:	bd38      	pop	{r3, r4, r5, pc}
 801889c:	20008c80 	.word	0x20008c80

080188a0 <_read_r>:
 80188a0:	b538      	push	{r3, r4, r5, lr}
 80188a2:	4d07      	ldr	r5, [pc, #28]	@ (80188c0 <_read_r+0x20>)
 80188a4:	4604      	mov	r4, r0
 80188a6:	4608      	mov	r0, r1
 80188a8:	4611      	mov	r1, r2
 80188aa:	2200      	movs	r2, #0
 80188ac:	602a      	str	r2, [r5, #0]
 80188ae:	461a      	mov	r2, r3
 80188b0:	f7e9 f8e5 	bl	8001a7e <_read>
 80188b4:	1c43      	adds	r3, r0, #1
 80188b6:	d102      	bne.n	80188be <_read_r+0x1e>
 80188b8:	682b      	ldr	r3, [r5, #0]
 80188ba:	b103      	cbz	r3, 80188be <_read_r+0x1e>
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	bd38      	pop	{r3, r4, r5, pc}
 80188c0:	20008c80 	.word	0x20008c80

080188c4 <_write_r>:
 80188c4:	b538      	push	{r3, r4, r5, lr}
 80188c6:	4d07      	ldr	r5, [pc, #28]	@ (80188e4 <_write_r+0x20>)
 80188c8:	4604      	mov	r4, r0
 80188ca:	4608      	mov	r0, r1
 80188cc:	4611      	mov	r1, r2
 80188ce:	2200      	movs	r2, #0
 80188d0:	602a      	str	r2, [r5, #0]
 80188d2:	461a      	mov	r2, r3
 80188d4:	f7e8 fe08 	bl	80014e8 <_write>
 80188d8:	1c43      	adds	r3, r0, #1
 80188da:	d102      	bne.n	80188e2 <_write_r+0x1e>
 80188dc:	682b      	ldr	r3, [r5, #0]
 80188de:	b103      	cbz	r3, 80188e2 <_write_r+0x1e>
 80188e0:	6023      	str	r3, [r4, #0]
 80188e2:	bd38      	pop	{r3, r4, r5, pc}
 80188e4:	20008c80 	.word	0x20008c80

080188e8 <__errno>:
 80188e8:	4b01      	ldr	r3, [pc, #4]	@ (80188f0 <__errno+0x8>)
 80188ea:	6818      	ldr	r0, [r3, #0]
 80188ec:	4770      	bx	lr
 80188ee:	bf00      	nop
 80188f0:	200001a8 	.word	0x200001a8

080188f4 <__libc_init_array>:
 80188f4:	b570      	push	{r4, r5, r6, lr}
 80188f6:	4d0d      	ldr	r5, [pc, #52]	@ (801892c <__libc_init_array+0x38>)
 80188f8:	4c0d      	ldr	r4, [pc, #52]	@ (8018930 <__libc_init_array+0x3c>)
 80188fa:	1b64      	subs	r4, r4, r5
 80188fc:	10a4      	asrs	r4, r4, #2
 80188fe:	2600      	movs	r6, #0
 8018900:	42a6      	cmp	r6, r4
 8018902:	d109      	bne.n	8018918 <__libc_init_array+0x24>
 8018904:	4d0b      	ldr	r5, [pc, #44]	@ (8018934 <__libc_init_array+0x40>)
 8018906:	4c0c      	ldr	r4, [pc, #48]	@ (8018938 <__libc_init_array+0x44>)
 8018908:	f002 fc62 	bl	801b1d0 <_init>
 801890c:	1b64      	subs	r4, r4, r5
 801890e:	10a4      	asrs	r4, r4, #2
 8018910:	2600      	movs	r6, #0
 8018912:	42a6      	cmp	r6, r4
 8018914:	d105      	bne.n	8018922 <__libc_init_array+0x2e>
 8018916:	bd70      	pop	{r4, r5, r6, pc}
 8018918:	f855 3b04 	ldr.w	r3, [r5], #4
 801891c:	4798      	blx	r3
 801891e:	3601      	adds	r6, #1
 8018920:	e7ee      	b.n	8018900 <__libc_init_array+0xc>
 8018922:	f855 3b04 	ldr.w	r3, [r5], #4
 8018926:	4798      	blx	r3
 8018928:	3601      	adds	r6, #1
 801892a:	e7f2      	b.n	8018912 <__libc_init_array+0x1e>
 801892c:	0801e9b4 	.word	0x0801e9b4
 8018930:	0801e9b4 	.word	0x0801e9b4
 8018934:	0801e9b4 	.word	0x0801e9b4
 8018938:	0801e9b8 	.word	0x0801e9b8

0801893c <__retarget_lock_init_recursive>:
 801893c:	4770      	bx	lr

0801893e <__retarget_lock_acquire_recursive>:
 801893e:	4770      	bx	lr

08018940 <__retarget_lock_release_recursive>:
 8018940:	4770      	bx	lr

08018942 <memcpy>:
 8018942:	440a      	add	r2, r1
 8018944:	4291      	cmp	r1, r2
 8018946:	f100 33ff 	add.w	r3, r0, #4294967295
 801894a:	d100      	bne.n	801894e <memcpy+0xc>
 801894c:	4770      	bx	lr
 801894e:	b510      	push	{r4, lr}
 8018950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018958:	4291      	cmp	r1, r2
 801895a:	d1f9      	bne.n	8018950 <memcpy+0xe>
 801895c:	bd10      	pop	{r4, pc}
	...

08018960 <nan>:
 8018960:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018968 <nan+0x8>
 8018964:	4770      	bx	lr
 8018966:	bf00      	nop
 8018968:	00000000 	.word	0x00000000
 801896c:	7ff80000 	.word	0x7ff80000

08018970 <nanf>:
 8018970:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018978 <nanf+0x8>
 8018974:	4770      	bx	lr
 8018976:	bf00      	nop
 8018978:	7fc00000 	.word	0x7fc00000

0801897c <__assert_func>:
 801897c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801897e:	4614      	mov	r4, r2
 8018980:	461a      	mov	r2, r3
 8018982:	4b09      	ldr	r3, [pc, #36]	@ (80189a8 <__assert_func+0x2c>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	4605      	mov	r5, r0
 8018988:	68d8      	ldr	r0, [r3, #12]
 801898a:	b954      	cbnz	r4, 80189a2 <__assert_func+0x26>
 801898c:	4b07      	ldr	r3, [pc, #28]	@ (80189ac <__assert_func+0x30>)
 801898e:	461c      	mov	r4, r3
 8018990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018994:	9100      	str	r1, [sp, #0]
 8018996:	462b      	mov	r3, r5
 8018998:	4905      	ldr	r1, [pc, #20]	@ (80189b0 <__assert_func+0x34>)
 801899a:	f002 faa9 	bl	801aef0 <fiprintf>
 801899e:	f002 fb81 	bl	801b0a4 <abort>
 80189a2:	4b04      	ldr	r3, [pc, #16]	@ (80189b4 <__assert_func+0x38>)
 80189a4:	e7f4      	b.n	8018990 <__assert_func+0x14>
 80189a6:	bf00      	nop
 80189a8:	200001a8 	.word	0x200001a8
 80189ac:	0801e76a 	.word	0x0801e76a
 80189b0:	0801e73c 	.word	0x0801e73c
 80189b4:	0801e72f 	.word	0x0801e72f

080189b8 <quorem>:
 80189b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189bc:	6903      	ldr	r3, [r0, #16]
 80189be:	690c      	ldr	r4, [r1, #16]
 80189c0:	42a3      	cmp	r3, r4
 80189c2:	4607      	mov	r7, r0
 80189c4:	db7e      	blt.n	8018ac4 <quorem+0x10c>
 80189c6:	3c01      	subs	r4, #1
 80189c8:	f101 0814 	add.w	r8, r1, #20
 80189cc:	00a3      	lsls	r3, r4, #2
 80189ce:	f100 0514 	add.w	r5, r0, #20
 80189d2:	9300      	str	r3, [sp, #0]
 80189d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80189d8:	9301      	str	r3, [sp, #4]
 80189da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80189de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80189e2:	3301      	adds	r3, #1
 80189e4:	429a      	cmp	r2, r3
 80189e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80189ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80189ee:	d32e      	bcc.n	8018a4e <quorem+0x96>
 80189f0:	f04f 0a00 	mov.w	sl, #0
 80189f4:	46c4      	mov	ip, r8
 80189f6:	46ae      	mov	lr, r5
 80189f8:	46d3      	mov	fp, sl
 80189fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80189fe:	b298      	uxth	r0, r3
 8018a00:	fb06 a000 	mla	r0, r6, r0, sl
 8018a04:	0c02      	lsrs	r2, r0, #16
 8018a06:	0c1b      	lsrs	r3, r3, #16
 8018a08:	fb06 2303 	mla	r3, r6, r3, r2
 8018a0c:	f8de 2000 	ldr.w	r2, [lr]
 8018a10:	b280      	uxth	r0, r0
 8018a12:	b292      	uxth	r2, r2
 8018a14:	1a12      	subs	r2, r2, r0
 8018a16:	445a      	add	r2, fp
 8018a18:	f8de 0000 	ldr.w	r0, [lr]
 8018a1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018a26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018a2a:	b292      	uxth	r2, r2
 8018a2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018a30:	45e1      	cmp	r9, ip
 8018a32:	f84e 2b04 	str.w	r2, [lr], #4
 8018a36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018a3a:	d2de      	bcs.n	80189fa <quorem+0x42>
 8018a3c:	9b00      	ldr	r3, [sp, #0]
 8018a3e:	58eb      	ldr	r3, [r5, r3]
 8018a40:	b92b      	cbnz	r3, 8018a4e <quorem+0x96>
 8018a42:	9b01      	ldr	r3, [sp, #4]
 8018a44:	3b04      	subs	r3, #4
 8018a46:	429d      	cmp	r5, r3
 8018a48:	461a      	mov	r2, r3
 8018a4a:	d32f      	bcc.n	8018aac <quorem+0xf4>
 8018a4c:	613c      	str	r4, [r7, #16]
 8018a4e:	4638      	mov	r0, r7
 8018a50:	f001 fd0e 	bl	801a470 <__mcmp>
 8018a54:	2800      	cmp	r0, #0
 8018a56:	db25      	blt.n	8018aa4 <quorem+0xec>
 8018a58:	4629      	mov	r1, r5
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018a60:	f8d1 c000 	ldr.w	ip, [r1]
 8018a64:	fa1f fe82 	uxth.w	lr, r2
 8018a68:	fa1f f38c 	uxth.w	r3, ip
 8018a6c:	eba3 030e 	sub.w	r3, r3, lr
 8018a70:	4403      	add	r3, r0
 8018a72:	0c12      	lsrs	r2, r2, #16
 8018a74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018a78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018a7c:	b29b      	uxth	r3, r3
 8018a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018a82:	45c1      	cmp	r9, r8
 8018a84:	f841 3b04 	str.w	r3, [r1], #4
 8018a88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018a8c:	d2e6      	bcs.n	8018a5c <quorem+0xa4>
 8018a8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a96:	b922      	cbnz	r2, 8018aa2 <quorem+0xea>
 8018a98:	3b04      	subs	r3, #4
 8018a9a:	429d      	cmp	r5, r3
 8018a9c:	461a      	mov	r2, r3
 8018a9e:	d30b      	bcc.n	8018ab8 <quorem+0x100>
 8018aa0:	613c      	str	r4, [r7, #16]
 8018aa2:	3601      	adds	r6, #1
 8018aa4:	4630      	mov	r0, r6
 8018aa6:	b003      	add	sp, #12
 8018aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aac:	6812      	ldr	r2, [r2, #0]
 8018aae:	3b04      	subs	r3, #4
 8018ab0:	2a00      	cmp	r2, #0
 8018ab2:	d1cb      	bne.n	8018a4c <quorem+0x94>
 8018ab4:	3c01      	subs	r4, #1
 8018ab6:	e7c6      	b.n	8018a46 <quorem+0x8e>
 8018ab8:	6812      	ldr	r2, [r2, #0]
 8018aba:	3b04      	subs	r3, #4
 8018abc:	2a00      	cmp	r2, #0
 8018abe:	d1ef      	bne.n	8018aa0 <quorem+0xe8>
 8018ac0:	3c01      	subs	r4, #1
 8018ac2:	e7ea      	b.n	8018a9a <quorem+0xe2>
 8018ac4:	2000      	movs	r0, #0
 8018ac6:	e7ee      	b.n	8018aa6 <quorem+0xee>

08018ac8 <_dtoa_r>:
 8018ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018acc:	69c7      	ldr	r7, [r0, #28]
 8018ace:	b099      	sub	sp, #100	@ 0x64
 8018ad0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018ad4:	ec55 4b10 	vmov	r4, r5, d0
 8018ad8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8018ada:	9109      	str	r1, [sp, #36]	@ 0x24
 8018adc:	4683      	mov	fp, r0
 8018ade:	920e      	str	r2, [sp, #56]	@ 0x38
 8018ae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018ae2:	b97f      	cbnz	r7, 8018b04 <_dtoa_r+0x3c>
 8018ae4:	2010      	movs	r0, #16
 8018ae6:	f001 f937 	bl	8019d58 <malloc>
 8018aea:	4602      	mov	r2, r0
 8018aec:	f8cb 001c 	str.w	r0, [fp, #28]
 8018af0:	b920      	cbnz	r0, 8018afc <_dtoa_r+0x34>
 8018af2:	4ba7      	ldr	r3, [pc, #668]	@ (8018d90 <_dtoa_r+0x2c8>)
 8018af4:	21ef      	movs	r1, #239	@ 0xef
 8018af6:	48a7      	ldr	r0, [pc, #668]	@ (8018d94 <_dtoa_r+0x2cc>)
 8018af8:	f7ff ff40 	bl	801897c <__assert_func>
 8018afc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018b00:	6007      	str	r7, [r0, #0]
 8018b02:	60c7      	str	r7, [r0, #12]
 8018b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018b08:	6819      	ldr	r1, [r3, #0]
 8018b0a:	b159      	cbz	r1, 8018b24 <_dtoa_r+0x5c>
 8018b0c:	685a      	ldr	r2, [r3, #4]
 8018b0e:	604a      	str	r2, [r1, #4]
 8018b10:	2301      	movs	r3, #1
 8018b12:	4093      	lsls	r3, r2
 8018b14:	608b      	str	r3, [r1, #8]
 8018b16:	4658      	mov	r0, fp
 8018b18:	f001 fa26 	bl	8019f68 <_Bfree>
 8018b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018b20:	2200      	movs	r2, #0
 8018b22:	601a      	str	r2, [r3, #0]
 8018b24:	1e2b      	subs	r3, r5, #0
 8018b26:	bfb9      	ittee	lt
 8018b28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018b2c:	9303      	strlt	r3, [sp, #12]
 8018b2e:	2300      	movge	r3, #0
 8018b30:	6033      	strge	r3, [r6, #0]
 8018b32:	9f03      	ldr	r7, [sp, #12]
 8018b34:	4b98      	ldr	r3, [pc, #608]	@ (8018d98 <_dtoa_r+0x2d0>)
 8018b36:	bfbc      	itt	lt
 8018b38:	2201      	movlt	r2, #1
 8018b3a:	6032      	strlt	r2, [r6, #0]
 8018b3c:	43bb      	bics	r3, r7
 8018b3e:	d112      	bne.n	8018b66 <_dtoa_r+0x9e>
 8018b40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018b42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018b46:	6013      	str	r3, [r2, #0]
 8018b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018b4c:	4323      	orrs	r3, r4
 8018b4e:	f000 854d 	beq.w	80195ec <_dtoa_r+0xb24>
 8018b52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018b54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8018dac <_dtoa_r+0x2e4>
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	f000 854f 	beq.w	80195fc <_dtoa_r+0xb34>
 8018b5e:	f10a 0303 	add.w	r3, sl, #3
 8018b62:	f000 bd49 	b.w	80195f8 <_dtoa_r+0xb30>
 8018b66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	ec51 0b17 	vmov	r0, r1, d7
 8018b70:	2300      	movs	r3, #0
 8018b72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018b76:	f7e7 ffb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b7a:	4680      	mov	r8, r0
 8018b7c:	b158      	cbz	r0, 8018b96 <_dtoa_r+0xce>
 8018b7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018b80:	2301      	movs	r3, #1
 8018b82:	6013      	str	r3, [r2, #0]
 8018b84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018b86:	b113      	cbz	r3, 8018b8e <_dtoa_r+0xc6>
 8018b88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018b8a:	4b84      	ldr	r3, [pc, #528]	@ (8018d9c <_dtoa_r+0x2d4>)
 8018b8c:	6013      	str	r3, [r2, #0]
 8018b8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8018db0 <_dtoa_r+0x2e8>
 8018b92:	f000 bd33 	b.w	80195fc <_dtoa_r+0xb34>
 8018b96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018b9a:	aa16      	add	r2, sp, #88	@ 0x58
 8018b9c:	a917      	add	r1, sp, #92	@ 0x5c
 8018b9e:	4658      	mov	r0, fp
 8018ba0:	f001 fd86 	bl	801a6b0 <__d2b>
 8018ba4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018ba8:	4681      	mov	r9, r0
 8018baa:	2e00      	cmp	r6, #0
 8018bac:	d077      	beq.n	8018c9e <_dtoa_r+0x1d6>
 8018bae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018bb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8018bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018bbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018bc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018bc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018bc8:	4619      	mov	r1, r3
 8018bca:	2200      	movs	r2, #0
 8018bcc:	4b74      	ldr	r3, [pc, #464]	@ (8018da0 <_dtoa_r+0x2d8>)
 8018bce:	f7e7 fb6b 	bl	80002a8 <__aeabi_dsub>
 8018bd2:	a369      	add	r3, pc, #420	@ (adr r3, 8018d78 <_dtoa_r+0x2b0>)
 8018bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd8:	f7e7 fd1e 	bl	8000618 <__aeabi_dmul>
 8018bdc:	a368      	add	r3, pc, #416	@ (adr r3, 8018d80 <_dtoa_r+0x2b8>)
 8018bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be2:	f7e7 fb63 	bl	80002ac <__adddf3>
 8018be6:	4604      	mov	r4, r0
 8018be8:	4630      	mov	r0, r6
 8018bea:	460d      	mov	r5, r1
 8018bec:	f7e7 fcaa 	bl	8000544 <__aeabi_i2d>
 8018bf0:	a365      	add	r3, pc, #404	@ (adr r3, 8018d88 <_dtoa_r+0x2c0>)
 8018bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf6:	f7e7 fd0f 	bl	8000618 <__aeabi_dmul>
 8018bfa:	4602      	mov	r2, r0
 8018bfc:	460b      	mov	r3, r1
 8018bfe:	4620      	mov	r0, r4
 8018c00:	4629      	mov	r1, r5
 8018c02:	f7e7 fb53 	bl	80002ac <__adddf3>
 8018c06:	4604      	mov	r4, r0
 8018c08:	460d      	mov	r5, r1
 8018c0a:	f7e7 ffb5 	bl	8000b78 <__aeabi_d2iz>
 8018c0e:	2200      	movs	r2, #0
 8018c10:	4607      	mov	r7, r0
 8018c12:	2300      	movs	r3, #0
 8018c14:	4620      	mov	r0, r4
 8018c16:	4629      	mov	r1, r5
 8018c18:	f7e7 ff70 	bl	8000afc <__aeabi_dcmplt>
 8018c1c:	b140      	cbz	r0, 8018c30 <_dtoa_r+0x168>
 8018c1e:	4638      	mov	r0, r7
 8018c20:	f7e7 fc90 	bl	8000544 <__aeabi_i2d>
 8018c24:	4622      	mov	r2, r4
 8018c26:	462b      	mov	r3, r5
 8018c28:	f7e7 ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c2c:	b900      	cbnz	r0, 8018c30 <_dtoa_r+0x168>
 8018c2e:	3f01      	subs	r7, #1
 8018c30:	2f16      	cmp	r7, #22
 8018c32:	d851      	bhi.n	8018cd8 <_dtoa_r+0x210>
 8018c34:	4b5b      	ldr	r3, [pc, #364]	@ (8018da4 <_dtoa_r+0x2dc>)
 8018c36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018c42:	f7e7 ff5b 	bl	8000afc <__aeabi_dcmplt>
 8018c46:	2800      	cmp	r0, #0
 8018c48:	d048      	beq.n	8018cdc <_dtoa_r+0x214>
 8018c4a:	3f01      	subs	r7, #1
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018c50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018c52:	1b9b      	subs	r3, r3, r6
 8018c54:	1e5a      	subs	r2, r3, #1
 8018c56:	bf44      	itt	mi
 8018c58:	f1c3 0801 	rsbmi	r8, r3, #1
 8018c5c:	2300      	movmi	r3, #0
 8018c5e:	9208      	str	r2, [sp, #32]
 8018c60:	bf54      	ite	pl
 8018c62:	f04f 0800 	movpl.w	r8, #0
 8018c66:	9308      	strmi	r3, [sp, #32]
 8018c68:	2f00      	cmp	r7, #0
 8018c6a:	db39      	blt.n	8018ce0 <_dtoa_r+0x218>
 8018c6c:	9b08      	ldr	r3, [sp, #32]
 8018c6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018c70:	443b      	add	r3, r7
 8018c72:	9308      	str	r3, [sp, #32]
 8018c74:	2300      	movs	r3, #0
 8018c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8018c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c7a:	2b09      	cmp	r3, #9
 8018c7c:	d864      	bhi.n	8018d48 <_dtoa_r+0x280>
 8018c7e:	2b05      	cmp	r3, #5
 8018c80:	bfc4      	itt	gt
 8018c82:	3b04      	subgt	r3, #4
 8018c84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c88:	f1a3 0302 	sub.w	r3, r3, #2
 8018c8c:	bfcc      	ite	gt
 8018c8e:	2400      	movgt	r4, #0
 8018c90:	2401      	movle	r4, #1
 8018c92:	2b03      	cmp	r3, #3
 8018c94:	d863      	bhi.n	8018d5e <_dtoa_r+0x296>
 8018c96:	e8df f003 	tbb	[pc, r3]
 8018c9a:	372a      	.short	0x372a
 8018c9c:	5535      	.short	0x5535
 8018c9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8018ca2:	441e      	add	r6, r3
 8018ca4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018ca8:	2b20      	cmp	r3, #32
 8018caa:	bfc1      	itttt	gt
 8018cac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018cb0:	409f      	lslgt	r7, r3
 8018cb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018cb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018cba:	bfd6      	itet	le
 8018cbc:	f1c3 0320 	rsble	r3, r3, #32
 8018cc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8018cc4:	fa04 f003 	lslle.w	r0, r4, r3
 8018cc8:	f7e7 fc2c 	bl	8000524 <__aeabi_ui2d>
 8018ccc:	2201      	movs	r2, #1
 8018cce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018cd2:	3e01      	subs	r6, #1
 8018cd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8018cd6:	e777      	b.n	8018bc8 <_dtoa_r+0x100>
 8018cd8:	2301      	movs	r3, #1
 8018cda:	e7b8      	b.n	8018c4e <_dtoa_r+0x186>
 8018cdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8018cde:	e7b7      	b.n	8018c50 <_dtoa_r+0x188>
 8018ce0:	427b      	negs	r3, r7
 8018ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	eba8 0807 	sub.w	r8, r8, r7
 8018cea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018cec:	e7c4      	b.n	8018c78 <_dtoa_r+0x1b0>
 8018cee:	2300      	movs	r3, #0
 8018cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	dc35      	bgt.n	8018d64 <_dtoa_r+0x29c>
 8018cf8:	2301      	movs	r3, #1
 8018cfa:	9300      	str	r3, [sp, #0]
 8018cfc:	9307      	str	r3, [sp, #28]
 8018cfe:	461a      	mov	r2, r3
 8018d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8018d02:	e00b      	b.n	8018d1c <_dtoa_r+0x254>
 8018d04:	2301      	movs	r3, #1
 8018d06:	e7f3      	b.n	8018cf0 <_dtoa_r+0x228>
 8018d08:	2300      	movs	r3, #0
 8018d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d0e:	18fb      	adds	r3, r7, r3
 8018d10:	9300      	str	r3, [sp, #0]
 8018d12:	3301      	adds	r3, #1
 8018d14:	2b01      	cmp	r3, #1
 8018d16:	9307      	str	r3, [sp, #28]
 8018d18:	bfb8      	it	lt
 8018d1a:	2301      	movlt	r3, #1
 8018d1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8018d20:	2100      	movs	r1, #0
 8018d22:	2204      	movs	r2, #4
 8018d24:	f102 0514 	add.w	r5, r2, #20
 8018d28:	429d      	cmp	r5, r3
 8018d2a:	d91f      	bls.n	8018d6c <_dtoa_r+0x2a4>
 8018d2c:	6041      	str	r1, [r0, #4]
 8018d2e:	4658      	mov	r0, fp
 8018d30:	f001 f8da 	bl	8019ee8 <_Balloc>
 8018d34:	4682      	mov	sl, r0
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d13c      	bne.n	8018db4 <_dtoa_r+0x2ec>
 8018d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8018da8 <_dtoa_r+0x2e0>)
 8018d3c:	4602      	mov	r2, r0
 8018d3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8018d42:	e6d8      	b.n	8018af6 <_dtoa_r+0x2e>
 8018d44:	2301      	movs	r3, #1
 8018d46:	e7e0      	b.n	8018d0a <_dtoa_r+0x242>
 8018d48:	2401      	movs	r4, #1
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018d50:	f04f 33ff 	mov.w	r3, #4294967295
 8018d54:	9300      	str	r3, [sp, #0]
 8018d56:	9307      	str	r3, [sp, #28]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	2312      	movs	r3, #18
 8018d5c:	e7d0      	b.n	8018d00 <_dtoa_r+0x238>
 8018d5e:	2301      	movs	r3, #1
 8018d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018d62:	e7f5      	b.n	8018d50 <_dtoa_r+0x288>
 8018d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d66:	9300      	str	r3, [sp, #0]
 8018d68:	9307      	str	r3, [sp, #28]
 8018d6a:	e7d7      	b.n	8018d1c <_dtoa_r+0x254>
 8018d6c:	3101      	adds	r1, #1
 8018d6e:	0052      	lsls	r2, r2, #1
 8018d70:	e7d8      	b.n	8018d24 <_dtoa_r+0x25c>
 8018d72:	bf00      	nop
 8018d74:	f3af 8000 	nop.w
 8018d78:	636f4361 	.word	0x636f4361
 8018d7c:	3fd287a7 	.word	0x3fd287a7
 8018d80:	8b60c8b3 	.word	0x8b60c8b3
 8018d84:	3fc68a28 	.word	0x3fc68a28
 8018d88:	509f79fb 	.word	0x509f79fb
 8018d8c:	3fd34413 	.word	0x3fd34413
 8018d90:	0801e4d6 	.word	0x0801e4d6
 8018d94:	0801e778 	.word	0x0801e778
 8018d98:	7ff00000 	.word	0x7ff00000
 8018d9c:	0801e6aa 	.word	0x0801e6aa
 8018da0:	3ff80000 	.word	0x3ff80000
 8018da4:	0801e8d0 	.word	0x0801e8d0
 8018da8:	0801e7d0 	.word	0x0801e7d0
 8018dac:	0801e774 	.word	0x0801e774
 8018db0:	0801e6a9 	.word	0x0801e6a9
 8018db4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018db8:	6018      	str	r0, [r3, #0]
 8018dba:	9b07      	ldr	r3, [sp, #28]
 8018dbc:	2b0e      	cmp	r3, #14
 8018dbe:	f200 80a4 	bhi.w	8018f0a <_dtoa_r+0x442>
 8018dc2:	2c00      	cmp	r4, #0
 8018dc4:	f000 80a1 	beq.w	8018f0a <_dtoa_r+0x442>
 8018dc8:	2f00      	cmp	r7, #0
 8018dca:	dd33      	ble.n	8018e34 <_dtoa_r+0x36c>
 8018dcc:	4bad      	ldr	r3, [pc, #692]	@ (8019084 <_dtoa_r+0x5bc>)
 8018dce:	f007 020f 	and.w	r2, r7, #15
 8018dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018dd6:	ed93 7b00 	vldr	d7, [r3]
 8018dda:	05f8      	lsls	r0, r7, #23
 8018ddc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018de0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018de4:	d516      	bpl.n	8018e14 <_dtoa_r+0x34c>
 8018de6:	4ba8      	ldr	r3, [pc, #672]	@ (8019088 <_dtoa_r+0x5c0>)
 8018de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018df0:	f7e7 fd3c 	bl	800086c <__aeabi_ddiv>
 8018df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018df8:	f004 040f 	and.w	r4, r4, #15
 8018dfc:	2603      	movs	r6, #3
 8018dfe:	4da2      	ldr	r5, [pc, #648]	@ (8019088 <_dtoa_r+0x5c0>)
 8018e00:	b954      	cbnz	r4, 8018e18 <_dtoa_r+0x350>
 8018e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018e0a:	f7e7 fd2f 	bl	800086c <__aeabi_ddiv>
 8018e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e12:	e028      	b.n	8018e66 <_dtoa_r+0x39e>
 8018e14:	2602      	movs	r6, #2
 8018e16:	e7f2      	b.n	8018dfe <_dtoa_r+0x336>
 8018e18:	07e1      	lsls	r1, r4, #31
 8018e1a:	d508      	bpl.n	8018e2e <_dtoa_r+0x366>
 8018e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e24:	f7e7 fbf8 	bl	8000618 <__aeabi_dmul>
 8018e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e2c:	3601      	adds	r6, #1
 8018e2e:	1064      	asrs	r4, r4, #1
 8018e30:	3508      	adds	r5, #8
 8018e32:	e7e5      	b.n	8018e00 <_dtoa_r+0x338>
 8018e34:	f000 80d2 	beq.w	8018fdc <_dtoa_r+0x514>
 8018e38:	427c      	negs	r4, r7
 8018e3a:	4b92      	ldr	r3, [pc, #584]	@ (8019084 <_dtoa_r+0x5bc>)
 8018e3c:	4d92      	ldr	r5, [pc, #584]	@ (8019088 <_dtoa_r+0x5c0>)
 8018e3e:	f004 020f 	and.w	r2, r4, #15
 8018e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018e4e:	f7e7 fbe3 	bl	8000618 <__aeabi_dmul>
 8018e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e56:	1124      	asrs	r4, r4, #4
 8018e58:	2300      	movs	r3, #0
 8018e5a:	2602      	movs	r6, #2
 8018e5c:	2c00      	cmp	r4, #0
 8018e5e:	f040 80b2 	bne.w	8018fc6 <_dtoa_r+0x4fe>
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d1d3      	bne.n	8018e0e <_dtoa_r+0x346>
 8018e66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018e68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	f000 80b7 	beq.w	8018fe0 <_dtoa_r+0x518>
 8018e72:	4b86      	ldr	r3, [pc, #536]	@ (801908c <_dtoa_r+0x5c4>)
 8018e74:	2200      	movs	r2, #0
 8018e76:	4620      	mov	r0, r4
 8018e78:	4629      	mov	r1, r5
 8018e7a:	f7e7 fe3f 	bl	8000afc <__aeabi_dcmplt>
 8018e7e:	2800      	cmp	r0, #0
 8018e80:	f000 80ae 	beq.w	8018fe0 <_dtoa_r+0x518>
 8018e84:	9b07      	ldr	r3, [sp, #28]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	f000 80aa 	beq.w	8018fe0 <_dtoa_r+0x518>
 8018e8c:	9b00      	ldr	r3, [sp, #0]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	dd37      	ble.n	8018f02 <_dtoa_r+0x43a>
 8018e92:	1e7b      	subs	r3, r7, #1
 8018e94:	9304      	str	r3, [sp, #16]
 8018e96:	4620      	mov	r0, r4
 8018e98:	4b7d      	ldr	r3, [pc, #500]	@ (8019090 <_dtoa_r+0x5c8>)
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	4629      	mov	r1, r5
 8018e9e:	f7e7 fbbb 	bl	8000618 <__aeabi_dmul>
 8018ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ea6:	9c00      	ldr	r4, [sp, #0]
 8018ea8:	3601      	adds	r6, #1
 8018eaa:	4630      	mov	r0, r6
 8018eac:	f7e7 fb4a 	bl	8000544 <__aeabi_i2d>
 8018eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018eb4:	f7e7 fbb0 	bl	8000618 <__aeabi_dmul>
 8018eb8:	4b76      	ldr	r3, [pc, #472]	@ (8019094 <_dtoa_r+0x5cc>)
 8018eba:	2200      	movs	r2, #0
 8018ebc:	f7e7 f9f6 	bl	80002ac <__adddf3>
 8018ec0:	4605      	mov	r5, r0
 8018ec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018ec6:	2c00      	cmp	r4, #0
 8018ec8:	f040 808d 	bne.w	8018fe6 <_dtoa_r+0x51e>
 8018ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ed0:	4b71      	ldr	r3, [pc, #452]	@ (8019098 <_dtoa_r+0x5d0>)
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	f7e7 f9e8 	bl	80002a8 <__aeabi_dsub>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	460b      	mov	r3, r1
 8018edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018ee0:	462a      	mov	r2, r5
 8018ee2:	4633      	mov	r3, r6
 8018ee4:	f7e7 fe28 	bl	8000b38 <__aeabi_dcmpgt>
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	f040 828b 	bne.w	8019404 <_dtoa_r+0x93c>
 8018eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ef2:	462a      	mov	r2, r5
 8018ef4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018ef8:	f7e7 fe00 	bl	8000afc <__aeabi_dcmplt>
 8018efc:	2800      	cmp	r0, #0
 8018efe:	f040 8128 	bne.w	8019152 <_dtoa_r+0x68a>
 8018f02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8018f06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8018f0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	f2c0 815a 	blt.w	80191c6 <_dtoa_r+0x6fe>
 8018f12:	2f0e      	cmp	r7, #14
 8018f14:	f300 8157 	bgt.w	80191c6 <_dtoa_r+0x6fe>
 8018f18:	4b5a      	ldr	r3, [pc, #360]	@ (8019084 <_dtoa_r+0x5bc>)
 8018f1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018f1e:	ed93 7b00 	vldr	d7, [r3]
 8018f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	ed8d 7b00 	vstr	d7, [sp]
 8018f2a:	da03      	bge.n	8018f34 <_dtoa_r+0x46c>
 8018f2c:	9b07      	ldr	r3, [sp, #28]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	f340 8101 	ble.w	8019136 <_dtoa_r+0x66e>
 8018f34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018f38:	4656      	mov	r6, sl
 8018f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f3e:	4620      	mov	r0, r4
 8018f40:	4629      	mov	r1, r5
 8018f42:	f7e7 fc93 	bl	800086c <__aeabi_ddiv>
 8018f46:	f7e7 fe17 	bl	8000b78 <__aeabi_d2iz>
 8018f4a:	4680      	mov	r8, r0
 8018f4c:	f7e7 fafa 	bl	8000544 <__aeabi_i2d>
 8018f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f54:	f7e7 fb60 	bl	8000618 <__aeabi_dmul>
 8018f58:	4602      	mov	r2, r0
 8018f5a:	460b      	mov	r3, r1
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	4629      	mov	r1, r5
 8018f60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018f64:	f7e7 f9a0 	bl	80002a8 <__aeabi_dsub>
 8018f68:	f806 4b01 	strb.w	r4, [r6], #1
 8018f6c:	9d07      	ldr	r5, [sp, #28]
 8018f6e:	eba6 040a 	sub.w	r4, r6, sl
 8018f72:	42a5      	cmp	r5, r4
 8018f74:	4602      	mov	r2, r0
 8018f76:	460b      	mov	r3, r1
 8018f78:	f040 8117 	bne.w	80191aa <_dtoa_r+0x6e2>
 8018f7c:	f7e7 f996 	bl	80002ac <__adddf3>
 8018f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f84:	4604      	mov	r4, r0
 8018f86:	460d      	mov	r5, r1
 8018f88:	f7e7 fdd6 	bl	8000b38 <__aeabi_dcmpgt>
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	f040 80f9 	bne.w	8019184 <_dtoa_r+0x6bc>
 8018f92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f96:	4620      	mov	r0, r4
 8018f98:	4629      	mov	r1, r5
 8018f9a:	f7e7 fda5 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f9e:	b118      	cbz	r0, 8018fa8 <_dtoa_r+0x4e0>
 8018fa0:	f018 0f01 	tst.w	r8, #1
 8018fa4:	f040 80ee 	bne.w	8019184 <_dtoa_r+0x6bc>
 8018fa8:	4649      	mov	r1, r9
 8018faa:	4658      	mov	r0, fp
 8018fac:	f000 ffdc 	bl	8019f68 <_Bfree>
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	7033      	strb	r3, [r6, #0]
 8018fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018fb6:	3701      	adds	r7, #1
 8018fb8:	601f      	str	r7, [r3, #0]
 8018fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	f000 831d 	beq.w	80195fc <_dtoa_r+0xb34>
 8018fc2:	601e      	str	r6, [r3, #0]
 8018fc4:	e31a      	b.n	80195fc <_dtoa_r+0xb34>
 8018fc6:	07e2      	lsls	r2, r4, #31
 8018fc8:	d505      	bpl.n	8018fd6 <_dtoa_r+0x50e>
 8018fca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018fce:	f7e7 fb23 	bl	8000618 <__aeabi_dmul>
 8018fd2:	3601      	adds	r6, #1
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	1064      	asrs	r4, r4, #1
 8018fd8:	3508      	adds	r5, #8
 8018fda:	e73f      	b.n	8018e5c <_dtoa_r+0x394>
 8018fdc:	2602      	movs	r6, #2
 8018fde:	e742      	b.n	8018e66 <_dtoa_r+0x39e>
 8018fe0:	9c07      	ldr	r4, [sp, #28]
 8018fe2:	9704      	str	r7, [sp, #16]
 8018fe4:	e761      	b.n	8018eaa <_dtoa_r+0x3e2>
 8018fe6:	4b27      	ldr	r3, [pc, #156]	@ (8019084 <_dtoa_r+0x5bc>)
 8018fe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018fea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018fee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018ff2:	4454      	add	r4, sl
 8018ff4:	2900      	cmp	r1, #0
 8018ff6:	d053      	beq.n	80190a0 <_dtoa_r+0x5d8>
 8018ff8:	4928      	ldr	r1, [pc, #160]	@ (801909c <_dtoa_r+0x5d4>)
 8018ffa:	2000      	movs	r0, #0
 8018ffc:	f7e7 fc36 	bl	800086c <__aeabi_ddiv>
 8019000:	4633      	mov	r3, r6
 8019002:	462a      	mov	r2, r5
 8019004:	f7e7 f950 	bl	80002a8 <__aeabi_dsub>
 8019008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801900c:	4656      	mov	r6, sl
 801900e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019012:	f7e7 fdb1 	bl	8000b78 <__aeabi_d2iz>
 8019016:	4605      	mov	r5, r0
 8019018:	f7e7 fa94 	bl	8000544 <__aeabi_i2d>
 801901c:	4602      	mov	r2, r0
 801901e:	460b      	mov	r3, r1
 8019020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019024:	f7e7 f940 	bl	80002a8 <__aeabi_dsub>
 8019028:	3530      	adds	r5, #48	@ 0x30
 801902a:	4602      	mov	r2, r0
 801902c:	460b      	mov	r3, r1
 801902e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019032:	f806 5b01 	strb.w	r5, [r6], #1
 8019036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801903a:	f7e7 fd5f 	bl	8000afc <__aeabi_dcmplt>
 801903e:	2800      	cmp	r0, #0
 8019040:	d171      	bne.n	8019126 <_dtoa_r+0x65e>
 8019042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019046:	4911      	ldr	r1, [pc, #68]	@ (801908c <_dtoa_r+0x5c4>)
 8019048:	2000      	movs	r0, #0
 801904a:	f7e7 f92d 	bl	80002a8 <__aeabi_dsub>
 801904e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8019052:	f7e7 fd53 	bl	8000afc <__aeabi_dcmplt>
 8019056:	2800      	cmp	r0, #0
 8019058:	f040 8095 	bne.w	8019186 <_dtoa_r+0x6be>
 801905c:	42a6      	cmp	r6, r4
 801905e:	f43f af50 	beq.w	8018f02 <_dtoa_r+0x43a>
 8019062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8019066:	4b0a      	ldr	r3, [pc, #40]	@ (8019090 <_dtoa_r+0x5c8>)
 8019068:	2200      	movs	r2, #0
 801906a:	f7e7 fad5 	bl	8000618 <__aeabi_dmul>
 801906e:	4b08      	ldr	r3, [pc, #32]	@ (8019090 <_dtoa_r+0x5c8>)
 8019070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8019074:	2200      	movs	r2, #0
 8019076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801907a:	f7e7 facd 	bl	8000618 <__aeabi_dmul>
 801907e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019082:	e7c4      	b.n	801900e <_dtoa_r+0x546>
 8019084:	0801e8d0 	.word	0x0801e8d0
 8019088:	0801e8a8 	.word	0x0801e8a8
 801908c:	3ff00000 	.word	0x3ff00000
 8019090:	40240000 	.word	0x40240000
 8019094:	401c0000 	.word	0x401c0000
 8019098:	40140000 	.word	0x40140000
 801909c:	3fe00000 	.word	0x3fe00000
 80190a0:	4631      	mov	r1, r6
 80190a2:	4628      	mov	r0, r5
 80190a4:	f7e7 fab8 	bl	8000618 <__aeabi_dmul>
 80190a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80190ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80190ae:	4656      	mov	r6, sl
 80190b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190b4:	f7e7 fd60 	bl	8000b78 <__aeabi_d2iz>
 80190b8:	4605      	mov	r5, r0
 80190ba:	f7e7 fa43 	bl	8000544 <__aeabi_i2d>
 80190be:	4602      	mov	r2, r0
 80190c0:	460b      	mov	r3, r1
 80190c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190c6:	f7e7 f8ef 	bl	80002a8 <__aeabi_dsub>
 80190ca:	3530      	adds	r5, #48	@ 0x30
 80190cc:	f806 5b01 	strb.w	r5, [r6], #1
 80190d0:	4602      	mov	r2, r0
 80190d2:	460b      	mov	r3, r1
 80190d4:	42a6      	cmp	r6, r4
 80190d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80190da:	f04f 0200 	mov.w	r2, #0
 80190de:	d124      	bne.n	801912a <_dtoa_r+0x662>
 80190e0:	4bac      	ldr	r3, [pc, #688]	@ (8019394 <_dtoa_r+0x8cc>)
 80190e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80190e6:	f7e7 f8e1 	bl	80002ac <__adddf3>
 80190ea:	4602      	mov	r2, r0
 80190ec:	460b      	mov	r3, r1
 80190ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190f2:	f7e7 fd21 	bl	8000b38 <__aeabi_dcmpgt>
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d145      	bne.n	8019186 <_dtoa_r+0x6be>
 80190fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80190fe:	49a5      	ldr	r1, [pc, #660]	@ (8019394 <_dtoa_r+0x8cc>)
 8019100:	2000      	movs	r0, #0
 8019102:	f7e7 f8d1 	bl	80002a8 <__aeabi_dsub>
 8019106:	4602      	mov	r2, r0
 8019108:	460b      	mov	r3, r1
 801910a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801910e:	f7e7 fcf5 	bl	8000afc <__aeabi_dcmplt>
 8019112:	2800      	cmp	r0, #0
 8019114:	f43f aef5 	beq.w	8018f02 <_dtoa_r+0x43a>
 8019118:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801911a:	1e73      	subs	r3, r6, #1
 801911c:	9315      	str	r3, [sp, #84]	@ 0x54
 801911e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019122:	2b30      	cmp	r3, #48	@ 0x30
 8019124:	d0f8      	beq.n	8019118 <_dtoa_r+0x650>
 8019126:	9f04      	ldr	r7, [sp, #16]
 8019128:	e73e      	b.n	8018fa8 <_dtoa_r+0x4e0>
 801912a:	4b9b      	ldr	r3, [pc, #620]	@ (8019398 <_dtoa_r+0x8d0>)
 801912c:	f7e7 fa74 	bl	8000618 <__aeabi_dmul>
 8019130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019134:	e7bc      	b.n	80190b0 <_dtoa_r+0x5e8>
 8019136:	d10c      	bne.n	8019152 <_dtoa_r+0x68a>
 8019138:	4b98      	ldr	r3, [pc, #608]	@ (801939c <_dtoa_r+0x8d4>)
 801913a:	2200      	movs	r2, #0
 801913c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019140:	f7e7 fa6a 	bl	8000618 <__aeabi_dmul>
 8019144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019148:	f7e7 fcec 	bl	8000b24 <__aeabi_dcmpge>
 801914c:	2800      	cmp	r0, #0
 801914e:	f000 8157 	beq.w	8019400 <_dtoa_r+0x938>
 8019152:	2400      	movs	r4, #0
 8019154:	4625      	mov	r5, r4
 8019156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019158:	43db      	mvns	r3, r3
 801915a:	9304      	str	r3, [sp, #16]
 801915c:	4656      	mov	r6, sl
 801915e:	2700      	movs	r7, #0
 8019160:	4621      	mov	r1, r4
 8019162:	4658      	mov	r0, fp
 8019164:	f000 ff00 	bl	8019f68 <_Bfree>
 8019168:	2d00      	cmp	r5, #0
 801916a:	d0dc      	beq.n	8019126 <_dtoa_r+0x65e>
 801916c:	b12f      	cbz	r7, 801917a <_dtoa_r+0x6b2>
 801916e:	42af      	cmp	r7, r5
 8019170:	d003      	beq.n	801917a <_dtoa_r+0x6b2>
 8019172:	4639      	mov	r1, r7
 8019174:	4658      	mov	r0, fp
 8019176:	f000 fef7 	bl	8019f68 <_Bfree>
 801917a:	4629      	mov	r1, r5
 801917c:	4658      	mov	r0, fp
 801917e:	f000 fef3 	bl	8019f68 <_Bfree>
 8019182:	e7d0      	b.n	8019126 <_dtoa_r+0x65e>
 8019184:	9704      	str	r7, [sp, #16]
 8019186:	4633      	mov	r3, r6
 8019188:	461e      	mov	r6, r3
 801918a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801918e:	2a39      	cmp	r2, #57	@ 0x39
 8019190:	d107      	bne.n	80191a2 <_dtoa_r+0x6da>
 8019192:	459a      	cmp	sl, r3
 8019194:	d1f8      	bne.n	8019188 <_dtoa_r+0x6c0>
 8019196:	9a04      	ldr	r2, [sp, #16]
 8019198:	3201      	adds	r2, #1
 801919a:	9204      	str	r2, [sp, #16]
 801919c:	2230      	movs	r2, #48	@ 0x30
 801919e:	f88a 2000 	strb.w	r2, [sl]
 80191a2:	781a      	ldrb	r2, [r3, #0]
 80191a4:	3201      	adds	r2, #1
 80191a6:	701a      	strb	r2, [r3, #0]
 80191a8:	e7bd      	b.n	8019126 <_dtoa_r+0x65e>
 80191aa:	4b7b      	ldr	r3, [pc, #492]	@ (8019398 <_dtoa_r+0x8d0>)
 80191ac:	2200      	movs	r2, #0
 80191ae:	f7e7 fa33 	bl	8000618 <__aeabi_dmul>
 80191b2:	2200      	movs	r2, #0
 80191b4:	2300      	movs	r3, #0
 80191b6:	4604      	mov	r4, r0
 80191b8:	460d      	mov	r5, r1
 80191ba:	f7e7 fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80191be:	2800      	cmp	r0, #0
 80191c0:	f43f aebb 	beq.w	8018f3a <_dtoa_r+0x472>
 80191c4:	e6f0      	b.n	8018fa8 <_dtoa_r+0x4e0>
 80191c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80191c8:	2a00      	cmp	r2, #0
 80191ca:	f000 80db 	beq.w	8019384 <_dtoa_r+0x8bc>
 80191ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191d0:	2a01      	cmp	r2, #1
 80191d2:	f300 80bf 	bgt.w	8019354 <_dtoa_r+0x88c>
 80191d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80191d8:	2a00      	cmp	r2, #0
 80191da:	f000 80b7 	beq.w	801934c <_dtoa_r+0x884>
 80191de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80191e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80191e4:	4646      	mov	r6, r8
 80191e6:	9a08      	ldr	r2, [sp, #32]
 80191e8:	2101      	movs	r1, #1
 80191ea:	441a      	add	r2, r3
 80191ec:	4658      	mov	r0, fp
 80191ee:	4498      	add	r8, r3
 80191f0:	9208      	str	r2, [sp, #32]
 80191f2:	f000 ffb7 	bl	801a164 <__i2b>
 80191f6:	4605      	mov	r5, r0
 80191f8:	b15e      	cbz	r6, 8019212 <_dtoa_r+0x74a>
 80191fa:	9b08      	ldr	r3, [sp, #32]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	dd08      	ble.n	8019212 <_dtoa_r+0x74a>
 8019200:	42b3      	cmp	r3, r6
 8019202:	9a08      	ldr	r2, [sp, #32]
 8019204:	bfa8      	it	ge
 8019206:	4633      	movge	r3, r6
 8019208:	eba8 0803 	sub.w	r8, r8, r3
 801920c:	1af6      	subs	r6, r6, r3
 801920e:	1ad3      	subs	r3, r2, r3
 8019210:	9308      	str	r3, [sp, #32]
 8019212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019214:	b1f3      	cbz	r3, 8019254 <_dtoa_r+0x78c>
 8019216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019218:	2b00      	cmp	r3, #0
 801921a:	f000 80b7 	beq.w	801938c <_dtoa_r+0x8c4>
 801921e:	b18c      	cbz	r4, 8019244 <_dtoa_r+0x77c>
 8019220:	4629      	mov	r1, r5
 8019222:	4622      	mov	r2, r4
 8019224:	4658      	mov	r0, fp
 8019226:	f001 f85d 	bl	801a2e4 <__pow5mult>
 801922a:	464a      	mov	r2, r9
 801922c:	4601      	mov	r1, r0
 801922e:	4605      	mov	r5, r0
 8019230:	4658      	mov	r0, fp
 8019232:	f000 ffad 	bl	801a190 <__multiply>
 8019236:	4649      	mov	r1, r9
 8019238:	9004      	str	r0, [sp, #16]
 801923a:	4658      	mov	r0, fp
 801923c:	f000 fe94 	bl	8019f68 <_Bfree>
 8019240:	9b04      	ldr	r3, [sp, #16]
 8019242:	4699      	mov	r9, r3
 8019244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019246:	1b1a      	subs	r2, r3, r4
 8019248:	d004      	beq.n	8019254 <_dtoa_r+0x78c>
 801924a:	4649      	mov	r1, r9
 801924c:	4658      	mov	r0, fp
 801924e:	f001 f849 	bl	801a2e4 <__pow5mult>
 8019252:	4681      	mov	r9, r0
 8019254:	2101      	movs	r1, #1
 8019256:	4658      	mov	r0, fp
 8019258:	f000 ff84 	bl	801a164 <__i2b>
 801925c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801925e:	4604      	mov	r4, r0
 8019260:	2b00      	cmp	r3, #0
 8019262:	f000 81cf 	beq.w	8019604 <_dtoa_r+0xb3c>
 8019266:	461a      	mov	r2, r3
 8019268:	4601      	mov	r1, r0
 801926a:	4658      	mov	r0, fp
 801926c:	f001 f83a 	bl	801a2e4 <__pow5mult>
 8019270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019272:	2b01      	cmp	r3, #1
 8019274:	4604      	mov	r4, r0
 8019276:	f300 8095 	bgt.w	80193a4 <_dtoa_r+0x8dc>
 801927a:	9b02      	ldr	r3, [sp, #8]
 801927c:	2b00      	cmp	r3, #0
 801927e:	f040 8087 	bne.w	8019390 <_dtoa_r+0x8c8>
 8019282:	9b03      	ldr	r3, [sp, #12]
 8019284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019288:	2b00      	cmp	r3, #0
 801928a:	f040 8089 	bne.w	80193a0 <_dtoa_r+0x8d8>
 801928e:	9b03      	ldr	r3, [sp, #12]
 8019290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019294:	0d1b      	lsrs	r3, r3, #20
 8019296:	051b      	lsls	r3, r3, #20
 8019298:	b12b      	cbz	r3, 80192a6 <_dtoa_r+0x7de>
 801929a:	9b08      	ldr	r3, [sp, #32]
 801929c:	3301      	adds	r3, #1
 801929e:	9308      	str	r3, [sp, #32]
 80192a0:	f108 0801 	add.w	r8, r8, #1
 80192a4:	2301      	movs	r3, #1
 80192a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80192a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	f000 81b0 	beq.w	8019610 <_dtoa_r+0xb48>
 80192b0:	6923      	ldr	r3, [r4, #16]
 80192b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80192b6:	6918      	ldr	r0, [r3, #16]
 80192b8:	f000 ff08 	bl	801a0cc <__hi0bits>
 80192bc:	f1c0 0020 	rsb	r0, r0, #32
 80192c0:	9b08      	ldr	r3, [sp, #32]
 80192c2:	4418      	add	r0, r3
 80192c4:	f010 001f 	ands.w	r0, r0, #31
 80192c8:	d077      	beq.n	80193ba <_dtoa_r+0x8f2>
 80192ca:	f1c0 0320 	rsb	r3, r0, #32
 80192ce:	2b04      	cmp	r3, #4
 80192d0:	dd6b      	ble.n	80193aa <_dtoa_r+0x8e2>
 80192d2:	9b08      	ldr	r3, [sp, #32]
 80192d4:	f1c0 001c 	rsb	r0, r0, #28
 80192d8:	4403      	add	r3, r0
 80192da:	4480      	add	r8, r0
 80192dc:	4406      	add	r6, r0
 80192de:	9308      	str	r3, [sp, #32]
 80192e0:	f1b8 0f00 	cmp.w	r8, #0
 80192e4:	dd05      	ble.n	80192f2 <_dtoa_r+0x82a>
 80192e6:	4649      	mov	r1, r9
 80192e8:	4642      	mov	r2, r8
 80192ea:	4658      	mov	r0, fp
 80192ec:	f001 f854 	bl	801a398 <__lshift>
 80192f0:	4681      	mov	r9, r0
 80192f2:	9b08      	ldr	r3, [sp, #32]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	dd05      	ble.n	8019304 <_dtoa_r+0x83c>
 80192f8:	4621      	mov	r1, r4
 80192fa:	461a      	mov	r2, r3
 80192fc:	4658      	mov	r0, fp
 80192fe:	f001 f84b 	bl	801a398 <__lshift>
 8019302:	4604      	mov	r4, r0
 8019304:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019306:	2b00      	cmp	r3, #0
 8019308:	d059      	beq.n	80193be <_dtoa_r+0x8f6>
 801930a:	4621      	mov	r1, r4
 801930c:	4648      	mov	r0, r9
 801930e:	f001 f8af 	bl	801a470 <__mcmp>
 8019312:	2800      	cmp	r0, #0
 8019314:	da53      	bge.n	80193be <_dtoa_r+0x8f6>
 8019316:	1e7b      	subs	r3, r7, #1
 8019318:	9304      	str	r3, [sp, #16]
 801931a:	4649      	mov	r1, r9
 801931c:	2300      	movs	r3, #0
 801931e:	220a      	movs	r2, #10
 8019320:	4658      	mov	r0, fp
 8019322:	f000 fe43 	bl	8019fac <__multadd>
 8019326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019328:	4681      	mov	r9, r0
 801932a:	2b00      	cmp	r3, #0
 801932c:	f000 8172 	beq.w	8019614 <_dtoa_r+0xb4c>
 8019330:	2300      	movs	r3, #0
 8019332:	4629      	mov	r1, r5
 8019334:	220a      	movs	r2, #10
 8019336:	4658      	mov	r0, fp
 8019338:	f000 fe38 	bl	8019fac <__multadd>
 801933c:	9b00      	ldr	r3, [sp, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	4605      	mov	r5, r0
 8019342:	dc67      	bgt.n	8019414 <_dtoa_r+0x94c>
 8019344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019346:	2b02      	cmp	r3, #2
 8019348:	dc41      	bgt.n	80193ce <_dtoa_r+0x906>
 801934a:	e063      	b.n	8019414 <_dtoa_r+0x94c>
 801934c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801934e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8019352:	e746      	b.n	80191e2 <_dtoa_r+0x71a>
 8019354:	9b07      	ldr	r3, [sp, #28]
 8019356:	1e5c      	subs	r4, r3, #1
 8019358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801935a:	42a3      	cmp	r3, r4
 801935c:	bfbf      	itttt	lt
 801935e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019360:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8019362:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8019364:	1ae3      	sublt	r3, r4, r3
 8019366:	bfb4      	ite	lt
 8019368:	18d2      	addlt	r2, r2, r3
 801936a:	1b1c      	subge	r4, r3, r4
 801936c:	9b07      	ldr	r3, [sp, #28]
 801936e:	bfbc      	itt	lt
 8019370:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8019372:	2400      	movlt	r4, #0
 8019374:	2b00      	cmp	r3, #0
 8019376:	bfb5      	itete	lt
 8019378:	eba8 0603 	sublt.w	r6, r8, r3
 801937c:	9b07      	ldrge	r3, [sp, #28]
 801937e:	2300      	movlt	r3, #0
 8019380:	4646      	movge	r6, r8
 8019382:	e730      	b.n	80191e6 <_dtoa_r+0x71e>
 8019384:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019386:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8019388:	4646      	mov	r6, r8
 801938a:	e735      	b.n	80191f8 <_dtoa_r+0x730>
 801938c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801938e:	e75c      	b.n	801924a <_dtoa_r+0x782>
 8019390:	2300      	movs	r3, #0
 8019392:	e788      	b.n	80192a6 <_dtoa_r+0x7de>
 8019394:	3fe00000 	.word	0x3fe00000
 8019398:	40240000 	.word	0x40240000
 801939c:	40140000 	.word	0x40140000
 80193a0:	9b02      	ldr	r3, [sp, #8]
 80193a2:	e780      	b.n	80192a6 <_dtoa_r+0x7de>
 80193a4:	2300      	movs	r3, #0
 80193a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80193a8:	e782      	b.n	80192b0 <_dtoa_r+0x7e8>
 80193aa:	d099      	beq.n	80192e0 <_dtoa_r+0x818>
 80193ac:	9a08      	ldr	r2, [sp, #32]
 80193ae:	331c      	adds	r3, #28
 80193b0:	441a      	add	r2, r3
 80193b2:	4498      	add	r8, r3
 80193b4:	441e      	add	r6, r3
 80193b6:	9208      	str	r2, [sp, #32]
 80193b8:	e792      	b.n	80192e0 <_dtoa_r+0x818>
 80193ba:	4603      	mov	r3, r0
 80193bc:	e7f6      	b.n	80193ac <_dtoa_r+0x8e4>
 80193be:	9b07      	ldr	r3, [sp, #28]
 80193c0:	9704      	str	r7, [sp, #16]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	dc20      	bgt.n	8019408 <_dtoa_r+0x940>
 80193c6:	9300      	str	r3, [sp, #0]
 80193c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193ca:	2b02      	cmp	r3, #2
 80193cc:	dd1e      	ble.n	801940c <_dtoa_r+0x944>
 80193ce:	9b00      	ldr	r3, [sp, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	f47f aec0 	bne.w	8019156 <_dtoa_r+0x68e>
 80193d6:	4621      	mov	r1, r4
 80193d8:	2205      	movs	r2, #5
 80193da:	4658      	mov	r0, fp
 80193dc:	f000 fde6 	bl	8019fac <__multadd>
 80193e0:	4601      	mov	r1, r0
 80193e2:	4604      	mov	r4, r0
 80193e4:	4648      	mov	r0, r9
 80193e6:	f001 f843 	bl	801a470 <__mcmp>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	f77f aeb3 	ble.w	8019156 <_dtoa_r+0x68e>
 80193f0:	4656      	mov	r6, sl
 80193f2:	2331      	movs	r3, #49	@ 0x31
 80193f4:	f806 3b01 	strb.w	r3, [r6], #1
 80193f8:	9b04      	ldr	r3, [sp, #16]
 80193fa:	3301      	adds	r3, #1
 80193fc:	9304      	str	r3, [sp, #16]
 80193fe:	e6ae      	b.n	801915e <_dtoa_r+0x696>
 8019400:	9c07      	ldr	r4, [sp, #28]
 8019402:	9704      	str	r7, [sp, #16]
 8019404:	4625      	mov	r5, r4
 8019406:	e7f3      	b.n	80193f0 <_dtoa_r+0x928>
 8019408:	9b07      	ldr	r3, [sp, #28]
 801940a:	9300      	str	r3, [sp, #0]
 801940c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801940e:	2b00      	cmp	r3, #0
 8019410:	f000 8104 	beq.w	801961c <_dtoa_r+0xb54>
 8019414:	2e00      	cmp	r6, #0
 8019416:	dd05      	ble.n	8019424 <_dtoa_r+0x95c>
 8019418:	4629      	mov	r1, r5
 801941a:	4632      	mov	r2, r6
 801941c:	4658      	mov	r0, fp
 801941e:	f000 ffbb 	bl	801a398 <__lshift>
 8019422:	4605      	mov	r5, r0
 8019424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019426:	2b00      	cmp	r3, #0
 8019428:	d05a      	beq.n	80194e0 <_dtoa_r+0xa18>
 801942a:	6869      	ldr	r1, [r5, #4]
 801942c:	4658      	mov	r0, fp
 801942e:	f000 fd5b 	bl	8019ee8 <_Balloc>
 8019432:	4606      	mov	r6, r0
 8019434:	b928      	cbnz	r0, 8019442 <_dtoa_r+0x97a>
 8019436:	4b84      	ldr	r3, [pc, #528]	@ (8019648 <_dtoa_r+0xb80>)
 8019438:	4602      	mov	r2, r0
 801943a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801943e:	f7ff bb5a 	b.w	8018af6 <_dtoa_r+0x2e>
 8019442:	692a      	ldr	r2, [r5, #16]
 8019444:	3202      	adds	r2, #2
 8019446:	0092      	lsls	r2, r2, #2
 8019448:	f105 010c 	add.w	r1, r5, #12
 801944c:	300c      	adds	r0, #12
 801944e:	f7ff fa78 	bl	8018942 <memcpy>
 8019452:	2201      	movs	r2, #1
 8019454:	4631      	mov	r1, r6
 8019456:	4658      	mov	r0, fp
 8019458:	f000 ff9e 	bl	801a398 <__lshift>
 801945c:	f10a 0301 	add.w	r3, sl, #1
 8019460:	9307      	str	r3, [sp, #28]
 8019462:	9b00      	ldr	r3, [sp, #0]
 8019464:	4453      	add	r3, sl
 8019466:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019468:	9b02      	ldr	r3, [sp, #8]
 801946a:	f003 0301 	and.w	r3, r3, #1
 801946e:	462f      	mov	r7, r5
 8019470:	930a      	str	r3, [sp, #40]	@ 0x28
 8019472:	4605      	mov	r5, r0
 8019474:	9b07      	ldr	r3, [sp, #28]
 8019476:	4621      	mov	r1, r4
 8019478:	3b01      	subs	r3, #1
 801947a:	4648      	mov	r0, r9
 801947c:	9300      	str	r3, [sp, #0]
 801947e:	f7ff fa9b 	bl	80189b8 <quorem>
 8019482:	4639      	mov	r1, r7
 8019484:	9002      	str	r0, [sp, #8]
 8019486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801948a:	4648      	mov	r0, r9
 801948c:	f000 fff0 	bl	801a470 <__mcmp>
 8019490:	462a      	mov	r2, r5
 8019492:	9008      	str	r0, [sp, #32]
 8019494:	4621      	mov	r1, r4
 8019496:	4658      	mov	r0, fp
 8019498:	f001 f806 	bl	801a4a8 <__mdiff>
 801949c:	68c2      	ldr	r2, [r0, #12]
 801949e:	4606      	mov	r6, r0
 80194a0:	bb02      	cbnz	r2, 80194e4 <_dtoa_r+0xa1c>
 80194a2:	4601      	mov	r1, r0
 80194a4:	4648      	mov	r0, r9
 80194a6:	f000 ffe3 	bl	801a470 <__mcmp>
 80194aa:	4602      	mov	r2, r0
 80194ac:	4631      	mov	r1, r6
 80194ae:	4658      	mov	r0, fp
 80194b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80194b2:	f000 fd59 	bl	8019f68 <_Bfree>
 80194b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194ba:	9e07      	ldr	r6, [sp, #28]
 80194bc:	ea43 0102 	orr.w	r1, r3, r2
 80194c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80194c2:	4319      	orrs	r1, r3
 80194c4:	d110      	bne.n	80194e8 <_dtoa_r+0xa20>
 80194c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80194ca:	d029      	beq.n	8019520 <_dtoa_r+0xa58>
 80194cc:	9b08      	ldr	r3, [sp, #32]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	dd02      	ble.n	80194d8 <_dtoa_r+0xa10>
 80194d2:	9b02      	ldr	r3, [sp, #8]
 80194d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80194d8:	9b00      	ldr	r3, [sp, #0]
 80194da:	f883 8000 	strb.w	r8, [r3]
 80194de:	e63f      	b.n	8019160 <_dtoa_r+0x698>
 80194e0:	4628      	mov	r0, r5
 80194e2:	e7bb      	b.n	801945c <_dtoa_r+0x994>
 80194e4:	2201      	movs	r2, #1
 80194e6:	e7e1      	b.n	80194ac <_dtoa_r+0x9e4>
 80194e8:	9b08      	ldr	r3, [sp, #32]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	db04      	blt.n	80194f8 <_dtoa_r+0xa30>
 80194ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80194f0:	430b      	orrs	r3, r1
 80194f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80194f4:	430b      	orrs	r3, r1
 80194f6:	d120      	bne.n	801953a <_dtoa_r+0xa72>
 80194f8:	2a00      	cmp	r2, #0
 80194fa:	dded      	ble.n	80194d8 <_dtoa_r+0xa10>
 80194fc:	4649      	mov	r1, r9
 80194fe:	2201      	movs	r2, #1
 8019500:	4658      	mov	r0, fp
 8019502:	f000 ff49 	bl	801a398 <__lshift>
 8019506:	4621      	mov	r1, r4
 8019508:	4681      	mov	r9, r0
 801950a:	f000 ffb1 	bl	801a470 <__mcmp>
 801950e:	2800      	cmp	r0, #0
 8019510:	dc03      	bgt.n	801951a <_dtoa_r+0xa52>
 8019512:	d1e1      	bne.n	80194d8 <_dtoa_r+0xa10>
 8019514:	f018 0f01 	tst.w	r8, #1
 8019518:	d0de      	beq.n	80194d8 <_dtoa_r+0xa10>
 801951a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801951e:	d1d8      	bne.n	80194d2 <_dtoa_r+0xa0a>
 8019520:	9a00      	ldr	r2, [sp, #0]
 8019522:	2339      	movs	r3, #57	@ 0x39
 8019524:	7013      	strb	r3, [r2, #0]
 8019526:	4633      	mov	r3, r6
 8019528:	461e      	mov	r6, r3
 801952a:	3b01      	subs	r3, #1
 801952c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019530:	2a39      	cmp	r2, #57	@ 0x39
 8019532:	d052      	beq.n	80195da <_dtoa_r+0xb12>
 8019534:	3201      	adds	r2, #1
 8019536:	701a      	strb	r2, [r3, #0]
 8019538:	e612      	b.n	8019160 <_dtoa_r+0x698>
 801953a:	2a00      	cmp	r2, #0
 801953c:	dd07      	ble.n	801954e <_dtoa_r+0xa86>
 801953e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8019542:	d0ed      	beq.n	8019520 <_dtoa_r+0xa58>
 8019544:	9a00      	ldr	r2, [sp, #0]
 8019546:	f108 0301 	add.w	r3, r8, #1
 801954a:	7013      	strb	r3, [r2, #0]
 801954c:	e608      	b.n	8019160 <_dtoa_r+0x698>
 801954e:	9b07      	ldr	r3, [sp, #28]
 8019550:	9a07      	ldr	r2, [sp, #28]
 8019552:	f803 8c01 	strb.w	r8, [r3, #-1]
 8019556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019558:	4293      	cmp	r3, r2
 801955a:	d028      	beq.n	80195ae <_dtoa_r+0xae6>
 801955c:	4649      	mov	r1, r9
 801955e:	2300      	movs	r3, #0
 8019560:	220a      	movs	r2, #10
 8019562:	4658      	mov	r0, fp
 8019564:	f000 fd22 	bl	8019fac <__multadd>
 8019568:	42af      	cmp	r7, r5
 801956a:	4681      	mov	r9, r0
 801956c:	f04f 0300 	mov.w	r3, #0
 8019570:	f04f 020a 	mov.w	r2, #10
 8019574:	4639      	mov	r1, r7
 8019576:	4658      	mov	r0, fp
 8019578:	d107      	bne.n	801958a <_dtoa_r+0xac2>
 801957a:	f000 fd17 	bl	8019fac <__multadd>
 801957e:	4607      	mov	r7, r0
 8019580:	4605      	mov	r5, r0
 8019582:	9b07      	ldr	r3, [sp, #28]
 8019584:	3301      	adds	r3, #1
 8019586:	9307      	str	r3, [sp, #28]
 8019588:	e774      	b.n	8019474 <_dtoa_r+0x9ac>
 801958a:	f000 fd0f 	bl	8019fac <__multadd>
 801958e:	4629      	mov	r1, r5
 8019590:	4607      	mov	r7, r0
 8019592:	2300      	movs	r3, #0
 8019594:	220a      	movs	r2, #10
 8019596:	4658      	mov	r0, fp
 8019598:	f000 fd08 	bl	8019fac <__multadd>
 801959c:	4605      	mov	r5, r0
 801959e:	e7f0      	b.n	8019582 <_dtoa_r+0xaba>
 80195a0:	9b00      	ldr	r3, [sp, #0]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bfcc      	ite	gt
 80195a6:	461e      	movgt	r6, r3
 80195a8:	2601      	movle	r6, #1
 80195aa:	4456      	add	r6, sl
 80195ac:	2700      	movs	r7, #0
 80195ae:	4649      	mov	r1, r9
 80195b0:	2201      	movs	r2, #1
 80195b2:	4658      	mov	r0, fp
 80195b4:	f000 fef0 	bl	801a398 <__lshift>
 80195b8:	4621      	mov	r1, r4
 80195ba:	4681      	mov	r9, r0
 80195bc:	f000 ff58 	bl	801a470 <__mcmp>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	dcb0      	bgt.n	8019526 <_dtoa_r+0xa5e>
 80195c4:	d102      	bne.n	80195cc <_dtoa_r+0xb04>
 80195c6:	f018 0f01 	tst.w	r8, #1
 80195ca:	d1ac      	bne.n	8019526 <_dtoa_r+0xa5e>
 80195cc:	4633      	mov	r3, r6
 80195ce:	461e      	mov	r6, r3
 80195d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80195d4:	2a30      	cmp	r2, #48	@ 0x30
 80195d6:	d0fa      	beq.n	80195ce <_dtoa_r+0xb06>
 80195d8:	e5c2      	b.n	8019160 <_dtoa_r+0x698>
 80195da:	459a      	cmp	sl, r3
 80195dc:	d1a4      	bne.n	8019528 <_dtoa_r+0xa60>
 80195de:	9b04      	ldr	r3, [sp, #16]
 80195e0:	3301      	adds	r3, #1
 80195e2:	9304      	str	r3, [sp, #16]
 80195e4:	2331      	movs	r3, #49	@ 0x31
 80195e6:	f88a 3000 	strb.w	r3, [sl]
 80195ea:	e5b9      	b.n	8019160 <_dtoa_r+0x698>
 80195ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80195ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801964c <_dtoa_r+0xb84>
 80195f2:	b11b      	cbz	r3, 80195fc <_dtoa_r+0xb34>
 80195f4:	f10a 0308 	add.w	r3, sl, #8
 80195f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80195fa:	6013      	str	r3, [r2, #0]
 80195fc:	4650      	mov	r0, sl
 80195fe:	b019      	add	sp, #100	@ 0x64
 8019600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019606:	2b01      	cmp	r3, #1
 8019608:	f77f ae37 	ble.w	801927a <_dtoa_r+0x7b2>
 801960c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801960e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019610:	2001      	movs	r0, #1
 8019612:	e655      	b.n	80192c0 <_dtoa_r+0x7f8>
 8019614:	9b00      	ldr	r3, [sp, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	f77f aed6 	ble.w	80193c8 <_dtoa_r+0x900>
 801961c:	4656      	mov	r6, sl
 801961e:	4621      	mov	r1, r4
 8019620:	4648      	mov	r0, r9
 8019622:	f7ff f9c9 	bl	80189b8 <quorem>
 8019626:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801962a:	f806 8b01 	strb.w	r8, [r6], #1
 801962e:	9b00      	ldr	r3, [sp, #0]
 8019630:	eba6 020a 	sub.w	r2, r6, sl
 8019634:	4293      	cmp	r3, r2
 8019636:	ddb3      	ble.n	80195a0 <_dtoa_r+0xad8>
 8019638:	4649      	mov	r1, r9
 801963a:	2300      	movs	r3, #0
 801963c:	220a      	movs	r2, #10
 801963e:	4658      	mov	r0, fp
 8019640:	f000 fcb4 	bl	8019fac <__multadd>
 8019644:	4681      	mov	r9, r0
 8019646:	e7ea      	b.n	801961e <_dtoa_r+0xb56>
 8019648:	0801e7d0 	.word	0x0801e7d0
 801964c:	0801e76b 	.word	0x0801e76b

08019650 <_free_r>:
 8019650:	b538      	push	{r3, r4, r5, lr}
 8019652:	4605      	mov	r5, r0
 8019654:	2900      	cmp	r1, #0
 8019656:	d041      	beq.n	80196dc <_free_r+0x8c>
 8019658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801965c:	1f0c      	subs	r4, r1, #4
 801965e:	2b00      	cmp	r3, #0
 8019660:	bfb8      	it	lt
 8019662:	18e4      	addlt	r4, r4, r3
 8019664:	f000 fc34 	bl	8019ed0 <__malloc_lock>
 8019668:	4a1d      	ldr	r2, [pc, #116]	@ (80196e0 <_free_r+0x90>)
 801966a:	6813      	ldr	r3, [r2, #0]
 801966c:	b933      	cbnz	r3, 801967c <_free_r+0x2c>
 801966e:	6063      	str	r3, [r4, #4]
 8019670:	6014      	str	r4, [r2, #0]
 8019672:	4628      	mov	r0, r5
 8019674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019678:	f000 bc30 	b.w	8019edc <__malloc_unlock>
 801967c:	42a3      	cmp	r3, r4
 801967e:	d908      	bls.n	8019692 <_free_r+0x42>
 8019680:	6820      	ldr	r0, [r4, #0]
 8019682:	1821      	adds	r1, r4, r0
 8019684:	428b      	cmp	r3, r1
 8019686:	bf01      	itttt	eq
 8019688:	6819      	ldreq	r1, [r3, #0]
 801968a:	685b      	ldreq	r3, [r3, #4]
 801968c:	1809      	addeq	r1, r1, r0
 801968e:	6021      	streq	r1, [r4, #0]
 8019690:	e7ed      	b.n	801966e <_free_r+0x1e>
 8019692:	461a      	mov	r2, r3
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	b10b      	cbz	r3, 801969c <_free_r+0x4c>
 8019698:	42a3      	cmp	r3, r4
 801969a:	d9fa      	bls.n	8019692 <_free_r+0x42>
 801969c:	6811      	ldr	r1, [r2, #0]
 801969e:	1850      	adds	r0, r2, r1
 80196a0:	42a0      	cmp	r0, r4
 80196a2:	d10b      	bne.n	80196bc <_free_r+0x6c>
 80196a4:	6820      	ldr	r0, [r4, #0]
 80196a6:	4401      	add	r1, r0
 80196a8:	1850      	adds	r0, r2, r1
 80196aa:	4283      	cmp	r3, r0
 80196ac:	6011      	str	r1, [r2, #0]
 80196ae:	d1e0      	bne.n	8019672 <_free_r+0x22>
 80196b0:	6818      	ldr	r0, [r3, #0]
 80196b2:	685b      	ldr	r3, [r3, #4]
 80196b4:	6053      	str	r3, [r2, #4]
 80196b6:	4408      	add	r0, r1
 80196b8:	6010      	str	r0, [r2, #0]
 80196ba:	e7da      	b.n	8019672 <_free_r+0x22>
 80196bc:	d902      	bls.n	80196c4 <_free_r+0x74>
 80196be:	230c      	movs	r3, #12
 80196c0:	602b      	str	r3, [r5, #0]
 80196c2:	e7d6      	b.n	8019672 <_free_r+0x22>
 80196c4:	6820      	ldr	r0, [r4, #0]
 80196c6:	1821      	adds	r1, r4, r0
 80196c8:	428b      	cmp	r3, r1
 80196ca:	bf04      	itt	eq
 80196cc:	6819      	ldreq	r1, [r3, #0]
 80196ce:	685b      	ldreq	r3, [r3, #4]
 80196d0:	6063      	str	r3, [r4, #4]
 80196d2:	bf04      	itt	eq
 80196d4:	1809      	addeq	r1, r1, r0
 80196d6:	6021      	streq	r1, [r4, #0]
 80196d8:	6054      	str	r4, [r2, #4]
 80196da:	e7ca      	b.n	8019672 <_free_r+0x22>
 80196dc:	bd38      	pop	{r3, r4, r5, pc}
 80196de:	bf00      	nop
 80196e0:	20008c8c 	.word	0x20008c8c

080196e4 <rshift>:
 80196e4:	6903      	ldr	r3, [r0, #16]
 80196e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80196ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80196f2:	f100 0414 	add.w	r4, r0, #20
 80196f6:	dd45      	ble.n	8019784 <rshift+0xa0>
 80196f8:	f011 011f 	ands.w	r1, r1, #31
 80196fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019704:	d10c      	bne.n	8019720 <rshift+0x3c>
 8019706:	f100 0710 	add.w	r7, r0, #16
 801970a:	4629      	mov	r1, r5
 801970c:	42b1      	cmp	r1, r6
 801970e:	d334      	bcc.n	801977a <rshift+0x96>
 8019710:	1a9b      	subs	r3, r3, r2
 8019712:	009b      	lsls	r3, r3, #2
 8019714:	1eea      	subs	r2, r5, #3
 8019716:	4296      	cmp	r6, r2
 8019718:	bf38      	it	cc
 801971a:	2300      	movcc	r3, #0
 801971c:	4423      	add	r3, r4
 801971e:	e015      	b.n	801974c <rshift+0x68>
 8019720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019724:	f1c1 0820 	rsb	r8, r1, #32
 8019728:	40cf      	lsrs	r7, r1
 801972a:	f105 0e04 	add.w	lr, r5, #4
 801972e:	46a1      	mov	r9, r4
 8019730:	4576      	cmp	r6, lr
 8019732:	46f4      	mov	ip, lr
 8019734:	d815      	bhi.n	8019762 <rshift+0x7e>
 8019736:	1a9a      	subs	r2, r3, r2
 8019738:	0092      	lsls	r2, r2, #2
 801973a:	3a04      	subs	r2, #4
 801973c:	3501      	adds	r5, #1
 801973e:	42ae      	cmp	r6, r5
 8019740:	bf38      	it	cc
 8019742:	2200      	movcc	r2, #0
 8019744:	18a3      	adds	r3, r4, r2
 8019746:	50a7      	str	r7, [r4, r2]
 8019748:	b107      	cbz	r7, 801974c <rshift+0x68>
 801974a:	3304      	adds	r3, #4
 801974c:	1b1a      	subs	r2, r3, r4
 801974e:	42a3      	cmp	r3, r4
 8019750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019754:	bf08      	it	eq
 8019756:	2300      	moveq	r3, #0
 8019758:	6102      	str	r2, [r0, #16]
 801975a:	bf08      	it	eq
 801975c:	6143      	streq	r3, [r0, #20]
 801975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019762:	f8dc c000 	ldr.w	ip, [ip]
 8019766:	fa0c fc08 	lsl.w	ip, ip, r8
 801976a:	ea4c 0707 	orr.w	r7, ip, r7
 801976e:	f849 7b04 	str.w	r7, [r9], #4
 8019772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019776:	40cf      	lsrs	r7, r1
 8019778:	e7da      	b.n	8019730 <rshift+0x4c>
 801977a:	f851 cb04 	ldr.w	ip, [r1], #4
 801977e:	f847 cf04 	str.w	ip, [r7, #4]!
 8019782:	e7c3      	b.n	801970c <rshift+0x28>
 8019784:	4623      	mov	r3, r4
 8019786:	e7e1      	b.n	801974c <rshift+0x68>

08019788 <__hexdig_fun>:
 8019788:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801978c:	2b09      	cmp	r3, #9
 801978e:	d802      	bhi.n	8019796 <__hexdig_fun+0xe>
 8019790:	3820      	subs	r0, #32
 8019792:	b2c0      	uxtb	r0, r0
 8019794:	4770      	bx	lr
 8019796:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801979a:	2b05      	cmp	r3, #5
 801979c:	d801      	bhi.n	80197a2 <__hexdig_fun+0x1a>
 801979e:	3847      	subs	r0, #71	@ 0x47
 80197a0:	e7f7      	b.n	8019792 <__hexdig_fun+0xa>
 80197a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80197a6:	2b05      	cmp	r3, #5
 80197a8:	d801      	bhi.n	80197ae <__hexdig_fun+0x26>
 80197aa:	3827      	subs	r0, #39	@ 0x27
 80197ac:	e7f1      	b.n	8019792 <__hexdig_fun+0xa>
 80197ae:	2000      	movs	r0, #0
 80197b0:	4770      	bx	lr
	...

080197b4 <__gethex>:
 80197b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b8:	b085      	sub	sp, #20
 80197ba:	468a      	mov	sl, r1
 80197bc:	9302      	str	r3, [sp, #8]
 80197be:	680b      	ldr	r3, [r1, #0]
 80197c0:	9001      	str	r0, [sp, #4]
 80197c2:	4690      	mov	r8, r2
 80197c4:	1c9c      	adds	r4, r3, #2
 80197c6:	46a1      	mov	r9, r4
 80197c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80197cc:	2830      	cmp	r0, #48	@ 0x30
 80197ce:	d0fa      	beq.n	80197c6 <__gethex+0x12>
 80197d0:	eba9 0303 	sub.w	r3, r9, r3
 80197d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80197d8:	f7ff ffd6 	bl	8019788 <__hexdig_fun>
 80197dc:	4605      	mov	r5, r0
 80197de:	2800      	cmp	r0, #0
 80197e0:	d168      	bne.n	80198b4 <__gethex+0x100>
 80197e2:	49a0      	ldr	r1, [pc, #640]	@ (8019a64 <__gethex+0x2b0>)
 80197e4:	2201      	movs	r2, #1
 80197e6:	4648      	mov	r0, r9
 80197e8:	f7fe ffb2 	bl	8018750 <strncmp>
 80197ec:	4607      	mov	r7, r0
 80197ee:	2800      	cmp	r0, #0
 80197f0:	d167      	bne.n	80198c2 <__gethex+0x10e>
 80197f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80197f6:	4626      	mov	r6, r4
 80197f8:	f7ff ffc6 	bl	8019788 <__hexdig_fun>
 80197fc:	2800      	cmp	r0, #0
 80197fe:	d062      	beq.n	80198c6 <__gethex+0x112>
 8019800:	4623      	mov	r3, r4
 8019802:	7818      	ldrb	r0, [r3, #0]
 8019804:	2830      	cmp	r0, #48	@ 0x30
 8019806:	4699      	mov	r9, r3
 8019808:	f103 0301 	add.w	r3, r3, #1
 801980c:	d0f9      	beq.n	8019802 <__gethex+0x4e>
 801980e:	f7ff ffbb 	bl	8019788 <__hexdig_fun>
 8019812:	fab0 f580 	clz	r5, r0
 8019816:	096d      	lsrs	r5, r5, #5
 8019818:	f04f 0b01 	mov.w	fp, #1
 801981c:	464a      	mov	r2, r9
 801981e:	4616      	mov	r6, r2
 8019820:	3201      	adds	r2, #1
 8019822:	7830      	ldrb	r0, [r6, #0]
 8019824:	f7ff ffb0 	bl	8019788 <__hexdig_fun>
 8019828:	2800      	cmp	r0, #0
 801982a:	d1f8      	bne.n	801981e <__gethex+0x6a>
 801982c:	498d      	ldr	r1, [pc, #564]	@ (8019a64 <__gethex+0x2b0>)
 801982e:	2201      	movs	r2, #1
 8019830:	4630      	mov	r0, r6
 8019832:	f7fe ff8d 	bl	8018750 <strncmp>
 8019836:	2800      	cmp	r0, #0
 8019838:	d13f      	bne.n	80198ba <__gethex+0x106>
 801983a:	b944      	cbnz	r4, 801984e <__gethex+0x9a>
 801983c:	1c74      	adds	r4, r6, #1
 801983e:	4622      	mov	r2, r4
 8019840:	4616      	mov	r6, r2
 8019842:	3201      	adds	r2, #1
 8019844:	7830      	ldrb	r0, [r6, #0]
 8019846:	f7ff ff9f 	bl	8019788 <__hexdig_fun>
 801984a:	2800      	cmp	r0, #0
 801984c:	d1f8      	bne.n	8019840 <__gethex+0x8c>
 801984e:	1ba4      	subs	r4, r4, r6
 8019850:	00a7      	lsls	r7, r4, #2
 8019852:	7833      	ldrb	r3, [r6, #0]
 8019854:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019858:	2b50      	cmp	r3, #80	@ 0x50
 801985a:	d13e      	bne.n	80198da <__gethex+0x126>
 801985c:	7873      	ldrb	r3, [r6, #1]
 801985e:	2b2b      	cmp	r3, #43	@ 0x2b
 8019860:	d033      	beq.n	80198ca <__gethex+0x116>
 8019862:	2b2d      	cmp	r3, #45	@ 0x2d
 8019864:	d034      	beq.n	80198d0 <__gethex+0x11c>
 8019866:	1c71      	adds	r1, r6, #1
 8019868:	2400      	movs	r4, #0
 801986a:	7808      	ldrb	r0, [r1, #0]
 801986c:	f7ff ff8c 	bl	8019788 <__hexdig_fun>
 8019870:	1e43      	subs	r3, r0, #1
 8019872:	b2db      	uxtb	r3, r3
 8019874:	2b18      	cmp	r3, #24
 8019876:	d830      	bhi.n	80198da <__gethex+0x126>
 8019878:	f1a0 0210 	sub.w	r2, r0, #16
 801987c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019880:	f7ff ff82 	bl	8019788 <__hexdig_fun>
 8019884:	f100 3cff 	add.w	ip, r0, #4294967295
 8019888:	fa5f fc8c 	uxtb.w	ip, ip
 801988c:	f1bc 0f18 	cmp.w	ip, #24
 8019890:	f04f 030a 	mov.w	r3, #10
 8019894:	d91e      	bls.n	80198d4 <__gethex+0x120>
 8019896:	b104      	cbz	r4, 801989a <__gethex+0xe6>
 8019898:	4252      	negs	r2, r2
 801989a:	4417      	add	r7, r2
 801989c:	f8ca 1000 	str.w	r1, [sl]
 80198a0:	b1ed      	cbz	r5, 80198de <__gethex+0x12a>
 80198a2:	f1bb 0f00 	cmp.w	fp, #0
 80198a6:	bf0c      	ite	eq
 80198a8:	2506      	moveq	r5, #6
 80198aa:	2500      	movne	r5, #0
 80198ac:	4628      	mov	r0, r5
 80198ae:	b005      	add	sp, #20
 80198b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b4:	2500      	movs	r5, #0
 80198b6:	462c      	mov	r4, r5
 80198b8:	e7b0      	b.n	801981c <__gethex+0x68>
 80198ba:	2c00      	cmp	r4, #0
 80198bc:	d1c7      	bne.n	801984e <__gethex+0x9a>
 80198be:	4627      	mov	r7, r4
 80198c0:	e7c7      	b.n	8019852 <__gethex+0x9e>
 80198c2:	464e      	mov	r6, r9
 80198c4:	462f      	mov	r7, r5
 80198c6:	2501      	movs	r5, #1
 80198c8:	e7c3      	b.n	8019852 <__gethex+0x9e>
 80198ca:	2400      	movs	r4, #0
 80198cc:	1cb1      	adds	r1, r6, #2
 80198ce:	e7cc      	b.n	801986a <__gethex+0xb6>
 80198d0:	2401      	movs	r4, #1
 80198d2:	e7fb      	b.n	80198cc <__gethex+0x118>
 80198d4:	fb03 0002 	mla	r0, r3, r2, r0
 80198d8:	e7ce      	b.n	8019878 <__gethex+0xc4>
 80198da:	4631      	mov	r1, r6
 80198dc:	e7de      	b.n	801989c <__gethex+0xe8>
 80198de:	eba6 0309 	sub.w	r3, r6, r9
 80198e2:	3b01      	subs	r3, #1
 80198e4:	4629      	mov	r1, r5
 80198e6:	2b07      	cmp	r3, #7
 80198e8:	dc0a      	bgt.n	8019900 <__gethex+0x14c>
 80198ea:	9801      	ldr	r0, [sp, #4]
 80198ec:	f000 fafc 	bl	8019ee8 <_Balloc>
 80198f0:	4604      	mov	r4, r0
 80198f2:	b940      	cbnz	r0, 8019906 <__gethex+0x152>
 80198f4:	4b5c      	ldr	r3, [pc, #368]	@ (8019a68 <__gethex+0x2b4>)
 80198f6:	4602      	mov	r2, r0
 80198f8:	21e4      	movs	r1, #228	@ 0xe4
 80198fa:	485c      	ldr	r0, [pc, #368]	@ (8019a6c <__gethex+0x2b8>)
 80198fc:	f7ff f83e 	bl	801897c <__assert_func>
 8019900:	3101      	adds	r1, #1
 8019902:	105b      	asrs	r3, r3, #1
 8019904:	e7ef      	b.n	80198e6 <__gethex+0x132>
 8019906:	f100 0a14 	add.w	sl, r0, #20
 801990a:	2300      	movs	r3, #0
 801990c:	4655      	mov	r5, sl
 801990e:	469b      	mov	fp, r3
 8019910:	45b1      	cmp	r9, r6
 8019912:	d337      	bcc.n	8019984 <__gethex+0x1d0>
 8019914:	f845 bb04 	str.w	fp, [r5], #4
 8019918:	eba5 050a 	sub.w	r5, r5, sl
 801991c:	10ad      	asrs	r5, r5, #2
 801991e:	6125      	str	r5, [r4, #16]
 8019920:	4658      	mov	r0, fp
 8019922:	f000 fbd3 	bl	801a0cc <__hi0bits>
 8019926:	016d      	lsls	r5, r5, #5
 8019928:	f8d8 6000 	ldr.w	r6, [r8]
 801992c:	1a2d      	subs	r5, r5, r0
 801992e:	42b5      	cmp	r5, r6
 8019930:	dd54      	ble.n	80199dc <__gethex+0x228>
 8019932:	1bad      	subs	r5, r5, r6
 8019934:	4629      	mov	r1, r5
 8019936:	4620      	mov	r0, r4
 8019938:	f000 ff67 	bl	801a80a <__any_on>
 801993c:	4681      	mov	r9, r0
 801993e:	b178      	cbz	r0, 8019960 <__gethex+0x1ac>
 8019940:	1e6b      	subs	r3, r5, #1
 8019942:	1159      	asrs	r1, r3, #5
 8019944:	f003 021f 	and.w	r2, r3, #31
 8019948:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801994c:	f04f 0901 	mov.w	r9, #1
 8019950:	fa09 f202 	lsl.w	r2, r9, r2
 8019954:	420a      	tst	r2, r1
 8019956:	d003      	beq.n	8019960 <__gethex+0x1ac>
 8019958:	454b      	cmp	r3, r9
 801995a:	dc36      	bgt.n	80199ca <__gethex+0x216>
 801995c:	f04f 0902 	mov.w	r9, #2
 8019960:	4629      	mov	r1, r5
 8019962:	4620      	mov	r0, r4
 8019964:	f7ff febe 	bl	80196e4 <rshift>
 8019968:	442f      	add	r7, r5
 801996a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801996e:	42bb      	cmp	r3, r7
 8019970:	da42      	bge.n	80199f8 <__gethex+0x244>
 8019972:	9801      	ldr	r0, [sp, #4]
 8019974:	4621      	mov	r1, r4
 8019976:	f000 faf7 	bl	8019f68 <_Bfree>
 801997a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801997c:	2300      	movs	r3, #0
 801997e:	6013      	str	r3, [r2, #0]
 8019980:	25a3      	movs	r5, #163	@ 0xa3
 8019982:	e793      	b.n	80198ac <__gethex+0xf8>
 8019984:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019988:	2a2e      	cmp	r2, #46	@ 0x2e
 801998a:	d012      	beq.n	80199b2 <__gethex+0x1fe>
 801998c:	2b20      	cmp	r3, #32
 801998e:	d104      	bne.n	801999a <__gethex+0x1e6>
 8019990:	f845 bb04 	str.w	fp, [r5], #4
 8019994:	f04f 0b00 	mov.w	fp, #0
 8019998:	465b      	mov	r3, fp
 801999a:	7830      	ldrb	r0, [r6, #0]
 801999c:	9303      	str	r3, [sp, #12]
 801999e:	f7ff fef3 	bl	8019788 <__hexdig_fun>
 80199a2:	9b03      	ldr	r3, [sp, #12]
 80199a4:	f000 000f 	and.w	r0, r0, #15
 80199a8:	4098      	lsls	r0, r3
 80199aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80199ae:	3304      	adds	r3, #4
 80199b0:	e7ae      	b.n	8019910 <__gethex+0x15c>
 80199b2:	45b1      	cmp	r9, r6
 80199b4:	d8ea      	bhi.n	801998c <__gethex+0x1d8>
 80199b6:	492b      	ldr	r1, [pc, #172]	@ (8019a64 <__gethex+0x2b0>)
 80199b8:	9303      	str	r3, [sp, #12]
 80199ba:	2201      	movs	r2, #1
 80199bc:	4630      	mov	r0, r6
 80199be:	f7fe fec7 	bl	8018750 <strncmp>
 80199c2:	9b03      	ldr	r3, [sp, #12]
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d1e1      	bne.n	801998c <__gethex+0x1d8>
 80199c8:	e7a2      	b.n	8019910 <__gethex+0x15c>
 80199ca:	1ea9      	subs	r1, r5, #2
 80199cc:	4620      	mov	r0, r4
 80199ce:	f000 ff1c 	bl	801a80a <__any_on>
 80199d2:	2800      	cmp	r0, #0
 80199d4:	d0c2      	beq.n	801995c <__gethex+0x1a8>
 80199d6:	f04f 0903 	mov.w	r9, #3
 80199da:	e7c1      	b.n	8019960 <__gethex+0x1ac>
 80199dc:	da09      	bge.n	80199f2 <__gethex+0x23e>
 80199de:	1b75      	subs	r5, r6, r5
 80199e0:	4621      	mov	r1, r4
 80199e2:	9801      	ldr	r0, [sp, #4]
 80199e4:	462a      	mov	r2, r5
 80199e6:	f000 fcd7 	bl	801a398 <__lshift>
 80199ea:	1b7f      	subs	r7, r7, r5
 80199ec:	4604      	mov	r4, r0
 80199ee:	f100 0a14 	add.w	sl, r0, #20
 80199f2:	f04f 0900 	mov.w	r9, #0
 80199f6:	e7b8      	b.n	801996a <__gethex+0x1b6>
 80199f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80199fc:	42bd      	cmp	r5, r7
 80199fe:	dd6f      	ble.n	8019ae0 <__gethex+0x32c>
 8019a00:	1bed      	subs	r5, r5, r7
 8019a02:	42ae      	cmp	r6, r5
 8019a04:	dc34      	bgt.n	8019a70 <__gethex+0x2bc>
 8019a06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a0a:	2b02      	cmp	r3, #2
 8019a0c:	d022      	beq.n	8019a54 <__gethex+0x2a0>
 8019a0e:	2b03      	cmp	r3, #3
 8019a10:	d024      	beq.n	8019a5c <__gethex+0x2a8>
 8019a12:	2b01      	cmp	r3, #1
 8019a14:	d115      	bne.n	8019a42 <__gethex+0x28e>
 8019a16:	42ae      	cmp	r6, r5
 8019a18:	d113      	bne.n	8019a42 <__gethex+0x28e>
 8019a1a:	2e01      	cmp	r6, #1
 8019a1c:	d10b      	bne.n	8019a36 <__gethex+0x282>
 8019a1e:	9a02      	ldr	r2, [sp, #8]
 8019a20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019a24:	6013      	str	r3, [r2, #0]
 8019a26:	2301      	movs	r3, #1
 8019a28:	6123      	str	r3, [r4, #16]
 8019a2a:	f8ca 3000 	str.w	r3, [sl]
 8019a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019a30:	2562      	movs	r5, #98	@ 0x62
 8019a32:	601c      	str	r4, [r3, #0]
 8019a34:	e73a      	b.n	80198ac <__gethex+0xf8>
 8019a36:	1e71      	subs	r1, r6, #1
 8019a38:	4620      	mov	r0, r4
 8019a3a:	f000 fee6 	bl	801a80a <__any_on>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	d1ed      	bne.n	8019a1e <__gethex+0x26a>
 8019a42:	9801      	ldr	r0, [sp, #4]
 8019a44:	4621      	mov	r1, r4
 8019a46:	f000 fa8f 	bl	8019f68 <_Bfree>
 8019a4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	6013      	str	r3, [r2, #0]
 8019a50:	2550      	movs	r5, #80	@ 0x50
 8019a52:	e72b      	b.n	80198ac <__gethex+0xf8>
 8019a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d1f3      	bne.n	8019a42 <__gethex+0x28e>
 8019a5a:	e7e0      	b.n	8019a1e <__gethex+0x26a>
 8019a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d1dd      	bne.n	8019a1e <__gethex+0x26a>
 8019a62:	e7ee      	b.n	8019a42 <__gethex+0x28e>
 8019a64:	0801e545 	.word	0x0801e545
 8019a68:	0801e7d0 	.word	0x0801e7d0
 8019a6c:	0801e7e1 	.word	0x0801e7e1
 8019a70:	1e6f      	subs	r7, r5, #1
 8019a72:	f1b9 0f00 	cmp.w	r9, #0
 8019a76:	d130      	bne.n	8019ada <__gethex+0x326>
 8019a78:	b127      	cbz	r7, 8019a84 <__gethex+0x2d0>
 8019a7a:	4639      	mov	r1, r7
 8019a7c:	4620      	mov	r0, r4
 8019a7e:	f000 fec4 	bl	801a80a <__any_on>
 8019a82:	4681      	mov	r9, r0
 8019a84:	117a      	asrs	r2, r7, #5
 8019a86:	2301      	movs	r3, #1
 8019a88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019a8c:	f007 071f 	and.w	r7, r7, #31
 8019a90:	40bb      	lsls	r3, r7
 8019a92:	4213      	tst	r3, r2
 8019a94:	4629      	mov	r1, r5
 8019a96:	4620      	mov	r0, r4
 8019a98:	bf18      	it	ne
 8019a9a:	f049 0902 	orrne.w	r9, r9, #2
 8019a9e:	f7ff fe21 	bl	80196e4 <rshift>
 8019aa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019aa6:	1b76      	subs	r6, r6, r5
 8019aa8:	2502      	movs	r5, #2
 8019aaa:	f1b9 0f00 	cmp.w	r9, #0
 8019aae:	d047      	beq.n	8019b40 <__gethex+0x38c>
 8019ab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ab4:	2b02      	cmp	r3, #2
 8019ab6:	d015      	beq.n	8019ae4 <__gethex+0x330>
 8019ab8:	2b03      	cmp	r3, #3
 8019aba:	d017      	beq.n	8019aec <__gethex+0x338>
 8019abc:	2b01      	cmp	r3, #1
 8019abe:	d109      	bne.n	8019ad4 <__gethex+0x320>
 8019ac0:	f019 0f02 	tst.w	r9, #2
 8019ac4:	d006      	beq.n	8019ad4 <__gethex+0x320>
 8019ac6:	f8da 3000 	ldr.w	r3, [sl]
 8019aca:	ea49 0903 	orr.w	r9, r9, r3
 8019ace:	f019 0f01 	tst.w	r9, #1
 8019ad2:	d10e      	bne.n	8019af2 <__gethex+0x33e>
 8019ad4:	f045 0510 	orr.w	r5, r5, #16
 8019ad8:	e032      	b.n	8019b40 <__gethex+0x38c>
 8019ada:	f04f 0901 	mov.w	r9, #1
 8019ade:	e7d1      	b.n	8019a84 <__gethex+0x2d0>
 8019ae0:	2501      	movs	r5, #1
 8019ae2:	e7e2      	b.n	8019aaa <__gethex+0x2f6>
 8019ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ae6:	f1c3 0301 	rsb	r3, r3, #1
 8019aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d0f0      	beq.n	8019ad4 <__gethex+0x320>
 8019af2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019af6:	f104 0314 	add.w	r3, r4, #20
 8019afa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019afe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019b02:	f04f 0c00 	mov.w	ip, #0
 8019b06:	4618      	mov	r0, r3
 8019b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019b10:	d01b      	beq.n	8019b4a <__gethex+0x396>
 8019b12:	3201      	adds	r2, #1
 8019b14:	6002      	str	r2, [r0, #0]
 8019b16:	2d02      	cmp	r5, #2
 8019b18:	f104 0314 	add.w	r3, r4, #20
 8019b1c:	d13c      	bne.n	8019b98 <__gethex+0x3e4>
 8019b1e:	f8d8 2000 	ldr.w	r2, [r8]
 8019b22:	3a01      	subs	r2, #1
 8019b24:	42b2      	cmp	r2, r6
 8019b26:	d109      	bne.n	8019b3c <__gethex+0x388>
 8019b28:	1171      	asrs	r1, r6, #5
 8019b2a:	2201      	movs	r2, #1
 8019b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019b30:	f006 061f 	and.w	r6, r6, #31
 8019b34:	fa02 f606 	lsl.w	r6, r2, r6
 8019b38:	421e      	tst	r6, r3
 8019b3a:	d13a      	bne.n	8019bb2 <__gethex+0x3fe>
 8019b3c:	f045 0520 	orr.w	r5, r5, #32
 8019b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b42:	601c      	str	r4, [r3, #0]
 8019b44:	9b02      	ldr	r3, [sp, #8]
 8019b46:	601f      	str	r7, [r3, #0]
 8019b48:	e6b0      	b.n	80198ac <__gethex+0xf8>
 8019b4a:	4299      	cmp	r1, r3
 8019b4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8019b50:	d8d9      	bhi.n	8019b06 <__gethex+0x352>
 8019b52:	68a3      	ldr	r3, [r4, #8]
 8019b54:	459b      	cmp	fp, r3
 8019b56:	db17      	blt.n	8019b88 <__gethex+0x3d4>
 8019b58:	6861      	ldr	r1, [r4, #4]
 8019b5a:	9801      	ldr	r0, [sp, #4]
 8019b5c:	3101      	adds	r1, #1
 8019b5e:	f000 f9c3 	bl	8019ee8 <_Balloc>
 8019b62:	4681      	mov	r9, r0
 8019b64:	b918      	cbnz	r0, 8019b6e <__gethex+0x3ba>
 8019b66:	4b1a      	ldr	r3, [pc, #104]	@ (8019bd0 <__gethex+0x41c>)
 8019b68:	4602      	mov	r2, r0
 8019b6a:	2184      	movs	r1, #132	@ 0x84
 8019b6c:	e6c5      	b.n	80198fa <__gethex+0x146>
 8019b6e:	6922      	ldr	r2, [r4, #16]
 8019b70:	3202      	adds	r2, #2
 8019b72:	f104 010c 	add.w	r1, r4, #12
 8019b76:	0092      	lsls	r2, r2, #2
 8019b78:	300c      	adds	r0, #12
 8019b7a:	f7fe fee2 	bl	8018942 <memcpy>
 8019b7e:	4621      	mov	r1, r4
 8019b80:	9801      	ldr	r0, [sp, #4]
 8019b82:	f000 f9f1 	bl	8019f68 <_Bfree>
 8019b86:	464c      	mov	r4, r9
 8019b88:	6923      	ldr	r3, [r4, #16]
 8019b8a:	1c5a      	adds	r2, r3, #1
 8019b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019b90:	6122      	str	r2, [r4, #16]
 8019b92:	2201      	movs	r2, #1
 8019b94:	615a      	str	r2, [r3, #20]
 8019b96:	e7be      	b.n	8019b16 <__gethex+0x362>
 8019b98:	6922      	ldr	r2, [r4, #16]
 8019b9a:	455a      	cmp	r2, fp
 8019b9c:	dd0b      	ble.n	8019bb6 <__gethex+0x402>
 8019b9e:	2101      	movs	r1, #1
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	f7ff fd9f 	bl	80196e4 <rshift>
 8019ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019baa:	3701      	adds	r7, #1
 8019bac:	42bb      	cmp	r3, r7
 8019bae:	f6ff aee0 	blt.w	8019972 <__gethex+0x1be>
 8019bb2:	2501      	movs	r5, #1
 8019bb4:	e7c2      	b.n	8019b3c <__gethex+0x388>
 8019bb6:	f016 061f 	ands.w	r6, r6, #31
 8019bba:	d0fa      	beq.n	8019bb2 <__gethex+0x3fe>
 8019bbc:	4453      	add	r3, sl
 8019bbe:	f1c6 0620 	rsb	r6, r6, #32
 8019bc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019bc6:	f000 fa81 	bl	801a0cc <__hi0bits>
 8019bca:	42b0      	cmp	r0, r6
 8019bcc:	dbe7      	blt.n	8019b9e <__gethex+0x3ea>
 8019bce:	e7f0      	b.n	8019bb2 <__gethex+0x3fe>
 8019bd0:	0801e7d0 	.word	0x0801e7d0

08019bd4 <L_shift>:
 8019bd4:	f1c2 0208 	rsb	r2, r2, #8
 8019bd8:	0092      	lsls	r2, r2, #2
 8019bda:	b570      	push	{r4, r5, r6, lr}
 8019bdc:	f1c2 0620 	rsb	r6, r2, #32
 8019be0:	6843      	ldr	r3, [r0, #4]
 8019be2:	6804      	ldr	r4, [r0, #0]
 8019be4:	fa03 f506 	lsl.w	r5, r3, r6
 8019be8:	432c      	orrs	r4, r5
 8019bea:	40d3      	lsrs	r3, r2
 8019bec:	6004      	str	r4, [r0, #0]
 8019bee:	f840 3f04 	str.w	r3, [r0, #4]!
 8019bf2:	4288      	cmp	r0, r1
 8019bf4:	d3f4      	bcc.n	8019be0 <L_shift+0xc>
 8019bf6:	bd70      	pop	{r4, r5, r6, pc}

08019bf8 <__match>:
 8019bf8:	b530      	push	{r4, r5, lr}
 8019bfa:	6803      	ldr	r3, [r0, #0]
 8019bfc:	3301      	adds	r3, #1
 8019bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c02:	b914      	cbnz	r4, 8019c0a <__match+0x12>
 8019c04:	6003      	str	r3, [r0, #0]
 8019c06:	2001      	movs	r0, #1
 8019c08:	bd30      	pop	{r4, r5, pc}
 8019c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8019c12:	2d19      	cmp	r5, #25
 8019c14:	bf98      	it	ls
 8019c16:	3220      	addls	r2, #32
 8019c18:	42a2      	cmp	r2, r4
 8019c1a:	d0f0      	beq.n	8019bfe <__match+0x6>
 8019c1c:	2000      	movs	r0, #0
 8019c1e:	e7f3      	b.n	8019c08 <__match+0x10>

08019c20 <__hexnan>:
 8019c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c24:	680b      	ldr	r3, [r1, #0]
 8019c26:	6801      	ldr	r1, [r0, #0]
 8019c28:	115e      	asrs	r6, r3, #5
 8019c2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019c2e:	f013 031f 	ands.w	r3, r3, #31
 8019c32:	b087      	sub	sp, #28
 8019c34:	bf18      	it	ne
 8019c36:	3604      	addne	r6, #4
 8019c38:	2500      	movs	r5, #0
 8019c3a:	1f37      	subs	r7, r6, #4
 8019c3c:	4682      	mov	sl, r0
 8019c3e:	4690      	mov	r8, r2
 8019c40:	9301      	str	r3, [sp, #4]
 8019c42:	f846 5c04 	str.w	r5, [r6, #-4]
 8019c46:	46b9      	mov	r9, r7
 8019c48:	463c      	mov	r4, r7
 8019c4a:	9502      	str	r5, [sp, #8]
 8019c4c:	46ab      	mov	fp, r5
 8019c4e:	784a      	ldrb	r2, [r1, #1]
 8019c50:	1c4b      	adds	r3, r1, #1
 8019c52:	9303      	str	r3, [sp, #12]
 8019c54:	b342      	cbz	r2, 8019ca8 <__hexnan+0x88>
 8019c56:	4610      	mov	r0, r2
 8019c58:	9105      	str	r1, [sp, #20]
 8019c5a:	9204      	str	r2, [sp, #16]
 8019c5c:	f7ff fd94 	bl	8019788 <__hexdig_fun>
 8019c60:	2800      	cmp	r0, #0
 8019c62:	d151      	bne.n	8019d08 <__hexnan+0xe8>
 8019c64:	9a04      	ldr	r2, [sp, #16]
 8019c66:	9905      	ldr	r1, [sp, #20]
 8019c68:	2a20      	cmp	r2, #32
 8019c6a:	d818      	bhi.n	8019c9e <__hexnan+0x7e>
 8019c6c:	9b02      	ldr	r3, [sp, #8]
 8019c6e:	459b      	cmp	fp, r3
 8019c70:	dd13      	ble.n	8019c9a <__hexnan+0x7a>
 8019c72:	454c      	cmp	r4, r9
 8019c74:	d206      	bcs.n	8019c84 <__hexnan+0x64>
 8019c76:	2d07      	cmp	r5, #7
 8019c78:	dc04      	bgt.n	8019c84 <__hexnan+0x64>
 8019c7a:	462a      	mov	r2, r5
 8019c7c:	4649      	mov	r1, r9
 8019c7e:	4620      	mov	r0, r4
 8019c80:	f7ff ffa8 	bl	8019bd4 <L_shift>
 8019c84:	4544      	cmp	r4, r8
 8019c86:	d952      	bls.n	8019d2e <__hexnan+0x10e>
 8019c88:	2300      	movs	r3, #0
 8019c8a:	f1a4 0904 	sub.w	r9, r4, #4
 8019c8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019c92:	f8cd b008 	str.w	fp, [sp, #8]
 8019c96:	464c      	mov	r4, r9
 8019c98:	461d      	mov	r5, r3
 8019c9a:	9903      	ldr	r1, [sp, #12]
 8019c9c:	e7d7      	b.n	8019c4e <__hexnan+0x2e>
 8019c9e:	2a29      	cmp	r2, #41	@ 0x29
 8019ca0:	d157      	bne.n	8019d52 <__hexnan+0x132>
 8019ca2:	3102      	adds	r1, #2
 8019ca4:	f8ca 1000 	str.w	r1, [sl]
 8019ca8:	f1bb 0f00 	cmp.w	fp, #0
 8019cac:	d051      	beq.n	8019d52 <__hexnan+0x132>
 8019cae:	454c      	cmp	r4, r9
 8019cb0:	d206      	bcs.n	8019cc0 <__hexnan+0xa0>
 8019cb2:	2d07      	cmp	r5, #7
 8019cb4:	dc04      	bgt.n	8019cc0 <__hexnan+0xa0>
 8019cb6:	462a      	mov	r2, r5
 8019cb8:	4649      	mov	r1, r9
 8019cba:	4620      	mov	r0, r4
 8019cbc:	f7ff ff8a 	bl	8019bd4 <L_shift>
 8019cc0:	4544      	cmp	r4, r8
 8019cc2:	d936      	bls.n	8019d32 <__hexnan+0x112>
 8019cc4:	f1a8 0204 	sub.w	r2, r8, #4
 8019cc8:	4623      	mov	r3, r4
 8019cca:	f853 1b04 	ldr.w	r1, [r3], #4
 8019cce:	f842 1f04 	str.w	r1, [r2, #4]!
 8019cd2:	429f      	cmp	r7, r3
 8019cd4:	d2f9      	bcs.n	8019cca <__hexnan+0xaa>
 8019cd6:	1b3b      	subs	r3, r7, r4
 8019cd8:	f023 0303 	bic.w	r3, r3, #3
 8019cdc:	3304      	adds	r3, #4
 8019cde:	3401      	adds	r4, #1
 8019ce0:	3e03      	subs	r6, #3
 8019ce2:	42b4      	cmp	r4, r6
 8019ce4:	bf88      	it	hi
 8019ce6:	2304      	movhi	r3, #4
 8019ce8:	4443      	add	r3, r8
 8019cea:	2200      	movs	r2, #0
 8019cec:	f843 2b04 	str.w	r2, [r3], #4
 8019cf0:	429f      	cmp	r7, r3
 8019cf2:	d2fb      	bcs.n	8019cec <__hexnan+0xcc>
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	b91b      	cbnz	r3, 8019d00 <__hexnan+0xe0>
 8019cf8:	4547      	cmp	r7, r8
 8019cfa:	d128      	bne.n	8019d4e <__hexnan+0x12e>
 8019cfc:	2301      	movs	r3, #1
 8019cfe:	603b      	str	r3, [r7, #0]
 8019d00:	2005      	movs	r0, #5
 8019d02:	b007      	add	sp, #28
 8019d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d08:	3501      	adds	r5, #1
 8019d0a:	2d08      	cmp	r5, #8
 8019d0c:	f10b 0b01 	add.w	fp, fp, #1
 8019d10:	dd06      	ble.n	8019d20 <__hexnan+0x100>
 8019d12:	4544      	cmp	r4, r8
 8019d14:	d9c1      	bls.n	8019c9a <__hexnan+0x7a>
 8019d16:	2300      	movs	r3, #0
 8019d18:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d1c:	2501      	movs	r5, #1
 8019d1e:	3c04      	subs	r4, #4
 8019d20:	6822      	ldr	r2, [r4, #0]
 8019d22:	f000 000f 	and.w	r0, r0, #15
 8019d26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019d2a:	6020      	str	r0, [r4, #0]
 8019d2c:	e7b5      	b.n	8019c9a <__hexnan+0x7a>
 8019d2e:	2508      	movs	r5, #8
 8019d30:	e7b3      	b.n	8019c9a <__hexnan+0x7a>
 8019d32:	9b01      	ldr	r3, [sp, #4]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d0dd      	beq.n	8019cf4 <__hexnan+0xd4>
 8019d38:	f1c3 0320 	rsb	r3, r3, #32
 8019d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d40:	40da      	lsrs	r2, r3
 8019d42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019d46:	4013      	ands	r3, r2
 8019d48:	f846 3c04 	str.w	r3, [r6, #-4]
 8019d4c:	e7d2      	b.n	8019cf4 <__hexnan+0xd4>
 8019d4e:	3f04      	subs	r7, #4
 8019d50:	e7d0      	b.n	8019cf4 <__hexnan+0xd4>
 8019d52:	2004      	movs	r0, #4
 8019d54:	e7d5      	b.n	8019d02 <__hexnan+0xe2>
	...

08019d58 <malloc>:
 8019d58:	4b02      	ldr	r3, [pc, #8]	@ (8019d64 <malloc+0xc>)
 8019d5a:	4601      	mov	r1, r0
 8019d5c:	6818      	ldr	r0, [r3, #0]
 8019d5e:	f000 b825 	b.w	8019dac <_malloc_r>
 8019d62:	bf00      	nop
 8019d64:	200001a8 	.word	0x200001a8

08019d68 <sbrk_aligned>:
 8019d68:	b570      	push	{r4, r5, r6, lr}
 8019d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8019da8 <sbrk_aligned+0x40>)
 8019d6c:	460c      	mov	r4, r1
 8019d6e:	6831      	ldr	r1, [r6, #0]
 8019d70:	4605      	mov	r5, r0
 8019d72:	b911      	cbnz	r1, 8019d7a <sbrk_aligned+0x12>
 8019d74:	f001 f986 	bl	801b084 <_sbrk_r>
 8019d78:	6030      	str	r0, [r6, #0]
 8019d7a:	4621      	mov	r1, r4
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	f001 f981 	bl	801b084 <_sbrk_r>
 8019d82:	1c43      	adds	r3, r0, #1
 8019d84:	d103      	bne.n	8019d8e <sbrk_aligned+0x26>
 8019d86:	f04f 34ff 	mov.w	r4, #4294967295
 8019d8a:	4620      	mov	r0, r4
 8019d8c:	bd70      	pop	{r4, r5, r6, pc}
 8019d8e:	1cc4      	adds	r4, r0, #3
 8019d90:	f024 0403 	bic.w	r4, r4, #3
 8019d94:	42a0      	cmp	r0, r4
 8019d96:	d0f8      	beq.n	8019d8a <sbrk_aligned+0x22>
 8019d98:	1a21      	subs	r1, r4, r0
 8019d9a:	4628      	mov	r0, r5
 8019d9c:	f001 f972 	bl	801b084 <_sbrk_r>
 8019da0:	3001      	adds	r0, #1
 8019da2:	d1f2      	bne.n	8019d8a <sbrk_aligned+0x22>
 8019da4:	e7ef      	b.n	8019d86 <sbrk_aligned+0x1e>
 8019da6:	bf00      	nop
 8019da8:	20008c88 	.word	0x20008c88

08019dac <_malloc_r>:
 8019dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019db0:	1ccd      	adds	r5, r1, #3
 8019db2:	f025 0503 	bic.w	r5, r5, #3
 8019db6:	3508      	adds	r5, #8
 8019db8:	2d0c      	cmp	r5, #12
 8019dba:	bf38      	it	cc
 8019dbc:	250c      	movcc	r5, #12
 8019dbe:	2d00      	cmp	r5, #0
 8019dc0:	4606      	mov	r6, r0
 8019dc2:	db01      	blt.n	8019dc8 <_malloc_r+0x1c>
 8019dc4:	42a9      	cmp	r1, r5
 8019dc6:	d904      	bls.n	8019dd2 <_malloc_r+0x26>
 8019dc8:	230c      	movs	r3, #12
 8019dca:	6033      	str	r3, [r6, #0]
 8019dcc:	2000      	movs	r0, #0
 8019dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019ea8 <_malloc_r+0xfc>
 8019dd6:	f000 f87b 	bl	8019ed0 <__malloc_lock>
 8019dda:	f8d8 3000 	ldr.w	r3, [r8]
 8019dde:	461c      	mov	r4, r3
 8019de0:	bb44      	cbnz	r4, 8019e34 <_malloc_r+0x88>
 8019de2:	4629      	mov	r1, r5
 8019de4:	4630      	mov	r0, r6
 8019de6:	f7ff ffbf 	bl	8019d68 <sbrk_aligned>
 8019dea:	1c43      	adds	r3, r0, #1
 8019dec:	4604      	mov	r4, r0
 8019dee:	d158      	bne.n	8019ea2 <_malloc_r+0xf6>
 8019df0:	f8d8 4000 	ldr.w	r4, [r8]
 8019df4:	4627      	mov	r7, r4
 8019df6:	2f00      	cmp	r7, #0
 8019df8:	d143      	bne.n	8019e82 <_malloc_r+0xd6>
 8019dfa:	2c00      	cmp	r4, #0
 8019dfc:	d04b      	beq.n	8019e96 <_malloc_r+0xea>
 8019dfe:	6823      	ldr	r3, [r4, #0]
 8019e00:	4639      	mov	r1, r7
 8019e02:	4630      	mov	r0, r6
 8019e04:	eb04 0903 	add.w	r9, r4, r3
 8019e08:	f001 f93c 	bl	801b084 <_sbrk_r>
 8019e0c:	4581      	cmp	r9, r0
 8019e0e:	d142      	bne.n	8019e96 <_malloc_r+0xea>
 8019e10:	6821      	ldr	r1, [r4, #0]
 8019e12:	1a6d      	subs	r5, r5, r1
 8019e14:	4629      	mov	r1, r5
 8019e16:	4630      	mov	r0, r6
 8019e18:	f7ff ffa6 	bl	8019d68 <sbrk_aligned>
 8019e1c:	3001      	adds	r0, #1
 8019e1e:	d03a      	beq.n	8019e96 <_malloc_r+0xea>
 8019e20:	6823      	ldr	r3, [r4, #0]
 8019e22:	442b      	add	r3, r5
 8019e24:	6023      	str	r3, [r4, #0]
 8019e26:	f8d8 3000 	ldr.w	r3, [r8]
 8019e2a:	685a      	ldr	r2, [r3, #4]
 8019e2c:	bb62      	cbnz	r2, 8019e88 <_malloc_r+0xdc>
 8019e2e:	f8c8 7000 	str.w	r7, [r8]
 8019e32:	e00f      	b.n	8019e54 <_malloc_r+0xa8>
 8019e34:	6822      	ldr	r2, [r4, #0]
 8019e36:	1b52      	subs	r2, r2, r5
 8019e38:	d420      	bmi.n	8019e7c <_malloc_r+0xd0>
 8019e3a:	2a0b      	cmp	r2, #11
 8019e3c:	d917      	bls.n	8019e6e <_malloc_r+0xc2>
 8019e3e:	1961      	adds	r1, r4, r5
 8019e40:	42a3      	cmp	r3, r4
 8019e42:	6025      	str	r5, [r4, #0]
 8019e44:	bf18      	it	ne
 8019e46:	6059      	strne	r1, [r3, #4]
 8019e48:	6863      	ldr	r3, [r4, #4]
 8019e4a:	bf08      	it	eq
 8019e4c:	f8c8 1000 	streq.w	r1, [r8]
 8019e50:	5162      	str	r2, [r4, r5]
 8019e52:	604b      	str	r3, [r1, #4]
 8019e54:	4630      	mov	r0, r6
 8019e56:	f000 f841 	bl	8019edc <__malloc_unlock>
 8019e5a:	f104 000b 	add.w	r0, r4, #11
 8019e5e:	1d23      	adds	r3, r4, #4
 8019e60:	f020 0007 	bic.w	r0, r0, #7
 8019e64:	1ac2      	subs	r2, r0, r3
 8019e66:	bf1c      	itt	ne
 8019e68:	1a1b      	subne	r3, r3, r0
 8019e6a:	50a3      	strne	r3, [r4, r2]
 8019e6c:	e7af      	b.n	8019dce <_malloc_r+0x22>
 8019e6e:	6862      	ldr	r2, [r4, #4]
 8019e70:	42a3      	cmp	r3, r4
 8019e72:	bf0c      	ite	eq
 8019e74:	f8c8 2000 	streq.w	r2, [r8]
 8019e78:	605a      	strne	r2, [r3, #4]
 8019e7a:	e7eb      	b.n	8019e54 <_malloc_r+0xa8>
 8019e7c:	4623      	mov	r3, r4
 8019e7e:	6864      	ldr	r4, [r4, #4]
 8019e80:	e7ae      	b.n	8019de0 <_malloc_r+0x34>
 8019e82:	463c      	mov	r4, r7
 8019e84:	687f      	ldr	r7, [r7, #4]
 8019e86:	e7b6      	b.n	8019df6 <_malloc_r+0x4a>
 8019e88:	461a      	mov	r2, r3
 8019e8a:	685b      	ldr	r3, [r3, #4]
 8019e8c:	42a3      	cmp	r3, r4
 8019e8e:	d1fb      	bne.n	8019e88 <_malloc_r+0xdc>
 8019e90:	2300      	movs	r3, #0
 8019e92:	6053      	str	r3, [r2, #4]
 8019e94:	e7de      	b.n	8019e54 <_malloc_r+0xa8>
 8019e96:	230c      	movs	r3, #12
 8019e98:	6033      	str	r3, [r6, #0]
 8019e9a:	4630      	mov	r0, r6
 8019e9c:	f000 f81e 	bl	8019edc <__malloc_unlock>
 8019ea0:	e794      	b.n	8019dcc <_malloc_r+0x20>
 8019ea2:	6005      	str	r5, [r0, #0]
 8019ea4:	e7d6      	b.n	8019e54 <_malloc_r+0xa8>
 8019ea6:	bf00      	nop
 8019ea8:	20008c8c 	.word	0x20008c8c

08019eac <__ascii_mbtowc>:
 8019eac:	b082      	sub	sp, #8
 8019eae:	b901      	cbnz	r1, 8019eb2 <__ascii_mbtowc+0x6>
 8019eb0:	a901      	add	r1, sp, #4
 8019eb2:	b142      	cbz	r2, 8019ec6 <__ascii_mbtowc+0x1a>
 8019eb4:	b14b      	cbz	r3, 8019eca <__ascii_mbtowc+0x1e>
 8019eb6:	7813      	ldrb	r3, [r2, #0]
 8019eb8:	600b      	str	r3, [r1, #0]
 8019eba:	7812      	ldrb	r2, [r2, #0]
 8019ebc:	1e10      	subs	r0, r2, #0
 8019ebe:	bf18      	it	ne
 8019ec0:	2001      	movne	r0, #1
 8019ec2:	b002      	add	sp, #8
 8019ec4:	4770      	bx	lr
 8019ec6:	4610      	mov	r0, r2
 8019ec8:	e7fb      	b.n	8019ec2 <__ascii_mbtowc+0x16>
 8019eca:	f06f 0001 	mvn.w	r0, #1
 8019ece:	e7f8      	b.n	8019ec2 <__ascii_mbtowc+0x16>

08019ed0 <__malloc_lock>:
 8019ed0:	4801      	ldr	r0, [pc, #4]	@ (8019ed8 <__malloc_lock+0x8>)
 8019ed2:	f7fe bd34 	b.w	801893e <__retarget_lock_acquire_recursive>
 8019ed6:	bf00      	nop
 8019ed8:	20008c84 	.word	0x20008c84

08019edc <__malloc_unlock>:
 8019edc:	4801      	ldr	r0, [pc, #4]	@ (8019ee4 <__malloc_unlock+0x8>)
 8019ede:	f7fe bd2f 	b.w	8018940 <__retarget_lock_release_recursive>
 8019ee2:	bf00      	nop
 8019ee4:	20008c84 	.word	0x20008c84

08019ee8 <_Balloc>:
 8019ee8:	b570      	push	{r4, r5, r6, lr}
 8019eea:	69c6      	ldr	r6, [r0, #28]
 8019eec:	4604      	mov	r4, r0
 8019eee:	460d      	mov	r5, r1
 8019ef0:	b976      	cbnz	r6, 8019f10 <_Balloc+0x28>
 8019ef2:	2010      	movs	r0, #16
 8019ef4:	f7ff ff30 	bl	8019d58 <malloc>
 8019ef8:	4602      	mov	r2, r0
 8019efa:	61e0      	str	r0, [r4, #28]
 8019efc:	b920      	cbnz	r0, 8019f08 <_Balloc+0x20>
 8019efe:	4b18      	ldr	r3, [pc, #96]	@ (8019f60 <_Balloc+0x78>)
 8019f00:	4818      	ldr	r0, [pc, #96]	@ (8019f64 <_Balloc+0x7c>)
 8019f02:	216b      	movs	r1, #107	@ 0x6b
 8019f04:	f7fe fd3a 	bl	801897c <__assert_func>
 8019f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019f0c:	6006      	str	r6, [r0, #0]
 8019f0e:	60c6      	str	r6, [r0, #12]
 8019f10:	69e6      	ldr	r6, [r4, #28]
 8019f12:	68f3      	ldr	r3, [r6, #12]
 8019f14:	b183      	cbz	r3, 8019f38 <_Balloc+0x50>
 8019f16:	69e3      	ldr	r3, [r4, #28]
 8019f18:	68db      	ldr	r3, [r3, #12]
 8019f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019f1e:	b9b8      	cbnz	r0, 8019f50 <_Balloc+0x68>
 8019f20:	2101      	movs	r1, #1
 8019f22:	fa01 f605 	lsl.w	r6, r1, r5
 8019f26:	1d72      	adds	r2, r6, #5
 8019f28:	0092      	lsls	r2, r2, #2
 8019f2a:	4620      	mov	r0, r4
 8019f2c:	f001 f8c1 	bl	801b0b2 <_calloc_r>
 8019f30:	b160      	cbz	r0, 8019f4c <_Balloc+0x64>
 8019f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019f36:	e00e      	b.n	8019f56 <_Balloc+0x6e>
 8019f38:	2221      	movs	r2, #33	@ 0x21
 8019f3a:	2104      	movs	r1, #4
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	f001 f8b8 	bl	801b0b2 <_calloc_r>
 8019f42:	69e3      	ldr	r3, [r4, #28]
 8019f44:	60f0      	str	r0, [r6, #12]
 8019f46:	68db      	ldr	r3, [r3, #12]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d1e4      	bne.n	8019f16 <_Balloc+0x2e>
 8019f4c:	2000      	movs	r0, #0
 8019f4e:	bd70      	pop	{r4, r5, r6, pc}
 8019f50:	6802      	ldr	r2, [r0, #0]
 8019f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019f56:	2300      	movs	r3, #0
 8019f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019f5c:	e7f7      	b.n	8019f4e <_Balloc+0x66>
 8019f5e:	bf00      	nop
 8019f60:	0801e4d6 	.word	0x0801e4d6
 8019f64:	0801e841 	.word	0x0801e841

08019f68 <_Bfree>:
 8019f68:	b570      	push	{r4, r5, r6, lr}
 8019f6a:	69c6      	ldr	r6, [r0, #28]
 8019f6c:	4605      	mov	r5, r0
 8019f6e:	460c      	mov	r4, r1
 8019f70:	b976      	cbnz	r6, 8019f90 <_Bfree+0x28>
 8019f72:	2010      	movs	r0, #16
 8019f74:	f7ff fef0 	bl	8019d58 <malloc>
 8019f78:	4602      	mov	r2, r0
 8019f7a:	61e8      	str	r0, [r5, #28]
 8019f7c:	b920      	cbnz	r0, 8019f88 <_Bfree+0x20>
 8019f7e:	4b09      	ldr	r3, [pc, #36]	@ (8019fa4 <_Bfree+0x3c>)
 8019f80:	4809      	ldr	r0, [pc, #36]	@ (8019fa8 <_Bfree+0x40>)
 8019f82:	218f      	movs	r1, #143	@ 0x8f
 8019f84:	f7fe fcfa 	bl	801897c <__assert_func>
 8019f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019f8c:	6006      	str	r6, [r0, #0]
 8019f8e:	60c6      	str	r6, [r0, #12]
 8019f90:	b13c      	cbz	r4, 8019fa2 <_Bfree+0x3a>
 8019f92:	69eb      	ldr	r3, [r5, #28]
 8019f94:	6862      	ldr	r2, [r4, #4]
 8019f96:	68db      	ldr	r3, [r3, #12]
 8019f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019f9c:	6021      	str	r1, [r4, #0]
 8019f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019fa2:	bd70      	pop	{r4, r5, r6, pc}
 8019fa4:	0801e4d6 	.word	0x0801e4d6
 8019fa8:	0801e841 	.word	0x0801e841

08019fac <__multadd>:
 8019fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fb0:	690d      	ldr	r5, [r1, #16]
 8019fb2:	4607      	mov	r7, r0
 8019fb4:	460c      	mov	r4, r1
 8019fb6:	461e      	mov	r6, r3
 8019fb8:	f101 0c14 	add.w	ip, r1, #20
 8019fbc:	2000      	movs	r0, #0
 8019fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8019fc2:	b299      	uxth	r1, r3
 8019fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8019fc8:	0c1e      	lsrs	r6, r3, #16
 8019fca:	0c0b      	lsrs	r3, r1, #16
 8019fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8019fd0:	b289      	uxth	r1, r1
 8019fd2:	3001      	adds	r0, #1
 8019fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019fd8:	4285      	cmp	r5, r0
 8019fda:	f84c 1b04 	str.w	r1, [ip], #4
 8019fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019fe2:	dcec      	bgt.n	8019fbe <__multadd+0x12>
 8019fe4:	b30e      	cbz	r6, 801a02a <__multadd+0x7e>
 8019fe6:	68a3      	ldr	r3, [r4, #8]
 8019fe8:	42ab      	cmp	r3, r5
 8019fea:	dc19      	bgt.n	801a020 <__multadd+0x74>
 8019fec:	6861      	ldr	r1, [r4, #4]
 8019fee:	4638      	mov	r0, r7
 8019ff0:	3101      	adds	r1, #1
 8019ff2:	f7ff ff79 	bl	8019ee8 <_Balloc>
 8019ff6:	4680      	mov	r8, r0
 8019ff8:	b928      	cbnz	r0, 801a006 <__multadd+0x5a>
 8019ffa:	4602      	mov	r2, r0
 8019ffc:	4b0c      	ldr	r3, [pc, #48]	@ (801a030 <__multadd+0x84>)
 8019ffe:	480d      	ldr	r0, [pc, #52]	@ (801a034 <__multadd+0x88>)
 801a000:	21ba      	movs	r1, #186	@ 0xba
 801a002:	f7fe fcbb 	bl	801897c <__assert_func>
 801a006:	6922      	ldr	r2, [r4, #16]
 801a008:	3202      	adds	r2, #2
 801a00a:	f104 010c 	add.w	r1, r4, #12
 801a00e:	0092      	lsls	r2, r2, #2
 801a010:	300c      	adds	r0, #12
 801a012:	f7fe fc96 	bl	8018942 <memcpy>
 801a016:	4621      	mov	r1, r4
 801a018:	4638      	mov	r0, r7
 801a01a:	f7ff ffa5 	bl	8019f68 <_Bfree>
 801a01e:	4644      	mov	r4, r8
 801a020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a024:	3501      	adds	r5, #1
 801a026:	615e      	str	r6, [r3, #20]
 801a028:	6125      	str	r5, [r4, #16]
 801a02a:	4620      	mov	r0, r4
 801a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a030:	0801e7d0 	.word	0x0801e7d0
 801a034:	0801e841 	.word	0x0801e841

0801a038 <__s2b>:
 801a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a03c:	460c      	mov	r4, r1
 801a03e:	4615      	mov	r5, r2
 801a040:	461f      	mov	r7, r3
 801a042:	2209      	movs	r2, #9
 801a044:	3308      	adds	r3, #8
 801a046:	4606      	mov	r6, r0
 801a048:	fb93 f3f2 	sdiv	r3, r3, r2
 801a04c:	2100      	movs	r1, #0
 801a04e:	2201      	movs	r2, #1
 801a050:	429a      	cmp	r2, r3
 801a052:	db09      	blt.n	801a068 <__s2b+0x30>
 801a054:	4630      	mov	r0, r6
 801a056:	f7ff ff47 	bl	8019ee8 <_Balloc>
 801a05a:	b940      	cbnz	r0, 801a06e <__s2b+0x36>
 801a05c:	4602      	mov	r2, r0
 801a05e:	4b19      	ldr	r3, [pc, #100]	@ (801a0c4 <__s2b+0x8c>)
 801a060:	4819      	ldr	r0, [pc, #100]	@ (801a0c8 <__s2b+0x90>)
 801a062:	21d3      	movs	r1, #211	@ 0xd3
 801a064:	f7fe fc8a 	bl	801897c <__assert_func>
 801a068:	0052      	lsls	r2, r2, #1
 801a06a:	3101      	adds	r1, #1
 801a06c:	e7f0      	b.n	801a050 <__s2b+0x18>
 801a06e:	9b08      	ldr	r3, [sp, #32]
 801a070:	6143      	str	r3, [r0, #20]
 801a072:	2d09      	cmp	r5, #9
 801a074:	f04f 0301 	mov.w	r3, #1
 801a078:	6103      	str	r3, [r0, #16]
 801a07a:	dd16      	ble.n	801a0aa <__s2b+0x72>
 801a07c:	f104 0909 	add.w	r9, r4, #9
 801a080:	46c8      	mov	r8, r9
 801a082:	442c      	add	r4, r5
 801a084:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a088:	4601      	mov	r1, r0
 801a08a:	3b30      	subs	r3, #48	@ 0x30
 801a08c:	220a      	movs	r2, #10
 801a08e:	4630      	mov	r0, r6
 801a090:	f7ff ff8c 	bl	8019fac <__multadd>
 801a094:	45a0      	cmp	r8, r4
 801a096:	d1f5      	bne.n	801a084 <__s2b+0x4c>
 801a098:	f1a5 0408 	sub.w	r4, r5, #8
 801a09c:	444c      	add	r4, r9
 801a09e:	1b2d      	subs	r5, r5, r4
 801a0a0:	1963      	adds	r3, r4, r5
 801a0a2:	42bb      	cmp	r3, r7
 801a0a4:	db04      	blt.n	801a0b0 <__s2b+0x78>
 801a0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0aa:	340a      	adds	r4, #10
 801a0ac:	2509      	movs	r5, #9
 801a0ae:	e7f6      	b.n	801a09e <__s2b+0x66>
 801a0b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a0b4:	4601      	mov	r1, r0
 801a0b6:	3b30      	subs	r3, #48	@ 0x30
 801a0b8:	220a      	movs	r2, #10
 801a0ba:	4630      	mov	r0, r6
 801a0bc:	f7ff ff76 	bl	8019fac <__multadd>
 801a0c0:	e7ee      	b.n	801a0a0 <__s2b+0x68>
 801a0c2:	bf00      	nop
 801a0c4:	0801e7d0 	.word	0x0801e7d0
 801a0c8:	0801e841 	.word	0x0801e841

0801a0cc <__hi0bits>:
 801a0cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a0d0:	4603      	mov	r3, r0
 801a0d2:	bf36      	itet	cc
 801a0d4:	0403      	lslcc	r3, r0, #16
 801a0d6:	2000      	movcs	r0, #0
 801a0d8:	2010      	movcc	r0, #16
 801a0da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a0de:	bf3c      	itt	cc
 801a0e0:	021b      	lslcc	r3, r3, #8
 801a0e2:	3008      	addcc	r0, #8
 801a0e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a0e8:	bf3c      	itt	cc
 801a0ea:	011b      	lslcc	r3, r3, #4
 801a0ec:	3004      	addcc	r0, #4
 801a0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a0f2:	bf3c      	itt	cc
 801a0f4:	009b      	lslcc	r3, r3, #2
 801a0f6:	3002      	addcc	r0, #2
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	db05      	blt.n	801a108 <__hi0bits+0x3c>
 801a0fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a100:	f100 0001 	add.w	r0, r0, #1
 801a104:	bf08      	it	eq
 801a106:	2020      	moveq	r0, #32
 801a108:	4770      	bx	lr

0801a10a <__lo0bits>:
 801a10a:	6803      	ldr	r3, [r0, #0]
 801a10c:	4602      	mov	r2, r0
 801a10e:	f013 0007 	ands.w	r0, r3, #7
 801a112:	d00b      	beq.n	801a12c <__lo0bits+0x22>
 801a114:	07d9      	lsls	r1, r3, #31
 801a116:	d421      	bmi.n	801a15c <__lo0bits+0x52>
 801a118:	0798      	lsls	r0, r3, #30
 801a11a:	bf49      	itett	mi
 801a11c:	085b      	lsrmi	r3, r3, #1
 801a11e:	089b      	lsrpl	r3, r3, #2
 801a120:	2001      	movmi	r0, #1
 801a122:	6013      	strmi	r3, [r2, #0]
 801a124:	bf5c      	itt	pl
 801a126:	6013      	strpl	r3, [r2, #0]
 801a128:	2002      	movpl	r0, #2
 801a12a:	4770      	bx	lr
 801a12c:	b299      	uxth	r1, r3
 801a12e:	b909      	cbnz	r1, 801a134 <__lo0bits+0x2a>
 801a130:	0c1b      	lsrs	r3, r3, #16
 801a132:	2010      	movs	r0, #16
 801a134:	b2d9      	uxtb	r1, r3
 801a136:	b909      	cbnz	r1, 801a13c <__lo0bits+0x32>
 801a138:	3008      	adds	r0, #8
 801a13a:	0a1b      	lsrs	r3, r3, #8
 801a13c:	0719      	lsls	r1, r3, #28
 801a13e:	bf04      	itt	eq
 801a140:	091b      	lsreq	r3, r3, #4
 801a142:	3004      	addeq	r0, #4
 801a144:	0799      	lsls	r1, r3, #30
 801a146:	bf04      	itt	eq
 801a148:	089b      	lsreq	r3, r3, #2
 801a14a:	3002      	addeq	r0, #2
 801a14c:	07d9      	lsls	r1, r3, #31
 801a14e:	d403      	bmi.n	801a158 <__lo0bits+0x4e>
 801a150:	085b      	lsrs	r3, r3, #1
 801a152:	f100 0001 	add.w	r0, r0, #1
 801a156:	d003      	beq.n	801a160 <__lo0bits+0x56>
 801a158:	6013      	str	r3, [r2, #0]
 801a15a:	4770      	bx	lr
 801a15c:	2000      	movs	r0, #0
 801a15e:	4770      	bx	lr
 801a160:	2020      	movs	r0, #32
 801a162:	4770      	bx	lr

0801a164 <__i2b>:
 801a164:	b510      	push	{r4, lr}
 801a166:	460c      	mov	r4, r1
 801a168:	2101      	movs	r1, #1
 801a16a:	f7ff febd 	bl	8019ee8 <_Balloc>
 801a16e:	4602      	mov	r2, r0
 801a170:	b928      	cbnz	r0, 801a17e <__i2b+0x1a>
 801a172:	4b05      	ldr	r3, [pc, #20]	@ (801a188 <__i2b+0x24>)
 801a174:	4805      	ldr	r0, [pc, #20]	@ (801a18c <__i2b+0x28>)
 801a176:	f240 1145 	movw	r1, #325	@ 0x145
 801a17a:	f7fe fbff 	bl	801897c <__assert_func>
 801a17e:	2301      	movs	r3, #1
 801a180:	6144      	str	r4, [r0, #20]
 801a182:	6103      	str	r3, [r0, #16]
 801a184:	bd10      	pop	{r4, pc}
 801a186:	bf00      	nop
 801a188:	0801e7d0 	.word	0x0801e7d0
 801a18c:	0801e841 	.word	0x0801e841

0801a190 <__multiply>:
 801a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	4614      	mov	r4, r2
 801a196:	690a      	ldr	r2, [r1, #16]
 801a198:	6923      	ldr	r3, [r4, #16]
 801a19a:	429a      	cmp	r2, r3
 801a19c:	bfa8      	it	ge
 801a19e:	4623      	movge	r3, r4
 801a1a0:	460f      	mov	r7, r1
 801a1a2:	bfa4      	itt	ge
 801a1a4:	460c      	movge	r4, r1
 801a1a6:	461f      	movge	r7, r3
 801a1a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a1ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a1b0:	68a3      	ldr	r3, [r4, #8]
 801a1b2:	6861      	ldr	r1, [r4, #4]
 801a1b4:	eb0a 0609 	add.w	r6, sl, r9
 801a1b8:	42b3      	cmp	r3, r6
 801a1ba:	b085      	sub	sp, #20
 801a1bc:	bfb8      	it	lt
 801a1be:	3101      	addlt	r1, #1
 801a1c0:	f7ff fe92 	bl	8019ee8 <_Balloc>
 801a1c4:	b930      	cbnz	r0, 801a1d4 <__multiply+0x44>
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	4b44      	ldr	r3, [pc, #272]	@ (801a2dc <__multiply+0x14c>)
 801a1ca:	4845      	ldr	r0, [pc, #276]	@ (801a2e0 <__multiply+0x150>)
 801a1cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a1d0:	f7fe fbd4 	bl	801897c <__assert_func>
 801a1d4:	f100 0514 	add.w	r5, r0, #20
 801a1d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a1dc:	462b      	mov	r3, r5
 801a1de:	2200      	movs	r2, #0
 801a1e0:	4543      	cmp	r3, r8
 801a1e2:	d321      	bcc.n	801a228 <__multiply+0x98>
 801a1e4:	f107 0114 	add.w	r1, r7, #20
 801a1e8:	f104 0214 	add.w	r2, r4, #20
 801a1ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a1f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a1f4:	9302      	str	r3, [sp, #8]
 801a1f6:	1b13      	subs	r3, r2, r4
 801a1f8:	3b15      	subs	r3, #21
 801a1fa:	f023 0303 	bic.w	r3, r3, #3
 801a1fe:	3304      	adds	r3, #4
 801a200:	f104 0715 	add.w	r7, r4, #21
 801a204:	42ba      	cmp	r2, r7
 801a206:	bf38      	it	cc
 801a208:	2304      	movcc	r3, #4
 801a20a:	9301      	str	r3, [sp, #4]
 801a20c:	9b02      	ldr	r3, [sp, #8]
 801a20e:	9103      	str	r1, [sp, #12]
 801a210:	428b      	cmp	r3, r1
 801a212:	d80c      	bhi.n	801a22e <__multiply+0x9e>
 801a214:	2e00      	cmp	r6, #0
 801a216:	dd03      	ble.n	801a220 <__multiply+0x90>
 801a218:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d05b      	beq.n	801a2d8 <__multiply+0x148>
 801a220:	6106      	str	r6, [r0, #16]
 801a222:	b005      	add	sp, #20
 801a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a228:	f843 2b04 	str.w	r2, [r3], #4
 801a22c:	e7d8      	b.n	801a1e0 <__multiply+0x50>
 801a22e:	f8b1 a000 	ldrh.w	sl, [r1]
 801a232:	f1ba 0f00 	cmp.w	sl, #0
 801a236:	d024      	beq.n	801a282 <__multiply+0xf2>
 801a238:	f104 0e14 	add.w	lr, r4, #20
 801a23c:	46a9      	mov	r9, r5
 801a23e:	f04f 0c00 	mov.w	ip, #0
 801a242:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a246:	f8d9 3000 	ldr.w	r3, [r9]
 801a24a:	fa1f fb87 	uxth.w	fp, r7
 801a24e:	b29b      	uxth	r3, r3
 801a250:	fb0a 330b 	mla	r3, sl, fp, r3
 801a254:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a258:	f8d9 7000 	ldr.w	r7, [r9]
 801a25c:	4463      	add	r3, ip
 801a25e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a262:	fb0a c70b 	mla	r7, sl, fp, ip
 801a266:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a270:	4572      	cmp	r2, lr
 801a272:	f849 3b04 	str.w	r3, [r9], #4
 801a276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a27a:	d8e2      	bhi.n	801a242 <__multiply+0xb2>
 801a27c:	9b01      	ldr	r3, [sp, #4]
 801a27e:	f845 c003 	str.w	ip, [r5, r3]
 801a282:	9b03      	ldr	r3, [sp, #12]
 801a284:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a288:	3104      	adds	r1, #4
 801a28a:	f1b9 0f00 	cmp.w	r9, #0
 801a28e:	d021      	beq.n	801a2d4 <__multiply+0x144>
 801a290:	682b      	ldr	r3, [r5, #0]
 801a292:	f104 0c14 	add.w	ip, r4, #20
 801a296:	46ae      	mov	lr, r5
 801a298:	f04f 0a00 	mov.w	sl, #0
 801a29c:	f8bc b000 	ldrh.w	fp, [ip]
 801a2a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a2a4:	fb09 770b 	mla	r7, r9, fp, r7
 801a2a8:	4457      	add	r7, sl
 801a2aa:	b29b      	uxth	r3, r3
 801a2ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a2b0:	f84e 3b04 	str.w	r3, [lr], #4
 801a2b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a2b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a2bc:	f8be 3000 	ldrh.w	r3, [lr]
 801a2c0:	fb09 330a 	mla	r3, r9, sl, r3
 801a2c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a2c8:	4562      	cmp	r2, ip
 801a2ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a2ce:	d8e5      	bhi.n	801a29c <__multiply+0x10c>
 801a2d0:	9f01      	ldr	r7, [sp, #4]
 801a2d2:	51eb      	str	r3, [r5, r7]
 801a2d4:	3504      	adds	r5, #4
 801a2d6:	e799      	b.n	801a20c <__multiply+0x7c>
 801a2d8:	3e01      	subs	r6, #1
 801a2da:	e79b      	b.n	801a214 <__multiply+0x84>
 801a2dc:	0801e7d0 	.word	0x0801e7d0
 801a2e0:	0801e841 	.word	0x0801e841

0801a2e4 <__pow5mult>:
 801a2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2e8:	4615      	mov	r5, r2
 801a2ea:	f012 0203 	ands.w	r2, r2, #3
 801a2ee:	4607      	mov	r7, r0
 801a2f0:	460e      	mov	r6, r1
 801a2f2:	d007      	beq.n	801a304 <__pow5mult+0x20>
 801a2f4:	4c25      	ldr	r4, [pc, #148]	@ (801a38c <__pow5mult+0xa8>)
 801a2f6:	3a01      	subs	r2, #1
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a2fe:	f7ff fe55 	bl	8019fac <__multadd>
 801a302:	4606      	mov	r6, r0
 801a304:	10ad      	asrs	r5, r5, #2
 801a306:	d03d      	beq.n	801a384 <__pow5mult+0xa0>
 801a308:	69fc      	ldr	r4, [r7, #28]
 801a30a:	b97c      	cbnz	r4, 801a32c <__pow5mult+0x48>
 801a30c:	2010      	movs	r0, #16
 801a30e:	f7ff fd23 	bl	8019d58 <malloc>
 801a312:	4602      	mov	r2, r0
 801a314:	61f8      	str	r0, [r7, #28]
 801a316:	b928      	cbnz	r0, 801a324 <__pow5mult+0x40>
 801a318:	4b1d      	ldr	r3, [pc, #116]	@ (801a390 <__pow5mult+0xac>)
 801a31a:	481e      	ldr	r0, [pc, #120]	@ (801a394 <__pow5mult+0xb0>)
 801a31c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a320:	f7fe fb2c 	bl	801897c <__assert_func>
 801a324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a328:	6004      	str	r4, [r0, #0]
 801a32a:	60c4      	str	r4, [r0, #12]
 801a32c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a334:	b94c      	cbnz	r4, 801a34a <__pow5mult+0x66>
 801a336:	f240 2171 	movw	r1, #625	@ 0x271
 801a33a:	4638      	mov	r0, r7
 801a33c:	f7ff ff12 	bl	801a164 <__i2b>
 801a340:	2300      	movs	r3, #0
 801a342:	f8c8 0008 	str.w	r0, [r8, #8]
 801a346:	4604      	mov	r4, r0
 801a348:	6003      	str	r3, [r0, #0]
 801a34a:	f04f 0900 	mov.w	r9, #0
 801a34e:	07eb      	lsls	r3, r5, #31
 801a350:	d50a      	bpl.n	801a368 <__pow5mult+0x84>
 801a352:	4631      	mov	r1, r6
 801a354:	4622      	mov	r2, r4
 801a356:	4638      	mov	r0, r7
 801a358:	f7ff ff1a 	bl	801a190 <__multiply>
 801a35c:	4631      	mov	r1, r6
 801a35e:	4680      	mov	r8, r0
 801a360:	4638      	mov	r0, r7
 801a362:	f7ff fe01 	bl	8019f68 <_Bfree>
 801a366:	4646      	mov	r6, r8
 801a368:	106d      	asrs	r5, r5, #1
 801a36a:	d00b      	beq.n	801a384 <__pow5mult+0xa0>
 801a36c:	6820      	ldr	r0, [r4, #0]
 801a36e:	b938      	cbnz	r0, 801a380 <__pow5mult+0x9c>
 801a370:	4622      	mov	r2, r4
 801a372:	4621      	mov	r1, r4
 801a374:	4638      	mov	r0, r7
 801a376:	f7ff ff0b 	bl	801a190 <__multiply>
 801a37a:	6020      	str	r0, [r4, #0]
 801a37c:	f8c0 9000 	str.w	r9, [r0]
 801a380:	4604      	mov	r4, r0
 801a382:	e7e4      	b.n	801a34e <__pow5mult+0x6a>
 801a384:	4630      	mov	r0, r6
 801a386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a38a:	bf00      	nop
 801a38c:	0801e89c 	.word	0x0801e89c
 801a390:	0801e4d6 	.word	0x0801e4d6
 801a394:	0801e841 	.word	0x0801e841

0801a398 <__lshift>:
 801a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a39c:	460c      	mov	r4, r1
 801a39e:	6849      	ldr	r1, [r1, #4]
 801a3a0:	6923      	ldr	r3, [r4, #16]
 801a3a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a3a6:	68a3      	ldr	r3, [r4, #8]
 801a3a8:	4607      	mov	r7, r0
 801a3aa:	4691      	mov	r9, r2
 801a3ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a3b0:	f108 0601 	add.w	r6, r8, #1
 801a3b4:	42b3      	cmp	r3, r6
 801a3b6:	db0b      	blt.n	801a3d0 <__lshift+0x38>
 801a3b8:	4638      	mov	r0, r7
 801a3ba:	f7ff fd95 	bl	8019ee8 <_Balloc>
 801a3be:	4605      	mov	r5, r0
 801a3c0:	b948      	cbnz	r0, 801a3d6 <__lshift+0x3e>
 801a3c2:	4602      	mov	r2, r0
 801a3c4:	4b28      	ldr	r3, [pc, #160]	@ (801a468 <__lshift+0xd0>)
 801a3c6:	4829      	ldr	r0, [pc, #164]	@ (801a46c <__lshift+0xd4>)
 801a3c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a3cc:	f7fe fad6 	bl	801897c <__assert_func>
 801a3d0:	3101      	adds	r1, #1
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	e7ee      	b.n	801a3b4 <__lshift+0x1c>
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	f100 0114 	add.w	r1, r0, #20
 801a3dc:	f100 0210 	add.w	r2, r0, #16
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	4553      	cmp	r3, sl
 801a3e4:	db33      	blt.n	801a44e <__lshift+0xb6>
 801a3e6:	6920      	ldr	r0, [r4, #16]
 801a3e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a3ec:	f104 0314 	add.w	r3, r4, #20
 801a3f0:	f019 091f 	ands.w	r9, r9, #31
 801a3f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a3f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a3fc:	d02b      	beq.n	801a456 <__lshift+0xbe>
 801a3fe:	f1c9 0e20 	rsb	lr, r9, #32
 801a402:	468a      	mov	sl, r1
 801a404:	2200      	movs	r2, #0
 801a406:	6818      	ldr	r0, [r3, #0]
 801a408:	fa00 f009 	lsl.w	r0, r0, r9
 801a40c:	4310      	orrs	r0, r2
 801a40e:	f84a 0b04 	str.w	r0, [sl], #4
 801a412:	f853 2b04 	ldr.w	r2, [r3], #4
 801a416:	459c      	cmp	ip, r3
 801a418:	fa22 f20e 	lsr.w	r2, r2, lr
 801a41c:	d8f3      	bhi.n	801a406 <__lshift+0x6e>
 801a41e:	ebac 0304 	sub.w	r3, ip, r4
 801a422:	3b15      	subs	r3, #21
 801a424:	f023 0303 	bic.w	r3, r3, #3
 801a428:	3304      	adds	r3, #4
 801a42a:	f104 0015 	add.w	r0, r4, #21
 801a42e:	4584      	cmp	ip, r0
 801a430:	bf38      	it	cc
 801a432:	2304      	movcc	r3, #4
 801a434:	50ca      	str	r2, [r1, r3]
 801a436:	b10a      	cbz	r2, 801a43c <__lshift+0xa4>
 801a438:	f108 0602 	add.w	r6, r8, #2
 801a43c:	3e01      	subs	r6, #1
 801a43e:	4638      	mov	r0, r7
 801a440:	612e      	str	r6, [r5, #16]
 801a442:	4621      	mov	r1, r4
 801a444:	f7ff fd90 	bl	8019f68 <_Bfree>
 801a448:	4628      	mov	r0, r5
 801a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a44e:	f842 0f04 	str.w	r0, [r2, #4]!
 801a452:	3301      	adds	r3, #1
 801a454:	e7c5      	b.n	801a3e2 <__lshift+0x4a>
 801a456:	3904      	subs	r1, #4
 801a458:	f853 2b04 	ldr.w	r2, [r3], #4
 801a45c:	f841 2f04 	str.w	r2, [r1, #4]!
 801a460:	459c      	cmp	ip, r3
 801a462:	d8f9      	bhi.n	801a458 <__lshift+0xc0>
 801a464:	e7ea      	b.n	801a43c <__lshift+0xa4>
 801a466:	bf00      	nop
 801a468:	0801e7d0 	.word	0x0801e7d0
 801a46c:	0801e841 	.word	0x0801e841

0801a470 <__mcmp>:
 801a470:	690a      	ldr	r2, [r1, #16]
 801a472:	4603      	mov	r3, r0
 801a474:	6900      	ldr	r0, [r0, #16]
 801a476:	1a80      	subs	r0, r0, r2
 801a478:	b530      	push	{r4, r5, lr}
 801a47a:	d10e      	bne.n	801a49a <__mcmp+0x2a>
 801a47c:	3314      	adds	r3, #20
 801a47e:	3114      	adds	r1, #20
 801a480:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a484:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a490:	4295      	cmp	r5, r2
 801a492:	d003      	beq.n	801a49c <__mcmp+0x2c>
 801a494:	d205      	bcs.n	801a4a2 <__mcmp+0x32>
 801a496:	f04f 30ff 	mov.w	r0, #4294967295
 801a49a:	bd30      	pop	{r4, r5, pc}
 801a49c:	42a3      	cmp	r3, r4
 801a49e:	d3f3      	bcc.n	801a488 <__mcmp+0x18>
 801a4a0:	e7fb      	b.n	801a49a <__mcmp+0x2a>
 801a4a2:	2001      	movs	r0, #1
 801a4a4:	e7f9      	b.n	801a49a <__mcmp+0x2a>
	...

0801a4a8 <__mdiff>:
 801a4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ac:	4689      	mov	r9, r1
 801a4ae:	4606      	mov	r6, r0
 801a4b0:	4611      	mov	r1, r2
 801a4b2:	4648      	mov	r0, r9
 801a4b4:	4614      	mov	r4, r2
 801a4b6:	f7ff ffdb 	bl	801a470 <__mcmp>
 801a4ba:	1e05      	subs	r5, r0, #0
 801a4bc:	d112      	bne.n	801a4e4 <__mdiff+0x3c>
 801a4be:	4629      	mov	r1, r5
 801a4c0:	4630      	mov	r0, r6
 801a4c2:	f7ff fd11 	bl	8019ee8 <_Balloc>
 801a4c6:	4602      	mov	r2, r0
 801a4c8:	b928      	cbnz	r0, 801a4d6 <__mdiff+0x2e>
 801a4ca:	4b3f      	ldr	r3, [pc, #252]	@ (801a5c8 <__mdiff+0x120>)
 801a4cc:	f240 2137 	movw	r1, #567	@ 0x237
 801a4d0:	483e      	ldr	r0, [pc, #248]	@ (801a5cc <__mdiff+0x124>)
 801a4d2:	f7fe fa53 	bl	801897c <__assert_func>
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a4dc:	4610      	mov	r0, r2
 801a4de:	b003      	add	sp, #12
 801a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4e4:	bfbc      	itt	lt
 801a4e6:	464b      	movlt	r3, r9
 801a4e8:	46a1      	movlt	r9, r4
 801a4ea:	4630      	mov	r0, r6
 801a4ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a4f0:	bfba      	itte	lt
 801a4f2:	461c      	movlt	r4, r3
 801a4f4:	2501      	movlt	r5, #1
 801a4f6:	2500      	movge	r5, #0
 801a4f8:	f7ff fcf6 	bl	8019ee8 <_Balloc>
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	b918      	cbnz	r0, 801a508 <__mdiff+0x60>
 801a500:	4b31      	ldr	r3, [pc, #196]	@ (801a5c8 <__mdiff+0x120>)
 801a502:	f240 2145 	movw	r1, #581	@ 0x245
 801a506:	e7e3      	b.n	801a4d0 <__mdiff+0x28>
 801a508:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a50c:	6926      	ldr	r6, [r4, #16]
 801a50e:	60c5      	str	r5, [r0, #12]
 801a510:	f109 0310 	add.w	r3, r9, #16
 801a514:	f109 0514 	add.w	r5, r9, #20
 801a518:	f104 0e14 	add.w	lr, r4, #20
 801a51c:	f100 0b14 	add.w	fp, r0, #20
 801a520:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a524:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a528:	9301      	str	r3, [sp, #4]
 801a52a:	46d9      	mov	r9, fp
 801a52c:	f04f 0c00 	mov.w	ip, #0
 801a530:	9b01      	ldr	r3, [sp, #4]
 801a532:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a536:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a53a:	9301      	str	r3, [sp, #4]
 801a53c:	fa1f f38a 	uxth.w	r3, sl
 801a540:	4619      	mov	r1, r3
 801a542:	b283      	uxth	r3, r0
 801a544:	1acb      	subs	r3, r1, r3
 801a546:	0c00      	lsrs	r0, r0, #16
 801a548:	4463      	add	r3, ip
 801a54a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a54e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a552:	b29b      	uxth	r3, r3
 801a554:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a558:	4576      	cmp	r6, lr
 801a55a:	f849 3b04 	str.w	r3, [r9], #4
 801a55e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a562:	d8e5      	bhi.n	801a530 <__mdiff+0x88>
 801a564:	1b33      	subs	r3, r6, r4
 801a566:	3b15      	subs	r3, #21
 801a568:	f023 0303 	bic.w	r3, r3, #3
 801a56c:	3415      	adds	r4, #21
 801a56e:	3304      	adds	r3, #4
 801a570:	42a6      	cmp	r6, r4
 801a572:	bf38      	it	cc
 801a574:	2304      	movcc	r3, #4
 801a576:	441d      	add	r5, r3
 801a578:	445b      	add	r3, fp
 801a57a:	461e      	mov	r6, r3
 801a57c:	462c      	mov	r4, r5
 801a57e:	4544      	cmp	r4, r8
 801a580:	d30e      	bcc.n	801a5a0 <__mdiff+0xf8>
 801a582:	f108 0103 	add.w	r1, r8, #3
 801a586:	1b49      	subs	r1, r1, r5
 801a588:	f021 0103 	bic.w	r1, r1, #3
 801a58c:	3d03      	subs	r5, #3
 801a58e:	45a8      	cmp	r8, r5
 801a590:	bf38      	it	cc
 801a592:	2100      	movcc	r1, #0
 801a594:	440b      	add	r3, r1
 801a596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a59a:	b191      	cbz	r1, 801a5c2 <__mdiff+0x11a>
 801a59c:	6117      	str	r7, [r2, #16]
 801a59e:	e79d      	b.n	801a4dc <__mdiff+0x34>
 801a5a0:	f854 1b04 	ldr.w	r1, [r4], #4
 801a5a4:	46e6      	mov	lr, ip
 801a5a6:	0c08      	lsrs	r0, r1, #16
 801a5a8:	fa1c fc81 	uxtah	ip, ip, r1
 801a5ac:	4471      	add	r1, lr
 801a5ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a5b2:	b289      	uxth	r1, r1
 801a5b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a5b8:	f846 1b04 	str.w	r1, [r6], #4
 801a5bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a5c0:	e7dd      	b.n	801a57e <__mdiff+0xd6>
 801a5c2:	3f01      	subs	r7, #1
 801a5c4:	e7e7      	b.n	801a596 <__mdiff+0xee>
 801a5c6:	bf00      	nop
 801a5c8:	0801e7d0 	.word	0x0801e7d0
 801a5cc:	0801e841 	.word	0x0801e841

0801a5d0 <__ulp>:
 801a5d0:	b082      	sub	sp, #8
 801a5d2:	ed8d 0b00 	vstr	d0, [sp]
 801a5d6:	9a01      	ldr	r2, [sp, #4]
 801a5d8:	4b0f      	ldr	r3, [pc, #60]	@ (801a618 <__ulp+0x48>)
 801a5da:	4013      	ands	r3, r2
 801a5dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	dc08      	bgt.n	801a5f6 <__ulp+0x26>
 801a5e4:	425b      	negs	r3, r3
 801a5e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801a5ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a5ee:	da04      	bge.n	801a5fa <__ulp+0x2a>
 801a5f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801a5f4:	4113      	asrs	r3, r2
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	e008      	b.n	801a60c <__ulp+0x3c>
 801a5fa:	f1a2 0314 	sub.w	r3, r2, #20
 801a5fe:	2b1e      	cmp	r3, #30
 801a600:	bfda      	itte	le
 801a602:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801a606:	40da      	lsrle	r2, r3
 801a608:	2201      	movgt	r2, #1
 801a60a:	2300      	movs	r3, #0
 801a60c:	4619      	mov	r1, r3
 801a60e:	4610      	mov	r0, r2
 801a610:	ec41 0b10 	vmov	d0, r0, r1
 801a614:	b002      	add	sp, #8
 801a616:	4770      	bx	lr
 801a618:	7ff00000 	.word	0x7ff00000

0801a61c <__b2d>:
 801a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a620:	6906      	ldr	r6, [r0, #16]
 801a622:	f100 0814 	add.w	r8, r0, #20
 801a626:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a62a:	1f37      	subs	r7, r6, #4
 801a62c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a630:	4610      	mov	r0, r2
 801a632:	f7ff fd4b 	bl	801a0cc <__hi0bits>
 801a636:	f1c0 0320 	rsb	r3, r0, #32
 801a63a:	280a      	cmp	r0, #10
 801a63c:	600b      	str	r3, [r1, #0]
 801a63e:	491b      	ldr	r1, [pc, #108]	@ (801a6ac <__b2d+0x90>)
 801a640:	dc15      	bgt.n	801a66e <__b2d+0x52>
 801a642:	f1c0 0c0b 	rsb	ip, r0, #11
 801a646:	fa22 f30c 	lsr.w	r3, r2, ip
 801a64a:	45b8      	cmp	r8, r7
 801a64c:	ea43 0501 	orr.w	r5, r3, r1
 801a650:	bf34      	ite	cc
 801a652:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a656:	2300      	movcs	r3, #0
 801a658:	3015      	adds	r0, #21
 801a65a:	fa02 f000 	lsl.w	r0, r2, r0
 801a65e:	fa23 f30c 	lsr.w	r3, r3, ip
 801a662:	4303      	orrs	r3, r0
 801a664:	461c      	mov	r4, r3
 801a666:	ec45 4b10 	vmov	d0, r4, r5
 801a66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a66e:	45b8      	cmp	r8, r7
 801a670:	bf3a      	itte	cc
 801a672:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a676:	f1a6 0708 	subcc.w	r7, r6, #8
 801a67a:	2300      	movcs	r3, #0
 801a67c:	380b      	subs	r0, #11
 801a67e:	d012      	beq.n	801a6a6 <__b2d+0x8a>
 801a680:	f1c0 0120 	rsb	r1, r0, #32
 801a684:	fa23 f401 	lsr.w	r4, r3, r1
 801a688:	4082      	lsls	r2, r0
 801a68a:	4322      	orrs	r2, r4
 801a68c:	4547      	cmp	r7, r8
 801a68e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801a692:	bf8c      	ite	hi
 801a694:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a698:	2200      	movls	r2, #0
 801a69a:	4083      	lsls	r3, r0
 801a69c:	40ca      	lsrs	r2, r1
 801a69e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a6a2:	4313      	orrs	r3, r2
 801a6a4:	e7de      	b.n	801a664 <__b2d+0x48>
 801a6a6:	ea42 0501 	orr.w	r5, r2, r1
 801a6aa:	e7db      	b.n	801a664 <__b2d+0x48>
 801a6ac:	3ff00000 	.word	0x3ff00000

0801a6b0 <__d2b>:
 801a6b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a6b4:	460f      	mov	r7, r1
 801a6b6:	2101      	movs	r1, #1
 801a6b8:	ec59 8b10 	vmov	r8, r9, d0
 801a6bc:	4616      	mov	r6, r2
 801a6be:	f7ff fc13 	bl	8019ee8 <_Balloc>
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	b930      	cbnz	r0, 801a6d4 <__d2b+0x24>
 801a6c6:	4602      	mov	r2, r0
 801a6c8:	4b23      	ldr	r3, [pc, #140]	@ (801a758 <__d2b+0xa8>)
 801a6ca:	4824      	ldr	r0, [pc, #144]	@ (801a75c <__d2b+0xac>)
 801a6cc:	f240 310f 	movw	r1, #783	@ 0x30f
 801a6d0:	f7fe f954 	bl	801897c <__assert_func>
 801a6d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a6d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a6dc:	b10d      	cbz	r5, 801a6e2 <__d2b+0x32>
 801a6de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a6e2:	9301      	str	r3, [sp, #4]
 801a6e4:	f1b8 0300 	subs.w	r3, r8, #0
 801a6e8:	d023      	beq.n	801a732 <__d2b+0x82>
 801a6ea:	4668      	mov	r0, sp
 801a6ec:	9300      	str	r3, [sp, #0]
 801a6ee:	f7ff fd0c 	bl	801a10a <__lo0bits>
 801a6f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a6f6:	b1d0      	cbz	r0, 801a72e <__d2b+0x7e>
 801a6f8:	f1c0 0320 	rsb	r3, r0, #32
 801a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 801a700:	430b      	orrs	r3, r1
 801a702:	40c2      	lsrs	r2, r0
 801a704:	6163      	str	r3, [r4, #20]
 801a706:	9201      	str	r2, [sp, #4]
 801a708:	9b01      	ldr	r3, [sp, #4]
 801a70a:	61a3      	str	r3, [r4, #24]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	bf0c      	ite	eq
 801a710:	2201      	moveq	r2, #1
 801a712:	2202      	movne	r2, #2
 801a714:	6122      	str	r2, [r4, #16]
 801a716:	b1a5      	cbz	r5, 801a742 <__d2b+0x92>
 801a718:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a71c:	4405      	add	r5, r0
 801a71e:	603d      	str	r5, [r7, #0]
 801a720:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a724:	6030      	str	r0, [r6, #0]
 801a726:	4620      	mov	r0, r4
 801a728:	b003      	add	sp, #12
 801a72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a72e:	6161      	str	r1, [r4, #20]
 801a730:	e7ea      	b.n	801a708 <__d2b+0x58>
 801a732:	a801      	add	r0, sp, #4
 801a734:	f7ff fce9 	bl	801a10a <__lo0bits>
 801a738:	9b01      	ldr	r3, [sp, #4]
 801a73a:	6163      	str	r3, [r4, #20]
 801a73c:	3020      	adds	r0, #32
 801a73e:	2201      	movs	r2, #1
 801a740:	e7e8      	b.n	801a714 <__d2b+0x64>
 801a742:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a746:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a74a:	6038      	str	r0, [r7, #0]
 801a74c:	6918      	ldr	r0, [r3, #16]
 801a74e:	f7ff fcbd 	bl	801a0cc <__hi0bits>
 801a752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a756:	e7e5      	b.n	801a724 <__d2b+0x74>
 801a758:	0801e7d0 	.word	0x0801e7d0
 801a75c:	0801e841 	.word	0x0801e841

0801a760 <__ratio>:
 801a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a764:	b085      	sub	sp, #20
 801a766:	e9cd 1000 	strd	r1, r0, [sp]
 801a76a:	a902      	add	r1, sp, #8
 801a76c:	f7ff ff56 	bl	801a61c <__b2d>
 801a770:	9800      	ldr	r0, [sp, #0]
 801a772:	a903      	add	r1, sp, #12
 801a774:	ec55 4b10 	vmov	r4, r5, d0
 801a778:	f7ff ff50 	bl	801a61c <__b2d>
 801a77c:	9b01      	ldr	r3, [sp, #4]
 801a77e:	6919      	ldr	r1, [r3, #16]
 801a780:	9b00      	ldr	r3, [sp, #0]
 801a782:	691b      	ldr	r3, [r3, #16]
 801a784:	1ac9      	subs	r1, r1, r3
 801a786:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801a78a:	1a9b      	subs	r3, r3, r2
 801a78c:	ec5b ab10 	vmov	sl, fp, d0
 801a790:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a794:	2b00      	cmp	r3, #0
 801a796:	bfce      	itee	gt
 801a798:	462a      	movgt	r2, r5
 801a79a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a79e:	465a      	movle	r2, fp
 801a7a0:	462f      	mov	r7, r5
 801a7a2:	46d9      	mov	r9, fp
 801a7a4:	bfcc      	ite	gt
 801a7a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a7aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801a7ae:	464b      	mov	r3, r9
 801a7b0:	4652      	mov	r2, sl
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	4639      	mov	r1, r7
 801a7b6:	f7e6 f859 	bl	800086c <__aeabi_ddiv>
 801a7ba:	ec41 0b10 	vmov	d0, r0, r1
 801a7be:	b005      	add	sp, #20
 801a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7c4 <__copybits>:
 801a7c4:	3901      	subs	r1, #1
 801a7c6:	b570      	push	{r4, r5, r6, lr}
 801a7c8:	1149      	asrs	r1, r1, #5
 801a7ca:	6914      	ldr	r4, [r2, #16]
 801a7cc:	3101      	adds	r1, #1
 801a7ce:	f102 0314 	add.w	r3, r2, #20
 801a7d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a7d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a7da:	1f05      	subs	r5, r0, #4
 801a7dc:	42a3      	cmp	r3, r4
 801a7de:	d30c      	bcc.n	801a7fa <__copybits+0x36>
 801a7e0:	1aa3      	subs	r3, r4, r2
 801a7e2:	3b11      	subs	r3, #17
 801a7e4:	f023 0303 	bic.w	r3, r3, #3
 801a7e8:	3211      	adds	r2, #17
 801a7ea:	42a2      	cmp	r2, r4
 801a7ec:	bf88      	it	hi
 801a7ee:	2300      	movhi	r3, #0
 801a7f0:	4418      	add	r0, r3
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	4288      	cmp	r0, r1
 801a7f6:	d305      	bcc.n	801a804 <__copybits+0x40>
 801a7f8:	bd70      	pop	{r4, r5, r6, pc}
 801a7fa:	f853 6b04 	ldr.w	r6, [r3], #4
 801a7fe:	f845 6f04 	str.w	r6, [r5, #4]!
 801a802:	e7eb      	b.n	801a7dc <__copybits+0x18>
 801a804:	f840 3b04 	str.w	r3, [r0], #4
 801a808:	e7f4      	b.n	801a7f4 <__copybits+0x30>

0801a80a <__any_on>:
 801a80a:	f100 0214 	add.w	r2, r0, #20
 801a80e:	6900      	ldr	r0, [r0, #16]
 801a810:	114b      	asrs	r3, r1, #5
 801a812:	4298      	cmp	r0, r3
 801a814:	b510      	push	{r4, lr}
 801a816:	db11      	blt.n	801a83c <__any_on+0x32>
 801a818:	dd0a      	ble.n	801a830 <__any_on+0x26>
 801a81a:	f011 011f 	ands.w	r1, r1, #31
 801a81e:	d007      	beq.n	801a830 <__any_on+0x26>
 801a820:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a824:	fa24 f001 	lsr.w	r0, r4, r1
 801a828:	fa00 f101 	lsl.w	r1, r0, r1
 801a82c:	428c      	cmp	r4, r1
 801a82e:	d10b      	bne.n	801a848 <__any_on+0x3e>
 801a830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a834:	4293      	cmp	r3, r2
 801a836:	d803      	bhi.n	801a840 <__any_on+0x36>
 801a838:	2000      	movs	r0, #0
 801a83a:	bd10      	pop	{r4, pc}
 801a83c:	4603      	mov	r3, r0
 801a83e:	e7f7      	b.n	801a830 <__any_on+0x26>
 801a840:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a844:	2900      	cmp	r1, #0
 801a846:	d0f5      	beq.n	801a834 <__any_on+0x2a>
 801a848:	2001      	movs	r0, #1
 801a84a:	e7f6      	b.n	801a83a <__any_on+0x30>

0801a84c <__ascii_wctomb>:
 801a84c:	4603      	mov	r3, r0
 801a84e:	4608      	mov	r0, r1
 801a850:	b141      	cbz	r1, 801a864 <__ascii_wctomb+0x18>
 801a852:	2aff      	cmp	r2, #255	@ 0xff
 801a854:	d904      	bls.n	801a860 <__ascii_wctomb+0x14>
 801a856:	228a      	movs	r2, #138	@ 0x8a
 801a858:	601a      	str	r2, [r3, #0]
 801a85a:	f04f 30ff 	mov.w	r0, #4294967295
 801a85e:	4770      	bx	lr
 801a860:	700a      	strb	r2, [r1, #0]
 801a862:	2001      	movs	r0, #1
 801a864:	4770      	bx	lr

0801a866 <__ssputs_r>:
 801a866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a86a:	688e      	ldr	r6, [r1, #8]
 801a86c:	461f      	mov	r7, r3
 801a86e:	42be      	cmp	r6, r7
 801a870:	680b      	ldr	r3, [r1, #0]
 801a872:	4682      	mov	sl, r0
 801a874:	460c      	mov	r4, r1
 801a876:	4690      	mov	r8, r2
 801a878:	d82d      	bhi.n	801a8d6 <__ssputs_r+0x70>
 801a87a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a87e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a882:	d026      	beq.n	801a8d2 <__ssputs_r+0x6c>
 801a884:	6965      	ldr	r5, [r4, #20]
 801a886:	6909      	ldr	r1, [r1, #16]
 801a888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a88c:	eba3 0901 	sub.w	r9, r3, r1
 801a890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a894:	1c7b      	adds	r3, r7, #1
 801a896:	444b      	add	r3, r9
 801a898:	106d      	asrs	r5, r5, #1
 801a89a:	429d      	cmp	r5, r3
 801a89c:	bf38      	it	cc
 801a89e:	461d      	movcc	r5, r3
 801a8a0:	0553      	lsls	r3, r2, #21
 801a8a2:	d527      	bpl.n	801a8f4 <__ssputs_r+0x8e>
 801a8a4:	4629      	mov	r1, r5
 801a8a6:	f7ff fa81 	bl	8019dac <_malloc_r>
 801a8aa:	4606      	mov	r6, r0
 801a8ac:	b360      	cbz	r0, 801a908 <__ssputs_r+0xa2>
 801a8ae:	6921      	ldr	r1, [r4, #16]
 801a8b0:	464a      	mov	r2, r9
 801a8b2:	f7fe f846 	bl	8018942 <memcpy>
 801a8b6:	89a3      	ldrh	r3, [r4, #12]
 801a8b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a8bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a8c0:	81a3      	strh	r3, [r4, #12]
 801a8c2:	6126      	str	r6, [r4, #16]
 801a8c4:	6165      	str	r5, [r4, #20]
 801a8c6:	444e      	add	r6, r9
 801a8c8:	eba5 0509 	sub.w	r5, r5, r9
 801a8cc:	6026      	str	r6, [r4, #0]
 801a8ce:	60a5      	str	r5, [r4, #8]
 801a8d0:	463e      	mov	r6, r7
 801a8d2:	42be      	cmp	r6, r7
 801a8d4:	d900      	bls.n	801a8d8 <__ssputs_r+0x72>
 801a8d6:	463e      	mov	r6, r7
 801a8d8:	6820      	ldr	r0, [r4, #0]
 801a8da:	4632      	mov	r2, r6
 801a8dc:	4641      	mov	r1, r8
 801a8de:	f7fd ff15 	bl	801870c <memmove>
 801a8e2:	68a3      	ldr	r3, [r4, #8]
 801a8e4:	1b9b      	subs	r3, r3, r6
 801a8e6:	60a3      	str	r3, [r4, #8]
 801a8e8:	6823      	ldr	r3, [r4, #0]
 801a8ea:	4433      	add	r3, r6
 801a8ec:	6023      	str	r3, [r4, #0]
 801a8ee:	2000      	movs	r0, #0
 801a8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8f4:	462a      	mov	r2, r5
 801a8f6:	f000 fbf0 	bl	801b0da <_realloc_r>
 801a8fa:	4606      	mov	r6, r0
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	d1e0      	bne.n	801a8c2 <__ssputs_r+0x5c>
 801a900:	6921      	ldr	r1, [r4, #16]
 801a902:	4650      	mov	r0, sl
 801a904:	f7fe fea4 	bl	8019650 <_free_r>
 801a908:	230c      	movs	r3, #12
 801a90a:	f8ca 3000 	str.w	r3, [sl]
 801a90e:	89a3      	ldrh	r3, [r4, #12]
 801a910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a914:	81a3      	strh	r3, [r4, #12]
 801a916:	f04f 30ff 	mov.w	r0, #4294967295
 801a91a:	e7e9      	b.n	801a8f0 <__ssputs_r+0x8a>

0801a91c <_svfiprintf_r>:
 801a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a920:	4698      	mov	r8, r3
 801a922:	898b      	ldrh	r3, [r1, #12]
 801a924:	061b      	lsls	r3, r3, #24
 801a926:	b09d      	sub	sp, #116	@ 0x74
 801a928:	4607      	mov	r7, r0
 801a92a:	460d      	mov	r5, r1
 801a92c:	4614      	mov	r4, r2
 801a92e:	d510      	bpl.n	801a952 <_svfiprintf_r+0x36>
 801a930:	690b      	ldr	r3, [r1, #16]
 801a932:	b973      	cbnz	r3, 801a952 <_svfiprintf_r+0x36>
 801a934:	2140      	movs	r1, #64	@ 0x40
 801a936:	f7ff fa39 	bl	8019dac <_malloc_r>
 801a93a:	6028      	str	r0, [r5, #0]
 801a93c:	6128      	str	r0, [r5, #16]
 801a93e:	b930      	cbnz	r0, 801a94e <_svfiprintf_r+0x32>
 801a940:	230c      	movs	r3, #12
 801a942:	603b      	str	r3, [r7, #0]
 801a944:	f04f 30ff 	mov.w	r0, #4294967295
 801a948:	b01d      	add	sp, #116	@ 0x74
 801a94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a94e:	2340      	movs	r3, #64	@ 0x40
 801a950:	616b      	str	r3, [r5, #20]
 801a952:	2300      	movs	r3, #0
 801a954:	9309      	str	r3, [sp, #36]	@ 0x24
 801a956:	2320      	movs	r3, #32
 801a958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a95c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a960:	2330      	movs	r3, #48	@ 0x30
 801a962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ab00 <_svfiprintf_r+0x1e4>
 801a966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a96a:	f04f 0901 	mov.w	r9, #1
 801a96e:	4623      	mov	r3, r4
 801a970:	469a      	mov	sl, r3
 801a972:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a976:	b10a      	cbz	r2, 801a97c <_svfiprintf_r+0x60>
 801a978:	2a25      	cmp	r2, #37	@ 0x25
 801a97a:	d1f9      	bne.n	801a970 <_svfiprintf_r+0x54>
 801a97c:	ebba 0b04 	subs.w	fp, sl, r4
 801a980:	d00b      	beq.n	801a99a <_svfiprintf_r+0x7e>
 801a982:	465b      	mov	r3, fp
 801a984:	4622      	mov	r2, r4
 801a986:	4629      	mov	r1, r5
 801a988:	4638      	mov	r0, r7
 801a98a:	f7ff ff6c 	bl	801a866 <__ssputs_r>
 801a98e:	3001      	adds	r0, #1
 801a990:	f000 80a7 	beq.w	801aae2 <_svfiprintf_r+0x1c6>
 801a994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a996:	445a      	add	r2, fp
 801a998:	9209      	str	r2, [sp, #36]	@ 0x24
 801a99a:	f89a 3000 	ldrb.w	r3, [sl]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	f000 809f 	beq.w	801aae2 <_svfiprintf_r+0x1c6>
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	f04f 32ff 	mov.w	r2, #4294967295
 801a9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9ae:	f10a 0a01 	add.w	sl, sl, #1
 801a9b2:	9304      	str	r3, [sp, #16]
 801a9b4:	9307      	str	r3, [sp, #28]
 801a9b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a9ba:	931a      	str	r3, [sp, #104]	@ 0x68
 801a9bc:	4654      	mov	r4, sl
 801a9be:	2205      	movs	r2, #5
 801a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9c4:	484e      	ldr	r0, [pc, #312]	@ (801ab00 <_svfiprintf_r+0x1e4>)
 801a9c6:	f7e5 fc13 	bl	80001f0 <memchr>
 801a9ca:	9a04      	ldr	r2, [sp, #16]
 801a9cc:	b9d8      	cbnz	r0, 801aa06 <_svfiprintf_r+0xea>
 801a9ce:	06d0      	lsls	r0, r2, #27
 801a9d0:	bf44      	itt	mi
 801a9d2:	2320      	movmi	r3, #32
 801a9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9d8:	0711      	lsls	r1, r2, #28
 801a9da:	bf44      	itt	mi
 801a9dc:	232b      	movmi	r3, #43	@ 0x2b
 801a9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9e2:	f89a 3000 	ldrb.w	r3, [sl]
 801a9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9e8:	d015      	beq.n	801aa16 <_svfiprintf_r+0xfa>
 801a9ea:	9a07      	ldr	r2, [sp, #28]
 801a9ec:	4654      	mov	r4, sl
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	f04f 0c0a 	mov.w	ip, #10
 801a9f4:	4621      	mov	r1, r4
 801a9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9fa:	3b30      	subs	r3, #48	@ 0x30
 801a9fc:	2b09      	cmp	r3, #9
 801a9fe:	d94b      	bls.n	801aa98 <_svfiprintf_r+0x17c>
 801aa00:	b1b0      	cbz	r0, 801aa30 <_svfiprintf_r+0x114>
 801aa02:	9207      	str	r2, [sp, #28]
 801aa04:	e014      	b.n	801aa30 <_svfiprintf_r+0x114>
 801aa06:	eba0 0308 	sub.w	r3, r0, r8
 801aa0a:	fa09 f303 	lsl.w	r3, r9, r3
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	9304      	str	r3, [sp, #16]
 801aa12:	46a2      	mov	sl, r4
 801aa14:	e7d2      	b.n	801a9bc <_svfiprintf_r+0xa0>
 801aa16:	9b03      	ldr	r3, [sp, #12]
 801aa18:	1d19      	adds	r1, r3, #4
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	9103      	str	r1, [sp, #12]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	bfbb      	ittet	lt
 801aa22:	425b      	neglt	r3, r3
 801aa24:	f042 0202 	orrlt.w	r2, r2, #2
 801aa28:	9307      	strge	r3, [sp, #28]
 801aa2a:	9307      	strlt	r3, [sp, #28]
 801aa2c:	bfb8      	it	lt
 801aa2e:	9204      	strlt	r2, [sp, #16]
 801aa30:	7823      	ldrb	r3, [r4, #0]
 801aa32:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa34:	d10a      	bne.n	801aa4c <_svfiprintf_r+0x130>
 801aa36:	7863      	ldrb	r3, [r4, #1]
 801aa38:	2b2a      	cmp	r3, #42	@ 0x2a
 801aa3a:	d132      	bne.n	801aaa2 <_svfiprintf_r+0x186>
 801aa3c:	9b03      	ldr	r3, [sp, #12]
 801aa3e:	1d1a      	adds	r2, r3, #4
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	9203      	str	r2, [sp, #12]
 801aa44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aa48:	3402      	adds	r4, #2
 801aa4a:	9305      	str	r3, [sp, #20]
 801aa4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ab10 <_svfiprintf_r+0x1f4>
 801aa50:	7821      	ldrb	r1, [r4, #0]
 801aa52:	2203      	movs	r2, #3
 801aa54:	4650      	mov	r0, sl
 801aa56:	f7e5 fbcb 	bl	80001f0 <memchr>
 801aa5a:	b138      	cbz	r0, 801aa6c <_svfiprintf_r+0x150>
 801aa5c:	9b04      	ldr	r3, [sp, #16]
 801aa5e:	eba0 000a 	sub.w	r0, r0, sl
 801aa62:	2240      	movs	r2, #64	@ 0x40
 801aa64:	4082      	lsls	r2, r0
 801aa66:	4313      	orrs	r3, r2
 801aa68:	3401      	adds	r4, #1
 801aa6a:	9304      	str	r3, [sp, #16]
 801aa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa70:	4824      	ldr	r0, [pc, #144]	@ (801ab04 <_svfiprintf_r+0x1e8>)
 801aa72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aa76:	2206      	movs	r2, #6
 801aa78:	f7e5 fbba 	bl	80001f0 <memchr>
 801aa7c:	2800      	cmp	r0, #0
 801aa7e:	d036      	beq.n	801aaee <_svfiprintf_r+0x1d2>
 801aa80:	4b21      	ldr	r3, [pc, #132]	@ (801ab08 <_svfiprintf_r+0x1ec>)
 801aa82:	bb1b      	cbnz	r3, 801aacc <_svfiprintf_r+0x1b0>
 801aa84:	9b03      	ldr	r3, [sp, #12]
 801aa86:	3307      	adds	r3, #7
 801aa88:	f023 0307 	bic.w	r3, r3, #7
 801aa8c:	3308      	adds	r3, #8
 801aa8e:	9303      	str	r3, [sp, #12]
 801aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa92:	4433      	add	r3, r6
 801aa94:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa96:	e76a      	b.n	801a96e <_svfiprintf_r+0x52>
 801aa98:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa9c:	460c      	mov	r4, r1
 801aa9e:	2001      	movs	r0, #1
 801aaa0:	e7a8      	b.n	801a9f4 <_svfiprintf_r+0xd8>
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	3401      	adds	r4, #1
 801aaa6:	9305      	str	r3, [sp, #20]
 801aaa8:	4619      	mov	r1, r3
 801aaaa:	f04f 0c0a 	mov.w	ip, #10
 801aaae:	4620      	mov	r0, r4
 801aab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aab4:	3a30      	subs	r2, #48	@ 0x30
 801aab6:	2a09      	cmp	r2, #9
 801aab8:	d903      	bls.n	801aac2 <_svfiprintf_r+0x1a6>
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d0c6      	beq.n	801aa4c <_svfiprintf_r+0x130>
 801aabe:	9105      	str	r1, [sp, #20]
 801aac0:	e7c4      	b.n	801aa4c <_svfiprintf_r+0x130>
 801aac2:	fb0c 2101 	mla	r1, ip, r1, r2
 801aac6:	4604      	mov	r4, r0
 801aac8:	2301      	movs	r3, #1
 801aaca:	e7f0      	b.n	801aaae <_svfiprintf_r+0x192>
 801aacc:	ab03      	add	r3, sp, #12
 801aace:	9300      	str	r3, [sp, #0]
 801aad0:	462a      	mov	r2, r5
 801aad2:	4b0e      	ldr	r3, [pc, #56]	@ (801ab0c <_svfiprintf_r+0x1f0>)
 801aad4:	a904      	add	r1, sp, #16
 801aad6:	4638      	mov	r0, r7
 801aad8:	f7fc ff4e 	bl	8017978 <_printf_float>
 801aadc:	1c42      	adds	r2, r0, #1
 801aade:	4606      	mov	r6, r0
 801aae0:	d1d6      	bne.n	801aa90 <_svfiprintf_r+0x174>
 801aae2:	89ab      	ldrh	r3, [r5, #12]
 801aae4:	065b      	lsls	r3, r3, #25
 801aae6:	f53f af2d 	bmi.w	801a944 <_svfiprintf_r+0x28>
 801aaea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aaec:	e72c      	b.n	801a948 <_svfiprintf_r+0x2c>
 801aaee:	ab03      	add	r3, sp, #12
 801aaf0:	9300      	str	r3, [sp, #0]
 801aaf2:	462a      	mov	r2, r5
 801aaf4:	4b05      	ldr	r3, [pc, #20]	@ (801ab0c <_svfiprintf_r+0x1f0>)
 801aaf6:	a904      	add	r1, sp, #16
 801aaf8:	4638      	mov	r0, r7
 801aafa:	f7fd f9d5 	bl	8017ea8 <_printf_i>
 801aafe:	e7ed      	b.n	801aadc <_svfiprintf_r+0x1c0>
 801ab00:	0801e998 	.word	0x0801e998
 801ab04:	0801e9a2 	.word	0x0801e9a2
 801ab08:	08017979 	.word	0x08017979
 801ab0c:	0801a867 	.word	0x0801a867
 801ab10:	0801e99e 	.word	0x0801e99e

0801ab14 <__sfputc_r>:
 801ab14:	6893      	ldr	r3, [r2, #8]
 801ab16:	3b01      	subs	r3, #1
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	b410      	push	{r4}
 801ab1c:	6093      	str	r3, [r2, #8]
 801ab1e:	da08      	bge.n	801ab32 <__sfputc_r+0x1e>
 801ab20:	6994      	ldr	r4, [r2, #24]
 801ab22:	42a3      	cmp	r3, r4
 801ab24:	db01      	blt.n	801ab2a <__sfputc_r+0x16>
 801ab26:	290a      	cmp	r1, #10
 801ab28:	d103      	bne.n	801ab32 <__sfputc_r+0x1e>
 801ab2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab2e:	f7fd bd48 	b.w	80185c2 <__swbuf_r>
 801ab32:	6813      	ldr	r3, [r2, #0]
 801ab34:	1c58      	adds	r0, r3, #1
 801ab36:	6010      	str	r0, [r2, #0]
 801ab38:	7019      	strb	r1, [r3, #0]
 801ab3a:	4608      	mov	r0, r1
 801ab3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab40:	4770      	bx	lr

0801ab42 <__sfputs_r>:
 801ab42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab44:	4606      	mov	r6, r0
 801ab46:	460f      	mov	r7, r1
 801ab48:	4614      	mov	r4, r2
 801ab4a:	18d5      	adds	r5, r2, r3
 801ab4c:	42ac      	cmp	r4, r5
 801ab4e:	d101      	bne.n	801ab54 <__sfputs_r+0x12>
 801ab50:	2000      	movs	r0, #0
 801ab52:	e007      	b.n	801ab64 <__sfputs_r+0x22>
 801ab54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab58:	463a      	mov	r2, r7
 801ab5a:	4630      	mov	r0, r6
 801ab5c:	f7ff ffda 	bl	801ab14 <__sfputc_r>
 801ab60:	1c43      	adds	r3, r0, #1
 801ab62:	d1f3      	bne.n	801ab4c <__sfputs_r+0xa>
 801ab64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab68 <_vfiprintf_r>:
 801ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab6c:	460d      	mov	r5, r1
 801ab6e:	b09d      	sub	sp, #116	@ 0x74
 801ab70:	4614      	mov	r4, r2
 801ab72:	4698      	mov	r8, r3
 801ab74:	4606      	mov	r6, r0
 801ab76:	b118      	cbz	r0, 801ab80 <_vfiprintf_r+0x18>
 801ab78:	6a03      	ldr	r3, [r0, #32]
 801ab7a:	b90b      	cbnz	r3, 801ab80 <_vfiprintf_r+0x18>
 801ab7c:	f7fd fb40 	bl	8018200 <__sinit>
 801ab80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab82:	07d9      	lsls	r1, r3, #31
 801ab84:	d405      	bmi.n	801ab92 <_vfiprintf_r+0x2a>
 801ab86:	89ab      	ldrh	r3, [r5, #12]
 801ab88:	059a      	lsls	r2, r3, #22
 801ab8a:	d402      	bmi.n	801ab92 <_vfiprintf_r+0x2a>
 801ab8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab8e:	f7fd fed6 	bl	801893e <__retarget_lock_acquire_recursive>
 801ab92:	89ab      	ldrh	r3, [r5, #12]
 801ab94:	071b      	lsls	r3, r3, #28
 801ab96:	d501      	bpl.n	801ab9c <_vfiprintf_r+0x34>
 801ab98:	692b      	ldr	r3, [r5, #16]
 801ab9a:	b99b      	cbnz	r3, 801abc4 <_vfiprintf_r+0x5c>
 801ab9c:	4629      	mov	r1, r5
 801ab9e:	4630      	mov	r0, r6
 801aba0:	f7fd fd4e 	bl	8018640 <__swsetup_r>
 801aba4:	b170      	cbz	r0, 801abc4 <_vfiprintf_r+0x5c>
 801aba6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aba8:	07dc      	lsls	r4, r3, #31
 801abaa:	d504      	bpl.n	801abb6 <_vfiprintf_r+0x4e>
 801abac:	f04f 30ff 	mov.w	r0, #4294967295
 801abb0:	b01d      	add	sp, #116	@ 0x74
 801abb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abb6:	89ab      	ldrh	r3, [r5, #12]
 801abb8:	0598      	lsls	r0, r3, #22
 801abba:	d4f7      	bmi.n	801abac <_vfiprintf_r+0x44>
 801abbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801abbe:	f7fd febf 	bl	8018940 <__retarget_lock_release_recursive>
 801abc2:	e7f3      	b.n	801abac <_vfiprintf_r+0x44>
 801abc4:	2300      	movs	r3, #0
 801abc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801abc8:	2320      	movs	r3, #32
 801abca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801abce:	f8cd 800c 	str.w	r8, [sp, #12]
 801abd2:	2330      	movs	r3, #48	@ 0x30
 801abd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ad84 <_vfiprintf_r+0x21c>
 801abd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801abdc:	f04f 0901 	mov.w	r9, #1
 801abe0:	4623      	mov	r3, r4
 801abe2:	469a      	mov	sl, r3
 801abe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abe8:	b10a      	cbz	r2, 801abee <_vfiprintf_r+0x86>
 801abea:	2a25      	cmp	r2, #37	@ 0x25
 801abec:	d1f9      	bne.n	801abe2 <_vfiprintf_r+0x7a>
 801abee:	ebba 0b04 	subs.w	fp, sl, r4
 801abf2:	d00b      	beq.n	801ac0c <_vfiprintf_r+0xa4>
 801abf4:	465b      	mov	r3, fp
 801abf6:	4622      	mov	r2, r4
 801abf8:	4629      	mov	r1, r5
 801abfa:	4630      	mov	r0, r6
 801abfc:	f7ff ffa1 	bl	801ab42 <__sfputs_r>
 801ac00:	3001      	adds	r0, #1
 801ac02:	f000 80a7 	beq.w	801ad54 <_vfiprintf_r+0x1ec>
 801ac06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac08:	445a      	add	r2, fp
 801ac0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f000 809f 	beq.w	801ad54 <_vfiprintf_r+0x1ec>
 801ac16:	2300      	movs	r3, #0
 801ac18:	f04f 32ff 	mov.w	r2, #4294967295
 801ac1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac20:	f10a 0a01 	add.w	sl, sl, #1
 801ac24:	9304      	str	r3, [sp, #16]
 801ac26:	9307      	str	r3, [sp, #28]
 801ac28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac2c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac2e:	4654      	mov	r4, sl
 801ac30:	2205      	movs	r2, #5
 801ac32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac36:	4853      	ldr	r0, [pc, #332]	@ (801ad84 <_vfiprintf_r+0x21c>)
 801ac38:	f7e5 fada 	bl	80001f0 <memchr>
 801ac3c:	9a04      	ldr	r2, [sp, #16]
 801ac3e:	b9d8      	cbnz	r0, 801ac78 <_vfiprintf_r+0x110>
 801ac40:	06d1      	lsls	r1, r2, #27
 801ac42:	bf44      	itt	mi
 801ac44:	2320      	movmi	r3, #32
 801ac46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac4a:	0713      	lsls	r3, r2, #28
 801ac4c:	bf44      	itt	mi
 801ac4e:	232b      	movmi	r3, #43	@ 0x2b
 801ac50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac54:	f89a 3000 	ldrb.w	r3, [sl]
 801ac58:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac5a:	d015      	beq.n	801ac88 <_vfiprintf_r+0x120>
 801ac5c:	9a07      	ldr	r2, [sp, #28]
 801ac5e:	4654      	mov	r4, sl
 801ac60:	2000      	movs	r0, #0
 801ac62:	f04f 0c0a 	mov.w	ip, #10
 801ac66:	4621      	mov	r1, r4
 801ac68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac6c:	3b30      	subs	r3, #48	@ 0x30
 801ac6e:	2b09      	cmp	r3, #9
 801ac70:	d94b      	bls.n	801ad0a <_vfiprintf_r+0x1a2>
 801ac72:	b1b0      	cbz	r0, 801aca2 <_vfiprintf_r+0x13a>
 801ac74:	9207      	str	r2, [sp, #28]
 801ac76:	e014      	b.n	801aca2 <_vfiprintf_r+0x13a>
 801ac78:	eba0 0308 	sub.w	r3, r0, r8
 801ac7c:	fa09 f303 	lsl.w	r3, r9, r3
 801ac80:	4313      	orrs	r3, r2
 801ac82:	9304      	str	r3, [sp, #16]
 801ac84:	46a2      	mov	sl, r4
 801ac86:	e7d2      	b.n	801ac2e <_vfiprintf_r+0xc6>
 801ac88:	9b03      	ldr	r3, [sp, #12]
 801ac8a:	1d19      	adds	r1, r3, #4
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	9103      	str	r1, [sp, #12]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	bfbb      	ittet	lt
 801ac94:	425b      	neglt	r3, r3
 801ac96:	f042 0202 	orrlt.w	r2, r2, #2
 801ac9a:	9307      	strge	r3, [sp, #28]
 801ac9c:	9307      	strlt	r3, [sp, #28]
 801ac9e:	bfb8      	it	lt
 801aca0:	9204      	strlt	r2, [sp, #16]
 801aca2:	7823      	ldrb	r3, [r4, #0]
 801aca4:	2b2e      	cmp	r3, #46	@ 0x2e
 801aca6:	d10a      	bne.n	801acbe <_vfiprintf_r+0x156>
 801aca8:	7863      	ldrb	r3, [r4, #1]
 801acaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801acac:	d132      	bne.n	801ad14 <_vfiprintf_r+0x1ac>
 801acae:	9b03      	ldr	r3, [sp, #12]
 801acb0:	1d1a      	adds	r2, r3, #4
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	9203      	str	r2, [sp, #12]
 801acb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801acba:	3402      	adds	r4, #2
 801acbc:	9305      	str	r3, [sp, #20]
 801acbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ad94 <_vfiprintf_r+0x22c>
 801acc2:	7821      	ldrb	r1, [r4, #0]
 801acc4:	2203      	movs	r2, #3
 801acc6:	4650      	mov	r0, sl
 801acc8:	f7e5 fa92 	bl	80001f0 <memchr>
 801accc:	b138      	cbz	r0, 801acde <_vfiprintf_r+0x176>
 801acce:	9b04      	ldr	r3, [sp, #16]
 801acd0:	eba0 000a 	sub.w	r0, r0, sl
 801acd4:	2240      	movs	r2, #64	@ 0x40
 801acd6:	4082      	lsls	r2, r0
 801acd8:	4313      	orrs	r3, r2
 801acda:	3401      	adds	r4, #1
 801acdc:	9304      	str	r3, [sp, #16]
 801acde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ace2:	4829      	ldr	r0, [pc, #164]	@ (801ad88 <_vfiprintf_r+0x220>)
 801ace4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ace8:	2206      	movs	r2, #6
 801acea:	f7e5 fa81 	bl	80001f0 <memchr>
 801acee:	2800      	cmp	r0, #0
 801acf0:	d03f      	beq.n	801ad72 <_vfiprintf_r+0x20a>
 801acf2:	4b26      	ldr	r3, [pc, #152]	@ (801ad8c <_vfiprintf_r+0x224>)
 801acf4:	bb1b      	cbnz	r3, 801ad3e <_vfiprintf_r+0x1d6>
 801acf6:	9b03      	ldr	r3, [sp, #12]
 801acf8:	3307      	adds	r3, #7
 801acfa:	f023 0307 	bic.w	r3, r3, #7
 801acfe:	3308      	adds	r3, #8
 801ad00:	9303      	str	r3, [sp, #12]
 801ad02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad04:	443b      	add	r3, r7
 801ad06:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad08:	e76a      	b.n	801abe0 <_vfiprintf_r+0x78>
 801ad0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad0e:	460c      	mov	r4, r1
 801ad10:	2001      	movs	r0, #1
 801ad12:	e7a8      	b.n	801ac66 <_vfiprintf_r+0xfe>
 801ad14:	2300      	movs	r3, #0
 801ad16:	3401      	adds	r4, #1
 801ad18:	9305      	str	r3, [sp, #20]
 801ad1a:	4619      	mov	r1, r3
 801ad1c:	f04f 0c0a 	mov.w	ip, #10
 801ad20:	4620      	mov	r0, r4
 801ad22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad26:	3a30      	subs	r2, #48	@ 0x30
 801ad28:	2a09      	cmp	r2, #9
 801ad2a:	d903      	bls.n	801ad34 <_vfiprintf_r+0x1cc>
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d0c6      	beq.n	801acbe <_vfiprintf_r+0x156>
 801ad30:	9105      	str	r1, [sp, #20]
 801ad32:	e7c4      	b.n	801acbe <_vfiprintf_r+0x156>
 801ad34:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad38:	4604      	mov	r4, r0
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	e7f0      	b.n	801ad20 <_vfiprintf_r+0x1b8>
 801ad3e:	ab03      	add	r3, sp, #12
 801ad40:	9300      	str	r3, [sp, #0]
 801ad42:	462a      	mov	r2, r5
 801ad44:	4b12      	ldr	r3, [pc, #72]	@ (801ad90 <_vfiprintf_r+0x228>)
 801ad46:	a904      	add	r1, sp, #16
 801ad48:	4630      	mov	r0, r6
 801ad4a:	f7fc fe15 	bl	8017978 <_printf_float>
 801ad4e:	4607      	mov	r7, r0
 801ad50:	1c78      	adds	r0, r7, #1
 801ad52:	d1d6      	bne.n	801ad02 <_vfiprintf_r+0x19a>
 801ad54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad56:	07d9      	lsls	r1, r3, #31
 801ad58:	d405      	bmi.n	801ad66 <_vfiprintf_r+0x1fe>
 801ad5a:	89ab      	ldrh	r3, [r5, #12]
 801ad5c:	059a      	lsls	r2, r3, #22
 801ad5e:	d402      	bmi.n	801ad66 <_vfiprintf_r+0x1fe>
 801ad60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad62:	f7fd fded 	bl	8018940 <__retarget_lock_release_recursive>
 801ad66:	89ab      	ldrh	r3, [r5, #12]
 801ad68:	065b      	lsls	r3, r3, #25
 801ad6a:	f53f af1f 	bmi.w	801abac <_vfiprintf_r+0x44>
 801ad6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad70:	e71e      	b.n	801abb0 <_vfiprintf_r+0x48>
 801ad72:	ab03      	add	r3, sp, #12
 801ad74:	9300      	str	r3, [sp, #0]
 801ad76:	462a      	mov	r2, r5
 801ad78:	4b05      	ldr	r3, [pc, #20]	@ (801ad90 <_vfiprintf_r+0x228>)
 801ad7a:	a904      	add	r1, sp, #16
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	f7fd f893 	bl	8017ea8 <_printf_i>
 801ad82:	e7e4      	b.n	801ad4e <_vfiprintf_r+0x1e6>
 801ad84:	0801e998 	.word	0x0801e998
 801ad88:	0801e9a2 	.word	0x0801e9a2
 801ad8c:	08017979 	.word	0x08017979
 801ad90:	0801ab43 	.word	0x0801ab43
 801ad94:	0801e99e 	.word	0x0801e99e

0801ad98 <__sflush_r>:
 801ad98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada0:	0716      	lsls	r6, r2, #28
 801ada2:	4605      	mov	r5, r0
 801ada4:	460c      	mov	r4, r1
 801ada6:	d454      	bmi.n	801ae52 <__sflush_r+0xba>
 801ada8:	684b      	ldr	r3, [r1, #4]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	dc02      	bgt.n	801adb4 <__sflush_r+0x1c>
 801adae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	dd48      	ble.n	801ae46 <__sflush_r+0xae>
 801adb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801adb6:	2e00      	cmp	r6, #0
 801adb8:	d045      	beq.n	801ae46 <__sflush_r+0xae>
 801adba:	2300      	movs	r3, #0
 801adbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801adc0:	682f      	ldr	r7, [r5, #0]
 801adc2:	6a21      	ldr	r1, [r4, #32]
 801adc4:	602b      	str	r3, [r5, #0]
 801adc6:	d030      	beq.n	801ae2a <__sflush_r+0x92>
 801adc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801adca:	89a3      	ldrh	r3, [r4, #12]
 801adcc:	0759      	lsls	r1, r3, #29
 801adce:	d505      	bpl.n	801addc <__sflush_r+0x44>
 801add0:	6863      	ldr	r3, [r4, #4]
 801add2:	1ad2      	subs	r2, r2, r3
 801add4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801add6:	b10b      	cbz	r3, 801addc <__sflush_r+0x44>
 801add8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801adda:	1ad2      	subs	r2, r2, r3
 801addc:	2300      	movs	r3, #0
 801adde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ade0:	6a21      	ldr	r1, [r4, #32]
 801ade2:	4628      	mov	r0, r5
 801ade4:	47b0      	blx	r6
 801ade6:	1c43      	adds	r3, r0, #1
 801ade8:	89a3      	ldrh	r3, [r4, #12]
 801adea:	d106      	bne.n	801adfa <__sflush_r+0x62>
 801adec:	6829      	ldr	r1, [r5, #0]
 801adee:	291d      	cmp	r1, #29
 801adf0:	d82b      	bhi.n	801ae4a <__sflush_r+0xb2>
 801adf2:	4a2a      	ldr	r2, [pc, #168]	@ (801ae9c <__sflush_r+0x104>)
 801adf4:	410a      	asrs	r2, r1
 801adf6:	07d6      	lsls	r6, r2, #31
 801adf8:	d427      	bmi.n	801ae4a <__sflush_r+0xb2>
 801adfa:	2200      	movs	r2, #0
 801adfc:	6062      	str	r2, [r4, #4]
 801adfe:	04d9      	lsls	r1, r3, #19
 801ae00:	6922      	ldr	r2, [r4, #16]
 801ae02:	6022      	str	r2, [r4, #0]
 801ae04:	d504      	bpl.n	801ae10 <__sflush_r+0x78>
 801ae06:	1c42      	adds	r2, r0, #1
 801ae08:	d101      	bne.n	801ae0e <__sflush_r+0x76>
 801ae0a:	682b      	ldr	r3, [r5, #0]
 801ae0c:	b903      	cbnz	r3, 801ae10 <__sflush_r+0x78>
 801ae0e:	6560      	str	r0, [r4, #84]	@ 0x54
 801ae10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ae12:	602f      	str	r7, [r5, #0]
 801ae14:	b1b9      	cbz	r1, 801ae46 <__sflush_r+0xae>
 801ae16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ae1a:	4299      	cmp	r1, r3
 801ae1c:	d002      	beq.n	801ae24 <__sflush_r+0x8c>
 801ae1e:	4628      	mov	r0, r5
 801ae20:	f7fe fc16 	bl	8019650 <_free_r>
 801ae24:	2300      	movs	r3, #0
 801ae26:	6363      	str	r3, [r4, #52]	@ 0x34
 801ae28:	e00d      	b.n	801ae46 <__sflush_r+0xae>
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	4628      	mov	r0, r5
 801ae2e:	47b0      	blx	r6
 801ae30:	4602      	mov	r2, r0
 801ae32:	1c50      	adds	r0, r2, #1
 801ae34:	d1c9      	bne.n	801adca <__sflush_r+0x32>
 801ae36:	682b      	ldr	r3, [r5, #0]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d0c6      	beq.n	801adca <__sflush_r+0x32>
 801ae3c:	2b1d      	cmp	r3, #29
 801ae3e:	d001      	beq.n	801ae44 <__sflush_r+0xac>
 801ae40:	2b16      	cmp	r3, #22
 801ae42:	d11e      	bne.n	801ae82 <__sflush_r+0xea>
 801ae44:	602f      	str	r7, [r5, #0]
 801ae46:	2000      	movs	r0, #0
 801ae48:	e022      	b.n	801ae90 <__sflush_r+0xf8>
 801ae4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae4e:	b21b      	sxth	r3, r3
 801ae50:	e01b      	b.n	801ae8a <__sflush_r+0xf2>
 801ae52:	690f      	ldr	r7, [r1, #16]
 801ae54:	2f00      	cmp	r7, #0
 801ae56:	d0f6      	beq.n	801ae46 <__sflush_r+0xae>
 801ae58:	0793      	lsls	r3, r2, #30
 801ae5a:	680e      	ldr	r6, [r1, #0]
 801ae5c:	bf08      	it	eq
 801ae5e:	694b      	ldreq	r3, [r1, #20]
 801ae60:	600f      	str	r7, [r1, #0]
 801ae62:	bf18      	it	ne
 801ae64:	2300      	movne	r3, #0
 801ae66:	eba6 0807 	sub.w	r8, r6, r7
 801ae6a:	608b      	str	r3, [r1, #8]
 801ae6c:	f1b8 0f00 	cmp.w	r8, #0
 801ae70:	dde9      	ble.n	801ae46 <__sflush_r+0xae>
 801ae72:	6a21      	ldr	r1, [r4, #32]
 801ae74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ae76:	4643      	mov	r3, r8
 801ae78:	463a      	mov	r2, r7
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	47b0      	blx	r6
 801ae7e:	2800      	cmp	r0, #0
 801ae80:	dc08      	bgt.n	801ae94 <__sflush_r+0xfc>
 801ae82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae8a:	81a3      	strh	r3, [r4, #12]
 801ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae94:	4407      	add	r7, r0
 801ae96:	eba8 0800 	sub.w	r8, r8, r0
 801ae9a:	e7e7      	b.n	801ae6c <__sflush_r+0xd4>
 801ae9c:	dfbffffe 	.word	0xdfbffffe

0801aea0 <_fflush_r>:
 801aea0:	b538      	push	{r3, r4, r5, lr}
 801aea2:	690b      	ldr	r3, [r1, #16]
 801aea4:	4605      	mov	r5, r0
 801aea6:	460c      	mov	r4, r1
 801aea8:	b913      	cbnz	r3, 801aeb0 <_fflush_r+0x10>
 801aeaa:	2500      	movs	r5, #0
 801aeac:	4628      	mov	r0, r5
 801aeae:	bd38      	pop	{r3, r4, r5, pc}
 801aeb0:	b118      	cbz	r0, 801aeba <_fflush_r+0x1a>
 801aeb2:	6a03      	ldr	r3, [r0, #32]
 801aeb4:	b90b      	cbnz	r3, 801aeba <_fflush_r+0x1a>
 801aeb6:	f7fd f9a3 	bl	8018200 <__sinit>
 801aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d0f3      	beq.n	801aeaa <_fflush_r+0xa>
 801aec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801aec4:	07d0      	lsls	r0, r2, #31
 801aec6:	d404      	bmi.n	801aed2 <_fflush_r+0x32>
 801aec8:	0599      	lsls	r1, r3, #22
 801aeca:	d402      	bmi.n	801aed2 <_fflush_r+0x32>
 801aecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aece:	f7fd fd36 	bl	801893e <__retarget_lock_acquire_recursive>
 801aed2:	4628      	mov	r0, r5
 801aed4:	4621      	mov	r1, r4
 801aed6:	f7ff ff5f 	bl	801ad98 <__sflush_r>
 801aeda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aedc:	07da      	lsls	r2, r3, #31
 801aede:	4605      	mov	r5, r0
 801aee0:	d4e4      	bmi.n	801aeac <_fflush_r+0xc>
 801aee2:	89a3      	ldrh	r3, [r4, #12]
 801aee4:	059b      	lsls	r3, r3, #22
 801aee6:	d4e1      	bmi.n	801aeac <_fflush_r+0xc>
 801aee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aeea:	f7fd fd29 	bl	8018940 <__retarget_lock_release_recursive>
 801aeee:	e7dd      	b.n	801aeac <_fflush_r+0xc>

0801aef0 <fiprintf>:
 801aef0:	b40e      	push	{r1, r2, r3}
 801aef2:	b503      	push	{r0, r1, lr}
 801aef4:	4601      	mov	r1, r0
 801aef6:	ab03      	add	r3, sp, #12
 801aef8:	4805      	ldr	r0, [pc, #20]	@ (801af10 <fiprintf+0x20>)
 801aefa:	f853 2b04 	ldr.w	r2, [r3], #4
 801aefe:	6800      	ldr	r0, [r0, #0]
 801af00:	9301      	str	r3, [sp, #4]
 801af02:	f7ff fe31 	bl	801ab68 <_vfiprintf_r>
 801af06:	b002      	add	sp, #8
 801af08:	f85d eb04 	ldr.w	lr, [sp], #4
 801af0c:	b003      	add	sp, #12
 801af0e:	4770      	bx	lr
 801af10:	200001a8 	.word	0x200001a8

0801af14 <__swhatbuf_r>:
 801af14:	b570      	push	{r4, r5, r6, lr}
 801af16:	460c      	mov	r4, r1
 801af18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af1c:	2900      	cmp	r1, #0
 801af1e:	b096      	sub	sp, #88	@ 0x58
 801af20:	4615      	mov	r5, r2
 801af22:	461e      	mov	r6, r3
 801af24:	da0d      	bge.n	801af42 <__swhatbuf_r+0x2e>
 801af26:	89a3      	ldrh	r3, [r4, #12]
 801af28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801af2c:	f04f 0100 	mov.w	r1, #0
 801af30:	bf14      	ite	ne
 801af32:	2340      	movne	r3, #64	@ 0x40
 801af34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801af38:	2000      	movs	r0, #0
 801af3a:	6031      	str	r1, [r6, #0]
 801af3c:	602b      	str	r3, [r5, #0]
 801af3e:	b016      	add	sp, #88	@ 0x58
 801af40:	bd70      	pop	{r4, r5, r6, pc}
 801af42:	466a      	mov	r2, sp
 801af44:	f000 f87c 	bl	801b040 <_fstat_r>
 801af48:	2800      	cmp	r0, #0
 801af4a:	dbec      	blt.n	801af26 <__swhatbuf_r+0x12>
 801af4c:	9901      	ldr	r1, [sp, #4]
 801af4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801af52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801af56:	4259      	negs	r1, r3
 801af58:	4159      	adcs	r1, r3
 801af5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801af5e:	e7eb      	b.n	801af38 <__swhatbuf_r+0x24>

0801af60 <__smakebuf_r>:
 801af60:	898b      	ldrh	r3, [r1, #12]
 801af62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af64:	079d      	lsls	r5, r3, #30
 801af66:	4606      	mov	r6, r0
 801af68:	460c      	mov	r4, r1
 801af6a:	d507      	bpl.n	801af7c <__smakebuf_r+0x1c>
 801af6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801af70:	6023      	str	r3, [r4, #0]
 801af72:	6123      	str	r3, [r4, #16]
 801af74:	2301      	movs	r3, #1
 801af76:	6163      	str	r3, [r4, #20]
 801af78:	b003      	add	sp, #12
 801af7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af7c:	ab01      	add	r3, sp, #4
 801af7e:	466a      	mov	r2, sp
 801af80:	f7ff ffc8 	bl	801af14 <__swhatbuf_r>
 801af84:	9f00      	ldr	r7, [sp, #0]
 801af86:	4605      	mov	r5, r0
 801af88:	4639      	mov	r1, r7
 801af8a:	4630      	mov	r0, r6
 801af8c:	f7fe ff0e 	bl	8019dac <_malloc_r>
 801af90:	b948      	cbnz	r0, 801afa6 <__smakebuf_r+0x46>
 801af92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af96:	059a      	lsls	r2, r3, #22
 801af98:	d4ee      	bmi.n	801af78 <__smakebuf_r+0x18>
 801af9a:	f023 0303 	bic.w	r3, r3, #3
 801af9e:	f043 0302 	orr.w	r3, r3, #2
 801afa2:	81a3      	strh	r3, [r4, #12]
 801afa4:	e7e2      	b.n	801af6c <__smakebuf_r+0xc>
 801afa6:	89a3      	ldrh	r3, [r4, #12]
 801afa8:	6020      	str	r0, [r4, #0]
 801afaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801afae:	81a3      	strh	r3, [r4, #12]
 801afb0:	9b01      	ldr	r3, [sp, #4]
 801afb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801afb6:	b15b      	cbz	r3, 801afd0 <__smakebuf_r+0x70>
 801afb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801afbc:	4630      	mov	r0, r6
 801afbe:	f000 f851 	bl	801b064 <_isatty_r>
 801afc2:	b128      	cbz	r0, 801afd0 <__smakebuf_r+0x70>
 801afc4:	89a3      	ldrh	r3, [r4, #12]
 801afc6:	f023 0303 	bic.w	r3, r3, #3
 801afca:	f043 0301 	orr.w	r3, r3, #1
 801afce:	81a3      	strh	r3, [r4, #12]
 801afd0:	89a3      	ldrh	r3, [r4, #12]
 801afd2:	431d      	orrs	r5, r3
 801afd4:	81a5      	strh	r5, [r4, #12]
 801afd6:	e7cf      	b.n	801af78 <__smakebuf_r+0x18>

0801afd8 <_putc_r>:
 801afd8:	b570      	push	{r4, r5, r6, lr}
 801afda:	460d      	mov	r5, r1
 801afdc:	4614      	mov	r4, r2
 801afde:	4606      	mov	r6, r0
 801afe0:	b118      	cbz	r0, 801afea <_putc_r+0x12>
 801afe2:	6a03      	ldr	r3, [r0, #32]
 801afe4:	b90b      	cbnz	r3, 801afea <_putc_r+0x12>
 801afe6:	f7fd f90b 	bl	8018200 <__sinit>
 801afea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801afec:	07d8      	lsls	r0, r3, #31
 801afee:	d405      	bmi.n	801affc <_putc_r+0x24>
 801aff0:	89a3      	ldrh	r3, [r4, #12]
 801aff2:	0599      	lsls	r1, r3, #22
 801aff4:	d402      	bmi.n	801affc <_putc_r+0x24>
 801aff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aff8:	f7fd fca1 	bl	801893e <__retarget_lock_acquire_recursive>
 801affc:	68a3      	ldr	r3, [r4, #8]
 801affe:	3b01      	subs	r3, #1
 801b000:	2b00      	cmp	r3, #0
 801b002:	60a3      	str	r3, [r4, #8]
 801b004:	da05      	bge.n	801b012 <_putc_r+0x3a>
 801b006:	69a2      	ldr	r2, [r4, #24]
 801b008:	4293      	cmp	r3, r2
 801b00a:	db12      	blt.n	801b032 <_putc_r+0x5a>
 801b00c:	b2eb      	uxtb	r3, r5
 801b00e:	2b0a      	cmp	r3, #10
 801b010:	d00f      	beq.n	801b032 <_putc_r+0x5a>
 801b012:	6823      	ldr	r3, [r4, #0]
 801b014:	1c5a      	adds	r2, r3, #1
 801b016:	6022      	str	r2, [r4, #0]
 801b018:	701d      	strb	r5, [r3, #0]
 801b01a:	b2ed      	uxtb	r5, r5
 801b01c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b01e:	07da      	lsls	r2, r3, #31
 801b020:	d405      	bmi.n	801b02e <_putc_r+0x56>
 801b022:	89a3      	ldrh	r3, [r4, #12]
 801b024:	059b      	lsls	r3, r3, #22
 801b026:	d402      	bmi.n	801b02e <_putc_r+0x56>
 801b028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b02a:	f7fd fc89 	bl	8018940 <__retarget_lock_release_recursive>
 801b02e:	4628      	mov	r0, r5
 801b030:	bd70      	pop	{r4, r5, r6, pc}
 801b032:	4629      	mov	r1, r5
 801b034:	4622      	mov	r2, r4
 801b036:	4630      	mov	r0, r6
 801b038:	f7fd fac3 	bl	80185c2 <__swbuf_r>
 801b03c:	4605      	mov	r5, r0
 801b03e:	e7ed      	b.n	801b01c <_putc_r+0x44>

0801b040 <_fstat_r>:
 801b040:	b538      	push	{r3, r4, r5, lr}
 801b042:	4d07      	ldr	r5, [pc, #28]	@ (801b060 <_fstat_r+0x20>)
 801b044:	2300      	movs	r3, #0
 801b046:	4604      	mov	r4, r0
 801b048:	4608      	mov	r0, r1
 801b04a:	4611      	mov	r1, r2
 801b04c:	602b      	str	r3, [r5, #0]
 801b04e:	f7e6 fd3f 	bl	8001ad0 <_fstat>
 801b052:	1c43      	adds	r3, r0, #1
 801b054:	d102      	bne.n	801b05c <_fstat_r+0x1c>
 801b056:	682b      	ldr	r3, [r5, #0]
 801b058:	b103      	cbz	r3, 801b05c <_fstat_r+0x1c>
 801b05a:	6023      	str	r3, [r4, #0]
 801b05c:	bd38      	pop	{r3, r4, r5, pc}
 801b05e:	bf00      	nop
 801b060:	20008c80 	.word	0x20008c80

0801b064 <_isatty_r>:
 801b064:	b538      	push	{r3, r4, r5, lr}
 801b066:	4d06      	ldr	r5, [pc, #24]	@ (801b080 <_isatty_r+0x1c>)
 801b068:	2300      	movs	r3, #0
 801b06a:	4604      	mov	r4, r0
 801b06c:	4608      	mov	r0, r1
 801b06e:	602b      	str	r3, [r5, #0]
 801b070:	f7e6 fd3e 	bl	8001af0 <_isatty>
 801b074:	1c43      	adds	r3, r0, #1
 801b076:	d102      	bne.n	801b07e <_isatty_r+0x1a>
 801b078:	682b      	ldr	r3, [r5, #0]
 801b07a:	b103      	cbz	r3, 801b07e <_isatty_r+0x1a>
 801b07c:	6023      	str	r3, [r4, #0]
 801b07e:	bd38      	pop	{r3, r4, r5, pc}
 801b080:	20008c80 	.word	0x20008c80

0801b084 <_sbrk_r>:
 801b084:	b538      	push	{r3, r4, r5, lr}
 801b086:	4d06      	ldr	r5, [pc, #24]	@ (801b0a0 <_sbrk_r+0x1c>)
 801b088:	2300      	movs	r3, #0
 801b08a:	4604      	mov	r4, r0
 801b08c:	4608      	mov	r0, r1
 801b08e:	602b      	str	r3, [r5, #0]
 801b090:	f7e6 fd46 	bl	8001b20 <_sbrk>
 801b094:	1c43      	adds	r3, r0, #1
 801b096:	d102      	bne.n	801b09e <_sbrk_r+0x1a>
 801b098:	682b      	ldr	r3, [r5, #0]
 801b09a:	b103      	cbz	r3, 801b09e <_sbrk_r+0x1a>
 801b09c:	6023      	str	r3, [r4, #0]
 801b09e:	bd38      	pop	{r3, r4, r5, pc}
 801b0a0:	20008c80 	.word	0x20008c80

0801b0a4 <abort>:
 801b0a4:	b508      	push	{r3, lr}
 801b0a6:	2006      	movs	r0, #6
 801b0a8:	f000 f86e 	bl	801b188 <raise>
 801b0ac:	2001      	movs	r0, #1
 801b0ae:	f7e6 fcdb 	bl	8001a68 <_exit>

0801b0b2 <_calloc_r>:
 801b0b2:	b570      	push	{r4, r5, r6, lr}
 801b0b4:	fba1 5402 	umull	r5, r4, r1, r2
 801b0b8:	b93c      	cbnz	r4, 801b0ca <_calloc_r+0x18>
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	f7fe fe76 	bl	8019dac <_malloc_r>
 801b0c0:	4606      	mov	r6, r0
 801b0c2:	b928      	cbnz	r0, 801b0d0 <_calloc_r+0x1e>
 801b0c4:	2600      	movs	r6, #0
 801b0c6:	4630      	mov	r0, r6
 801b0c8:	bd70      	pop	{r4, r5, r6, pc}
 801b0ca:	220c      	movs	r2, #12
 801b0cc:	6002      	str	r2, [r0, #0]
 801b0ce:	e7f9      	b.n	801b0c4 <_calloc_r+0x12>
 801b0d0:	462a      	mov	r2, r5
 801b0d2:	4621      	mov	r1, r4
 801b0d4:	f7fd fb34 	bl	8018740 <memset>
 801b0d8:	e7f5      	b.n	801b0c6 <_calloc_r+0x14>

0801b0da <_realloc_r>:
 801b0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0de:	4680      	mov	r8, r0
 801b0e0:	4615      	mov	r5, r2
 801b0e2:	460c      	mov	r4, r1
 801b0e4:	b921      	cbnz	r1, 801b0f0 <_realloc_r+0x16>
 801b0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0ea:	4611      	mov	r1, r2
 801b0ec:	f7fe be5e 	b.w	8019dac <_malloc_r>
 801b0f0:	b92a      	cbnz	r2, 801b0fe <_realloc_r+0x24>
 801b0f2:	f7fe faad 	bl	8019650 <_free_r>
 801b0f6:	2400      	movs	r4, #0
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0fe:	f000 f85f 	bl	801b1c0 <_malloc_usable_size_r>
 801b102:	4285      	cmp	r5, r0
 801b104:	4606      	mov	r6, r0
 801b106:	d802      	bhi.n	801b10e <_realloc_r+0x34>
 801b108:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b10c:	d8f4      	bhi.n	801b0f8 <_realloc_r+0x1e>
 801b10e:	4629      	mov	r1, r5
 801b110:	4640      	mov	r0, r8
 801b112:	f7fe fe4b 	bl	8019dac <_malloc_r>
 801b116:	4607      	mov	r7, r0
 801b118:	2800      	cmp	r0, #0
 801b11a:	d0ec      	beq.n	801b0f6 <_realloc_r+0x1c>
 801b11c:	42b5      	cmp	r5, r6
 801b11e:	462a      	mov	r2, r5
 801b120:	4621      	mov	r1, r4
 801b122:	bf28      	it	cs
 801b124:	4632      	movcs	r2, r6
 801b126:	f7fd fc0c 	bl	8018942 <memcpy>
 801b12a:	4621      	mov	r1, r4
 801b12c:	4640      	mov	r0, r8
 801b12e:	f7fe fa8f 	bl	8019650 <_free_r>
 801b132:	463c      	mov	r4, r7
 801b134:	e7e0      	b.n	801b0f8 <_realloc_r+0x1e>

0801b136 <_raise_r>:
 801b136:	291f      	cmp	r1, #31
 801b138:	b538      	push	{r3, r4, r5, lr}
 801b13a:	4605      	mov	r5, r0
 801b13c:	460c      	mov	r4, r1
 801b13e:	d904      	bls.n	801b14a <_raise_r+0x14>
 801b140:	2316      	movs	r3, #22
 801b142:	6003      	str	r3, [r0, #0]
 801b144:	f04f 30ff 	mov.w	r0, #4294967295
 801b148:	bd38      	pop	{r3, r4, r5, pc}
 801b14a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b14c:	b112      	cbz	r2, 801b154 <_raise_r+0x1e>
 801b14e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b152:	b94b      	cbnz	r3, 801b168 <_raise_r+0x32>
 801b154:	4628      	mov	r0, r5
 801b156:	f000 f831 	bl	801b1bc <_getpid_r>
 801b15a:	4622      	mov	r2, r4
 801b15c:	4601      	mov	r1, r0
 801b15e:	4628      	mov	r0, r5
 801b160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b164:	f000 b818 	b.w	801b198 <_kill_r>
 801b168:	2b01      	cmp	r3, #1
 801b16a:	d00a      	beq.n	801b182 <_raise_r+0x4c>
 801b16c:	1c59      	adds	r1, r3, #1
 801b16e:	d103      	bne.n	801b178 <_raise_r+0x42>
 801b170:	2316      	movs	r3, #22
 801b172:	6003      	str	r3, [r0, #0]
 801b174:	2001      	movs	r0, #1
 801b176:	e7e7      	b.n	801b148 <_raise_r+0x12>
 801b178:	2100      	movs	r1, #0
 801b17a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b17e:	4620      	mov	r0, r4
 801b180:	4798      	blx	r3
 801b182:	2000      	movs	r0, #0
 801b184:	e7e0      	b.n	801b148 <_raise_r+0x12>
	...

0801b188 <raise>:
 801b188:	4b02      	ldr	r3, [pc, #8]	@ (801b194 <raise+0xc>)
 801b18a:	4601      	mov	r1, r0
 801b18c:	6818      	ldr	r0, [r3, #0]
 801b18e:	f7ff bfd2 	b.w	801b136 <_raise_r>
 801b192:	bf00      	nop
 801b194:	200001a8 	.word	0x200001a8

0801b198 <_kill_r>:
 801b198:	b538      	push	{r3, r4, r5, lr}
 801b19a:	4d07      	ldr	r5, [pc, #28]	@ (801b1b8 <_kill_r+0x20>)
 801b19c:	2300      	movs	r3, #0
 801b19e:	4604      	mov	r4, r0
 801b1a0:	4608      	mov	r0, r1
 801b1a2:	4611      	mov	r1, r2
 801b1a4:	602b      	str	r3, [r5, #0]
 801b1a6:	f7e6 fc4d 	bl	8001a44 <_kill>
 801b1aa:	1c43      	adds	r3, r0, #1
 801b1ac:	d102      	bne.n	801b1b4 <_kill_r+0x1c>
 801b1ae:	682b      	ldr	r3, [r5, #0]
 801b1b0:	b103      	cbz	r3, 801b1b4 <_kill_r+0x1c>
 801b1b2:	6023      	str	r3, [r4, #0]
 801b1b4:	bd38      	pop	{r3, r4, r5, pc}
 801b1b6:	bf00      	nop
 801b1b8:	20008c80 	.word	0x20008c80

0801b1bc <_getpid_r>:
 801b1bc:	f7e6 bc3a 	b.w	8001a34 <_getpid>

0801b1c0 <_malloc_usable_size_r>:
 801b1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1c4:	1f18      	subs	r0, r3, #4
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	bfbc      	itt	lt
 801b1ca:	580b      	ldrlt	r3, [r1, r0]
 801b1cc:	18c0      	addlt	r0, r0, r3
 801b1ce:	4770      	bx	lr

0801b1d0 <_init>:
 801b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1d2:	bf00      	nop
 801b1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1d6:	bc08      	pop	{r3}
 801b1d8:	469e      	mov	lr, r3
 801b1da:	4770      	bx	lr

0801b1dc <_fini>:
 801b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1de:	bf00      	nop
 801b1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1e2:	bc08      	pop	{r3}
 801b1e4:	469e      	mov	lr, r3
 801b1e6:	4770      	bx	lr
